
First it was like so for one weaponset:
# define WEP_MAXCOUNT 24
// default storage
.float _WS_weapons;
# define WEPSET_BIT(a)                  power2of((a) - WEP_FIRST)
# define WEPSET_DECLARE_A(a)            float _WS_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS_weapons = 0)
# define WEPSET_CLEAR_A(a)              (_WS_##a = 0)
# define WEPSET_EMPTY_E(e)              ((e)._WS_weapons == 0)
# define WEPSET_EMPTY_A(a)              (_WS_##a == 0)
# define WEPSET_COPY_AS(a)              (_WS_##a = getstati(STAT_WEAPONS))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS_weapons)
# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS_##a)
# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT(a))
# define WEPSET_READ_E(a)               (a)._WS_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS_##a) = ReadInt24_t()
# define WEPSET_OP1_EE(a,b,mergeop,x)   ((a)._WS_weapons x (b)._WS_weapons)
# define WEPSET_OP2_EE(a,b,mergeop,x,y) ((a)._WS_weapons x (b)._WS_weapons y (a)._WS_weapons)
# define WEPSET_OP1_EA(a,b,mergeop,x)   ((a)._WS_weapons x _WS_##b)
# define WEPSET_OP2_EA(a,b,mergeop,x,y) ((a)._WS_weapons x _WS_##b y (a)._WS_weapons)
# define WEPSET_OP1_EW(a,b,mergeop,x)   ((a)._WS_weapons x WEPSET_BIT(b))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) ((a)._WS_weapons x WEPSET_BIT(b) y (a)._WS_weapons)
# define WEPSET_OP1_AE(a,b,mergeop,x)   (_WS_##a x (b)._WS_weapons)
# define WEPSET_OP2_AE(a,b,mergeop,x,y) (_WS_##a x (b)._WS_weapons y _WS_##a)
# define WEPSET_OP1_AA(a,b,mergeop,x)   (_WS_##a x _WS_##b)
# define WEPSET_OP2_AA(a,b,mergeop,x,y) (_WS_##a x _WS_##b y _WS_##a)
# define WEPSET_OP1_AW(a,b,mergeop,x)   (_WS_##a x WEPSET_BIT(b))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) (_WS_##a x WEPSET_BIT(b) y _WS_##a)


And then for a second weaponset the code was changed to this:
# define WEP_MAXCOUNT 48
# define WEP_FIRST2 25
.float _WS1_weapons;
.float _WS2_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = 0)
# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0)
# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons)
# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a)
# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a))
# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t()
# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons))
# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons))
# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons))
# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a))
# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a))
# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a))


And now a third, here's the new code (each time we can add 24 new weapons):
# define WEP_MAXCOUNT 72
# define WEP_FIRST2 25
# define WEP_FIRST3 49
.float _WS1_weapons;
.float _WS2_weapons;
.float _WS3_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2 && (a) < WEP_FIRST3) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_BIT3(a)                 (((a) >= WEP_FIRST3) ? power2of((a) - WEP_FIRST3) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a, _WS3_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = (e)._WS3_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = (_WS3_##a) = 0)
# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0 && (e)._WS3_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0 && (_WS3_##a) == 0)
# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2), (_WS3_##a) = getstati(STAT_WEAPONS3))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons); addstat(STAT_WEAPONS3, AS_INT, _WS3_weapons)
# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons); WriteInt24_t(dest, (a)._WS3_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a); WriteInt24_t(dest, _WS3_##a)
# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a)); WriteInt24_t(dest, WEPSET_BIT3(a))
# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t(); (a)._WS3_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t(); (_WS3_##a) = ReadInt24_t()

# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons))

# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b) mergeop ((a)._WS3_weapons x _WS3_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x _WS3_##b y (a)._WS3_weapons))

# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b) y (a)._WS3_weapons))

# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons) mergeop (_WS3_##a x (b)._WS3_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a) mergeop (_WS3_##a x (b)._WS3_weapons y _WS3_##a))

# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b) mergeop (_WS3_##a x _WS3_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a) mergeop (_WS3_##a x _WS3_##b y _WS3_##a))

# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)) mergeop (_WS3_##a x WEPSET_BIT3(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a) mergeop (_WS3_##a x WEPSET_BIT3(b) y _WS3_##a))
#endif


See the pattern.
Also constants.qh gets another STAT_WEAPON*
< const float STAT_WEAPONS3 = 84;

.......
Which then became this, for a 4th weaponset for more weapons:


#else
# define WEP_MAXCOUNT 96
# define WEP_FIRST2 25
# define WEP_FIRST3 49
# define WEP_FIRST4 73
.float _WS1_weapons;
.float _WS2_weapons;
.float _WS3_weapons;
.float _WS4_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2 && (a) < WEP_FIRST3) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_BIT3(a)                 (((a) >= WEP_FIRST3 && (a) < WEP_FIRST4) ? power2of((a) - WEP_FIRST3) : 0)
# define WEPSET_BIT4(a)                 (((a) >= WEP_FIRST4) ? power2of((a) - WEP_FIRST4) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a, _WS3_##a, _WS4_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = (e)._WS3_weapons = (e)._WS4_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = (_WS3_##a) = (_WS4_##a) = 0)
# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0 && (e)._WS3_weapons == 0 && (e)._WS4_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0 && (_WS3_##a) == 0 && (_WS4_##a) == 0)
# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2), (_WS3_##a) = getstati(STAT_WEAPONS3), (_WS4_##a) = getstati(STAT_WEAPONS4))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons); addstat(STAT_WEAPONS3, AS_INT, _WS3_weapons); addstat(STAT_WEAPONS4, AS_INT, _WS4_weapons)
# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons); WriteInt24_t(dest, (a)._WS3_weapons); WriteInt24_t(dest, (a)._WS4_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a); WriteInt24_t(dest, _WS3_##a); WriteInt24_t(dest, _WS4_##a)
# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a)); WriteInt24_t(dest, WEPSET_BIT3(a)); WriteInt24_t(dest, WEPSET_BIT4(a))
# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t(); (a)._WS3_weapons = ReadInt24_t(); (a)._WS4_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t(); (_WS3_##a) = ReadInt24_t(); (_WS4_##a) = ReadInt24_t()

# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons y (a)._WS4_weapons))

# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b) mergeop ((a)._WS3_weapons x _WS3_##b) mergeop ((a)._WS4_weapons x _WS4_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x _WS3_##b y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x _WS4_##b y (a)._WS4_weapons))

# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b)) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b) y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b) y (a)._WS4_weapons))

# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons) mergeop (_WS3_##a x (b)._WS3_weapons) mergeop (_WS4_##a x (b)._WS4_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a) mergeop (_WS3_##a x (b)._WS3_weapons y _WS3_##a) mergeop (_WS4_##a x (b)._WS4_weapons y _WS4_##a))

# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b) mergeop (_WS3_##a x _WS3_##b) mergeop (_WS4_##a x _WS4_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a) mergeop (_WS3_##a x _WS3_##b y _WS3_##a) mergeop (_WS4_##a x _WS4_##b y _WS4_##a))

# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)) mergeop (_WS3_##a x WEPSET_BIT3(b)) mergeop (_WS4_##a x WEPSET_BIT4(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a) mergeop (_WS3_##a x WEPSET_BIT3(b) y _WS3_##a) mergeop (_WS4_##a x WEPSET_BIT4(b) y _WS4_##a))
#endif

See the pattern.
Also constants.qh gets another STAT_WEAPON* so it can send it on the wire
< const float STAT_WEAPONS4 = 86;


.......
Which then became this, for a 5th weaponset for more weapons:


#else
# define WEP_MAXCOUNT 120
# define WEP_FIRST2 25
# define WEP_FIRST3 49
# define WEP_FIRST4 73
# define WEP_FIRST5 97
.float _WS1_weapons;
.float _WS2_weapons;
.float _WS3_weapons;
.float _WS4_weapons;
.float _WS5_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2 && (a) < WEP_FIRST3) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_BIT3(a)                 (((a) >= WEP_FIRST3 && (a) < WEP_FIRST4) ? power2of((a) - WEP_FIRST3) : 0)
# define WEPSET_BIT4(a)                 (((a) >= WEP_FIRST4 && (a) < WEP_FIRST5) ? power2of((a) - WEP_FIRST4) : 0)
# define WEPSET_BIT5(a)                 (((a) >= WEP_FIRST5) ? power2of((a) - WEP_FIRST5) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a, _WS3_##a, _WS4_##a, _WS5_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = (e)._WS3_weapons = (e)._WS4_weapons = (e)._WS5_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = (_WS3_##a) = (_WS4_##a) = (_WS5_##a) = 0)

# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0 && (e)._WS3_weapons == 0 && (e)._WS4_weapons == 0 && (e)._WS5_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0 && (_WS3_##a) == 0 && (_WS4_##a) == 0 && (_WS5_##a) == 0)

# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2), (_WS3_##a) = getstati(STAT_WEAPONS3), (_WS4_##a) = getstati(STAT_WEAPONS4), (_WS5_##a) = getstati(STAT_WEAPONS5))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons); addstat(STAT_WEAPONS3, AS_INT, _WS3_weapons); addstat(STAT_WEAPONS4, AS_INT, _WS4_weapons); addstat(STAT_WEAPONS5, AS_INT, _WS5_weapons)

# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons); WriteInt24_t(dest, (a)._WS3_weapons); WriteInt24_t(dest, (a)._WS4_weapons); WriteInt24_t(dest, (a)._WS5_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a); WriteInt24_t(dest, _WS3_##a); WriteInt24_t(dest, _WS4_##a); WriteInt24_t(dest, _WS5_##a)

# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a)); WriteInt24_t(dest, WEPSET_BIT3(a)); WriteInt24_t(dest, WEPSET_BIT4(a)); WriteInt24_t(dest, WEPSET_BIT5(a))

# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t(); (a)._WS3_weapons = ReadInt24_t(); (a)._WS4_weapons = ReadInt24_t(); (a)._WS5_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t(); (_WS3_##a) = ReadInt24_t(); (_WS4_##a) = ReadInt24_t(); (_WS5_##a) = ReadInt24_t()

# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons y (a)._WS5_weapons))

# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b) mergeop ((a)._WS3_weapons x _WS3_##b) mergeop ((a)._WS4_weapons x _WS4_##b) mergeop ((a)._WS5_weapons x _WS5_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x _WS3_##b y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x _WS4_##b y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x _WS5_##b y (a)._WS5_weapons))

# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b)) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b)) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b) y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b) y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b) y (a)._WS5_weapons))

# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons) mergeop (_WS3_##a x (b)._WS3_weapons) mergeop (_WS4_##a x (b)._WS4_weapons) mergeop (_WS5_##a x (b)._WS5_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a) mergeop (_WS3_##a x (b)._WS3_weapons y _WS3_##a) mergeop (_WS4_##a x (b)._WS4_weapons y _WS4_##a) mergeop (_WS5_##a x (b)._WS5_weapons y _WS5_##a))

# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b) mergeop (_WS3_##a x _WS3_##b) mergeop (_WS4_##a x _WS4_##b) mergeop (_WS5_##a x _WS5_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a) mergeop (_WS3_##a x _WS3_##b y _WS3_##a) mergeop (_WS4_##a x _WS4_##b y _WS4_##a) mergeop (_WS5_##a x _WS5_##b y _WS5_##a))

# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)) mergeop (_WS3_##a x WEPSET_BIT3(b)) mergeop (_WS4_##a x WEPSET_BIT4(b)) mergeop (_WS5_##a x WEPSET_BIT5(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a) mergeop (_WS3_##a x WEPSET_BIT3(b) y _WS3_##a) mergeop (_WS4_##a x WEPSET_BIT4(b) y _WS4_##a) mergeop (_WS5_##a x WEPSET_BIT5(b) y _WS5_##a))
#endif


See the pattern.
Also constants.qh gets another STAT_WEAPON* so it can send it on the wire
< const float STAT_WEAPONS5 = 87;




.......
Which then became:

#else
# define WEP_MAXCOUNT 144
# define WEP_FIRST2 25
# define WEP_FIRST3 49
# define WEP_FIRST4 73
# define WEP_FIRST5 97
# define WEP_FIRST6 121
.float _WS1_weapons;
.float _WS2_weapons;
.float _WS3_weapons;
.float _WS4_weapons;
.float _WS5_weapons;
.float _WS6_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2 && (a) < WEP_FIRST3) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_BIT3(a)                 (((a) >= WEP_FIRST3 && (a) < WEP_FIRST4) ? power2of((a) - WEP_FIRST3) : 0)
# define WEPSET_BIT4(a)                 (((a) >= WEP_FIRST4 && (a) < WEP_FIRST5) ? power2of((a) - WEP_FIRST4) : 0)
# define WEPSET_BIT5(a)                 (((a) >= WEP_FIRST5 && (a) < WEP_FIRST6) ? power2of((a) - WEP_FIRST5) : 0)
# define WEPSET_BIT6(a)                 (((a) >= WEP_FIRST6) ? power2of((a) - WEP_FIRST6) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a, _WS3_##a, _WS4_##a, _WS5_##a, _WS6_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = (e)._WS3_weapons = (e)._WS4_weapons = (e)._WS5_weapons = (e)._WS6_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = (_WS3_##a) = (_WS4_##a) = (_WS5_##a) = (_WS6_##a) = 0)

# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0 && (e)._WS3_weapons == 0 && (e)._WS4_weapons == 0 && (e)._WS5_weapons == 0 && (e)._WS6_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0 && (_WS3_##a) == 0 && (_WS4_##a) == 0 && (_WS5_##a) == 0 && (_WS6_##a) == 0)

# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2), (_WS3_##a) = getstati(STAT_WEAPONS3), (_WS4_##a) = getstati(STAT_WEAPONS4), (_WS5_##a) = getstati(STAT_WEAPONS5), (_WS6_##a) = getstati(STAT_WEAPONS6))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons); addstat(STAT_WEAPONS3, AS_INT, _WS3_weapons); addstat(STAT_WEAPONS4, AS_INT, _WS4_weapons); addstat(STAT_WEAPONS5, AS_INT, _WS5_weapons); addstat(STAT_WEAPONS6, AS_INT, _WS6_weapons)

# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons); WriteInt24_t(dest, (a)._WS3_weapons); WriteInt24_t(dest, (a)._WS4_weapons); WriteInt24_t(dest, (a)._WS5_weapons); WriteInt24_t(dest, (a)._WS6_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a); WriteInt24_t(dest, _WS3_##a); WriteInt24_t(dest, _WS4_##a); WriteInt24_t(dest, _WS5_##a); WriteInt24_t(dest, _WS6_##a)

# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a)); WriteInt24_t(dest, WEPSET_BIT3(a)); WriteInt24_t(dest, WEPSET_BIT4(a)); WriteInt24_t(dest, WEPSET_BIT5(a)); WriteInt24_t(dest, WEPSET_BIT6(a))

# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t(); (a)._WS3_weapons = ReadInt24_t(); (a)._WS4_weapons = ReadInt24_t(); (a)._WS5_weapons = ReadInt24_t(); (a)._WS6_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t(); (_WS3_##a) = ReadInt24_t(); (_WS4_##a) = ReadInt24_t(); (_WS5_##a) = ReadInt24_t(); (_WS6_##a) = ReadInt24_t()

# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons y (a)._WS6_weapons))

# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b) mergeop ((a)._WS3_weapons x _WS3_##b) mergeop ((a)._WS4_weapons x _WS4_##b) mergeop ((a)._WS5_weapons x _WS5_##b) mergeop ((a)._WS6_weapons x _WS6_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x _WS3_##b y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x _WS4_##b y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x _WS5_##b y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x _WS6_##b y (a)._WS6_weapons))

# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b)) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b)) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b)) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b) y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b) y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b) y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b) y (a)._WS6_weapons))

# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons) mergeop (_WS3_##a x (b)._WS3_weapons) mergeop (_WS4_##a x (b)._WS4_weapons) mergeop (_WS5_##a x (b)._WS5_weapons) mergeop (_WS6_##a x (b)._WS6_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a) mergeop (_WS3_##a x (b)._WS3_weapons y _WS3_##a) mergeop (_WS4_##a x (b)._WS4_weapons y _WS4_##a) mergeop (_WS5_##a x (b)._WS5_weapons y _WS5_##a) mergeop (_WS6_##a x (b)._WS6_weapons y _WS6_##a))

# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b) mergeop (_WS3_##a x _WS3_##b) mergeop (_WS4_##a x _WS4_##b) mergeop (_WS5_##a x _WS5_##b) mergeop (_WS6_##a x _WS6_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a) mergeop (_WS3_##a x _WS3_##b y _WS3_##a) mergeop (_WS4_##a x _WS4_##b y _WS4_##a) mergeop (_WS5_##a x _WS5_##b y _WS5_##a) mergeop (_WS6_##a x _WS6_##b y _WS6_##a))

# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)) mergeop (_WS3_##a x WEPSET_BIT3(b)) mergeop (_WS4_##a x WEPSET_BIT4(b)) mergeop (_WS5_##a x WEPSET_BIT5(b)) mergeop (_WS6_##a x WEPSET_BIT6(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a) mergeop (_WS3_##a x WEPSET_BIT3(b) y _WS3_##a) mergeop (_WS4_##a x WEPSET_BIT4(b) y _WS4_##a) mergeop (_WS5_##a x WEPSET_BIT5(b) y _WS5_##a) mergeop (_WS6_##a x WEPSET_BIT6(b) y _WS6_##a))
#endif

See the pattern.
Also constants.qh gets another STAT_WEAPON* so it can send it on the wire
< const float STAT_WEAPONS6 = 88;



.......
Which then became (adding a 7th set of 24 weapons):

#else
# define WEP_MAXCOUNT 168
# define WEP_FIRST2 25
# define WEP_FIRST3 49
# define WEP_FIRST4 73
# define WEP_FIRST5 97
# define WEP_FIRST6 121
# define WEP_FIRST7 145
.float _WS1_weapons;
.float _WS2_weapons;
.float _WS3_weapons;
.float _WS4_weapons;
.float _WS5_weapons;
.float _WS6_weapons;
.float _WS7_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2 && (a) < WEP_FIRST3) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_BIT3(a)                 (((a) >= WEP_FIRST3 && (a) < WEP_FIRST4) ? power2of((a) - WEP_FIRST3) : 0)
# define WEPSET_BIT4(a)                 (((a) >= WEP_FIRST4 && (a) < WEP_FIRST5) ? power2of((a) - WEP_FIRST4) : 0)
# define WEPSET_BIT5(a)                 (((a) >= WEP_FIRST5 && (a) < WEP_FIRST6) ? power2of((a) - WEP_FIRST5) : 0)
# define WEPSET_BIT6(a)                 (((a) >= WEP_FIRST6 && (a) < WEP_FIRST7) ? power2of((a) - WEP_FIRST6) : 0)
# define WEPSET_BIT7(a)                 (((a) >= WEP_FIRST7) ? power2of((a) - WEP_FIRST7) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a, _WS3_##a, _WS4_##a, _WS5_##a, _WS6_##a, _WS7_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = (e)._WS3_weapons = (e)._WS4_weapons = (e)._WS5_weapons = (e)._WS6_weapons = (e)._WS7_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = (_WS3_##a) = (_WS4_##a) = (_WS5_##a) = (_WS6_##a) = (_WS7_##a) = 0)

# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0 && (e)._WS3_weapons == 0 && (e)._WS4_weapons == 0 && (e)._WS5_weapons == 0 && (e)._WS6_weapons == 0 && (e)._WS7_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0 && (_WS3_##a) == 0 && (_WS4_##a) == 0 && (_WS5_##a) == 0 && (_WS6_##a) == 0 && (_WS7_##a) == 0)

# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2), (_WS3_##a) = getstati(STAT_WEAPONS3), (_WS4_##a) = getstati(STAT_WEAPONS4), (_WS5_##a) = getstati(STAT_WEAPONS5), (_WS6_##a) = getstati(STAT_WEAPONS6), (_WS7_##a) = getstati(STAT_WEAPONS7))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons); addstat(STAT_WEAPONS3, AS_INT, _WS3_weapons); addstat(STAT_WEAPONS4, AS_INT, _WS4_weapons); addstat(STAT_WEAPONS5, AS_INT, _WS5_weapons); addstat(STAT_WEAPONS6, AS_INT, _WS6_weapons); addstat(STAT_WEAPONS7, AS_INT, _WS7_weapons)

# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons); WriteInt24_t(dest, (a)._WS3_weapons); WriteInt24_t(dest, (a)._WS4_weapons); WriteInt24_t(dest, (a)._WS5_weapons); WriteInt24_t(dest, (a)._WS6_weapons); WriteInt24_t(dest, (a)._WS7_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a); WriteInt24_t(dest, _WS3_##a); WriteInt24_t(dest, _WS4_##a); WriteInt24_t(dest, _WS5_##a); WriteInt24_t(dest, _WS6_##a); WriteInt24_t(dest, _WS7_##a)

# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a)); WriteInt24_t(dest, WEPSET_BIT3(a)); WriteInt24_t(dest, WEPSET_BIT4(a)); WriteInt24_t(dest, WEPSET_BIT5(a)); WriteInt24_t(dest, WEPSET_BIT6(a)); WriteInt24_t(dest, WEPSET_BIT7(a))

# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t(); (a)._WS3_weapons = ReadInt24_t(); (a)._WS4_weapons = ReadInt24_t(); (a)._WS5_weapons = ReadInt24_t(); (a)._WS6_weapons = ReadInt24_t(); (a)._WS7_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t(); (_WS3_##a) = ReadInt24_t(); (_WS4_##a) = ReadInt24_t(); (_WS5_##a) = ReadInt24_t(); (_WS6_##a) = ReadInt24_t(); (_WS7_##a) = ReadInt24_t()

# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons) mergeop ((a)._WS7_weapons x (b)._WS7_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x (b)._WS7_weapons y (a)._WS7_weapons))

# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b) mergeop ((a)._WS3_weapons x _WS3_##b) mergeop ((a)._WS4_weapons x _WS4_##b) mergeop ((a)._WS5_weapons x _WS5_##b) mergeop ((a)._WS6_weapons x _WS6_##b) mergeop ((a)._WS7_weapons x _WS7_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x _WS3_##b y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x _WS4_##b y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x _WS5_##b y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x _WS6_##b y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x _WS7_##b y (a)._WS7_weapons))

# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b)) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b)) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b)) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b)) mergeop ((a)._WS7_weapons x WEPSET_BIT7(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b) y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b) y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b) y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b) y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x WEPSET_BIT7(b) y (a)._WS7_weapons))

# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons) mergeop (_WS3_##a x (b)._WS3_weapons) mergeop (_WS4_##a x (b)._WS4_weapons) mergeop (_WS5_##a x (b)._WS5_weapons) mergeop (_WS6_##a x (b)._WS6_weapons) mergeop (_WS7_##a x (b)._WS7_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a) mergeop (_WS3_##a x (b)._WS3_weapons y _WS3_##a) mergeop (_WS4_##a x (b)._WS4_weapons y _WS4_##a) mergeop (_WS5_##a x (b)._WS5_weapons y _WS5_##a) mergeop (_WS6_##a x (b)._WS6_weapons y _WS6_##a) mergeop (_WS7_##a x (b)._WS7_weapons y _WS7_##a))

# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b) mergeop (_WS3_##a x _WS3_##b) mergeop (_WS4_##a x _WS4_##b) mergeop (_WS5_##a x _WS5_##b) mergeop (_WS6_##a x _WS6_##b) mergeop (_WS7_##a x _WS7_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a) mergeop (_WS3_##a x _WS3_##b y _WS3_##a) mergeop (_WS4_##a x _WS4_##b y _WS4_##a) mergeop (_WS5_##a x _WS5_##b y _WS5_##a) mergeop (_WS6_##a x _WS6_##b y _WS6_##a) mergeop (_WS7_##a x _WS7_##b y _WS7_##a))

# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)) mergeop (_WS3_##a x WEPSET_BIT3(b)) mergeop (_WS4_##a x WEPSET_BIT4(b)) mergeop (_WS5_##a x WEPSET_BIT5(b)) mergeop (_WS6_##a x WEPSET_BIT6(b)) mergeop (_WS7_##a x WEPSET_BIT7(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a) mergeop (_WS3_##a x WEPSET_BIT3(b) y _WS3_##a) mergeop (_WS4_##a x WEPSET_BIT4(b) y _WS4_##a) mergeop (_WS5_##a x WEPSET_BIT5(b) y _WS5_##a) mergeop (_WS6_##a x WEPSET_BIT6(b) y _WS6_##a) mergeop (_WS7_##a x WEPSET_BIT6(b) y _WS7_##a))
#endif


See the pattern.
Also constants.qh gets another STAT_WEAPON* so it can send it on the wire
< const float STAT_WEAPONS7 = 90;



.......
Which then became (adding a 8th set of 24 weapons):



#else
# define WEP_MAXCOUNT 192
# define WEP_FIRST2 25
# define WEP_FIRST3 49
# define WEP_FIRST4 73
# define WEP_FIRST5 97
# define WEP_FIRST6 121
# define WEP_FIRST7 145
# define WEP_FIRST8 169
.float _WS1_weapons;
.float _WS2_weapons;
.float _WS3_weapons;
.float _WS4_weapons;
.float _WS5_weapons;
.float _WS6_weapons;
.float _WS7_weapons;
.float _WS8_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2 && (a) < WEP_FIRST3) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_BIT3(a)                 (((a) >= WEP_FIRST3 && (a) < WEP_FIRST4) ? power2of((a) - WEP_FIRST3) : 0)
# define WEPSET_BIT4(a)                 (((a) >= WEP_FIRST4 && (a) < WEP_FIRST5) ? power2of((a) - WEP_FIRST4) : 0)
# define WEPSET_BIT5(a)                 (((a) >= WEP_FIRST5 && (a) < WEP_FIRST6) ? power2of((a) - WEP_FIRST5) : 0)
# define WEPSET_BIT6(a)                 (((a) >= WEP_FIRST6 && (a) < WEP_FIRST7) ? power2of((a) - WEP_FIRST6) : 0)
# define WEPSET_BIT7(a)                 (((a) >= WEP_FIRST7 && (a) < WEP_FIRST8) ? power2of((a) - WEP_FIRST7) : 0)
# define WEPSET_BIT8(a)                 (((a) >= WEP_FIRST8) ? power2of((a) - WEP_FIRST8) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a, _WS3_##a, _WS4_##a, _WS5_##a, _WS6_##a, _WS7_##a, _WS8_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = (e)._WS3_weapons = (e)._WS4_weapons = (e)._WS5_weapons = (e)._WS6_weapons = (e)._WS7_weapons = (e)._WS8_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = (_WS3_##a) = (_WS4_##a) = (_WS5_##a) = (_WS6_##a) = (_WS7_##a) = (_WS8_##a) = 0)

# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0 && (e)._WS3_weapons == 0 && (e)._WS4_weapons == 0 && (e)._WS5_weapons == 0 && (e)._WS6_weapons == 0 && (e)._WS7_weapons == 0 && (e)._WS8_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0 && (_WS3_##a) == 0 && (_WS4_##a) == 0 && (_WS5_##a) == 0 && (_WS6_##a) == 0 && (_WS7_##a) == 0 && (_WS8_##a) == 0)

# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2), (_WS3_##a) = getstati(STAT_WEAPONS3), (_WS4_##a) = getstati(STAT_WEAPONS4), (_WS5_##a) = getstati(STAT_WEAPONS5), (_WS6_##a) = getstati(STAT_WEAPONS6), (_WS7_##a) = getstati(STAT_WEAPONS7), (_WS8_##a) = getstati(STAT_WEAPONS8))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons); addstat(STAT_WEAPONS3, AS_INT, _WS3_weapons); addstat(STAT_WEAPONS4, AS_INT, _WS4_weapons); addstat(STAT_WEAPONS5, AS_INT, _WS5_weapons); addstat(STAT_WEAPONS6, AS_INT, _WS6_weapons); addstat(STAT_WEAPONS7, AS_INT, _WS7_weapons); addstat(STAT_WEAPONS8, AS_INT, _WS8_weapons)

# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons); WriteInt24_t(dest, (a)._WS3_weapons); WriteInt24_t(dest, (a)._WS4_weapons); WriteInt24_t(dest, (a)._WS5_weapons); WriteInt24_t(dest, (a)._WS6_weapons); WriteInt24_t(dest, (a)._WS7_weapons); WriteInt24_t(dest, (a)._WS8_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a); WriteInt24_t(dest, _WS3_##a); WriteInt24_t(dest, _WS4_##a); WriteInt24_t(dest, _WS5_##a); WriteInt24_t(dest, _WS6_##a); WriteInt24_t(dest, _WS7_##a); WriteInt24_t(dest, _WS8_##a)

# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a)); WriteInt24_t(dest, WEPSET_BIT3(a)); WriteInt24_t(dest, WEPSET_BIT4(a)); WriteInt24_t(dest, WEPSET_BIT5(a)); WriteInt24_t(dest, WEPSET_BIT6(a)); WriteInt24_t(dest, WEPSET_BIT7(a)); WriteInt24_t(dest, WEPSET_BIT8(a))

# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t(); (a)._WS3_weapons = ReadInt24_t(); (a)._WS4_weapons = ReadInt24_t(); (a)._WS5_weapons = ReadInt24_t(); (a)._WS6_weapons = ReadInt24_t(); (a)._WS7_weapons = ReadInt24_t(); (a)._WS8_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t(); (_WS3_##a) = ReadInt24_t(); (_WS4_##a) = ReadInt24_t(); (_WS5_##a) = ReadInt24_t(); (_WS6_##a) = ReadInt24_t(); (_WS7_##a) = ReadInt24_t(); (_WS8_##a) = ReadInt24_t()

# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons) mergeop ((a)._WS7_weapons x (b)._WS7_weapons) mergeop ((a)._WS8_weapons x (b)._WS8_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x (b)._WS7_weapons y (a)._WS7_weapons) mergeop ((a)._WS8_weapons x (b)._WS8_weapons y (a)._WS8_weapons))

# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b) mergeop ((a)._WS3_weapons x _WS3_##b) mergeop ((a)._WS4_weapons x _WS4_##b) mergeop ((a)._WS5_weapons x _WS5_##b) mergeop ((a)._WS6_weapons x _WS6_##b) mergeop ((a)._WS7_weapons x _WS7_##b) mergeop ((a)._WS8_weapons x _WS8_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x _WS3_##b y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x _WS4_##b y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x _WS5_##b y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x _WS6_##b y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x _WS7_##b y (a)._WS7_weapons) mergeop ((a)._WS8_weapons x _WS8_##b y (a)._WS8_weapons))

# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b)) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b)) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b)) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b)) mergeop ((a)._WS7_weapons x WEPSET_BIT7(b)) mergeop ((a)._WS8_weapons x WEPSET_BIT8(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b) y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b) y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b) y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b) y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x WEPSET_BIT7(b) y (a)._WS7_weapons) mergeop ((a)._WS8_weapons x WEPSET_BIT8(b) y (a)._WS8_weapons))

# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons) mergeop (_WS3_##a x (b)._WS3_weapons) mergeop (_WS4_##a x (b)._WS4_weapons) mergeop (_WS5_##a x (b)._WS5_weapons) mergeop (_WS6_##a x (b)._WS6_weapons) mergeop (_WS7_##a x (b)._WS7_weapons) mergeop (_WS8_##a x (b)._WS8_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a) mergeop (_WS3_##a x (b)._WS3_weapons y _WS3_##a) mergeop (_WS4_##a x (b)._WS4_weapons y _WS4_##a) mergeop (_WS5_##a x (b)._WS5_weapons y _WS5_##a) mergeop (_WS6_##a x (b)._WS6_weapons y _WS6_##a) mergeop (_WS7_##a x (b)._WS7_weapons y _WS7_##a) mergeop (_WS8_##a x (b)._WS8_weapons y _WS8_##a))

# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b) mergeop (_WS3_##a x _WS3_##b) mergeop (_WS4_##a x _WS4_##b) mergeop (_WS5_##a x _WS5_##b) mergeop (_WS6_##a x _WS6_##b) mergeop (_WS7_##a x _WS7_##b) mergeop (_WS8_##a x _WS8_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a) mergeop (_WS3_##a x _WS3_##b y _WS3_##a) mergeop (_WS4_##a x _WS4_##b y _WS4_##a) mergeop (_WS5_##a x _WS5_##b y _WS5_##a) mergeop (_WS6_##a x _WS6_##b y _WS6_##a) mergeop (_WS7_##a x _WS7_##b y _WS7_##a) mergeop (_WS8_##a x _WS8_##b y _WS8_##a))

# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)) mergeop (_WS3_##a x WEPSET_BIT3(b)) mergeop (_WS4_##a x WEPSET_BIT4(b)) mergeop (_WS5_##a x WEPSET_BIT5(b)) mergeop (_WS6_##a x WEPSET_BIT6(b)) mergeop (_WS7_##a x WEPSET_BIT7(b)) mergeop (_WS8_##a x WEPSET_BIT8(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a) mergeop (_WS3_##a x WEPSET_BIT3(b) y _WS3_##a) mergeop (_WS4_##a x WEPSET_BIT4(b) y _WS4_##a) mergeop (_WS5_##a x WEPSET_BIT5(b) y _WS5_##a) mergeop (_WS6_##a x WEPSET_BIT6(b) y _WS6_##a) mergeop (_WS7_##a x WEPSET_BIT7(b) y _WS7_##a) mergeop (_WS8_##a x WEPSET_BIT8(b) y _WS8_##a))
#endif



See the pattern.
Also constants.qh gets another STAT_WEAPON* so it can send it on the wire
< const float STAT_WEAPONS8 = 91;





.......
Which then became (adding a 9th set of 24 weapons):




#else
# define WEP_MAXCOUNT 216
# define WEP_FIRST2 25
# define WEP_FIRST3 49
# define WEP_FIRST4 73
# define WEP_FIRST5 97
# define WEP_FIRST6 121
# define WEP_FIRST7 145
# define WEP_FIRST8 169
# define WEP_FIRST9 193
.float _WS1_weapons;
.float _WS2_weapons;
.float _WS3_weapons;
.float _WS4_weapons;
.float _WS5_weapons;
.float _WS6_weapons;
.float _WS7_weapons;
.float _WS8_weapons;
.float _WS9_weapons;
# define WEPSET_BIT1(a)                 (((a) < WEP_FIRST2) ? power2of((a) - WEP_FIRST) : 0)
# define WEPSET_BIT2(a)                 (((a) >= WEP_FIRST2 && (a) < WEP_FIRST3) ? power2of((a) - WEP_FIRST2) : 0)
# define WEPSET_BIT3(a)                 (((a) >= WEP_FIRST3 && (a) < WEP_FIRST4) ? power2of((a) - WEP_FIRST3) : 0)
# define WEPSET_BIT4(a)                 (((a) >= WEP_FIRST4 && (a) < WEP_FIRST5) ? power2of((a) - WEP_FIRST4) : 0)
# define WEPSET_BIT5(a)                 (((a) >= WEP_FIRST5 && (a) < WEP_FIRST6) ? power2of((a) - WEP_FIRST5) : 0)
# define WEPSET_BIT6(a)                 (((a) >= WEP_FIRST6 && (a) < WEP_FIRST7) ? power2of((a) - WEP_FIRST6) : 0)
# define WEPSET_BIT7(a)                 (((a) >= WEP_FIRST7 && (a) < WEP_FIRST8) ? power2of((a) - WEP_FIRST7) : 0)
# define WEPSET_BIT8(a)                 (((a) >= WEP_FIRST8 && (a) < WEP_FIRST9) ? power2of((a) - WEP_FIRST8) : 0)
# define WEPSET_BIT9(a)                 (((a) >= WEP_FIRST9) ? power2of((a) - WEP_FIRST9) : 0)
# define WEPSET_DECLARE_A(a)            float _WS1_##a, _WS2_##a, _WS3_##a, _WS4_##a, _WS5_##a, _WS6_##a, _WS7_##a, _WS8_##a, _WS9_##a
# define WEPSET_CLEAR_E(e)              ((e)._WS1_weapons = (e)._WS2_weapons = (e)._WS3_weapons = (e)._WS4_weapons = (e)._WS5_weapons = (e)._WS6_weapons = (e)._WS7_weapons = (e)._WS8_weapons = (e)._WS9_weapons = 0)
# define WEPSET_CLEAR_A(a)              ((_WS1_##a) = (_WS2_##a) = (_WS3_##a) = (_WS4_##a) = (_WS5_##a) = (_WS6_##a) = (_WS7_##a) = (_WS8_##a) = (_WS9_##a) = 0)

# define WEPSET_EMPTY_E(e)              ((e)._WS1_weapons == 0 && (e)._WS2_weapons == 0 && (e)._WS3_weapons == 0 && (e)._WS4_weapons == 0 && (e)._WS5_weapons == 0 && (e)._WS6_weapons == 0 && (e)._WS7_weapons == 0 && (e)._WS8_weapons == 0 && (e)._WS9_weapons == 0)
# define WEPSET_EMPTY_A(a)              ((_WS1_##a) == 0 && (_WS2_##a) == 0 && (_WS3_##a) == 0 && (_WS4_##a) == 0 && (_WS5_##a) == 0 && (_WS6_##a) == 0 && (_WS7_##a) == 0 && (_WS8_##a) == 0 && (_WS9_##a) == 0)

# define WEPSET_COPY_AS(a)              ((_WS1_##a) = getstati(STAT_WEAPONS), (_WS2_##a) = getstati(STAT_WEAPONS2), (_WS3_##a) = getstati(STAT_WEAPONS3), (_WS4_##a) = getstati(STAT_WEAPONS4), (_WS5_##a) = getstati(STAT_WEAPONS5), (_WS6_##a) = getstati(STAT_WEAPONS6), (_WS7_##a) = getstati(STAT_WEAPONS7), (_WS8_##a) = getstati(STAT_WEAPONS8), (_WS9_##a) = getstati(STAT_WEAPONS9))
# define WEPSET_ADDSTAT()               addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2, AS_INT, _WS2_weapons); addstat(STAT_WEAPONS3, AS_INT, _WS3_weapons); addstat(STAT_WEAPONS4, AS_INT, _WS4_weapons); addstat(STAT_WEAPONS5, AS_INT, _WS5_weapons); addstat(STAT_WEAPONS6, AS_INT, _WS6_weapons); addstat(STAT_WEAPONS7, AS_INT, _WS7_weapons); addstat(STAT_WEAPONS8, AS_INT, _WS8_weapons); addstat(STAT_WEAPONS9, AS_INT, _WS9_weapons)

# define WEPSET_WRITE_E(dest,a)         WriteInt24_t(dest, (a)._WS1_weapons); WriteInt24_t(dest, (a)._WS2_weapons); WriteInt24_t(dest, (a)._WS3_weapons); WriteInt24_t(dest, (a)._WS4_weapons); WriteInt24_t(dest, (a)._WS5_weapons); WriteInt24_t(dest, (a)._WS6_weapons); WriteInt24_t(dest, (a)._WS7_weapons); WriteInt24_t(dest, (a)._WS8_weapons); WriteInt24_t(dest, (a)._WS9_weapons)
# define WEPSET_WRITE_A(dest,a)         WriteInt24_t(dest, _WS1_##a); WriteInt24_t(dest, _WS2_##a); WriteInt24_t(dest, _WS3_##a); WriteInt24_t(dest, _WS4_##a); WriteInt24_t(dest, _WS5_##a); WriteInt24_t(dest, _WS6_##a); WriteInt24_t(dest, _WS7_##a); WriteInt24_t(dest, _WS8_##a); WriteInt24_t(dest, _WS9_##a)

# define WEPSET_WRITE_W(dest,a)         WriteInt24_t(dest, WEPSET_BIT1(a)); WriteInt24_t(dest, WEPSET_BIT2(a)); WriteInt24_t(dest, WEPSET_BIT3(a)); WriteInt24_t(dest, WEPSET_BIT4(a)); WriteInt24_t(dest, WEPSET_BIT5(a)); WriteInt24_t(dest, WEPSET_BIT6(a)); WriteInt24_t(dest, WEPSET_BIT7(a)); WriteInt24_t(dest, WEPSET_BIT8(a)); WriteInt24_t(dest, WEPSET_BIT9(a))

# define WEPSET_READ_E(a)               (a)._WS1_weapons = ReadInt24_t(); (a)._WS2_weapons = ReadInt24_t(); (a)._WS3_weapons = ReadInt24_t(); (a)._WS4_weapons = ReadInt24_t(); (a)._WS5_weapons = ReadInt24_t(); (a)._WS6_weapons = ReadInt24_t(); (a)._WS7_weapons = ReadInt24_t(); (a)._WS8_weapons = ReadInt24_t(); (a)._WS9_weapons = ReadInt24_t()
# define WEPSET_READ_A(a)               (_WS1_##a) = ReadInt24_t(); (_WS2_##a) = ReadInt24_t(); (_WS3_##a) = ReadInt24_t(); (_WS4_##a) = ReadInt24_t(); (_WS5_##a) = ReadInt24_t(); (_WS6_##a) = ReadInt24_t(); (_WS7_##a) = ReadInt24_t(); (_WS8_##a) = ReadInt24_t(); (_WS9_##a) = ReadInt24_t()

# define WEPSET_OP1_EE(a,b,mergeop,x)   (((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons) mergeop ((a)._WS7_weapons x (b)._WS7_weapons) mergeop ((a)._WS8_weapons x (b)._WS8_weapons) mergeop ((a)._WS9_weapons x (b)._WS9_weapons))
# define WEPSET_OP2_EE(a,b,mergeop,x,y) (((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x (b)._WS4_weapons y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x (b)._WS5_weapons y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x (b)._WS6_weapons y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x (b)._WS7_weapons y (a)._WS7_weapons) mergeop ((a)._WS8_weapons x (b)._WS8_weapons y (a)._WS8_weapons) mergeop ((a)._WS9_weapons x (b)._WS9_weapons y (a)._WS9_weapons))

# define WEPSET_OP1_EA(a,b,mergeop,x)   (((a)._WS1_weapons x _WS1_##b) mergeop ((a)._WS2_weapons x _WS2_##b) mergeop ((a)._WS3_weapons x _WS3_##b) mergeop ((a)._WS4_weapons x _WS4_##b) mergeop ((a)._WS5_weapons x _WS5_##b) mergeop ((a)._WS6_weapons x _WS6_##b) mergeop ((a)._WS7_weapons x _WS7_##b) mergeop ((a)._WS8_weapons x _WS8_##b) mergeop ((a)._WS9_weapons x _WS9_##b))
# define WEPSET_OP2_EA(a,b,mergeop,x,y) (((a)._WS1_weapons x _WS1_##b y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x _WS2_##b y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x _WS3_##b y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x _WS4_##b y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x _WS5_##b y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x _WS6_##b y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x _WS7_##b y (a)._WS7_weapons) mergeop ((a)._WS8_weapons x _WS8_##b y (a)._WS8_weapons) mergeop ((a)._WS9_weapons x _WS9_##b y (a)._WS9_weapons))

# define WEPSET_OP1_EW(a,b,mergeop,x)   (((a)._WS1_weapons x WEPSET_BIT1(b)) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b)) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b)) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b)) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b)) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b)) mergeop ((a)._WS7_weapons x WEPSET_BIT7(b)) mergeop ((a)._WS8_weapons x WEPSET_BIT8(b)) mergeop ((a)._WS9_weapons x WEPSET_BIT9(b)))
# define WEPSET_OP2_EW(a,b,mergeop,x,y) (((a)._WS1_weapons x WEPSET_BIT1(b) y (a)._WS1_weapons) mergeop ((a)._WS2_weapons x WEPSET_BIT2(b) y (a)._WS2_weapons) mergeop ((a)._WS3_weapons x WEPSET_BIT3(b) y (a)._WS3_weapons) mergeop ((a)._WS4_weapons x WEPSET_BIT4(b) y (a)._WS4_weapons) mergeop ((a)._WS5_weapons x WEPSET_BIT5(b) y (a)._WS5_weapons) mergeop ((a)._WS6_weapons x WEPSET_BIT6(b) y (a)._WS6_weapons) mergeop ((a)._WS7_weapons x WEPSET_BIT7(b) y (a)._WS7_weapons) mergeop ((a)._WS8_weapons x WEPSET_BIT8(b) y (a)._WS8_weapons) mergeop ((a)._WS9_weapons x WEPSET_BIT9(b) y (a)._WS9_weapons))

# define WEPSET_OP1_AE(a,b,mergeop,x)   ((_WS1_##a x (b)._WS1_weapons) mergeop (_WS2_##a x (b)._WS2_weapons) mergeop (_WS3_##a x (b)._WS3_weapons) mergeop (_WS4_##a x (b)._WS4_weapons) mergeop (_WS5_##a x (b)._WS5_weapons) mergeop (_WS6_##a x (b)._WS6_weapons) mergeop (_WS7_##a x (b)._WS7_weapons) mergeop (_WS8_##a x (b)._WS8_weapons) mergeop (_WS9_##a x (b)._WS9_weapons))
# define WEPSET_OP2_AE(a,b,mergeop,x,y) ((_WS1_##a x (b)._WS1_weapons y _WS1_##a) mergeop (_WS2_##a x (b)._WS2_weapons y _WS2_##a) mergeop (_WS3_##a x (b)._WS3_weapons y _WS3_##a) mergeop (_WS4_##a x (b)._WS4_weapons y _WS4_##a) mergeop (_WS5_##a x (b)._WS5_weapons y _WS5_##a) mergeop (_WS6_##a x (b)._WS6_weapons y _WS6_##a) mergeop (_WS7_##a x (b)._WS7_weapons y _WS7_##a) mergeop (_WS8_##a x (b)._WS8_weapons y _WS8_##a) mergeop (_WS9_##a x (b)._WS9_weapons y _WS9_##a))

# define WEPSET_OP1_AA(a,b,mergeop,x)   ((_WS1_##a x _WS1_##b) mergeop (_WS2_##a x _WS2_##b) mergeop (_WS3_##a x _WS3_##b) mergeop (_WS4_##a x _WS4_##b) mergeop (_WS5_##a x _WS5_##b) mergeop (_WS6_##a x _WS6_##b) mergeop (_WS7_##a x _WS7_##b) mergeop (_WS8_##a x _WS8_##b) mergeop (_WS9_##a x _WS9_##b))
# define WEPSET_OP2_AA(a,b,mergeop,x,y) ((_WS1_##a x _WS1_##b y _WS1_##a) mergeop (_WS2_##a x _WS2_##b y _WS2_##a) mergeop (_WS3_##a x _WS3_##b y _WS3_##a) mergeop (_WS4_##a x _WS4_##b y _WS4_##a) mergeop (_WS5_##a x _WS5_##b y _WS5_##a) mergeop (_WS6_##a x _WS6_##b y _WS6_##a) mergeop (_WS7_##a x _WS7_##b y _WS7_##a) mergeop (_WS8_##a x _WS8_##b y _WS8_##a) mergeop (_WS9_##a x _WS9_##b y _WS9_##a))

# define WEPSET_OP1_AW(a,b,mergeop,x)   ((_WS1_##a x WEPSET_BIT1(b)) mergeop (_WS2_##a x WEPSET_BIT2(b)) mergeop (_WS3_##a x WEPSET_BIT3(b)) mergeop (_WS4_##a x WEPSET_BIT4(b)) mergeop (_WS5_##a x WEPSET_BIT5(b)) mergeop (_WS6_##a x WEPSET_BIT6(b)) mergeop (_WS7_##a x WEPSET_BIT7(b)) mergeop (_WS8_##a x WEPSET_BIT8(b)) mergeop (_WS9_##a x WEPSET_BIT9(b)))
# define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y _WS2_##a) mergeop (_WS3_##a x WEPSET_BIT3(b) y _WS3_##a) mergeop (_WS4_##a x WEPSET_BIT4(b) y _WS4_##a) mergeop (_WS5_##a x WEPSET_BIT5(b) y _WS5_##a) mergeop (_WS6_##a x WEPSET_BIT6(b) y _WS6_##a) mergeop (_WS7_##a x WEPSET_BIT7(b) y _WS7_##a) mergeop (_WS8_##a x WEPSET_BIT8(b) y _WS8_##a) mergeop (_WS9_##a x WEPSET_BIT9(b) y _WS9_##a))
#endif





See the pattern.
Also constants.qh gets another STAT_WEAPON* so it can send it on the wire
< const float STAT_WEAPONS9 = 96;


-----------------------------------------------------------------------------------------



IRC discussion about weapset, you can keep adding them, just follow the pattern:
03:43 <divVerent> it is possible to extend the bitshift code, but I
won't
03:43 <divVerent> it's a lot of work
03:43 <divVerent> trivial work, but any typo will break it horribly
03:43 <divVerent> just change any part that handles _x and _y to also
handle _z
03:44 <divVerent> but beware, this is typo hell. Any typo you make,
and it'll explode.
08:36 <irrilichdemon> I don't really understand how to
08:36 <irrilichdemon>
http://chaosesqueanthology.git.sourceforge.net/git/gitweb.cgi?p=chaosesqueanthology/xonotic-data.pk3dir;a=blob;f=qcsrc/common/items.qh;h=7108f50b51165c656aad9f1e9b7f1c0a6a1dc757;hb=HEAD
08:36 <irrilichdemon> would something like this:
08:36 <irrilichdemon>  145 # define WEPSET_OP1_EE(a,b,mergeop,x)
(((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x
(b)._WS2_weapons))
08:36 <irrilichdemon>  146 # define WEPSET_OP2_EE(a,b,mergeop,x,y)
(((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop
((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons))
08:36 <irrilichdemon>   
08:36 <irrilichdemon> change to something like this:
08:37 <irrilichdemon>   145 # define WEPSET_OP1_EE(a,b,c,mergeop,x)
(((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x
(b)._WS2_weapons))
08:37 <irrilichdemon>    146 # define WEPSET_OP2_EE(a,b,mergeop,x,y)
(((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop
((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons))
08:37 <irrilichdemon>  147 # define WEPSET_OP3_EE(a,b,c,mergeop,x,y,z)
(((a)._WS1_weapons x (b)._WS1_weapons y  (b)._WS1_weapons z
(a)._WS1_weapons) mergeop ((a)._WS2_weapons x (b)._WS2_weapons y
(c)._WS2_weapons z (a)._WS2_weapons))
08:45 <irrilichdemon>  
08:45 <irrilichdemon> or should it be like:
08:46 <divVerent> no, you only change the right side
08:46 <divVerent> one example
08:46 <divVerent> \# define WEPSET_OP1_EE(a,b,mergeop,x)
(((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x
(b)._WS2_weapons))
08:46 <divVerent> becomes
08:47 <divVerent>  # define WEPSET_OP1_EE(a,b,mergeop,x)
(((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x
(b)._WS2_weapons) mergeop ((a)._WS3_weapons x (b)._WS3_weapons))
08:47 <divVerent> and yes, this way 72 isn't even the final limit -
you can add as many _WS*_weapons as you want that way
08:47 <divVerent> but it's horrible to do this for all those macros
08:47 <divVerent> at least you only need to work on the "abstract
group" of the macros, i.e. the top
08:47 <irrilichdemon> It's like coding perl
08:47 <divVerent> not on the individual operations at the bottom
08:48 <divVerent> but really
08:48 <divVerent> switch to gmqcc already
08:48 <divVerent> you're spending a lot of work to maintain legacy crap
08:48 <irrilichdemon> it won't compile the language stuff on my
version of xonotic qc
08:48 <divVerent> not even with -std=fteqcc?
08:48 <irrilichdemon> russian etc only displays if compiled with fteqcc
08:48 <divVerent> that's a bug and the gmqcc authors may want to fix
that
08:49 <divVerent> how did you put russian chars in the source?
08:49 <divVerent> gmqcc expects UTF-8
08:49 <irrilichdemon> I didn't, but there is a translation file
08:49 <divVerent> that should work just fine
08:49 <irrilichdemon> it just doesn't work with gmqcc :(
08:49 <divVerent> as long as you _("mark") your strings
08:49 <divVerent> does it also break for other languages?
08:50 <irrilichdemon> yes
08:50 <irrilichdemon> spanish doesn't work either
08:50 <divVerent> prvm_language dump
08:50 <divVerent> restart
08:50 <divVerent> will it write a working .pot file?
08:50 <irrilichdemon> I'm guessing no
08:50 <divVerent> something's broken in your source if that happens,
but that really needs fixing in gmqcc
08:50 <irrilichdemon> I need to stick with the source I have tho,
because I really can't keep up with samual
08:51 <irrilichdemon> staying with a stable "stack" lets me add new
features and fix crashes :P
08:51 <divVerent> I'd really recommend AT LEAST taking over the weapon
set stuff
08:51 <divVerent> except if you really want to stick with this because
it can be made to go even beyond 72
08:51 <divVerent> wepset has an absolute limit of 72, but is way nicer
code
08:51 <divVerent> as it uses the vector type
08:51 <irrilichdemon> yea, I'd like to go beyond 72 some day
08:51 <irrilichdemon> I wen't from 18 to 48 in a year and a half
08:51 <divVerent> then keep your macros :P
08:52 <divVerent> but you maintain them, I won't
08:52 <divVerent> at least I gave you an example... apply that to all
the others and it should work
08:52 <divVerent> do a single typo, and it'll fail horribly
08:52 <irrilichdemon> is it ok if I post this macro info to a public
file?
08:52 <divVerent> sure, but I won't verify it all
08:52 <irrilichdemon> ok, thanks :)
08:52 <divVerent> it's hard to even check them
08:52 <divVerent> that's the main reason it got killed
08:52 <irrilichdemon> one more question about them
08:52 <divVerent> it's REALLY bad code
08:53 <irrilichdemon> at least you only need to work on the "abstract
group" of the macros, i.e. the top
08:53 <irrilichdemon> do I just change
08:53 <divVerent> I don't have the code in front of me
08:54 <divVerent> ah, see it
08:54 <divVerent> I meant from:
08:54 <divVerent> # define WEP_MAXCOUNT 48
08:54 <divVerent> to
08:54 <divVerent> # define WEPSET_OP2_AW(a,b,mergeop,x,y) ((_WS1_##a x
WEPSET_BIT1(b) y _WS1_##a) mergeop (_WS2_##a x WEPSET_BIT2(b) y
_WS2_##a))
08:55 <irrilichdemon> lines: 146, 148, 150, 152, 154, and 156?
08:55 <divVerent> while this COPY, EQ, OR .. doesn't need touching
08:55 <divVerent> sorry, I have no line numbers here
08:55 <divVerent> but I'd assume almost all lines from the first to
the last I quoted need changing
08:55 <irrilichdemon> 145 is:
08:55 <irrilichdemon>  145 # define WEPSET_OP1_EE(a,b,mergeop,x)
(((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x
(b)._WS2_weapons))
08:55 <divVerent> sure needs changfing the way I told you
08:55 <irrilichdemon> 146 is
08:55 <irrilichdemon>  146 # define WEPSET_OP2_EE(a,b,mergeop,x,y)
(((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop
((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons))
08:55 <divVerent> same change needed
08:56 <divVerent> the mergeop ...WS2... stuff needs to be copied to
the end and become a mergeop ...WS3...
08:56 <divVerent> that'll be a very long line
08:56 <divVerent> # define WEPSET_DECLARE_A(a)            float
_WS1_##a, _WS2_##a
08:56 <divVerent> even this needs changing
08:57 <irrilichdemon> ok let me try a triad... brb a few min trying
08:57 <divVerent> to add a _WS3_##a
08:57 <divVerent> # define WEPSET_ADDSTAT()
addstat(STAT_WEAPONS, AS_INT, _WS1_weapons); addstat(STAT_WEAPONS2,
AS_INT, _WS2_weapons)
08:57 <divVerent> and this will need a new STAT_WEAPONS3
08:59 <divVerent> oh, the lines with the power2of stuff needs to be
handled a bit different
09:00 <divVerent> copy it to make a third one of these :P
09:00 <divVerent> but that should be obvious
09:01 <irrilichdemon>   145 # define WEPSET_OP1_EE(a,b,mergeop,x)
((((a)._WS1_weapons x (b)._WS1_weapons) mergeop ((a)._WS2_weapons x
(b)._WS2_weapons)) mergeop ((a)._WS3_weapons x (b)._WS3_weapons)))
09:01 <irrilichdemon>    146 # define WEPSET_OP2_EE(a,b,mergeop,x,y)
((((a)._WS1_weapons x (b)._WS1_weapons y (a)._WS1_weapons) mergeop
((a)._WS2_weapons x (b)._WS2_weapons y (a)._WS2_weapons)) mergeop
((a)._WS3_weapons x (b)._WS3_weapons y (a)._WS3_weapons)))
09:01 <irrilichdemon>  
09:01 <irrilichdemon>  132 # define WEPSET_BIT3(a)
(((a) >= WEP_FIRST3) ? power2of((a) - WEP_FIRST3) : 0)
09:02 <irrilichdemon> is that how it's should go?
09:09 <irrilichdemon>  
09:09 <irrilichdemon> also in cl_weapons.qc there seems to be this for
weapon reloading
09:09 <irrilichdemon>
http://chaosesqueanthology.git.sourceforge.net/git/gitweb.cgi?p=chaosesqueanthology/xonotic-data.pk3dir;a=blob;f=qcsrc/server/cl_weapons.qc;h=ece50bac7bd5ecf69db11722585f1ba4c752e4fb;hb=HEAD
09:10 -!- Irssi: Pasting 8 lines to divVerent. Press Ctrl-K if you
wish to do this or Ctrl-C to cancel.
09:10 <irrilichdemon>                 if(doreduce && g_weapon_stay == 2)
09:10 <irrilichdemon>  260                 {
09:10 <irrilichdemon>  261                         for(i = 0, j = 1; i
< 24; ++i, j *= 2)
09:10 <irrilichdemon>  262                         {
09:10 <irrilichdemon>  263                                 if(wa & j)
09:10 <irrilichdemon>  264                                 {
09:10 <irrilichdemon>  265
ammofield = Item_CounterField(j);
09:10 <irrilichdemon>  266 
09:10 <irrilichdemon>  267                                         //
if our weapon is loaded, give its load back to the player
09:10 <irrilichdemon>  
09:10 <irrilichdemon> and similar
09:10 <irrilichdemon> should it be
09:11 <irrilichdemon> for(i = 0, j = 1; i < 24; ++i, j *= 2; i < 48;
++i, j *= 3)
09:11 <irrilichdemon> for working with a 3rd weapset
09:45 <irrilichdemon>  
09:45 <irrilichdemon> here is my attempt at following the rules you
gave:
09:46 <irrilichdemon> http://pastebin.com/bpC7xYSc
09:48 <divVerent> haha, that code was missed
09:48 <divVerent> that needs rewriting
09:48 <divVerent> the *= 2 part simply cannot work
09:53 <divVerent> wait, no
09:53 <divVerent> these are ammo types, not weapons
09:55 <divVerent> your code looks roughly ok, but won't verify it
totally
09:55 <irrilichdemon> it compiles :D
09:55 <irrilichdemon> seems to run fine with up to 48 weapons
09:56 <irrilichdemon> ima add a 49th, and I'm sure CSQC will crash
09:56 <irrilichdemon> as is tradition
09:56 <irrilichdemon> in that for(i = 0, j = 1; i < 24; code
09:57 <irrilichdemon> on gmqcc all was fine
09:57 <irrilichdemon> but in fteqcc
09:57 <irrilichdemon> if you threw your 48th weapon
09:57 <irrilichdemon> your playermodel dissappeared
09:57 <irrilichdemon> I had to make it so you don't throw any ammo
with that particular weapon 
09:57 <irrilichdemon> now you don't dissapear
09:58 <irrilichdemon> gave an "incorrect model index"
09:58 <irrilichdemon> but... if I want ammo using weapons above 47,
... what should I do
09:58 <irrilichdemon> is for(i = 0, j = 1; i < 24; ++i, j *= 2; i <
48; ++i, j *= 3) the right way to go?
09:58  * irrilichdemon tests additional 49th weapon...
10:07 <divVerent> oh, this is just for number of item types
10:07 <divVerent> this loop only needs 24
10:07 <divVerent> as weapons don't count as items
10:07 <divVerent> this specific loop even only cares for ammo types
