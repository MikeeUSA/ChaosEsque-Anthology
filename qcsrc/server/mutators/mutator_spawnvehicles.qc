//Note: All these routines are in this file because they do similar things
//Thank You to Samual who helped make this mutator happen.
//
//<me> what is the license your code should be under? GPL2/3 same as the rest of the xonotic code?
//<Mario`> gplv2+
//<me> Samual, gplv2+ as Mario` says?
//<Samual> yup
//<me> ok thanks :)
//<me> in function HOOKFUNCTION_spawnvehicles_WorldSpawn (line 27),
//<me> mutators/mutator_spawnvehicles.qc:39: error: expected ;, found 
//<me>    e.origin = selected_origin)
//<Mario`>  e.origin = selected_origin)
//<me> to    e.origin = selected_origin;
//<Mario`> hax
//<me> right?
//<Mario`> Yeah! Ha Ha Ha!
//<me> or ();
//<me> ok :)
//<Samual> whoops :P my typo :P
//<Samual> told you I didn't compile it :P
//<Samual> considering how quickly I wrote it, still not too shaby eh?
//<Samual> *flexes programming muscle*
//<me> yes now to try it ;)
//* me adding to the menu

//This is for the abandoned building SC Tiles code,
//for deciding if we should put a different terrain cup/base
//arround the building, see float SMI_AbdBld_ChooseBaseTerrainType
#define BUILDING_SC_TERRAIN_SNOW 1
#define BUILDING_SC_TERRAIN_DUST 2
#define BUILDING_SC_TERRAIN_GREYSTONE 3
#define BUILDING_SC_TERRAIN_BLACKSTONE 4



#define BUILDINGSPCFC_ROAD_NARROWROAD_STRAIGHT_QUADRICE	1000001
#define BUILDINGSPCFC_ROAD_NARROWROAD_CROSS 1000002
#define BUILDINGSPCFC_ROAD_THINROAD_STRAIGHT_TWICE 1000003
#define BUILDINGSPCFC_ROAD_THINROAD_CROSS 1000004
#define BUILDINGSPCFC_ROAD_THINROAD_NARROWROAD_CROSS 1000005
#define BUILDINGSPCFC_ROAD_ROADWIDE_STRAIGHT 1000006
#define BUILDINGSPCFC_ROAD_ROADWIDE_CROSS 1000007
#define BUILDINGSPCFC_ROAD_ROADWIDE_THINROAD_CROSS 1000008
#define BUILDINGSPCFC_ROAD_ROADWIDE_NARROWROAD_CROSS 1000009

#define BUILDINGSPCFC_ROAD_PARKWAY3XW_STRAIGHT_HALF 1000010
	//3x width (grass on sides)
#define BUILDINGSPCFC_ROAD_PARKWAY3XW_INTERCHANGE 1000011
	//Interchange is 3x with of normal parkway
#define BUILDINGSPCFC_ROAD_PARKWAY3XW_THINROAD_VS 1000012
	//A VS is
#define BUILDINGSPCFC_ROAD_PARKWAY3XW_NARROWROAD_VS 1000013
	//a crossing
#define BUILDINGSPCFC_ROAD_PARKWAY3XW_ROADWIDE_VS 1000014
	//but without complications



#define TERRAIN_ROCK_MISC 0
#define TERRAIN_ROCK_SUMMER 1
#define TERRAIN_ROCK_FALL 2
#define TERRAIN_ROCK_WINTER 3
#define TERRAIN_ROCK_STRANGE 4
#define TERRAIN_ROCK_DESERT 5
#define TERRAIN_ROCK_GRAYSTONE 6
#define TERRAIN_ROCK_BLACKSTONE 7
#define TERRAIN_ROCK_BURNING 8

#define LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL 3
#define LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2 20480
#define LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC 5
#define LODADD_BUILDINGCLASS_RESIDENTIAL_LC 6144
#define LODMULTIPLIER_BUILDINGCLASS_AIRPORT 5
#define LODADD_BUILDINGCLASS_AIRPORT 20480
#define LODADD_BUILDING_FIREDEPTSMALL 5120

.entity deletesubordinatewithme;
.entity deletesubordinatewithme2;
.entity deletesubordinatewithme3;
.entity deletesubordinatewithme4;
.entity deletesubordinatewithme5;
.entity deletesubordinatewithme6;
.entity deletesubordinatewithme7;
.entity deletesubordinatewithme8;

float autocvar_g_spawnvehicles_force_trace_movenormal;
float autocvar_g_spawnfoliage_force_trace_movenormal;
float autocvar_g_spawnmiscitems_force_trace_movenormal;
float autocvar_g_spawnabdbld_force_trace_movenormal;


#define G_SPAWNVEHICLES_FORCE_TRACE_MOVETYPE() \
	((autocvar_g_spawnvehicles_force_trace_movenormal) ? MOVE_NORMAL : MOVE_WORLDONLY)
#define G_SPAWNFOLIAGE_FORCE_TRACE_MOVETYPE() \
	((autocvar_g_spawnfoliage_force_trace_movenormal) ? MOVE_NORMAL : MOVE_WORLDONLY)
#define G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE() \
	((autocvar_g_spawnmiscitems_force_trace_movenormal) ? MOVE_NORMAL : MOVE_WORLDONLY)
#define G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE() \
	((autocvar_g_spawnabdbld_force_trace_movenormal) ? MOVE_NORMAL : MOVE_WORLDONLY)


 //Used for items added to sc_tile buildings etc
 //Call only before removing or when a bld is sufficently damaged and you want to get rid of these
void remove_deletesubordinatewithme_ents(entity myent)
{
	if (myent == world) {
		return;
	}
	
	if (myent.deletesubordinatewithme)
	if (myent.deletesubordinatewithme != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme);
	}
	
	if (myent.deletesubordinatewithme2)
	if (myent.deletesubordinatewithme2 != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme2);
	}
	
	if (myent.deletesubordinatewithme3)
	if (myent.deletesubordinatewithme3 != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme3);
	}
	
	if (myent.deletesubordinatewithme4)
	if (myent.deletesubordinatewithme4 != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme4);
	}
	
	if (myent.deletesubordinatewithme5)
	if (myent.deletesubordinatewithme5 != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme5);
	}
	
	if (myent.deletesubordinatewithme6)
	if (myent.deletesubordinatewithme6 != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme6);
	}
	
	if (myent.deletesubordinatewithme7)
	if (myent.deletesubordinatewithme7 != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme7);
	}
	
	if (myent.deletesubordinatewithme8)
	if (myent.deletesubordinatewithme8 != world) {
		myent.solid = SOLID_NOT;
		remove(myent.deletesubordinatewithme8);
	}
}

float g_spawnvehiclesaround;
float g_spawnvehiclesaround_mil_current;
float g_spawnvehiclesaround_mil_current_tankt27;
float g_spawnvehiclesaround_mil_current_tankiv;
float g_spawnvehiclesaround_mil_current_tanka7v;
float g_spawnvehiclesaround_mil_current_tankll40;
float g_spawnvehiclesaround_mil_current_lightapc;
float g_spawnvehiclesaround_mil_current_mraptor;
float g_spawnvehiclesaround_mil_current_shundi;
float g_spawnvehiclesaround_mil_current_shenzong;
float g_spawnvehiclesaround_mil_current_tankll48;
float g_spawnvehiclesaround_mil_current_tankll37;
float g_spawnvehiclesaround_mil_current_tankll24;
float g_spawnvehiclesaround_mil_current_tankll24_aa;
float g_spawnvehiclesaround_mil_current_tankll24_raa;
float g_spawnvehiclesaround_mil_current_tankll24_heat;
float g_spawnvehiclesaround_mil_current_tankll24_ai;
float g_spawnvehiclesaround_mil_current_spiderbot;
float g_spawnvehiclesaround_mil_current_mechmax;
float g_spawnvehiclesaround_mil_current_mechbst;
float g_spawnvehiclesaround_mil_current_nieuport;
float g_spawnvehiclesaround_mil_current_fokker;
float g_spawnvehiclesaround_mil_current_eindecker;
float g_spawnvehiclesaround_mil_current_sopwith;
float g_spawnvehiclesaround_mil_current_raptor;
float g_spawnvehiclesaround_mil_current_r22heli;
float g_spawnvehiclesaround_mil_current_r22heli_a;
float g_spawnvehiclesaround_mil_current_r22heli_b;
float g_spawnvehiclesaround_mil_current_r22heli_c;
float g_spawnvehiclesaround_mil_current_h125heli;
float g_spawnvehiclesaround_mil_current_h125heli_a;
float g_spawnvehiclesaround_mil_current_h125heli_b;
float g_spawnvehiclesaround_mil_current_h125heli_c;
float g_spawnvehiclesaround_mil_current_pickuptruck;
float g_spawnvehiclesaround_mil_current_blackhawk;
float g_spawnvehiclesaround_mil_current_bumblebee;
float g_spawnvehiclesaround_mil_current_aerocommander;
float g_spawnvehiclesaround_mil_atleast_current;
float g_spawnvehiclesaround_civ_current;
float g_spawnvehiclesaround_civ_current_challenger;
float g_spawnvehiclesaround_civ_current_cruizer;
float g_spawnvehiclesaround_civ_current_sportster;
float g_spawnvehiclesaround_civ_current_farman;
float g_spawnvehiclesaround_civ_current_aerocommander;
float g_spawnvehiclesaround_civ_current_sparrow;
float g_spawnvehiclesaround_civ_current_sparrow_a;
float g_spawnvehiclesaround_civ_current_r22heli;
float g_spawnvehiclesaround_civ_current_h125heli;
float g_spawnvehiclesaround_civ_current_blackhawk;
float g_spawnvehiclesaround_civ_current_blackhawk_a;
float g_spawnvehiclesaround_civ_current_fastcar;
float g_spawnvehiclesaround_civ_current_speedcar;
float g_spawnvehiclesaround_civ_current_cruizerlimo;
float g_spawnvehiclesaround_civ_current_racer;
float g_spawnvehiclesaround_civ_current_sedan;
float g_spawnvehiclesaround_civ_current_yugo;
float g_spawnvehiclesaround_civ_current_pickuptruck;
float g_spawnvehiclesaround_civ_current_smalltruck;
float g_spawnvehiclesaround_civ_current_bulldozer;
float g_spawnvehiclesaround_civ_current_submersible;
float g_spawnvehiclesaround_civ_current_speedboat;
float g_spawnvehiclesaround_civ_atleast_current;

float autocvar_g_spawnvehiclesaround_allowmechs;
float autocvar_g_spawnvehiclesaround_allowtanks;
float autocvar_g_spawnvehiclesaround_allowmilbiplanes;
float autocvar_g_spawnvehiclesaround_allowmilheli;
float autocvar_g_spawnvehiclesaround_allowmilmonoplanes;
float autocvar_g_spawnvehiclesaround_allowmiltechnicals;
float autocvar_g_spawnvehiclesaround_allowmilspiderbots;

float autocvar_g_spawnvehiclesaround_mil_atleast;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankt27;
float autocvar_g_spawnvehiclesaround_mil_max_tankt27;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankiv;
float autocvar_g_spawnvehiclesaround_mil_max_tankiv;

float autocvar_g_spawnvehiclesaround_mil_atleast_tanka7v;
float autocvar_g_spawnvehiclesaround_mil_max_tanka7v;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll40;
float autocvar_g_spawnvehiclesaround_mil_max_tankll40;

float autocvar_g_spawnvehiclesaround_mil_atleast_lightapc;
float autocvar_g_spawnvehiclesaround_mil_max_lightapc;

float autocvar_g_spawnvehiclesaround_mil_atleast_mraptor;
float autocvar_g_spawnvehiclesaround_mil_max_mraptor;

float autocvar_g_spawnvehiclesaround_mil_atleast_shundi;
float autocvar_g_spawnvehiclesaround_mil_max_shundi;

float autocvar_g_spawnvehiclesaround_mil_atleast_shenzong;
float autocvar_g_spawnvehiclesaround_mil_max_shenzong;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll48;
float autocvar_g_spawnvehiclesaround_mil_max_tankll48;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll37;
float autocvar_g_spawnvehiclesaround_mil_max_tankll37;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll24;
float autocvar_g_spawnvehiclesaround_mil_max_tankll24;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_aa;
float autocvar_g_spawnvehiclesaround_mil_max_tankll24_aa;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_raa;
float autocvar_g_spawnvehiclesaround_mil_max_tankll24_raa;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_heat;
float autocvar_g_spawnvehiclesaround_mil_max_tankll24_heat;

float autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_ai;
float autocvar_g_spawnvehiclesaround_mil_max_tankll24_ai;

float autocvar_g_spawnvehiclesaround_mil_atleast_spiderbot;
float autocvar_g_spawnvehiclesaround_mil_max_spiderbot;

float autocvar_g_spawnvehiclesaround_mil_atleast_mechmax;
float autocvar_g_spawnvehiclesaround_mil_max_mechmax;

float autocvar_g_spawnvehiclesaround_mil_atleast_mechbst;
float autocvar_g_spawnvehiclesaround_mil_max_mechbst;

float autocvar_g_spawnvehiclesaround_mil_atleast_fokker;
float autocvar_g_spawnvehiclesaround_mil_max_fokker;

float autocvar_g_spawnvehiclesaround_mil_atleast_eindecker;
float autocvar_g_spawnvehiclesaround_mil_max_eindecker;

float autocvar_g_spawnvehiclesaround_mil_atleast_nieuport;
float autocvar_g_spawnvehiclesaround_mil_max_nieuport;

float autocvar_g_spawnvehiclesaround_mil_atleast_sopwith;
float autocvar_g_spawnvehiclesaround_mil_max_sopwith;

float autocvar_g_spawnvehiclesaround_mil_atleast_raptor;
float autocvar_g_spawnvehiclesaround_mil_max_raptor;

float autocvar_g_spawnvehiclesaround_mil_atleast_r22heli;
float autocvar_g_spawnvehiclesaround_mil_max_r22heli;

float autocvar_g_spawnvehiclesaround_mil_atleast_h125heli;
float autocvar_g_spawnvehiclesaround_mil_max_h125heli;

float autocvar_g_spawnvehiclesaround_mil_atleast_blackhawk;
float autocvar_g_spawnvehiclesaround_mil_max_blackhawk;

float autocvar_g_spawnvehiclesaround_mil_atleast_pickuptruck;
float autocvar_g_spawnvehiclesaround_mil_max_pickuptruck;

float autocvar_g_spawnvehiclesaround_mil_atleast_bumblebee;
float autocvar_g_spawnvehiclesaround_mil_max_bumblebee;

float autocvar_g_spawnvehiclesaround_mil_atleast_aerocommander;
float autocvar_g_spawnvehiclesaround_mil_max_aerocommander;

float autocvar_g_spawnvehiclesaround_civ_atleast;

float autocvar_g_spawnvehiclesaround_civ_atleast_challenger;
float autocvar_g_spawnvehiclesaround_civ_max_challenger;

float autocvar_g_spawnvehiclesaround_civ_atleast_cruizer;
float autocvar_g_spawnvehiclesaround_civ_max_cruizer;

float autocvar_g_spawnvehiclesaround_civ_atleast_sportster;
float autocvar_g_spawnvehiclesaround_civ_max_sportster;

float autocvar_g_spawnvehiclesaround_civ_atleast_sparrow;
float autocvar_g_spawnvehiclesaround_civ_max_sparrow;

float autocvar_g_spawnvehiclesaround_civ_atleast_farman;
float autocvar_g_spawnvehiclesaround_civ_max_farman;

float autocvar_g_spawnvehiclesaround_civ_atleast_aerocommander;
float autocvar_g_spawnvehiclesaround_civ_max_aerocommander;

float autocvar_g_spawnvehiclesaround_civ_atleast_r22heli;
float autocvar_g_spawnvehiclesaround_civ_max_r22heli;

float autocvar_g_spawnvehiclesaround_civ_atleast_h125heli;
float autocvar_g_spawnvehiclesaround_civ_max_h125heli;

float autocvar_g_spawnvehiclesaround_civ_atleast_blackhawk;
float autocvar_g_spawnvehiclesaround_civ_max_blackhawk;

float autocvar_g_spawnvehiclesaround_civ_atleast_fastcar;
float autocvar_g_spawnvehiclesaround_civ_max_fastcar;

float autocvar_g_spawnvehiclesaround_civ_atleast_speedcar;
float autocvar_g_spawnvehiclesaround_civ_max_speedcar;

float autocvar_g_spawnvehiclesaround_civ_atleast_cruizerlimo;
float autocvar_g_spawnvehiclesaround_civ_max_cruizerlimo;

float autocvar_g_spawnvehiclesaround_civ_atleast_racer;
float autocvar_g_spawnvehiclesaround_civ_max_racer;

float autocvar_g_spawnvehiclesaround_civ_atleast_sedan;
float autocvar_g_spawnvehiclesaround_civ_max_sedan;

float autocvar_g_spawnvehiclesaround_civ_atleast_yugo;
float autocvar_g_spawnvehiclesaround_civ_max_yugo;

float autocvar_g_spawnvehiclesaround_civ_atleast_pickuptruck;
float autocvar_g_spawnvehiclesaround_civ_max_pickuptruck;

float autocvar_g_spawnvehiclesaround_civ_atleast_smalltruck;
float autocvar_g_spawnvehiclesaround_civ_max_smalltruck;

float autocvar_g_spawnvehiclesaround_civ_atleast_bulldozer;
float autocvar_g_spawnvehiclesaround_civ_max_bulldozer;

float autocvar_g_spawnvehiclesaround_civ_atleast_submersible;
float autocvar_g_spawnvehiclesaround_civ_max_submersible;

float autocvar_g_spawnvehiclesaround_civ_atleast_speedboat;
float autocvar_g_spawnvehiclesaround_civ_max_speedboat;

float autocvar_g_spawnvehiclesaround_mil_per;
float autocvar_g_spawnvehiclesaround_mil_max;
float g_spawnvehiclesaround_civ_current;
float autocvar_g_spawnvehiclesaround_civ_per;
float autocvar_g_spawnvehiclesaround_civ_max;

float autocvar_g_spawnvehiclesaround_mil_tankt27_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankiv_amnt;
float autocvar_g_spawnvehiclesaround_mil_tanka7v_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll40_amnt;
float autocvar_g_spawnvehiclesaround_mil_lightapc_amnt;
float autocvar_g_spawnvehiclesaround_mil_mraptor_amnt;
float autocvar_g_spawnvehiclesaround_mil_shundi_amnt;
float autocvar_g_spawnvehiclesaround_mil_shenzong_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll48_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll37_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll24_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt;
float autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt;
float autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt;
float autocvar_g_spawnvehiclesaround_mil_mechmax_amnt;
float autocvar_g_spawnvehiclesaround_mil_mechbst_amnt;
float autocvar_g_spawnvehiclesaround_mil_nieuport_amnt;
float autocvar_g_spawnvehiclesaround_mil_fokker_amnt;
float autocvar_g_spawnvehiclesaround_mil_eindecker_amnt;
float autocvar_g_spawnvehiclesaround_mil_sopwith_amnt;
float autocvar_g_spawnvehiclesaround_mil_raptor_amnt;
float autocvar_g_spawnvehiclesaround_mil_r22heli_amnt;
float autocvar_g_spawnvehiclesaround_mil_r22heli_a_amnt;
float autocvar_g_spawnvehiclesaround_mil_r22heli_b_amnt;
float autocvar_g_spawnvehiclesaround_mil_r22heli_c_amnt;
float autocvar_g_spawnvehiclesaround_mil_h125heli_amnt;
float autocvar_g_spawnvehiclesaround_mil_h125heli_a_amnt;
float autocvar_g_spawnvehiclesaround_mil_h125heli_b_amnt;
float autocvar_g_spawnvehiclesaround_mil_h125heli_c_amnt;
float autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt;
float autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt;
float autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt;
float autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt;

float autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_eindecker_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_h125heli_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_shundi_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_shenzong_amnt;
float autocvar_g_spawnvehiclesaround_team1_mil_tanka7v_amnt;

float autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_eindecker_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_h125heli_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_lightapc_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_shundi_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_shenzong_amnt;
float autocvar_g_spawnvehiclesaround_team2_mil_tanka7v_amnt;

float autocvar_g_spawnvehiclesaround_civ_challenger_amnt;
float autocvar_g_spawnvehiclesaround_civ_cruizer_amnt;
float autocvar_g_spawnvehiclesaround_civ_sportster_amnt;
float autocvar_g_spawnvehiclesaround_civ_farman_amnt;
float autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt;
float autocvar_g_spawnvehiclesaround_civ_sparrow_amnt;
float autocvar_g_spawnvehiclesaround_civ_r22heli_amnt;
float autocvar_g_spawnvehiclesaround_civ_h125heli_amnt;
float autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt;
float autocvar_g_spawnvehiclesaround_civ_fastcar_amnt;
float autocvar_g_spawnvehiclesaround_civ_speedcar_amnt;
float autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt;
float autocvar_g_spawnvehiclesaround_civ_racer_amnt;
float autocvar_g_spawnvehiclesaround_civ_sedan_amnt;
float autocvar_g_spawnvehiclesaround_civ_yugo_amnt;
float autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt;
float autocvar_g_spawnvehiclesaround_civ_smalltruck_amnt;
float autocvar_g_spawnvehiclesaround_civ_bulldozer_amnt;
float autocvar_g_spawnvehiclesaround_civ_submersible_amnt;
float autocvar_g_spawnvehiclesaround_civ_speedboat_amnt;

float autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_h125heli_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_smalltruck_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_bulldozer_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_submersible_amnt;
float autocvar_g_spawnvehiclesaround_team1_civ_speedboat_amnt;

float autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_h125heli_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_smalltruck_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_bulldozer_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_submersible_amnt;
float autocvar_g_spawnvehiclesaround_team2_civ_speedboat_amnt;

float autocvar_g_spawn_around_findbases_nonteamplay; //Use mins maxes if so etc;
float autocvar_g_spawn_around_findbases_nonteamplay_vehiclesandmg; //For vehics etc too in non teamgames
float autocvar_g_spawn_around_findbases_nonteamplay_type;

vector g_spawnmountedgunsaround_base1;
vector g_spawnmountedgunsaround_base2;
vector g_spawnmountedgunsaround_base3;
vector g_spawnmountedgunsaround_base4;

float g_spawnmountedgunsaround_found1;
float g_spawnmountedgunsaround_found2;
float g_spawnmountedgunsaround_found3;
float g_spawnmountedgunsaround_found4;

float g_spawn_around_foundbases;
void Mg_Find_Bases(void);

void Mutator_FindBases_ZeroOutCvars(void)
{
	g_spawn_around_foundbases = 0;
	g_spawnmountedgunsaround_found1 = 0;
	g_spawnmountedgunsaround_found2 = 0;
	g_spawnmountedgunsaround_found3 = 0;
	g_spawnmountedgunsaround_found4 = 0;
}

float Vh_Select_MilVehic(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_mil_shenzong_amnt
	+ autocvar_g_spawnvehiclesaround_mil_h125heli_amnt
	);

	if (mrandvar < autocvar_g_spawnvehiclesaround_mil_tankt27_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	)) {
		mpick = 20;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	)) {
		mpick = 21;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	)) {
		mpick = 22;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	)) {
		mpick = 23;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mraptor_amnt
	)) {
		mpick = 24;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tanka7v_amnt
	)) {
		mpick = 25;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_mil_eindecker_amnt
	)) {
		mpick = 26;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_shundi_amnt
	)) {
		mpick = 27;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_mil_shenzong_amnt
	)) {
		mpick = 28;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_mil_shenzong_amnt
	+ autocvar_g_spawnvehiclesaround_mil_h125heli_amnt
	)) {
		mpick = 29;
	} else {
		//Failsafe
		mpick = 19;
	}
	
	return mpick;
}



float Vh_Select_MilVehic_Team1(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_shenzong_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_h125heli_amnt
	);

	if (mrandvar < autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	)) {
		mpick = 20;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	)) {
		mpick = 21;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	)) {
		mpick = 22;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	)) {
		mpick = 23;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt
	)) {
		mpick = 24;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tanka7v_amnt
	)) {
		mpick = 25;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_eindecker_amnt
	)) {
		mpick = 26;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_shundi_amnt
	)) {
		mpick = 27;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_shenzong_amnt
	)) {
		mpick = 28;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_shenzong_amnt
	+ autocvar_g_spawnvehiclesaround_team1_mil_h125heli_amnt
	)) {
		mpick = 29;
	} else {
		//Nothing picked
		mpick = -100;
	}
	
	return mpick;
}


float Vh_Select_MilVehic_Team2(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_lightapc_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_shenzong_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_h125heli_amnt
	);

	if (mrandvar < autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	)) {
		mpick = 20;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	)) {
		mpick = 21;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	)) {
		mpick = 22;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_lightapc_amnt
	)) {
		mpick = 23;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt
	)) {
		mpick = 24;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tanka7v_amnt
	)) {
		mpick = 25;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_eindecker_amnt
	)) {
		mpick = 26;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_shundi_amnt
	)) {
		mpick = 27;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_shenzong_amnt
	)) {
		mpick = 28;	
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_mil_tankt27_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll48_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll37_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_aa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_raa_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_heat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll24_ai_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_spiderbot_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechmax_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mechbst_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_nieuport_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_fokker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_sopwith_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_raptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_bumblebee_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankiv_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tankll40_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_mraptor_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_tanka7v_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_eindecker_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_shundi_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_shenzong_amnt
	+ autocvar_g_spawnvehiclesaround_team2_mil_h125heli_amnt
	)) {
		mpick = 29;
	} else {
		//Nothing Picked
		mpick = -100;
	}
	
	return mpick;
}

//Civ Vehicle picks
float Vh_Select_CivVehic(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	
	+ autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedboat_amnt
	+ autocvar_g_spawnvehiclesaround_civ_h125heli_amnt
	);

	if (mrandvar < autocvar_g_spawnvehiclesaround_civ_challenger_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_smalltruck_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_bulldozer_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_submersible_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedboat_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_civ_speedboat_amnt
	+ autocvar_g_spawnvehiclesaround_civ_h125heli_amnt
	)) {
		mpick = 20;
	} else {
		//Failsafe
		mpick = 14;
	}
	
	return mpick;
}

float Vh_Select_CivVehic_Team1(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	
	+ autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedboat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_h125heli_amnt
	);

	if (mrandvar < autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_smalltruck_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_bulldozer_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_submersible_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedboat_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team1_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_speedboat_amnt
	+ autocvar_g_spawnvehiclesaround_team1_civ_h125heli_amnt
	)) {
		mpick = 20;
	} else {
		//Nothing Picked
		mpick = -100;
	}
	
	return mpick;
}

float Vh_Select_CivVehic_Team2(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	
	+ autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedboat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_h125heli_amnt
	);

	if (mrandvar < autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_smalltruck_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_bulldozer_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_submersible_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedboat_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnvehiclesaround_team2_civ_challenger_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sportster_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_farman_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_aerocommander_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sparrow_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_r22heli_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_blackhawk_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_fastcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedcar_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_cruizerlimo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_racer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_sedan_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_yugo_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_pickuptruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_smalltruck_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_bulldozer_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_submersible_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_speedboat_amnt
	+ autocvar_g_spawnvehiclesaround_team2_civ_h125heli_amnt
	)) {
		mpick = 20;
	} else {
		//Nothing Picked
		mpick = -100;
	}
	
	return mpick;
}

void Vh_Zero_Out_Vars(void)
{
	g_spawnvehiclesaround_mil_current = 0;
	g_spawnvehiclesaround_mil_current_tankt27 = 0;
	g_spawnvehiclesaround_mil_current_tankiv = 0;
	g_spawnvehiclesaround_mil_current_tanka7v = 0;
	g_spawnvehiclesaround_mil_current_tankll40 = 0;
	g_spawnvehiclesaround_mil_current_lightapc = 0;
	g_spawnvehiclesaround_mil_current_mraptor = 0;
	g_spawnvehiclesaround_mil_current_shundi = 0;
	g_spawnvehiclesaround_mil_current_shenzong = 0;
	g_spawnvehiclesaround_mil_current_tankll48 = 0;
	g_spawnvehiclesaround_mil_current_tankll37 = 0;
	g_spawnvehiclesaround_mil_current_tankll24 = 0;
	g_spawnvehiclesaround_mil_current_tankll24_aa = 0;
	g_spawnvehiclesaround_mil_current_tankll24_raa = 0;
	g_spawnvehiclesaround_mil_current_tankll24_heat = 0;
	g_spawnvehiclesaround_mil_current_tankll24_ai = 0;
	g_spawnvehiclesaround_mil_current_spiderbot = 0;
	g_spawnvehiclesaround_mil_current_mechmax = 0;
	g_spawnvehiclesaround_mil_current_mechbst = 0;
	g_spawnvehiclesaround_mil_current_fokker = 0;
	g_spawnvehiclesaround_mil_current_eindecker = 0;
	g_spawnvehiclesaround_mil_current_nieuport = 0;
	g_spawnvehiclesaround_mil_current_sopwith = 0;
	g_spawnvehiclesaround_mil_current_raptor = 0;
	g_spawnvehiclesaround_mil_current_r22heli = 0;
	g_spawnvehiclesaround_mil_current_r22heli_a = 0;
	g_spawnvehiclesaround_mil_current_r22heli_b = 0;
	g_spawnvehiclesaround_mil_current_r22heli_c = 0;
	g_spawnvehiclesaround_mil_current_h125heli = 0;
	g_spawnvehiclesaround_mil_current_h125heli_a = 0;
	g_spawnvehiclesaround_mil_current_h125heli_b = 0;
	g_spawnvehiclesaround_mil_current_h125heli_c = 0;
	g_spawnvehiclesaround_mil_current_pickuptruck = 0;
	g_spawnvehiclesaround_mil_current_blackhawk = 0;
	g_spawnvehiclesaround_mil_current_bumblebee = 0;
	g_spawnvehiclesaround_mil_current_aerocommander = 0;
	g_spawnvehiclesaround_mil_atleast_current = 0;
	g_spawnvehiclesaround_civ_current = 0;
	g_spawnvehiclesaround_civ_current_challenger = 0;
	g_spawnvehiclesaround_civ_current_cruizer = 0;
	g_spawnvehiclesaround_civ_current_sportster = 0;
	g_spawnvehiclesaround_civ_current_farman = 0;
	g_spawnvehiclesaround_civ_current_aerocommander = 0;
	g_spawnvehiclesaround_civ_current_sparrow = 0;
	g_spawnvehiclesaround_civ_current_sparrow_a = 0;
	g_spawnvehiclesaround_civ_current_r22heli = 0;
	g_spawnvehiclesaround_civ_current_h125heli = 0;
	g_spawnvehiclesaround_civ_current_blackhawk = 0;
	g_spawnvehiclesaround_civ_current_blackhawk_a = 0;
	g_spawnvehiclesaround_civ_current_fastcar = 0;
	g_spawnvehiclesaround_civ_current_speedcar = 0;
	g_spawnvehiclesaround_civ_current_cruizerlimo = 0;
	g_spawnvehiclesaround_civ_current_racer = 0;
	g_spawnvehiclesaround_civ_current_sedan = 0;
	g_spawnvehiclesaround_civ_current_yugo = 0;
	g_spawnvehiclesaround_civ_current_pickuptruck = 0;
	g_spawnvehiclesaround_civ_current_smalltruck = 0;
	g_spawnvehiclesaround_civ_current_bulldozer = 0;
	g_spawnvehiclesaround_civ_current_submersible = 0;
	g_spawnvehiclesaround_civ_current_speedboat = 0;
	g_spawnvehiclesaround_civ_atleast_current = 0;
	Mutator_FindBases_ZeroOutCvars();
}

vector Vh_Select_Spawn_Point(void)
{
	entity e = spawn();
	e.mins = '-130 -130 -130';
	e.maxs = '130 130 130';
	//setorigin(e, '0 0 0');

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_WATER | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, 128, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

vector Vh_Select_Spawn_Point_Water(void)
{
	entity e = spawn();
	e.mins = '-30 -30 -30';
	e.maxs = '30 30 30';
	//setorigin(e, '0 0 0');

	// tries 50 times then gives up, that's what the number 50 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_WATER, DPCONTENTS_LAVA | DPCONTENTS_SLIME | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER | DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, Q3SURFACEFLAG_SKY, 50, 128, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

vector Vh_Select_Spawn_Point_WaterOrSlime(void)
{
	entity e = spawn();
	e.mins = '-10 -10 -10';
	e.maxs = '10 10 10';
	//setorigin(e, '0 0 0');

	// tries 50 times then gives up, that's what the number 50 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_WATER | DPCONTENTS_SLIME, DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER | DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, Q3SURFACEFLAG_SKY, 50, 128, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

vector Vh_Select_Spawn_Point_AnyLiquid(void)
{
	entity e = spawn();
	e.mins = '-10 -10 -10';
	e.maxs = '10 10 10';
	//setorigin(e, '0 0 0');

	// tries 100 times then gives up, that's what the number 100 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_WATER | DPCONTENTS_SLIME | DPCONTENTS_LAVA, DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER | DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, Q3SURFACEFLAG_SKY, 100, 128, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

float Vh_Spawn_Vehicle_Mil(void)
{
	if (g_spawnvehiclesaround_mil_current >= autocvar_g_spawnvehiclesaround_mil_max)
	{
		//dprint("We have enough mil vehicles\n");
		return 0;
	}
	
	float spawns_we_want = autocvar_g_spawnvehiclesaround_mil_per;
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Vehicle\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = Vh_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;

			self = e;
			
			float randvar;
			//If we are done spawning the minumum of various vehicle types, then will randomly spawn vehicles
			if ((autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_atleast_current)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_bumblebee > g_spawnvehiclesaround_mil_current_bumblebee)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_raptor > g_spawnvehiclesaround_mil_current_raptor)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_r22heli > g_spawnvehiclesaround_mil_current_r22heli)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_blackhawk > g_spawnvehiclesaround_mil_current_blackhawk)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_pickuptruck > g_spawnvehiclesaround_mil_current_pickuptruck)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_sopwith > g_spawnvehiclesaround_mil_current_sopwith)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_fokker > g_spawnvehiclesaround_mil_current_fokker)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_spiderbot > g_spawnvehiclesaround_mil_current_spiderbot)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_mechmax > g_spawnvehiclesaround_mil_current_mechmax)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_mechbst > g_spawnvehiclesaround_mil_current_mechbst)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankt27 > g_spawnvehiclesaround_mil_current_tankt27)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll48 > g_spawnvehiclesaround_mil_current_tankll48)	
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll37 > g_spawnvehiclesaround_mil_current_tankll37)	
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24 > g_spawnvehiclesaround_mil_current_tankll24)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_aa > g_spawnvehiclesaround_mil_current_tankll24_aa)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_raa > g_spawnvehiclesaround_mil_current_tankll24_raa)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_heat > g_spawnvehiclesaround_mil_current_tankll24_heat)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_ai > g_spawnvehiclesaround_mil_current_tankll24_ai)	
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_aerocommander > g_spawnvehiclesaround_mil_current_aerocommander)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankiv > g_spawnvehiclesaround_mil_current_tankiv)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll40 > g_spawnvehiclesaround_mil_current_tankll40)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_lightapc > g_spawnvehiclesaround_mil_current_lightapc)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_mraptor > g_spawnvehiclesaround_mil_current_mraptor)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tanka7v > g_spawnvehiclesaround_mil_current_tanka7v)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_eindecker > g_spawnvehiclesaround_mil_current_eindecker)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_shundi > g_spawnvehiclesaround_mil_current_shundi)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_shenzong > g_spawnvehiclesaround_mil_current_shenzong)
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_h125heli > g_spawnvehiclesaround_mil_current_h125heli)
			) {
				randvar = 0;
				//dprint("rand not enabled\n");
			} else {
				if ( (teamplay || (autocvar_g_spawn_around_findbases_nonteamplay && autocvar_g_spawn_around_findbases_nonteamplay_vehiclesandmg))
				&& (g_spawnmountedgunsaround_found1
				+ g_spawnmountedgunsaround_found2
				+ g_spawnmountedgunsaround_found3
				+ g_spawnmountedgunsaround_found4 > 1)
				){
					float t1l, t2l;
					t1l = vlen(e.origin - g_spawnmountedgunsaround_base1);
					t2l = vlen(e.origin - g_spawnmountedgunsaround_base2);
					//Shortest wins
					if (t1l < t2l)
						randvar = Vh_Select_MilVehic_Team1();
					else
						randvar = Vh_Select_MilVehic_Team2();
				} else {
					randvar = Vh_Select_MilVehic();
				}
			}
			
			//Here we will check if the global minumum of all mil vehicles has been spawned (mil_atleast)
			//If such is the case:
			//Then we will check if the minumum of that particular type has been spawned (mil_atleast_TYPE)
			//If both of those are true, then we will check if the random spawn value has been tripped
			//And regardless, we will check if the maximum of that type has been spawned yet.
			
			if (randvar == -100) 
			{
				//Nothing was picked during a team pick
				//This can happen when you set one team to have vehicles and the other not to
				//Currently, for team vehicles with nothing set we bail
				//But with non team vehicles we select a failsafe (bumblebee etc)
				remove(self); //Self currently is e, it is reset below
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankt27))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankt27 > g_spawnvehiclesaround_mil_current_tankt27)
			|| (randvar == 1))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankt27 > g_spawnvehiclesaround_mil_current_tankt27)))
			{
				spawnfunc_vehicle_tankt27();
				g_spawnvehiclesaround_mil_current_tankt27 = g_spawnvehiclesaround_mil_current_tankt27 + 1;
				//dprint("spawn tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankiv))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankiv > g_spawnvehiclesaround_mil_current_tankiv)
			|| (randvar == 21))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankiv > g_spawnvehiclesaround_mil_current_tankiv)))
			{
				spawnfunc_vehicle_tankiv();
				g_spawnvehiclesaround_mil_current_tankiv = g_spawnvehiclesaround_mil_current_tankiv + 1;
				//dprint("spawn tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll40))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll40 > g_spawnvehiclesaround_mil_current_tankll40)
			|| (randvar == 22))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll40 > g_spawnvehiclesaround_mil_current_tankll40)))
			{
				spawnfunc_vehicle_tankll40();
				g_spawnvehiclesaround_mil_current_tankll40 = g_spawnvehiclesaround_mil_current_tankll40 + 1;
				//dprint("spawn tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_lightapc))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_lightapc > g_spawnvehiclesaround_mil_current_lightapc)
			|| (randvar == 23))
			&& (autocvar_g_spawnvehiclesaround_mil_max_lightapc > g_spawnvehiclesaround_mil_current_lightapc)))
			{
					randvar = random();
					if (randvar > 0.97) {
						spawnfunc_vehicle_lightapc_m134();
					} else if (randvar > 0.94) {
						spawnfunc_vehicle_lightapc_gau19();
					} else if (randvar > 0.84) {
						spawnfunc_vehicle_lightapc_t17mm();
					} else if (randvar > 0.64) {
						spawnfunc_vehicle_lightapc_autonex();
					} else if (randvar > 0.44) {
						spawnfunc_vehicle_lightapc_grail();
					} else if (randvar > 0.20) {
						spawnfunc_vehicle_lightapc_shlac();
					} else {
						spawnfunc_vehicle_lightapc();
					}
				g_spawnvehiclesaround_mil_current_lightapc = g_spawnvehiclesaround_mil_current_lightapc + 1;
				//dprint("spawn tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll48))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll48 > g_spawnvehiclesaround_mil_current_tankll48)
			|| (randvar == 2))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll48 > g_spawnvehiclesaround_mil_current_tankll48)))
			{
				spawnfunc_vehicle_tankll48();
				g_spawnvehiclesaround_mil_current_tankll48 = g_spawnvehiclesaround_mil_current_tankll48 + 1;
				//dprint("spawn ll48 tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll37))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll37 > g_spawnvehiclesaround_mil_current_tankll37)
			|| (randvar == 3))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll37 > g_spawnvehiclesaround_mil_current_tankll37)))
			{
				spawnfunc_vehicle_tankll37();
				g_spawnvehiclesaround_mil_current_tankll37 = g_spawnvehiclesaround_mil_current_tankll37 + 1;
				//dprint("spawn ll37 tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll24_heat))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_heat > g_spawnvehiclesaround_mil_current_tankll24_heat)
			|| (randvar == 7))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll24_heat > g_spawnvehiclesaround_mil_current_tankll24_heat)))
			{
				self.spawnflags |= 16384; //So we spawn 17mm secondary
				spawnfunc_vehicle_tankll24_heat();
				g_spawnvehiclesaround_mil_current_tankll24_heat = g_spawnvehiclesaround_mil_current_tankll24_heat + 1;
				//dprint("spawn ll24 tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll24_raa))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_raa > g_spawnvehiclesaround_mil_current_tankll24_raa)
			|| (randvar == 6))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll24_raa > g_spawnvehiclesaround_mil_current_tankll24_raa)))
			{
				spawnfunc_vehicle_tankll24_raa();
				g_spawnvehiclesaround_mil_current_tankll24_raa = g_spawnvehiclesaround_mil_current_tankll24_raa + 1;
				//dprint("spawn ll24 tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll24_aa))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_aa > g_spawnvehiclesaround_mil_current_tankll24_aa)
			|| (randvar == 5))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll24_aa > g_spawnvehiclesaround_mil_current_tankll24_aa)))
			{
				self.spawnflags |= 16384; //So we spawn 17mm secondary
				spawnfunc_vehicle_tankll24_aa();
				g_spawnvehiclesaround_mil_current_tankll24_aa = g_spawnvehiclesaround_mil_current_tankll24_aa + 1;
				//dprint("spawn ll24 tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll24_ai))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24_ai > g_spawnvehiclesaround_mil_current_tankll24_ai)
			|| (randvar == 8))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll24_ai > g_spawnvehiclesaround_mil_current_tankll24_ai)))
			{
				spawnfunc_vehicle_tankll24_ai();
				g_spawnvehiclesaround_mil_current_tankll24_ai = g_spawnvehiclesaround_mil_current_tankll24_ai + 1;
				//dprint("spawn ll24 tank\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tankll24))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tankll24 > g_spawnvehiclesaround_mil_current_tankll24)
			|| (randvar == 4))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tankll24 > g_spawnvehiclesaround_mil_current_tankll24)))
			{
				spawnfunc_vehicle_tankll24();
				g_spawnvehiclesaround_mil_current_tankll24 = g_spawnvehiclesaround_mil_current_tankll24 + 1;
				//dprint("spawn ll24 tank\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilspiderbots && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_spiderbot))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_spiderbot > g_spawnvehiclesaround_mil_current_spiderbot)
			|| ((randvar == 9) || ((!autocvar_g_spawnvehiclesaround_allowmechs) && (randvar == 10 || randvar == 11))))
			&& (autocvar_g_spawnvehiclesaround_mil_max_spiderbot > g_spawnvehiclesaround_mil_current_spiderbot)))
			{
				spawnfunc_vehicle_spiderbot();
				g_spawnvehiclesaround_mil_current_spiderbot = g_spawnvehiclesaround_mil_current_spiderbot + 1;
				//dprint("spawn spider\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmechs && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_mechmax))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_mechmax > g_spawnvehiclesaround_mil_current_mechmax)
			|| (randvar == 10))
			&& (autocvar_g_spawnvehiclesaround_mil_max_mechmax > g_spawnvehiclesaround_mil_current_mechmax)))
			{
				spawnfunc_vehicle_mechmax();
				g_spawnvehiclesaround_mil_current_mechmax = g_spawnvehiclesaround_mil_current_mechmax + 1;
				//dprint("spawn mechmax\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmechs && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_mechbst))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_mechbst > g_spawnvehiclesaround_mil_current_mechbst)
			|| (randvar == 11))
			&& (autocvar_g_spawnvehiclesaround_mil_max_mechbst > g_spawnvehiclesaround_mil_current_mechbst)))
			{
				spawnfunc_vehicle_mechbst();
				g_spawnvehiclesaround_mil_current_mechbst = g_spawnvehiclesaround_mil_current_mechbst + 1;
				//dprint("spawn mechbst\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilbiplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_nieuport))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_nieuport > g_spawnvehiclesaround_mil_current_nieuport)
			|| (randvar == 12))
			&& (autocvar_g_spawnvehiclesaround_mil_max_nieuport > g_spawnvehiclesaround_mil_current_nieuport)))
			{
				spawnfunc_vehicle_nieuport();
				g_spawnvehiclesaround_mil_current_nieuport = g_spawnvehiclesaround_mil_current_nieuport + 1;
				//dprint("spawn nieuport\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilbiplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_fokker))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_fokker > g_spawnvehiclesaround_mil_current_fokker)
			|| (randvar == 13))
			&& (autocvar_g_spawnvehiclesaround_mil_max_fokker > g_spawnvehiclesaround_mil_current_fokker)))
			{
				//Give specific color to some of spawned planes.
				if (g_spawnvehiclesaround_mil_current_fokker > 0) {
					randvar = random() * 20;
					if (randvar < 3.33) {
						//Purple mixed with red
						self.colormap = (1024 + 8 + 4 * 16);
					} else if (randvar < 6.66) {
						//Magenta mixed with red
						self.colormap = (1024 + 9 + 4 * 16);
					} else if (randvar < 10) {
						//RoseMagenta
						self.colormap = (1024 + 10 + 10 * 16);
					}
				}
				//Otherwise we use the regular red color.
				spawnfunc_vehicle_fokker();
				g_spawnvehiclesaround_mil_current_fokker = g_spawnvehiclesaround_mil_current_fokker + 1;
				//dprint("spawn fokker\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilbiplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_eindecker))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_eindecker > g_spawnvehiclesaround_mil_current_eindecker)
			|| (randvar == 26))
			&& (autocvar_g_spawnvehiclesaround_mil_max_eindecker > g_spawnvehiclesaround_mil_current_eindecker)))
			{
				//Give specific color to some of spawned planes.
				if (g_spawnvehiclesaround_mil_current_eindecker > 0) {
					randvar = random();
					if (randvar > 0.3) {
						//Green
						self.colormap = (1024 + 7 + 7 * 16);
					}
				}
				//Otherwise we use the regular tan color.
				spawnfunc_vehicle_eindecker();
				g_spawnvehiclesaround_mil_current_eindecker = g_spawnvehiclesaround_mil_current_eindecker + 1;
				//dprint("spawn eindecker\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilbiplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_sopwith))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_sopwith > g_spawnvehiclesaround_mil_current_sopwith)
			|| (randvar == 14))
			&& (autocvar_g_spawnvehiclesaround_mil_max_sopwith > g_spawnvehiclesaround_mil_current_sopwith)))
			{
				//Give specific color to some of spawned planes.
				randvar = random() * 20;
				if (randvar < 2) {
					//Orange
					self.colormap = (1024 + 1 + 1 * 16);
				} else if (randvar < 4) {
					//Another Orange
					self.colormap = (1024 + 14 + 14 * 16);
				} else if (randvar < 6) {
					//Combo
					self.colormap = (1024 + 1 + 14 * 16);
				} else if (randvar < 8) {
					//Combo with yellow
					self.colormap = (1024 + 1 + 12 * 16);
				} else if (randvar < 10) {
					//Combo with yellow
					self.colormap = (1024 + 14 + 12 * 16);
				} else if (randvar < 12) {
					//Combo with oranges
					self.colormap = (1024 + 1 + 14 * 16);
				} else if (randvar < 14) {
					//Combo with green
					self.colormap = (1024 + 14 + 7 * 16);	
				} else if (randvar < 16) {
					//Green
					self.colormap = (1024 + 7 + 7 * 16);
				} else if (randvar < 18) {
					//Blue
					self.colormap = (1024 + 5 + 5 * 16);
				}
				//Otherwise we use the regular tan color.
				spawnfunc_vehicle_sopwith();
				g_spawnvehiclesaround_mil_current_sopwith = g_spawnvehiclesaround_mil_current_sopwith + 1;
				//dprint("spawn sopwith\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilmonoplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_raptor))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_raptor > g_spawnvehiclesaround_mil_current_raptor)
			|| (randvar == 15))
			&& (autocvar_g_spawnvehiclesaround_mil_max_raptor > g_spawnvehiclesaround_mil_current_raptor)))
			{
				spawnfunc_vehicle_raptor();
				g_spawnvehiclesaround_mil_current_raptor = g_spawnvehiclesaround_mil_current_raptor + 1;
				//dprint("spawn raptor\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilmonoplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_mraptor))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_mraptor > g_spawnvehiclesaround_mil_current_mraptor)
			|| (randvar == 24))
			&& (autocvar_g_spawnvehiclesaround_mil_max_mraptor > g_spawnvehiclesaround_mil_current_mraptor)))
			{
				spawnfunc_vehicle_mraptor();
				g_spawnvehiclesaround_mil_current_mraptor = g_spawnvehiclesaround_mil_current_mraptor + 1;
				//dprint("spawn mraptor\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilmonoplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_shundi))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_shundi > g_spawnvehiclesaround_mil_current_shundi)
			|| (randvar == 27))
			&& (autocvar_g_spawnvehiclesaround_mil_max_shundi > g_spawnvehiclesaround_mil_current_shundi)))
			{
				spawnfunc_vehicle_shundi();
				g_spawnvehiclesaround_mil_current_shundi = g_spawnvehiclesaround_mil_current_shundi + 1;
				//dprint("spawn shundi\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilmonoplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_shenzong))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_shenzong > g_spawnvehiclesaround_mil_current_shenzong)
			|| (randvar == 28))
			&& (autocvar_g_spawnvehiclesaround_mil_max_shenzong > g_spawnvehiclesaround_mil_current_shenzong)))
			{
				spawnfunc_vehicle_shenzong();
				g_spawnvehiclesaround_mil_current_shenzong = g_spawnvehiclesaround_mil_current_shenzong + 1;
				//dprint("spawn shenzong\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilheli && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_r22heli))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_r22heli > g_spawnvehiclesaround_mil_current_r22heli)
			|| (randvar == 16))
			&& (autocvar_g_spawnvehiclesaround_mil_max_r22heli > g_spawnvehiclesaround_mil_current_r22heli)))
			{
				if ((((autocvar_g_spawnvehiclesaround_mil_atleast > 0)
				|| (autocvar_g_spawnvehiclesaround_mil_atleast_r22heli > 0))
				&& (g_spawnvehiclesaround_mil_current_r22heli_a < 1))
				|| (g_spawnvehiclesaround_mil_current_r22heli < 1))
				{
					//Default
					g_spawnvehiclesaround_mil_current_r22heli_a = g_spawnvehiclesaround_mil_current_r22heli_a + 1;
				} else if 
				(((autocvar_g_spawnvehiclesaround_mil_atleast > 0)
				|| (autocvar_g_spawnvehiclesaround_mil_atleast_r22heli > 0))
				&& (g_spawnvehiclesaround_mil_current_r22heli_b < 1))
				{
					self.spawnflags = 192;
					g_spawnvehiclesaround_mil_current_r22heli_b = g_spawnvehiclesaround_mil_current_r22heli_b + 1;
				}  else if 
				(((autocvar_g_spawnvehiclesaround_mil_atleast > 0)
				|| (autocvar_g_spawnvehiclesaround_mil_atleast_r22heli > 0))
				&& (g_spawnvehiclesaround_mil_current_r22heli_c < 1))
				{
					self.spawnflags = 128;
					self.colormap = 1024;
					g_spawnvehiclesaround_mil_current_r22heli_c = g_spawnvehiclesaround_mil_current_r22heli_c + 1;
				} else {
					//Random arms
					randvar = random();
					if (randvar > 0.75) {
						self.spawnflags = 192;
						g_spawnvehiclesaround_mil_current_r22heli_b = g_spawnvehiclesaround_mil_current_r22heli_b + 1;
					} else if (randvar < 0.25) {
						self.spawnflags = 128;
						self.colormap = 1024;
						g_spawnvehiclesaround_mil_current_r22heli_c = g_spawnvehiclesaround_mil_current_r22heli_c + 1;
					} else {
						g_spawnvehiclesaround_mil_current_r22heli_a = g_spawnvehiclesaround_mil_current_r22heli_a + 1;
					}
				}
				
				spawnfunc_vehicle_r22heli_milspec();
				g_spawnvehiclesaround_mil_current_r22heli = g_spawnvehiclesaround_mil_current_r22heli + 1;
				//dprint("spawn r22heli\n");
			//////
			} else if(autocvar_g_spawnvehiclesaround_allowmilheli && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_h125heli))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_h125heli > g_spawnvehiclesaround_mil_current_h125heli)
			|| (randvar == 29))
			&& (autocvar_g_spawnvehiclesaround_mil_max_h125heli > g_spawnvehiclesaround_mil_current_h125heli)))
			{
				if ((((autocvar_g_spawnvehiclesaround_mil_atleast > 0)
				|| (autocvar_g_spawnvehiclesaround_mil_atleast_h125heli > 0))
				&& (g_spawnvehiclesaround_mil_current_h125heli_a < 1))
				|| (g_spawnvehiclesaround_mil_current_h125heli < 1))
				{
					//Default
					g_spawnvehiclesaround_mil_current_h125heli_a = g_spawnvehiclesaround_mil_current_h125heli_a + 1;
				} else if 
				(((autocvar_g_spawnvehiclesaround_mil_atleast > 0)
				|| (autocvar_g_spawnvehiclesaround_mil_atleast_h125heli > 0))
				&& (g_spawnvehiclesaround_mil_current_h125heli_b < 1))
				{
					self.spawnflags = 192;
					g_spawnvehiclesaround_mil_current_h125heli_b = g_spawnvehiclesaround_mil_current_h125heli_b + 1;
				}  else if 
				(((autocvar_g_spawnvehiclesaround_mil_atleast > 0)
				|| (autocvar_g_spawnvehiclesaround_mil_atleast_h125heli > 0))
				&& (g_spawnvehiclesaround_mil_current_h125heli_c < 1))
				{
					self.spawnflags = 128;
					self.colormap = 1024;
					g_spawnvehiclesaround_mil_current_h125heli_c = g_spawnvehiclesaround_mil_current_h125heli_c + 1;
				} else {
					//Random arms
					randvar = random();
					if (randvar > 0.75) {
						self.spawnflags = 192;
						g_spawnvehiclesaround_mil_current_h125heli_b = g_spawnvehiclesaround_mil_current_h125heli_b + 1;
					} else if (randvar < 0.25) {
						self.spawnflags = 128;
						self.colormap = 1024;
						g_spawnvehiclesaround_mil_current_h125heli_c = g_spawnvehiclesaround_mil_current_h125heli_c + 1;
					} else {
						g_spawnvehiclesaround_mil_current_h125heli_a = g_spawnvehiclesaround_mil_current_h125heli_a + 1;
					}
				}
				
				spawnfunc_vehicle_h125heli_milspec();
				g_spawnvehiclesaround_mil_current_h125heli = g_spawnvehiclesaround_mil_current_h125heli + 1;
				//dprint("spawn h125heli\n");
			
			//////
			} else if(autocvar_g_spawnvehiclesaround_allowmilmonoplanes && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_aerocommander))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_aerocommander > g_spawnvehiclesaround_mil_current_aerocommander)
			|| (randvar == 20))
			&& (autocvar_g_spawnvehiclesaround_mil_max_aerocommander > g_spawnvehiclesaround_mil_current_aerocommander)))
			{	
				spawnfunc_vehicle_aerocommander_milspec();
				g_spawnvehiclesaround_mil_current_aerocommander = g_spawnvehiclesaround_mil_current_aerocommander + 1;
				//dprint("spawn aerocommander\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmilheli && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_blackhawk))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_blackhawk > g_spawnvehiclesaround_mil_current_blackhawk)
			|| (randvar == 18))
			&& (autocvar_g_spawnvehiclesaround_mil_max_blackhawk > g_spawnvehiclesaround_mil_current_blackhawk)))
			{
				//64 = forward miniguns
				//128 = forward .50s
				//256 = .50 miniguns
				//512 = side pintel .50s
				if (g_spawnvehiclesaround_mil_current_blackhawk < 1) {
					self.spawnflags = 1472; //448 plus 1024 //Lots o guns
				} else {
					randvar = random();
					if (randvar > 0.90) {
						self.spawnflags = 1472; //.50s .50minis(fwd sd). Minis.
					} else if (randvar > 0.75) {
						self.colormap = (1024 + 7 + 3 * 16); //Light olive drab
						self.spawnflags = 1280; //.50 Minigun forward and side 
					} else if (randvar > 0.50) {
						self.spawnflags = 2112; //Minigun forward and side 
					} else {
						self.colormap = (1024 + 12 + 1 * 16); //Tan
						self.spawnflags = 640; //.50 forward and side
					}
				}
					
				spawnfunc_vehicle_blackhawk_milspec();
				g_spawnvehiclesaround_mil_current_blackhawk = g_spawnvehiclesaround_mil_current_blackhawk + 1;
				//dprint("spawn blackhawk\n");
			} else if(autocvar_g_spawnvehiclesaround_allowmiltechnicals && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_pickuptruck))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_pickuptruck > g_spawnvehiclesaround_mil_current_pickuptruck)
			|| (randvar == 17))
			&& (autocvar_g_spawnvehiclesaround_mil_max_pickuptruck > g_spawnvehiclesaround_mil_current_pickuptruck)))
			{
					//Random arms
					randvar = random();
					if (randvar > 0.95) {
						self.spawnflags = 192;
					} else if (randvar > 0.80) {
						self.spawnflags = 128;
						self.colormap = 1024;
					}
				
				spawnfunc_vehicle_pickuptruck_milspec();
				g_spawnvehiclesaround_mil_current_pickuptruck = g_spawnvehiclesaround_mil_current_pickuptruck + 1;
				//dprint("spawn pickuptruck\n");
			} else if (autocvar_g_spawnvehiclesaround_allowtanks && ((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_tanka7v))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_tanka7v > g_spawnvehiclesaround_mil_current_tanka7v)
			|| (randvar == 25))
			&& (autocvar_g_spawnvehiclesaround_mil_max_tanka7v > g_spawnvehiclesaround_mil_current_tanka7v)))
			{
				spawnfunc_vehicle_tanka7v();
				g_spawnvehiclesaround_mil_current_tanka7v = g_spawnvehiclesaround_mil_current_tanka7v + 1;
				//dprint("spawn tank\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_mil_atleast > 0) && (autocvar_g_spawnvehiclesaround_mil_atleast > g_spawnvehiclesaround_mil_current_bumblebee))
			|| (autocvar_g_spawnvehiclesaround_mil_atleast_bumblebee > g_spawnvehiclesaround_mil_current_bumblebee))
			&& (autocvar_g_spawnvehiclesaround_mil_max_bumblebee > g_spawnvehiclesaround_mil_current_bumblebee))
			{
				spawnfunc_vehicle_bumblebee();
				g_spawnvehiclesaround_mil_current_bumblebee = g_spawnvehiclesaround_mil_current_bumblebee + 1;
				
				g_spawnvehiclesaround_mil_atleast_current = g_spawnvehiclesaround_mil_atleast_current + 1;
				//Gone through the whole list
				
				//dprint("spawn bumblebee lst\n");
			} else if (autocvar_g_spawnvehiclesaround_mil_max_bumblebee > g_spawnvehiclesaround_mil_current_bumblebee) {
				spawnfunc_vehicle_bumblebee();
				g_spawnvehiclesaround_mil_current_bumblebee = g_spawnvehiclesaround_mil_current_bumblebee + 1;
				
				//dprint("spawn bumblebee\n");
			}
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnvehiclesaround_mil_current = g_spawnvehiclesaround_mil_current + 1;
		}
	}
	return TRUE;
}


float Vh_Spawn_Vehicle_Civ(void)
{
	if (g_spawnvehiclesaround_civ_current >= autocvar_g_spawnvehiclesaround_civ_max) {
		//dprint("We have enough civ vehicles\n");
		return 0;
	}
	
	float spawns_we_want = autocvar_g_spawnvehiclesaround_civ_per;
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Vehicle\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = Vh_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;

			self = e;
			
			float randvar;
			//If we are done spawning the minumum of various vehicle types, then will randomly spawn vehicles
			if ((autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_atleast_current)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_challenger > g_spawnvehiclesaround_civ_current_challenger)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_cruizer > g_spawnvehiclesaround_civ_current_cruizer)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_sportster > g_spawnvehiclesaround_civ_current_sportster)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_sparrow > g_spawnvehiclesaround_civ_current_sparrow)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_farman > g_spawnvehiclesaround_civ_current_farman)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_r22heli > g_spawnvehiclesaround_civ_current_r22heli)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_blackhawk > g_spawnvehiclesaround_civ_current_blackhawk)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_aerocommander > g_spawnvehiclesaround_civ_current_aerocommander)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_fastcar > g_spawnvehiclesaround_civ_current_fastcar)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_speedcar > g_spawnvehiclesaround_civ_current_speedcar)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_cruizerlimo > g_spawnvehiclesaround_civ_current_cruizerlimo)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_racer > g_spawnvehiclesaround_civ_current_racer)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_sedan > g_spawnvehiclesaround_civ_current_sedan)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_yugo > g_spawnvehiclesaround_civ_current_yugo)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_pickuptruck > g_spawnvehiclesaround_civ_current_pickuptruck)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_smalltruck > g_spawnvehiclesaround_civ_current_smalltruck)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_bulldozer > g_spawnvehiclesaround_civ_current_bulldozer)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_submersible > g_spawnvehiclesaround_civ_current_submersible)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_speedboat > g_spawnvehiclesaround_civ_current_speedboat)
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_h125heli > g_spawnvehiclesaround_civ_current_h125heli)
			) {
				randvar = 0;
				//dprint("rand not enabled\n");
			} else {
				//dprint("rand enabled\n");
				if ( (teamplay || (autocvar_g_spawn_around_findbases_nonteamplay && autocvar_g_spawn_around_findbases_nonteamplay_vehiclesandmg))
				&& (g_spawnmountedgunsaround_found1
				+ g_spawnmountedgunsaround_found2
				+ g_spawnmountedgunsaround_found3
				+ g_spawnmountedgunsaround_found4 > 1)
				){
					float t1l, t2l;
					t1l = vlen(e.origin - g_spawnmountedgunsaround_base1);
					t2l = vlen(e.origin - g_spawnmountedgunsaround_base2);
					//Shortest wins
					if (t1l < t2l)
						randvar = Vh_Select_CivVehic_Team1();
					else
						randvar = Vh_Select_CivVehic_Team2();
				} else {
					randvar = Vh_Select_CivVehic();
				}
			}
			
			if (randvar == -100) 
			{
				//Nothing was picked during a team pick
				//This can happen when you set one team to have vehicles and the other not to
				//Currently, for team vehicles with nothing set we bail
				//But with non team vehicles we select a failsafe
				remove(self); //Self currently is e, it is reset below
			} else if ((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_challenger))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_challenger > g_spawnvehiclesaround_civ_current_challenger)
			|| (randvar == 1))
			&& (autocvar_g_spawnvehiclesaround_civ_max_challenger > g_spawnvehiclesaround_civ_current_challenger))
			{
				spawnfunc_vehicle_challenger();
				g_spawnvehiclesaround_civ_current_challenger = g_spawnvehiclesaround_civ_current_challenger + 1;
				//dprint("spawn challenger\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_cruizer))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_cruizer > g_spawnvehiclesaround_civ_current_cruizer)
			|| (randvar == 2))
			&& (autocvar_g_spawnvehiclesaround_civ_max_cruizer > g_spawnvehiclesaround_civ_current_cruizer))
			{
				//Give random color to a small percentage of the spawned cars.
				randvar = random() * 20;
				if (randvar < 5) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				}
				spawnfunc_vehicle_cruizer();
				g_spawnvehiclesaround_civ_current_cruizer = g_spawnvehiclesaround_civ_current_cruizer + 1;
				//dprint("spawn cruizer\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_sportster))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_sportster > g_spawnvehiclesaround_civ_current_sportster)
			|| (randvar == 3))
			&& (autocvar_g_spawnvehiclesaround_civ_max_sportster > g_spawnvehiclesaround_civ_current_sportster))
			{
				//Give random color to half of the spawned cars.
				randvar = random() * 20;
				if (randvar < 10) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				}
				spawnfunc_vehicle_sportster();
				g_spawnvehiclesaround_civ_current_sportster = g_spawnvehiclesaround_civ_current_sportster + 1;
				//dprint("spawn sportster\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_blackhawk))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_blackhawk > g_spawnvehiclesaround_civ_current_blackhawk)
			|| (randvar == 8))
			&& (autocvar_g_spawnvehiclesaround_civ_max_blackhawk > g_spawnvehiclesaround_civ_current_blackhawk))
			{
				if (random() < 0.25) {
					//Fire fighting helicopter
					if (g_spawnvehiclesaround_civ_current_blackhawk_a < 1) {
						self.colormap = (1024 + 1 + 1 * 16);
					} else if (g_spawnvehiclesaround_civ_current_blackhawk_a < 2) {
						self.colormap = (1024 + 12 + 12 * 16);
					} else if (g_spawnvehiclesaround_civ_current_blackhawk_a < 3) {
						self.colormap = (1024 + 14 + 14 * 16);
					} else if (g_spawnvehiclesaround_civ_current_blackhawk_a < 4) {
						self.colormap = (1024 + 4 + 4 * 16);
					} else {
						if (random() < 0.5) {
							self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
						} else {
							self.colormap = (1024 + 1 + 1 * 16);
						}
					}
					self.spawnflags = 32; //Add watercannon (deluge gun)
					g_spawnvehiclesaround_civ_current_blackhawk_a = g_spawnvehiclesaround_civ_current_blackhawk_a + 1;
				}
				spawnfunc_vehicle_blackhawk();
				g_spawnvehiclesaround_civ_current_blackhawk = g_spawnvehiclesaround_civ_current_blackhawk + 1;
				//dprint("spawn blackhawk\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_aerocommander))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_aerocommander > g_spawnvehiclesaround_civ_current_aerocommander)
			|| (randvar == 5))
			&& (autocvar_g_spawnvehiclesaround_civ_max_aerocommander > g_spawnvehiclesaround_civ_current_aerocommander))
			{
				if (random() > 0.65) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				} 
				spawnfunc_vehicle_aerocommander();
				g_spawnvehiclesaround_civ_current_aerocommander = g_spawnvehiclesaround_civ_current_aerocommander + 1;
				//dprint("spawn aerocommander\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_sparrow))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_sparrow > g_spawnvehiclesaround_civ_current_sparrow)
			|| (randvar == 6))
			&& (autocvar_g_spawnvehiclesaround_civ_max_sparrow > g_spawnvehiclesaround_civ_current_sparrow))
			{
				if (random() < 0.25) {
					//Fire marshall's helicopter
					if (g_spawnvehiclesaround_civ_current_sparrow_a < 1) {
						self.colormap = (1024 + 4 + 4 * 16);
					} else if (g_spawnvehiclesaround_civ_current_sparrow_a < 2) {
						self.colormap = (1024 + 12 + 12 * 16);
					} else if (g_spawnvehiclesaround_civ_current_sparrow_a < 3) {
						self.colormap = (1024 + 1 + 1 * 16);
					} else if (g_spawnvehiclesaround_civ_current_sparrow_a < 4) {
						self.colormap = (1024 + 14 + 14 * 16);
					} else {
						if (random() < 0.5) {
							self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
						} else {
							self.colormap = (1024 + 4 + 4 * 16);
						}
					}
					self.spawnflags = 32; //Add watercannon (deluge gun)
					g_spawnvehiclesaround_civ_current_sparrow_a = g_spawnvehiclesaround_civ_current_sparrow_a + 1;
				}
				spawnfunc_vehicle_sparrow();
				g_spawnvehiclesaround_civ_current_sparrow = g_spawnvehiclesaround_civ_current_sparrow + 1;
				//dprint("spawn sparrow\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_farman))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_farman > g_spawnvehiclesaround_civ_current_farman)
			|| (randvar == 4))
			&& (autocvar_g_spawnvehiclesaround_civ_max_farman > g_spawnvehiclesaround_civ_current_farman))
			{
				spawnfunc_vehicle_farman();
				g_spawnvehiclesaround_civ_current_farman = g_spawnvehiclesaround_civ_current_farman + 1;
				//dprint("spawn farman\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_r22heli))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_r22heli > g_spawnvehiclesaround_civ_current_r22heli)
			|| (randvar == 7))
			&& (autocvar_g_spawnvehiclesaround_civ_max_r22heli > g_spawnvehiclesaround_civ_current_r22heli))
			{
				//Give random color
				randvar = random() * 100;
				if (randvar > 80) {
					//Red
					self.colormap = (1024 + 4 + 4 * 16);
				} else if (randvar > 75) {
					//Blue
					self.colormap = (1024 + 5 + 5 * 16);
				} else if (randvar > 70) {
					self.colormap = (1024 + 8 + 8 * 16);
				} else if (randvar > 50) {
					self.colormap = (1024 + 9 + 9 * 16);
				} else if (randvar > 10) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				} else {
					self.colormap = 1023; //Hack for nothing. Works untill 254th player connects
				}
				
				spawnfunc_vehicle_r22heli();
				g_spawnvehiclesaround_civ_current_r22heli = g_spawnvehiclesaround_civ_current_r22heli + 1;
				//dprint("spawn r22heli\n");
			//////
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_h125heli))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_h125heli > g_spawnvehiclesaround_civ_current_h125heli)
			|| (randvar == 20))
			&& (autocvar_g_spawnvehiclesaround_civ_max_h125heli > g_spawnvehiclesaround_civ_current_h125heli))
			{
				//Give random color
				randvar = random() * 100;
				if (randvar > 95) {
					//Red
					self.colormap = (1024 + 4 + 4 * 16);
				} else if (randvar > 90) {
					//Blue
					self.colormap = (1024 + 5 + 5 * 16);
				} else if (randvar > 85) {
					self.colormap = (1024 + 8 + 8 * 16);
				} else if (randvar > 80) {
					self.colormap = (1024 + 9 + 9 * 16);
				} else if (randvar > 75) {
					self.colormap = (1024 + 1 + 1 * 16);
				} else if (randvar > 70) {
					self.colormap = (1024 + 2 + 2 * 16);
				} else if (randvar > 65) {
					self.colormap = (1024 + 3 + 3 * 16);
				} else if (randvar > 60) {
					self.colormap = (1024 + 6 + 6 * 16);
				} else if (randvar > 55) {
					self.colormap = (1024 + 7 + 7 * 16);
				} else if (randvar > 50) {
					self.colormap = (1024 + 10 + 10 * 16);
				} else if (randvar > 45) {
					self.colormap = (1024 + 11 + 11 * 16);
				} else if (randvar > 40) {
					self.colormap = (1024 + 12 + 12 * 16);
				} else if (randvar > 55) {
					self.colormap = (1024 + 13 + 13 * 16);
				} else if (randvar > 50) {
					self.colormap = (1024 + 14 + 14 * 16);
				} else if (randvar > 10) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				} else {
					self.colormap = 1023; //Hack for nothing. Works untill 254th player connects
				}
				
				spawnfunc_vehicle_h125heli();
				g_spawnvehiclesaround_civ_current_h125heli = g_spawnvehiclesaround_civ_current_h125heli + 1;
				//dprint("spawn h125heli\n");
			
			//////
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_speedcar))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_speedcar > g_spawnvehiclesaround_civ_current_speedcar)
			|| (randvar == 10))
			&& (autocvar_g_spawnvehiclesaround_civ_max_speedcar > g_spawnvehiclesaround_civ_current_speedcar))
			{
				//Give random color
				randvar = random();
				if (randvar > 0.97) {
					self.colormap = 1023; //Black
				} else if (randvar > 0.58) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				} else if (randvar > 0.56) {
					//White
					self.colormap = 1024;
				} else if (randvar > 0.50) {
					//Rose magenta
					self.colormap = (1024 + 10 + 10 * 16);
				} else if (randvar > 0.45) {
					//Rose magenta
					self.colormap = (1024 + 4 + 10 * 16);	
				} else {
					self.colormap = 1092;
					//Red
				}
				spawnfunc_vehicle_speedcar();
				g_spawnvehiclesaround_civ_current_speedcar = g_spawnvehiclesaround_civ_current_speedcar + 1;
				//dprint("spawn speedcar\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_fastcar))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_fastcar > g_spawnvehiclesaround_civ_current_fastcar)
			|| (randvar == 9))
			&& (autocvar_g_spawnvehiclesaround_civ_max_fastcar > g_spawnvehiclesaround_civ_current_fastcar))
			{
				//Give random color to most of the spawned cars.
				randvar = random() * 20;
				if (randvar < 16) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				}
				spawnfunc_vehicle_fastcar();
				g_spawnvehiclesaround_civ_current_fastcar = g_spawnvehiclesaround_civ_current_fastcar + 1;
				//dprint("spawn fastcar\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_cruizerlimo))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_cruizerlimo > g_spawnvehiclesaround_civ_current_cruizerlimo)
			|| (randvar == 11))
			&& (autocvar_g_spawnvehiclesaround_civ_max_cruizerlimo > g_spawnvehiclesaround_civ_current_cruizerlimo))
			{	
				//Black or white color
				if (random() > 0.34) {
					self.colormap = 1024; //White
				} else {
					self.colormap = 1023; //Hack for black (no color map)
				}
				spawnfunc_vehicle_cruizerlimo();
				g_spawnvehiclesaround_civ_current_cruizerlimo = g_spawnvehiclesaround_civ_current_cruizerlimo + 1;
				//dprint("spawn cruizerlimo\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_racer))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_racer > g_spawnvehiclesaround_civ_current_racer)
			|| (randvar == 12))
			&& (autocvar_g_spawnvehiclesaround_civ_max_racer > g_spawnvehiclesaround_civ_current_racer))
			{
				spawnfunc_vehicle_racer();
				g_spawnvehiclesaround_civ_current_racer = g_spawnvehiclesaround_civ_current_racer + 1;
				//dprint("spawn racer\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_sedan))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_sedan > g_spawnvehiclesaround_civ_current_sedan)
			|| (randvar == 13))
			&& (autocvar_g_spawnvehiclesaround_civ_max_sedan > g_spawnvehiclesaround_civ_current_sedan))
			{
				//Give random color
				randvar = random();
				if (randvar > 0.85) {
					self.colormap = 1023; //Black
				} else if (randvar > 0.58) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				} else if (randvar > 0.30) {
					//White
					self.colormap = 1024;
				} else if (randvar > 0.20) {
					//Yellowish Cream
					self.colormap = 1036;
				} else if (randvar > 0.10) {
					//Orangeish Cream
					self.colormap = 1038;
				} else {
					self.colormap = 1025;
					//Cream
				}
				spawnfunc_vehicle_sedan();
				g_spawnvehiclesaround_civ_current_sedan = g_spawnvehiclesaround_civ_current_sedan + 1;
				//dprint("spawn sedan\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_yugo))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_yugo > g_spawnvehiclesaround_civ_current_yugo)
			|| (randvar == 14))
			&& (autocvar_g_spawnvehiclesaround_civ_max_yugo > g_spawnvehiclesaround_civ_current_yugo))
			{
				//Give random color
				randvar = random();
				if (randvar > 0.9) {
					self.colormap = 1023; //Black
				} else if (randvar > 0.8) {
					//White
					self.colormap = 1024;
				} else if (randvar > 0.7) {
					//Red
					self.colormap = 1092;
				} else if (randvar > 0.6) {
					//Green
					self.colormap = 1075;
				} else if (randvar > 0.5) {
					//Blue
					self.colormap = 1211;
				} else if (randvar > 0.4) {
					//Reddish Orange
					self.colormap = 1252;		
				} else if (randvar > 0.3) {
					//Blue Purple
					self.colormap = 1163;
				} else {
					//Random
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				}
				spawnfunc_vehicle_yugo();
				g_spawnvehiclesaround_civ_current_yugo = g_spawnvehiclesaround_civ_current_yugo + 1;
				//dprint("spawn yugo\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_smalltruck))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_smalltruck > g_spawnvehiclesaround_civ_current_smalltruck)
			|| (randvar == 16))
			&& (autocvar_g_spawnvehiclesaround_civ_max_smalltruck > g_spawnvehiclesaround_civ_current_smalltruck))
			{
				//Give random color
				randvar = random();
				if (randvar > 0.90) {
					self.colormap = 1023; //Black
				} else if (randvar > 0.85) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				} else if (randvar > 0.75) {
					//Orangeish
					self.colormap = (1024 + 14 + 12 * 16);
				} else if (randvar > 0.60) {
					//Orange
					self.colormap = (1024 + 14 + 14 * 16);
				} else if (randvar > 0.15) {
					//White
					self.colormap = 1024;
				} else if (randvar > 0.10) {
					//Yellowish Cream
					self.colormap = 1036;
				} else if (randvar > 0.6) {
					//Orangeish Cream
					self.colormap = 1038;
				} else {
					self.colormap = 1025;
					//Cream
				}
				spawnfunc_vehicle_smalltruck();
				g_spawnvehiclesaround_civ_current_smalltruck = g_spawnvehiclesaround_civ_current_smalltruck + 1;
				//dprint("spawn smalltruck\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_bulldozer))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_bulldozer > g_spawnvehiclesaround_civ_current_bulldozer)
			|| (randvar == 17))
			&& (autocvar_g_spawnvehiclesaround_civ_max_bulldozer > g_spawnvehiclesaround_civ_current_bulldozer))
			{
				spawnfunc_vehicle_bulldozer();
				g_spawnvehiclesaround_civ_current_bulldozer = g_spawnvehiclesaround_civ_current_bulldozer + 1;
				//dprint("spawn bulldozer\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_submersible))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_submersible > g_spawnvehiclesaround_civ_current_submersible)
			|| (randvar == 18))
			&& (autocvar_g_spawnvehiclesaround_civ_max_submersible > g_spawnvehiclesaround_civ_current_submersible))
			{
				local vector myoldorigin;
				local vector mywaterorigin;
				mywaterorigin = '0 0 0';
				myoldorigin = self.origin;
				
				mywaterorigin = Vh_Select_Spawn_Point_Water();
				if(mywaterorigin != '0 0 0') {
					//print("*****Found Water Origin*****\n");
					self.origin = mywaterorigin;
				} else {
					mywaterorigin = Vh_Select_Spawn_Point_WaterOrSlime();
					if(mywaterorigin != '0 0 0') {
						//print("*****Found WaterOrSlime Origin*****\n");
						self.origin = mywaterorigin;
					} else {
						mywaterorigin = Vh_Select_Spawn_Point_AnyLiquid();
						if(mywaterorigin != '0 0 0') {
							//print("*****Found AnyLiquid Origin*****\n");
							self.origin = mywaterorigin;
						} else {
							//print("-----DID Not Find Water Origin-----\n");
							self.origin = myoldorigin; //Just in case
						}
					}
				}
				
				if (random() < 0.25) {
					//Fire marshall's submersible
					self.spawnflags = 32; //Add watercannon (deluge gun)
				}
				//newspot
				spawnfunc_vehicle_submersible();
				g_spawnvehiclesaround_civ_current_submersible = g_spawnvehiclesaround_civ_current_submersible + 1;
				//dprint("spawn submersible\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_speedboat))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_speedboat > g_spawnvehiclesaround_civ_current_speedboat)
			|| (randvar == 19))
			&& (autocvar_g_spawnvehiclesaround_civ_max_speedboat > g_spawnvehiclesaround_civ_current_speedboat))
			{
				local vector myoldorigin;
				local vector mywaterorigin;
				mywaterorigin = '0 0 0';
				myoldorigin = self.origin;
				
				mywaterorigin = Vh_Select_Spawn_Point_Water();
				if(mywaterorigin != '0 0 0') {
					//print("*****Found Water Origin*****\n");
					self.origin = mywaterorigin;
				} else {
					mywaterorigin = Vh_Select_Spawn_Point_WaterOrSlime();
					if(mywaterorigin != '0 0 0') {
						//print("*****Found WaterOrSlime Origin*****\n");
						self.origin = mywaterorigin;
					} else {
						mywaterorigin = Vh_Select_Spawn_Point_AnyLiquid();
						if(mywaterorigin != '0 0 0') {
							//print("*****Found AnyLiquid Origin*****\n");
							self.origin = mywaterorigin;
						} else {
							//print("-----DID Not Find Water Origin-----\n");
							self.origin = myoldorigin; //Just in case
						}
					}
				}
				
				if (random() < 0.10) {
					//Fire marshall's speedboat
					self.spawnflags = 32; //Add watercannon (deluge gun)
				} else {
					//Give random color
					randvar = random() * 100;
					if (randvar > 90) {
						self.colormap = (1024 + 2 + 2 * 16);
					} else if (randvar > 80) {
						//Blue
						self.colormap = (1024 + 5 + 5 * 16);
					} else if (randvar > 70) {
						self.colormap = (1024 + 8 + 8 * 16);
					} else if (randvar > 60) {
						self.colormap = (1024 + 9 + 9 * 16);
					} else if (randvar > 50) {
						self.colormap = (1024 + 3 + 3 * 16);
					} else if (randvar > 45) {
						self.colormap = (1024 + 6 + 6 * 16);
					} else if (randvar > 40) {
						self.colormap = (1024 + 7 + 7 * 16);
					} else if (randvar > 35) {
						self.colormap = (1024 + 8 + 8 * 16);
					} else if (randvar > 30) {
						self.colormap = (1024 + 10 + 10 * 16);
					} else if (randvar > 25) {
						self.colormap = (1024 + 11 + 11 * 16);			
					} else if (randvar > 20) {
						self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
					} else if (randvar > 10) {
						//Defaults
					} else {
						//White
						self.colormap = 1024;
					}
				}
				//newspot
				spawnfunc_vehicle_speedboat();
				g_spawnvehiclesaround_civ_current_speedboat = g_spawnvehiclesaround_civ_current_speedboat + 1;
				//dprint("spawn speedboat\n");
			} else if((
			((autocvar_g_spawnvehiclesaround_civ_atleast > 0) && (autocvar_g_spawnvehiclesaround_civ_atleast > g_spawnvehiclesaround_civ_current_pickuptruck))
			|| (autocvar_g_spawnvehiclesaround_civ_atleast_pickuptruck > g_spawnvehiclesaround_civ_current_pickuptruck))
			&& (autocvar_g_spawnvehiclesaround_civ_max_pickuptruck > g_spawnvehiclesaround_civ_current_pickuptruck))
			{
				//Give random color to almost all of the spawned cars.
				randvar = random() * 20;
				if (randvar < 18) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				}
				spawnfunc_vehicle_pickuptruck();
				
				g_spawnvehiclesaround_civ_current_pickuptruck = g_spawnvehiclesaround_civ_current_pickuptruck + 1;
				
				g_spawnvehiclesaround_civ_atleast_current = g_spawnvehiclesaround_civ_atleast_current + 1;
				//Gone through the whole list
				
				//dprint("spawn pickuptruck lst\n");
			} else if (autocvar_g_spawnvehiclesaround_civ_max_pickuptruck > g_spawnvehiclesaround_civ_current_pickuptruck) {
				//Give random color to almost all of the spawned cars.
				randvar = random() * 20;
				if (randvar < 18) {
					self.colormap = (1024 + (floor(random() * 15)) + (floor(random() * 15)) * 16);
				}
				spawnfunc_vehicle_pickuptruck();
				
				g_spawnvehiclesaround_civ_current_pickuptruck = g_spawnvehiclesaround_civ_current_pickuptruck + 1;
				
				//dprint("spawn pickuptruck\n");
			}
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnvehiclesaround_civ_current = g_spawnvehiclesaround_civ_current + 1;
		}
	}
	
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnvehicles_MatchEnd)
{
	Vh_Zero_Out_Vars();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnvehicles_PlayerSpawn)
{
	if (g_spawnvehiclesaround_mil_current >= autocvar_g_spawnvehiclesaround_mil_max)
	if (g_spawnvehiclesaround_civ_current >= autocvar_g_spawnvehiclesaround_civ_max)
	{
		//dprint("We have enough vehicles\n");
		return 0;
	}
	
	if not(g_spawn_around_foundbases)
	{
		if (teamplay || (autocvar_g_spawn_around_findbases_nonteamplay && autocvar_g_spawn_around_findbases_nonteamplay_vehiclesandmg))
		{
			Mg_Find_Bases();
			
			g_spawn_around_foundbases = 1;
		}
	}
	
	Vh_Spawn_Vehicle_Civ();
	Vh_Spawn_Vehicle_Mil();
	
	return TRUE;
}


MUTATOR_HOOKFUNCTION(spawnvehicles_BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":spawnvehicles");
	Vh_Zero_Out_Vars();
	return 0;
}

MUTATOR_HOOKFUNCTION(spawnvehicles_BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", Spawn Vehicles");
	return 0;
}

MUTATOR_DEFINITION(mutator_spawnvehicles)
{
	MUTATOR_HOOK(MatchEnd, spawnvehicles_MatchEnd, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerSpawn, spawnvehicles_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, spawnvehicles_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, spawnvehicles_BuildMutatorsPrettyString, CBC_ORDER_ANY);
	
	// this just turns on the cvar.
	MUTATOR_ONADD
	{
		g_spawnvehiclesaround = 1;
	}

	// this just turns off the cvar.
	MUTATOR_ONREMOVE
	{	 
		g_spawnvehiclesaround = 0;
	}

	return 0;
}


//Mounted Weapons
//
//
//
float g_spawnmountedgunsaround;
float autocvar_g_spawnmountedgunsaround_per;
float autocvar_g_spawnmountedgunsaround_max;
float g_spawnmountedgunsaround_current;

float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor;
float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype;

float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_red_amnt;
float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_green_amnt;
float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_cyan_amnt;
float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_magenta_amnt;
			
float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype_continuous_amnt;
float autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype_pulsed_amnt;


float autocvar_g_spawnmountedgunsaround_m134_amnt;
float autocvar_g_spawnmountedgunsaround_gau19_amnt;
float autocvar_g_spawnmountedgunsaround_spadu_amnt;
float autocvar_g_spawnmountedgunsaround_deluge_amnt;
float autocvar_g_spawnmountedgunsaround_t17mm_amnt;
float autocvar_g_spawnmountedgunsaround_browning50_amnt;
float autocvar_g_spawnmountedgunsaround_grail_amnt;
float autocvar_g_spawnmountedgunsaround_autonex_amnt;
float autocvar_g_spawnmountedgunsaround_shlac_amnt;
float autocvar_g_spawnmountedgunsaround_bpcannon_amnt;
float autocvar_g_spawnmountedgunsaround_maxim_amnt;
float autocvar_g_spawnmountedgunsaround_rpk_amnt;
float autocvar_g_spawnmountedgunsaround_lewis_amnt;
float autocvar_g_spawnmountedgunsaround_scorpion_amnt;
float autocvar_g_spawnmountedgunsaround_charbelcher_amnt;
float autocvar_g_spawnmountedgunsaround_batteringram_amnt;
float autocvar_g_spawnmountedgunsaround_siegemortar_amnt;
float autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt;
float autocvar_g_spawnmountedgunsaround_lasercannon_red_amnt;
float autocvar_g_spawnmountedgunsaround_gatling1877_amnt;
float autocvar_g_spawnmountedgunsaround_rpd_amnt;
float autocvar_g_spawnmountedgunsaround_m249para_amnt;
float autocvar_g_spawnmountedgunsaround_pkm_amnt;

float autocvar_g_spawnmountedgunsaround_team1_m134_amnt;
float autocvar_g_spawnmountedgunsaround_team1_gau19_amnt;
float autocvar_g_spawnmountedgunsaround_team1_spadu_amnt;
float autocvar_g_spawnmountedgunsaround_team1_deluge_amnt;
float autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt;
float autocvar_g_spawnmountedgunsaround_team1_browning50_amnt;
float autocvar_g_spawnmountedgunsaround_team1_grail_amnt;
float autocvar_g_spawnmountedgunsaround_team1_autonex_amnt;
float autocvar_g_spawnmountedgunsaround_team1_shlac_amnt;
float autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt;
float autocvar_g_spawnmountedgunsaround_team1_maxim_amnt;
float autocvar_g_spawnmountedgunsaround_team1_rpk_amnt;
float autocvar_g_spawnmountedgunsaround_team1_lewis_amnt;
float autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt;
float autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt;
float autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt;
float autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt;
float autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt;
float autocvar_g_spawnmountedgunsaround_team1_lasercannon_red_amnt;
float autocvar_g_spawnmountedgunsaround_team1_gatling1877_amnt;
float autocvar_g_spawnmountedgunsaround_team1_rpd_amnt;
float autocvar_g_spawnmountedgunsaround_team1_m249para_amnt;
float autocvar_g_spawnmountedgunsaround_team1_pkm_amnt;

float autocvar_g_spawnmountedgunsaround_team2_m134_amnt;
float autocvar_g_spawnmountedgunsaround_team2_gau19_amnt;
float autocvar_g_spawnmountedgunsaround_team2_spadu_amnt;
float autocvar_g_spawnmountedgunsaround_team2_deluge_amnt;
float autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt;
float autocvar_g_spawnmountedgunsaround_team2_browning50_amnt;
float autocvar_g_spawnmountedgunsaround_team2_grail_amnt;
float autocvar_g_spawnmountedgunsaround_team2_autonex_amnt;
float autocvar_g_spawnmountedgunsaround_team2_shlac_amnt;
float autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt;
float autocvar_g_spawnmountedgunsaround_team2_maxim_amnt;
float autocvar_g_spawnmountedgunsaround_team2_rpk_amnt;
float autocvar_g_spawnmountedgunsaround_team2_lewis_amnt;
float autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt;
float autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt;
float autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt;
float autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt;
float autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt;
float autocvar_g_spawnmountedgunsaround_team2_lasercannon_red_amnt;
float autocvar_g_spawnmountedgunsaround_team2_gatling1877_amnt;
float autocvar_g_spawnmountedgunsaround_team2_rpd_amnt;
float autocvar_g_spawnmountedgunsaround_team2_m249para_amnt;
float autocvar_g_spawnmountedgunsaround_team2_pkm_amnt;

vector Mg_Select_Spawn_Point(void)
{
	entity e = spawn();
	e.mins = '-20 -20 -1';
	e.maxs = '20 20 20';

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_WATER | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, 1024, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location for MOUNTEDGUN.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

void Mg_Find_Bases(void)
{
	if ((autocvar_g_spawn_around_findbases_nonteamplay == 2)
	|| (!teamplay && autocvar_g_spawn_around_findbases_nonteamplay)) {
		local vector mybaseorigvec;
		mybaseorigvec = '0 0 0';
		
		if (autocvar_g_spawn_around_findbases_nonteamplay_type == 5)
		{
			//Reverse Extends Y
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base2 = mybaseorigvec;
			g_spawnmountedgunsaround_found2 = 1;
		
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base1 = mybaseorigvec;
			g_spawnmountedgunsaround_found1 = 1;
		
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base4 = mybaseorigvec;
			g_spawnmountedgunsaround_found4 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base3 = mybaseorigvec;
			g_spawnmountedgunsaround_found3 = 1;
		} else if (autocvar_g_spawn_around_findbases_nonteamplay_type == 4)
		{
			//Extends Y
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base1 = mybaseorigvec;
			g_spawnmountedgunsaround_found1 = 1;
		
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base2 = mybaseorigvec;
			g_spawnmountedgunsaround_found2 = 1;
		
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base3 = mybaseorigvec;
			g_spawnmountedgunsaround_found3 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base4 = mybaseorigvec;
			g_spawnmountedgunsaround_found4 = 1;
		} else if (autocvar_g_spawn_around_findbases_nonteamplay_type == 3)
		{
			//Reverse Extends X
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base2 = mybaseorigvec;
			g_spawnmountedgunsaround_found2 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base1 = mybaseorigvec;
			g_spawnmountedgunsaround_found1 = 1;
		
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base4 = mybaseorigvec;
			g_spawnmountedgunsaround_found4 = 1;
		
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base3 = mybaseorigvec;
			g_spawnmountedgunsaround_found3 = 1;
		} else if (autocvar_g_spawn_around_findbases_nonteamplay_type == 2)
		{
			//Extends X
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base1 = mybaseorigvec;
			g_spawnmountedgunsaround_found1 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = (((world.maxs_y - world.mins_y) * 0.5) + world.mins_y); //Center
			g_spawnmountedgunsaround_base2 = mybaseorigvec;
			g_spawnmountedgunsaround_found2 = 1;
		
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base3 = mybaseorigvec;
			g_spawnmountedgunsaround_found3 = 1;
		
			mybaseorigvec_x = (((world.maxs_x - world.mins_x) * 0.5) + world.mins_x); //Center
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base4 = mybaseorigvec;
			g_spawnmountedgunsaround_found4 = 1;
		} else if (autocvar_g_spawn_around_findbases_nonteamplay_type == 1)
		{
			//Reverse Map Extends
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base2 = mybaseorigvec;
			g_spawnmountedgunsaround_found2 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base1 = mybaseorigvec;
			g_spawnmountedgunsaround_found1 = 1;
		
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base4 = mybaseorigvec;
			g_spawnmountedgunsaround_found4 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base3 = mybaseorigvec;
			g_spawnmountedgunsaround_found3 = 1;
		} else {
			//Map Extends
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base1 = mybaseorigvec;
			g_spawnmountedgunsaround_found1 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base2 = mybaseorigvec;
			g_spawnmountedgunsaround_found2 = 1;
		
			mybaseorigvec_x = world.mins_x;
			mybaseorigvec_y = world.maxs_y;
			g_spawnmountedgunsaround_base3 = mybaseorigvec;
			g_spawnmountedgunsaround_found3 = 1;
		
			mybaseorigvec_x = world.maxs_x;
			mybaseorigvec_y = world.mins_y;
			g_spawnmountedgunsaround_base4 = mybaseorigvec;
			g_spawnmountedgunsaround_found4 = 1;
		}
		
		return;
	} 
	
	
	
	entity l;
	if (g_ctf)
		l = findchain(classname, "item_flag_team_base");
	else if (g_onslaught)
		l = findchain(classname, "onslaught_generator");
	else
		l = findchain(classname, "info_player_deathmatch");
		
	while (l)
	{
		if (l.team == COLOR_TEAM1) {
			g_spawnmountedgunsaround_base1 = l.origin;
			g_spawnmountedgunsaround_found1 = 1;
		} else if (l.team == COLOR_TEAM2) {
			g_spawnmountedgunsaround_base2 = l.origin;
			g_spawnmountedgunsaround_found2 = 1;
		} else if (l.team == COLOR_TEAM3) {
			g_spawnmountedgunsaround_base3 = l.origin;
			g_spawnmountedgunsaround_found3 = 1;
		} else if (l.team == COLOR_TEAM4) {
			g_spawnmountedgunsaround_base4 = l.origin;
			g_spawnmountedgunsaround_found4 = 1;
		}
		
		l = l.chain;
	}
}

float Mg_Select_MountedGun(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_m249para_amnt
	+ autocvar_g_spawnmountedgunsaround_pkm_amnt
	);

	if (mrandvar < autocvar_g_spawnmountedgunsaround_m134_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_lasercannon_red_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_gatling1877_amnt
	)) {
		mpick = 20;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_rpd_amnt
	)) {
		mpick = 21;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_m249para_amnt
	)) {
		mpick = 22;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_m249para_amnt
	+ autocvar_g_spawnmountedgunsaround_pkm_amnt
	)) {
		mpick = 23;
	} else {
		//Failsafe
		mpick = -1;
	}
	
	return mpick;
}

//Team1
float Mg_Select_MountedGun_Team1(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_m249para_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_pkm_amnt
	);

	if (mrandvar < autocvar_g_spawnmountedgunsaround_team1_m134_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lasercannon_red_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gatling1877_amnt
	)) {
		mpick = 20;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpd_amnt
	)) {
		mpick = 21;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_m249para_amnt
	)) {
		mpick = 22;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team1_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_m249para_amnt
	+ autocvar_g_spawnmountedgunsaround_team1_pkm_amnt
	)) {
		mpick = 23;
	} else {
		//Failsafe
		mpick = -1;
	}
	
	return mpick;
}

//Team2
float Mg_Select_MountedGun_Team2(void)
{
	float mpick, mrandvar;
	
	mrandvar = random() *
	(autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_m249para_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_pkm_amnt
	);

	if (mrandvar < autocvar_g_spawnmountedgunsaround_team2_m134_amnt) {
		mpick = 1;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	)) {
		mpick = 2;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	)) {
		mpick = 3;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	)) {
		mpick = 4;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	)) {
		mpick = 5;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	)) {
		mpick = 6;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	)) {
		mpick = 7;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	)) {
		mpick = 8;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	)) {
		mpick = 9;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	)) {
		mpick = 10;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	)) {
		mpick = 11;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	)) {
		mpick = 12;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	)) {
		mpick = 13;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	)) {
		mpick = 14;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	)) {
		mpick = 15;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	)) {
		mpick = 16;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	)) {
		mpick = 17;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt
	)) {
		mpick = 18;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lasercannon_red_amnt
	)) {
		mpick = 19;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gatling1877_amnt
	)) {
		mpick = 20;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpd_amnt
	)) {
		mpick = 21;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_m249para_amnt
	)) {
		mpick = 22;
	} else if (mrandvar < (
	autocvar_g_spawnmountedgunsaround_team2_m134_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gau19_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_spadu_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_deluge_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_t17mm_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_browning50_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_grail_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_autonex_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_shlac_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_bpcannon_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_maxim_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpk_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lewis_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_scorpion_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_charbelcher_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_batteringram_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_siegemortar_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_hotchkissm1914_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_lasercannon_red_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_gatling1877_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_rpd_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_m249para_amnt
	+ autocvar_g_spawnmountedgunsaround_team2_pkm_amnt
	)) {
		mpick = 23;
	} else {
		//Failsafe
		mpick = -1;
	}
	
	return mpick;
}

void Mg_ZeroOutCvars(void)
{
	g_spawnmountedgunsaround_current = 0;
	Mutator_FindBases_ZeroOutCvars();
}

MUTATOR_HOOKFUNCTION(spawnmountedguns_MatchEnd)
{
	Mg_ZeroOutCvars();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnmountedguns_PlayerSpawn)
{
	if (g_spawnmountedgunsaround_current >= autocvar_g_spawnmountedgunsaround_max) {
		//dprint("We have enough mounted guns\n");
		return 0;
	}
	
	if not(g_spawn_around_foundbases)
	{
		if (teamplay || (autocvar_g_spawn_around_findbases_nonteamplay && autocvar_g_spawn_around_findbases_nonteamplay_vehiclesandmg))
		{
			Mg_Find_Bases();
			
			g_spawn_around_foundbases = 1;
		}
	}
	
	float spawns_we_want = autocvar_g_spawnmountedgunsaround_per;
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Mounted Gun\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = Mg_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
			local float mgshield;
			mgshield = cvar("g_spawnmountedgunsaround_shield");
			
			if (mgshield)
			{
				if (mgshield >= random())
					mgshield = 1;
				else
					mgshield = 0;
			}
			else
			{
				mgshield = 0;
			}
			
			
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			self = e;
			
			self.vehicle_shieldtype = 0;
			
			float randvar;
			
			if ( (teamplay || (autocvar_g_spawn_around_findbases_nonteamplay && autocvar_g_spawn_around_findbases_nonteamplay_vehiclesandmg))
			//&& (g_ctf || g_onslaught || g_assault)
			//&& !(g_domination || g_freezetag || g_tdm || g_keyhunt)
			&& (g_spawnmountedgunsaround_found1
			+ g_spawnmountedgunsaround_found2
			+ g_spawnmountedgunsaround_found3
			+ g_spawnmountedgunsaround_found4 > 1)
			){
				float t1l, t2l;
				t1l = vlen(e.origin - g_spawnmountedgunsaround_base1);
				t2l = vlen(e.origin - g_spawnmountedgunsaround_base2);
				//Shortest wins
				if (t1l < t2l)
					randvar = Mg_Select_MountedGun_Team1();
				else
					randvar = Mg_Select_MountedGun_Team2();
			} else {
				randvar = Mg_Select_MountedGun();
			}
			
			if (randvar == 1) {
				if(mgshield) self.vehicle_shieldtype = 4;
				spawnfunc_mountedgun_m134();
			} else if (randvar == 2) {
				if(mgshield) self.vehicle_shieldtype = 4;
				spawnfunc_mountedgun_gau19();
			} else if(randvar == 3) {
				if(mgshield) self.vehicle_shieldtype = 3;
				spawnfunc_mountedgun_spadu();
			} else if(randvar == 4) {
				if(mgshield) self.vehicle_shieldtype = 5;
				spawnfunc_mountedgun_deluge();
			} else if(randvar == 5) {
				if(mgshield) self.vehicle_shieldtype = 4;
				spawnfunc_mountedgun_t17mm();
			} else if(randvar == 6) {
				if(mgshield) self.vehicle_shieldtype = 1;
				spawnfunc_mountedgun_browning50();
			} else if(randvar == 7) {
				if(mgshield) self.vehicle_shieldtype = 7;
				spawnfunc_mountedgun_grail();
			} else if(randvar == 8) {
				if(mgshield) self.vehicle_shieldtype = 11;
				spawnfunc_mountedgun_autonex();
			} else if(randvar == 9) {
				if(mgshield) self.vehicle_shieldtype = 5;
				spawnfunc_mountedgun_shlac();
			} else if(randvar == 10) {
				if(mgshield) self.vehicle_shieldtype = 5;
				spawnfunc_mountedgun_bpcannon();
			} else if(randvar == 11) {
				if(mgshield) self.vehicle_shieldtype = 3;
				spawnfunc_mountedgun_maxim();
			} else if(randvar == 12) {
				if(mgshield) self.vehicle_shieldtype = 8;
				spawnfunc_mountedgun_rpk();
			} else if(randvar == 13) {
				if(mgshield) self.vehicle_shieldtype = 6;
				spawnfunc_mountedgun_lewis();
			} else if(randvar == 14) {
				if(mgshield) self.vehicle_shieldtype = 9;
				spawnfunc_mountedgun_scorpion();
			} else if(randvar == 15) {
				if(mgshield) self.vehicle_shieldtype = 3;
				spawnfunc_mountedgun_charbelcher();
			} else if(randvar == 16) {
				if(mgshield) self.vehicle_shieldtype = 10;
				spawnfunc_mountedgun_batteringram();
			} else if(randvar == 17) {
				if(mgshield) self.vehicle_shieldtype = 3;
				spawnfunc_mountedgun_siegemortar();
			} else if(randvar == 18) {
				if(mgshield) self.vehicle_shieldtype = 6;
				spawnfunc_mountedgun_hotchkissm1914();
			} else if(randvar == 19) {
				local float mylzrcolor;
				local float mylzrtype;
				local float lrandvar;
				mylzrcolor = 0;
				mylzrtype = 0;
				if (autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor) {
					lrandvar = random() *
					(autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_red_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_green_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_cyan_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_magenta_amnt
					);

					if (lrandvar < autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_red_amnt) {
						mylzrcolor = 0; //Red
					} else if (lrandvar < (
					autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_red_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_green_amnt
					)) {
						mylzrcolor = 1; //Green
					} else if (lrandvar < (
					autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_red_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_green_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_cyan_amnt
					)) {
						mylzrcolor = 2; //Cyan
					} else if (lrandvar < (
					autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_red_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_green_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_cyan_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomcolor_magenta_amnt
					)) {
						mylzrcolor = 3; //Magenta
					} else {
						mylzrcolor = 0; //Red, fallback
					}
				}
				
				if (autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype)
				{
					lrandvar = random() *
					(autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype_continuous_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype_pulsed_amnt
					);

					if (lrandvar < autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype_continuous_amnt) {
						mylzrtype = 0; //continuous
					} else if (lrandvar < (
					autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype_continuous_amnt
					+ autocvar_g_spawnmountedgunsaround_lasercannon_red_randomtype_pulsed_amnt
					)) {
						mylzrtype = 1; //Pulsed
					} else {
						mylzrtype = 0; //continuous
					}
				}
				
				if (mylzrcolor == 1) {
					//Green
					if(mgshield) self.vehicle_shieldtype = 14;
					if (mylzrtype == 1) {
						spawnfunc_mountedgun_lasercannon_green_pulsed();
					} else {
						spawnfunc_mountedgun_lasercannon_green();
					}
				} else if (mylzrcolor == 2) {
					//Cyan
					if(mgshield) self.vehicle_shieldtype = 15;
					if (mylzrtype == 1) {
						spawnfunc_mountedgun_lasercannon_cyan_pulsed();
					} else {
						spawnfunc_mountedgun_lasercannon_cyan();
					}
				} else if (mylzrcolor == 3) {
					//Magenta
					if(mgshield) self.vehicle_shieldtype = 16;
					if (mylzrtype == 1) {
						spawnfunc_mountedgun_lasercannon_magenta_pulsed();
					} else {
						spawnfunc_mountedgun_lasercannon_magenta();
					}
				} else {
					//Red
					if(mgshield) self.vehicle_shieldtype = 13;
					if (mylzrtype == 1) {
						spawnfunc_mountedgun_lasercannon_red_pulsed();
					} else {
						spawnfunc_mountedgun_lasercannon_red();
					}
				}
			} else if(randvar == 20) {
				if(mgshield) self.vehicle_shieldtype = 17;
				spawnfunc_mountedgun_gatling1877();
			} else if(randvar == 21) {
				if(mgshield) self.vehicle_shieldtype = 8;
				spawnfunc_mountedgun_rpd();
			} else if(randvar == 22) {
				if(mgshield) self.vehicle_shieldtype = 4;
				spawnfunc_mountedgun_m249para();
			} else if(randvar == 23) {
				if(mgshield) self.vehicle_shieldtype = 8;
				spawnfunc_mountedgun_pkm();
			} else {
				if(mgshield) self.vehicle_shieldtype = 1; //So you notice
				spawnfunc_mountedgun_lewis();
			}
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnmountedgunsaround_current = g_spawnmountedgunsaround_current + 1;
		}
	}
	
	return TRUE;
}


MUTATOR_HOOKFUNCTION(spawnmountedguns_BuildMutatorsString)
{
	//Happens on map start only
	Mg_ZeroOutCvars();
	ret_string = strcat(ret_string, ":spawnmountedguns");
	return 0;
}

MUTATOR_HOOKFUNCTION(spawnmountedguns_BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", Spawn MountedGuns");
	return 0;
}

MUTATOR_DEFINITION(mutator_spawnmountedguns)
{
	MUTATOR_HOOK(MatchEnd, spawnmountedguns_MatchEnd, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerSpawn, spawnmountedguns_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, spawnmountedguns_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, spawnmountedguns_BuildMutatorsPrettyString, CBC_ORDER_ANY);
	
	// this just turns on the cvar.
	MUTATOR_ONADD
	{
		g_spawnmountedgunsaround = 1;
	}

	// this just turns off the cvar.
	MUTATOR_ONREMOVE
	{	 
		g_spawnmountedgunsaround = 0;
	}

	return 0;
}


//Turrets
//
//
float g_spawnturretsaround;
//float autocvar_g_spawnturretsaround_per;
//float autocvar_g_spawnturretsaround_max;
float g_spawnturretsaround_current;
float g_spawnturretsaroundwalker_current;
float g_spawnturretsaroundreactor_current;

vector Tr_Select_Spawn_Point(void)
{
	entity e = spawn();
	e.mins = '-32 -32 -32';
	e.maxs = '32 32 32';

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, 1024, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location for TURRET\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

float Tr_Spawn_Turrets(void)
{
	if (g_spawnturretsaround_current >= cvar("g_spawnturretsaround_max")) {
		//dprint("We have enough turrets\n");
		return 0;
	}
	
	float spawns_we_want = cvar("g_spawnturretsaround_per");
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Turret\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = Tr_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			self = e;
			
			float randvar;
			randvar = random() * 100;
			if (randvar > 90) {
				spawnfunc_turret_hk();
			} else if(randvar > 80) {
				spawnfunc_turret_hellion();
			} else if(randvar > 70) {
				spawnfunc_turret_phaser();
			} else if(randvar > 60) {
				spawnfunc_turret_plasma_dual();
			} else if(randvar > 50) {
				spawnfunc_turret_mlrs();
			} else if(randvar > 30) {
				spawnfunc_turret_plasma();
			} else if(randvar > 20) {
				spawnfunc_turret_tesla();
			} else{
				spawnfunc_turret_machinegun();
			}
			
			setorigin(self, self.origin);
       			tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNVEHICLES_FORCE_TRACE_MOVETYPE(), self);
        		setorigin(self, trace_endpos);
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnturretsaround_current = g_spawnturretsaround_current + 1;
		}
	}
	return TRUE;
}

float Tr_Spawn_Reactors(void)
{
	if (g_spawnturretsaroundreactor_current >= cvar("g_spawnturretsaroundreactor_max")) {
		//dprint("We have enough reactor turrets\n");
		return 0;
	}
	
	float spawns_we_want = cvar("g_spawnturretsaroundreactor_per");
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Turret\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = Tr_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			self = e;
			
			spawnfunc_turret_fusionreactor();
			
			setorigin(self, self.origin);
       			tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNVEHICLES_FORCE_TRACE_MOVETYPE(), self);
        		setorigin(self, trace_endpos);
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnturretsaroundreactor_current = g_spawnturretsaroundreactor_current + 1;
		}
	}
	return TRUE;
}

float Tr_Spawn_Walkers(void)
{
	if (g_spawnturretsaroundwalker_current >= cvar("g_spawnturretsaroundwalker_max")) {
		//dprint("We have enough walker turrets\n");
		return 0;
	}
	
	float spawns_we_want = cvar("g_spawnturretsaroundwalker_per");
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Turret\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = Tr_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			self = e;
			
			float randvar;
			randvar = random() * 100;
			if(randvar > 60) {
				spawnfunc_turret_walker();
			} else {
				spawnfunc_turret_ewheel();
			}
			
			setorigin(self, self.origin);
       			tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNVEHICLES_FORCE_TRACE_MOVETYPE(), self);
        		setorigin(self, trace_endpos);
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnturretsaroundwalker_current = g_spawnturretsaroundwalker_current + 1;
		}
	}
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnturrets_MatchEnd)
{
	g_spawnturretsaround_current = 0;
	g_spawnturretsaroundwalker_current = 0;
	g_spawnturretsaroundreactor_current = 0;
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnturrets_PlayerSpawn)
{
	Tr_Spawn_Turrets();
	Tr_Spawn_Walkers();
	Tr_Spawn_Reactors();
	return TRUE;
}


MUTATOR_HOOKFUNCTION(spawnturrets_BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":spawnturrets");
	g_spawnturretsaround_current = 0;
	g_spawnturretsaroundwalker_current = 0;
	g_spawnturretsaroundreactor_current = 0;
	return 0;
}

MUTATOR_HOOKFUNCTION(spawnturrets_BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", Spawn Turrets");
	return 0;
}

MUTATOR_DEFINITION(mutator_spawnturrets)
{
	MUTATOR_HOOK(MatchEnd, spawnturrets_MatchEnd, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerSpawn, spawnturrets_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, spawnturrets_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, spawnturrets_BuildMutatorsPrettyString, CBC_ORDER_ANY);
	
	// this just turns on the cvar.
	MUTATOR_ONADD
	{
		g_spawnturretsaround = 1;
	}

	// this just turns off the cvar.
	MUTATOR_ONREMOVE
	{	 
		g_spawnturretsaround = 0;
	}

	return 0;
}


//foliage
//
//
float g_spawnfoliagearound;
float g_spawnfoliagearound_waterlevel;
float g_spawnfoliagearound_waterlevel_send;
float g_spawnfoliagearound_lavalevel;
float g_spawnfoliagearound_lavalevel_send;
float g_spawnfoliagearound_slimelevel;
float g_spawnfoliagearound_slimelevel_send;
float g_spawnfoliagearound_oillevel;
float g_spawnfoliagearound_oillevel_send;
float g_spawnfoliagearound_oillevel_unchanging;
float g_spawnfoliagearound_chemlevel;
float g_spawnfoliagearound_chemlevel_send;
float g_spawnfoliagearound_chemlevel_unchanging;
float g_spawnfoliagearound_methanelevel;
float g_spawnfoliagearound_methanelevel_send;
float g_spawnfoliagearound_methanelevel_unchanging;
float g_foliage_maybeignitetreesinlava_lavadone;
float g_foliage_maybeignitetreesinlava_treesdone;
float g_suggested_spawnfoliagearound;

float spawnfoliagearound_uselimits;
float spawnfoliagearound_maxx;
float spawnfoliagearound_maxy;
float spawnfoliagearound_maxz;
float spawnfoliagearound_minx;
float spawnfoliagearound_miny;
float spawnfoliagearound_minz;
float spawnfoliagearound_uselimits_reverse;

float autocvar_g_suggested_spawnfoliagearound_uselimits;
float autocvar_g_suggested_spawnfoliagearound_uselimits_usenotsuggested;
float autocvar_g_suggested_spawnfoliagearound_maxx;
float autocvar_g_suggested_spawnfoliagearound_maxy;
float autocvar_g_suggested_spawnfoliagearound_maxz;
float autocvar_g_suggested_spawnfoliagearound_minx;
float autocvar_g_suggested_spawnfoliagearound_miny;
float autocvar_g_suggested_spawnfoliagearound_minz;
float autocvar_g_spawnfoliagearound_uselimits;
float autocvar_g_spawnfoliagearound_uselimits_usesuggested;
float autocvar_g_spawnfoliagearound_maxx;
float autocvar_g_spawnfoliagearound_maxy;
float autocvar_g_spawnfoliagearound_maxz;
float autocvar_g_spawnfoliagearound_minx;
float autocvar_g_spawnfoliagearound_miny;
float autocvar_g_spawnfoliagearound_minz;
float autocvar_g_spawnfoliagearound_uselimits_reverse;
float autocvar_g_suggested_spawnfoliagearound_uselimits_reverse;

//float autocvar_g_spawnfoliagearound_preset;
//float autocvar_g_spawnfoliagearound_per;
//float autocvar_g_spawnfoliagearound_perdeath;
//float autocvar_g_spawnfoliagearound_min;
//float autocvar_g_spawnfoliagearound_max;
float autocvar_g_spawnfoliagearound_gradual;
float autocvar_g_spawnfoliagearound_gradual_per;
float autocvar_g_spawnfoliagearound_meadow_min; //Radius
float autocvar_g_spawnfoliagearound_meadow_max; //Radius
float autocvar_g_spawnfoliagearound_meadow_brush; //How often to allow bushes in a meadow
float autocvar_g_spawnfoliagearound_forest_min; //Square Radius
float autocvar_g_spawnfoliagearound_forest_max; //Square Radius
float autocvar_g_spawnfoliagearound_maxfail;
float autocvar_g_spawnfoliagearound_meadowsmaxfail;
float autocvar_g_spawnfoliagearound_forestsmaxfail;
float autocvar_g_spawnfoliagearound_forestsbackup;
float g_spawnfoliagearound_forestscurrentfail;
float g_spawnfoliagearound_forestscurrentwin;
float g_spawnfoliagearound_forestscurrent;
float g_spawnfoliagearound_meadowscurrentfail;
float g_spawnfoliagearound_meadowscurrentwin;
float g_spawnfoliagearound_meadowscurrent;
float g_spawnfoliagearound_currentfail;
float g_spawnfoliagearound_currentwin;
float g_spawnfoliagearound_current;
float g_spawnfoliagearound_started;
float g_spawnfoliagearound_waterlevel_started;
float g_spawnfoliagearound_lavalevel_started;
float g_spawnfoliagearound_slimelevel_started;
float g_spawnfoliagearound_oillevel_started;
float g_spawnfoliagearound_chemlevel_started;
float g_spawnfoliagearound_methanelevel_started;
float autocvar_g_spawnfoliagearound_groveangles2norm;
float autocvar_g_spawnfoliagearound_bushareaangles2norm;
float autocvar_g_spawnfoliagearound_groveresourcemultiplier;
float autocvar_g_spawnfoliagearound_season;
float autocvar_g_spawnfoliagearound_beechtree_amnt;
float autocvar_g_spawnfoliagearound_quercustree_amnt;
float autocvar_g_spawnfoliagearound_oldoaktree_amnt;
float autocvar_g_spawnfoliagearound_cedartree_amnt;
float autocvar_g_spawnfoliagearound_swamptree_amnt;
float autocvar_g_spawnfoliagearound_grassyarea_amnt;
float autocvar_g_spawnfoliagearound_grassyarea_altseason;
float autocvar_g_spawnfoliagearound_beechtreegrove_amnt;
float autocvar_g_spawnfoliagearound_epinetree_amnt;
float autocvar_g_spawnfoliagearound_eucatree_amnt;
float autocvar_g_spawnfoliagearound_iftree_amnt;
float autocvar_g_spawnfoliagearound_rosebush_amnt;
float autocvar_g_spawnfoliagearound_boubush_amnt;
float autocvar_g_spawnfoliagearound_jubpalmtree_amnt;
float autocvar_g_spawnfoliagearound_dypbush_amnt;
float autocvar_g_spawnfoliagearound_bnabush_amnt;
float autocvar_g_spawnfoliagearound_iftreegrove_amnt;
float autocvar_g_spawnfoliagearound_jubpalmtreegrove_amnt;
float autocvar_g_spawnfoliagearound_scale;
float autocvar_g_spawnfoliagearound_scaleunder;
float autocvar_g_spawnfoliagearound_scaleunder_min;
float autocvar_g_spawnfoliagearound_scaleunder_max;
float autocvar_g_spawnfoliagearound_scale_bush;
float autocvar_g_spawnfoliagearound_scale_tree;
float autocvar_g_spawnfoliagearound_overgrowth;
float autocvar_g_spawnfoliagearound_groves_are_solid;
float autocvar_g_spawnfoliagearound_oldoaktree_is_solid;
float spawnfoliagearound_season;
float spawnfoliagearound_beechtree_amnt;
float spawnfoliagearound_quercustree_amnt;
float spawnfoliagearound_oldoaktree_amnt;
float spawnfoliagearound_cedartree_amnt;
float spawnfoliagearound_swamptree_amnt;
float spawnfoliagearound_grassyarea_amnt;
float spawnfoliagearound_grassyarea_altseason;
float spawnfoliagearound_beechtreegrove_amnt;
float spawnfoliagearound_epinetree_amnt;
float spawnfoliagearound_eucatree_amnt;
float spawnfoliagearound_iftree_amnt;
float spawnfoliagearound_rosebush_amnt;
float spawnfoliagearound_boubush_amnt;
float spawnfoliagearound_jubpalmtree_amnt;
float spawnfoliagearound_dypbush_amnt;
float spawnfoliagearound_bnabush_amnt;
float spawnfoliagearound_iftreegrove_amnt;
float spawnfoliagearound_jubpalmtreegrove_amnt;
float spawnfoliagearound_scale;
float spawnfoliagearound_scaleunder;
float spawnfoliagearound_scaleunder_min;
float spawnfoliagearound_scaleunder_max;
float spawnfoliagearound_scale_bush;
float spawnfoliagearound_scale_tree;
float spawnfoliagearound_overgrowth;
float spawnfoliagearound_meadow_min;
float spawnfoliagearound_meadow_max;
float spawnfoliagearound_meadow_brush;
float spawnfoliagearound_forest_min;
float spawnfoliagearound_forest_max;


float spawnfoliagearound_specialconsiderations0;
float spawnfoliagearound_specialconsiderations0_season;
string spawnfoliagearound_specialconsiderations0_texture;

float spawnfoliagearound_specialconsiderations1;
float spawnfoliagearound_specialconsiderations1_season;
string spawnfoliagearound_specialconsiderations1_texture;

float spawnfoliagearound_specialconsiderations2;
float spawnfoliagearound_specialconsiderations2_season;
string spawnfoliagearound_specialconsiderations2_texture;

float spawnfoliagearound_specialconsiderations3;
float spawnfoliagearound_specialconsiderations3_season;
string spawnfoliagearound_specialconsiderations3_texture;

float spawnfoliagearound_specialconsiderations4;
float spawnfoliagearound_specialconsiderations4_season;
string spawnfoliagearound_specialconsiderations4_texture;

float spawnfoliagearound_specialconsiderations5;
float spawnfoliagearound_specialconsiderations5_season;
string spawnfoliagearound_specialconsiderations5_texture;


float autocvar_g_spawnfoliagearound_specialconsiderations0;
float autocvar_g_spawnfoliagearound_specialconsiderations0_season;
string autocvar_g_spawnfoliagearound_specialconsiderations0_texture;

float autocvar_g_spawnfoliagearound_specialconsiderations1;
float autocvar_g_spawnfoliagearound_specialconsiderations1_season;
string autocvar_g_spawnfoliagearound_specialconsiderations1_texture;

float autocvar_g_spawnfoliagearound_specialconsiderations2;
float autocvar_g_spawnfoliagearound_specialconsiderations2_season;
string autocvar_g_spawnfoliagearound_specialconsiderations2_texture;

float autocvar_g_spawnfoliagearound_specialconsiderations3;
float autocvar_g_spawnfoliagearound_specialconsiderations3_season;
string autocvar_g_spawnfoliagearound_specialconsiderations3_texture;

float autocvar_g_spawnfoliagearound_specialconsiderations4;
float autocvar_g_spawnfoliagearound_specialconsiderations4_season;
string autocvar_g_spawnfoliagearound_specialconsiderations4_texture;

float autocvar_g_spawnfoliagearound_specialconsiderations5;
float autocvar_g_spawnfoliagearound_specialconsiderations5_season;
string autocvar_g_spawnfoliagearound_specialconsiderations5_texture;


float autocvar_g_suggested_spawnfoliagearound_specialconsiderations0;
float autocvar_g_suggested_spawnfoliagearound_specialconsiderations0_season;
string autocvar_g_suggested_spawnfoliagearound_specialconsiderations0_texture;

float autocvar_g_suggested_spawnfoliagearound_specialconsiderations1;
float autocvar_g_suggested_spawnfoliagearound_specialconsiderations1_season;
string autocvar_g_suggested_spawnfoliagearound_specialconsiderations1_texture;

float autocvar_g_suggested_spawnfoliagearound_specialconsiderations2;
float autocvar_g_suggested_spawnfoliagearound_specialconsiderations2_season;
string autocvar_g_suggested_spawnfoliagearound_specialconsiderations2_texture;

float autocvar_g_suggested_spawnfoliagearound_specialconsiderations3;
float autocvar_g_suggested_spawnfoliagearound_specialconsiderations3_season;
string autocvar_g_suggested_spawnfoliagearound_specialconsiderations3_texture;

float autocvar_g_suggested_spawnfoliagearound_specialconsiderations4;
float autocvar_g_suggested_spawnfoliagearound_specialconsiderations4_season;
string autocvar_g_suggested_spawnfoliagearound_specialconsiderations4_texture;

float autocvar_g_suggested_spawnfoliagearound_specialconsiderations5;
float autocvar_g_suggested_spawnfoliagearound_specialconsiderations5_season;
string autocvar_g_suggested_spawnfoliagearound_specialconsiderations5_texture;


float autocvar_g_spawnfoliagearound_spawnnearteam;
float spawnfoliagearound_spawnnearteam;
float g_suggested_spawnfoliagearound_spawnnearteam;
float autocvar_g_spawnfoliagearound_resourcemultiplier;
float spawnfoliagearound_resourcemultiplier;
float g_suggested_spawnfoliagearound_resourcemultiplier;

float autocvar_g_spawnfoliagearound_lavalevel_noignitefoliage;

float SMI_AbdBld_BuildNearBase(float myteam, vector myorigin);
float sfalqdlvl(string mycvar, string altcvar);

float spawnfoliagearound_entitywithinlimits(entity ent)
{
	if (!spawnfoliagearound_uselimits) {
		return TRUE; //Bail out early, no limits set, temp applys to all
	}
	
	if(
	(ent.origin_x < spawnfoliagearound_maxx) &&
	(ent.origin_y < spawnfoliagearound_maxy) &&
	(ent.origin_z < spawnfoliagearound_maxz) &&
	(ent.origin_x > spawnfoliagearound_minx) &&
	(ent.origin_y > spawnfoliagearound_miny) &&
	(ent.origin_z > spawnfoliagearound_minz)
	) {
		if (spawnfoliagearound_uselimits_reverse) {
			return FALSE; //none within limit, foliage outside limit
		} else {
			return TRUE; //foliage inside limit
		}
	}
	
	if (spawnfoliagearound_uselimits_reverse) {
		return TRUE; //Ambient outside limit
	}
	
	return FALSE;
}

void spawnfoliagearound_setlimits(void)
{
	if (autocvar_g_spawnfoliagearound_uselimits) {
		spawnfoliagearound_uselimits = autocvar_g_spawnfoliagearound_uselimits;
		if (autocvar_g_spawnfoliagearound_uselimits_reverse) {
			spawnfoliagearound_uselimits_reverse = 1;
		} else {
			spawnfoliagearound_uselimits_reverse = 0;
		}
	} else {
		spawnfoliagearound_uselimits = 0;
		spawnfoliagearound_uselimits_reverse = 0;
	}
	
	if (autocvar_g_spawnfoliagearound_maxx) {
		spawnfoliagearound_maxx = autocvar_g_spawnfoliagearound_maxx;
	} else {
		spawnfoliagearound_maxx = world.maxs_x;
	}
	
	
	if (autocvar_g_spawnfoliagearound_maxy) {
		spawnfoliagearound_maxy = autocvar_g_spawnfoliagearound_maxy;
	} else {
		spawnfoliagearound_maxy = world.maxs_y;
	}
	
	
	if (autocvar_g_spawnfoliagearound_maxz) {
		spawnfoliagearound_maxz = autocvar_g_spawnfoliagearound_maxz;
	} else {
		spawnfoliagearound_maxz = world.maxs_z;
	}
	
	if (autocvar_g_spawnfoliagearound_minx) {
		spawnfoliagearound_minx = autocvar_g_spawnfoliagearound_minx;
	} else {
		spawnfoliagearound_minx = world.mins_x;
	}
	
	if (autocvar_g_spawnfoliagearound_miny) {
		spawnfoliagearound_miny = autocvar_g_spawnfoliagearound_miny;
	} else {
		spawnfoliagearound_miny = world.mins_y;
	}
	
	if (autocvar_g_spawnfoliagearound_minz) {
		spawnfoliagearound_minz = autocvar_g_spawnfoliagearound_minz;
	} else {
		spawnfoliagearound_minz = world.mins_z;
	}
}

void spawnfoliagearound_setlimits_suggested(void)
{
	if (autocvar_g_suggested_spawnfoliagearound_uselimits) {
		spawnfoliagearound_uselimits = autocvar_g_suggested_spawnfoliagearound_uselimits;
		if (autocvar_g_suggested_spawnfoliagearound_uselimits_reverse) {
			spawnfoliagearound_uselimits_reverse = 1;
		} else {
			spawnfoliagearound_uselimits_reverse = 0;
		}
	} else {
		spawnfoliagearound_uselimits = 0;
		spawnfoliagearound_uselimits_reverse = 0;
	}
	
	if (autocvar_g_suggested_spawnfoliagearound_maxx) {
		spawnfoliagearound_maxx = autocvar_g_suggested_spawnfoliagearound_maxx;
	} else {
		spawnfoliagearound_maxx = world.maxs_x;
	}
	
	
	if (autocvar_g_suggested_spawnfoliagearound_maxy) {
		spawnfoliagearound_maxy = autocvar_g_suggested_spawnfoliagearound_maxy;
	} else {
		spawnfoliagearound_maxy = world.maxs_y;
	}
	
	
	if (autocvar_g_suggested_spawnfoliagearound_maxz) {
		spawnfoliagearound_maxz = autocvar_g_suggested_spawnfoliagearound_maxz;
	} else {
		spawnfoliagearound_maxz = world.maxs_z;
	}
	
	if (autocvar_g_suggested_spawnfoliagearound_minx) {
		spawnfoliagearound_minx = autocvar_g_suggested_spawnfoliagearound_minx;
	} else {
		spawnfoliagearound_minx = world.mins_x;
	}
	
	if (autocvar_g_suggested_spawnfoliagearound_miny) {
		spawnfoliagearound_miny = autocvar_g_suggested_spawnfoliagearound_miny;
	} else {
		spawnfoliagearound_miny = world.mins_y;
	}
	
	if (autocvar_g_suggested_spawnfoliagearound_minz) {
		spawnfoliagearound_minz = autocvar_g_suggested_spawnfoliagearound_minz;
	} else {
		spawnfoliagearound_minz = world.mins_z;
	}
}

void SpawnFoliageAroundLimits (void)
{
	if ((g_suggested_spawnfoliagearound) && !(g_spawnfoliagearound)) {
		if (autocvar_g_suggested_spawnfoliagearound_uselimits_usenotsuggested) {
			spawnfoliagearound_setlimits(); //Contrarian
		} else {
			spawnfoliagearound_setlimits_suggested(); //Normal
		}
	} else {
		if (autocvar_g_spawnfoliagearound_uselimits_usesuggested) {
			spawnfoliagearound_setlimits_suggested(); //Contrarian
		} else {
			spawnfoliagearound_setlimits(); //Normal
		}
	}
}

void foliage_ignitetreesinlava()
{
	//print("Igniting Trees and bushes in Lava\n");
	local float mylavalevel;
	mylavalevel = sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel");
	entity e;
	
  	for(e = world; (e = find(e, classname, "tree")); )
	{
		if (e.origin_z < mylavalevel)
		{
			Fire_AddDamage(e, world, autocvar_g_balance_nukelayer_fire2_damage *
			200, 200, 
			WEP_FIREBALL);
			
			e.fire_intensity = 5;	
		}
    	}
	
	for(e = world; (e = find(e, classname, "bush")); )
	{
		if (e.origin_z < mylavalevel)
		{
			Fire_AddDamage(e, world, autocvar_g_balance_nukelayer_fire2_damage *
			200, 200, 
			WEP_FIREBALL);
			
			e.fire_intensity = 5;	
		}
    	}
}

void foliage_ignitetreesinlava_think()
{
	foliage_ignitetreesinlava();
	
	remove(self);
}

void spawnfunc_foliage_ignitetreethink()
{	
	self.think = foliage_ignitetreesinlava_think;
	self.nextthink = time + 1;
}

void Foliage_MaybeIgniteTreesInLava ()
{
	if (autocvar_g_spawnfoliagearound_lavalevel_noignitefoliage) {
		return;
	}
	
	//print("\n\n\n\nMAYBEIGNITE\n\n\n\n");
	
	if (g_foliage_maybeignitetreesinlava_lavadone
	 && g_foliage_maybeignitetreesinlava_treesdone) 
	 {
	 	//print("\n\n\n\nSHALLIGNITE\n\n\n\n");
	 	//We only get here if the trees have been spawned and the lava has aswell
	 	local entity otherself, reaper;
		otherself = self;
		reaper = spawn();
		self = reaper;
		spawnfunc_foliage_ignitetreethink();
		self = otherself;
	 }
}

float Foliage_Select_Spawn_Point_MoveToRandomMapLocation (entity e)
{
	local float myuselimits = 0;
	local float myreturn = 0;
	local vector mymins = '0 0 0';
	local vector mymaxs = '0 0 0';
		
	if (spawnfoliagearound_uselimits >= 1) {
		myuselimits = 1;
	} else if (spawnfoliagearound_uselimits <= 0) {
		myuselimits = 0;
	} else if (random() < spawnfoliagearound_uselimits) {
		myuselimits = 1;
	} else {
		myuselimits = 0;
	}
	
	
	if (myuselimits) {
		mymaxs_x = spawnfoliagearound_maxx;
		mymaxs_y = spawnfoliagearound_maxy;
		mymaxs_z = spawnfoliagearound_maxz;
		
		mymins_x = spawnfoliagearound_minx;
		mymins_y = spawnfoliagearound_miny;
		mymins_z = spawnfoliagearound_minz;
		
		//print(vtos(mymaxs), " max\n");
		//print(vtos(mymins), " mins\n");
		
		myreturn = MoveToRandomMapLocationLimits(e, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_WATER | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, 0, 10, mymins, mymaxs, FALSE);

		if (spawnfoliagearound_uselimits_reverse && myreturn) {
			if (spawnfoliagearound_entitywithinlimits(e)) {
				//Do nothing
			} else {
				local float myx;
				myx = 0;
			
				while (myx < 10) {
					//print("doing\n");
					myreturn = MoveToRandomMapLocationLimits(e, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_WATER | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, 0, 10, mymins, mymaxs, FALSE);
					if (spawnfoliagearound_entitywithinlimits(e)) {
						myx = 100;
					} else {
						print("returning false\n");
						e.origin = '0 0 0';
						myreturn = FALSE;
					}
					myx = myx + 1;
				}
			}
		} else if (!spawnfoliagearound_uselimits_reverse) {
			if (spawnfoliagearound_entitywithinlimits(e)) {
				//Good
			} else {
				//print("\n\n\n\n****Foliage Not in Limit****\n\n\n\n");
				e.origin = '0 0 0';
				myreturn = FALSE;
			}
		}
	} else {
		myreturn = MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_WATER | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, 0, 10);
	}
	
	return myreturn;
}


vector Foliage_Select_Spawn_Point(vector givenorigin, float usegiven)
{
	entity e = spawn();
	e.mins = '-1 -1 -1';
	e.maxs = '1 1 1';

	// tries 10 times then gives up, that's what the number 10 stands for
	if ((usegiven == 1) || ( Foliage_Select_Spawn_Point_MoveToRandomMapLocation(e) ))
	{
		// yay we found a suitable location!
		vector selected_origin;
		
		//If we are given an origin, we'll evaluate via that, otherwise we'll use the selected one
		if (usegiven) {
			e.origin = givenorigin;
			selected_origin = givenorigin;
			setorigin(e, givenorigin);
		} else {
			selected_origin = e.origin;
		}
		
		if not(SMI_AbdBld_BuildNearBase(spawnfoliagearound_spawnnearteam, selected_origin))
		{
			remove(e);
			//print("foliage: selected Origin too close to wrong teambase, returning\n");
			return '0 0 0';
		}
		
		traceline(e.origin + '0 0 100', e.origin - '0 0 10000', G_SPAWNFOLIAGE_FORCE_TRACE_MOVETYPE(), e);
		
		if (spawnfoliagearound_overgrowth < 7) {
			float hitmaterial;
			hitmaterial = W_EvaluateMaterialHit();
		
			if ((hitmaterial == 1) || (hitmaterial == 2)) {
				//print("Metal\n");
				remove(e);
				g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
				return '0 0 0';
			} else if (hitmaterial == 5) {
				//print("Concrete\n");
				if (spawnfoliagearound_overgrowth < 5) {
					remove(e);
					g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
					return '0 0 0';
				}
			} else if ((hitmaterial == 3) || (hitmaterial == 4)) {
				//print("Stone and Brick\n");
				if (spawnfoliagearound_overgrowth < 4) {
					remove(e);
					g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 6) {
				//print("Glass or Window\n");
			} else if (hitmaterial == 8) {
				//print("Wood and Bark\n");
				if (spawnfoliagearound_overgrowth < 3) {
					remove(e);
					g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 9) {
				//print("Sheetrock or Cardboard or Vinyl\n");
				if (spawnfoliagearound_overgrowth < 3) {
					remove(e);
					g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "asphalt", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "asphault", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "road", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "filzkachel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "roof", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "cobble", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "paving", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "pavement", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "rubber", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "vtiles", 0) != -1 )
			)
			{
				//print("Asphalt or astroturf or roof\n");
				if (spawnfoliagearound_overgrowth < 2) {
					remove(e);
					g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "gravel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "sand", 0) != -1 )
			)
			{
				//print("Gravel or Sand\n");
				if (spawnfoliagearound_overgrowth < 1) {
					remove(e);
					g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 7) {
				//print("Dirt Etc\n");
				//Allow growth in all cases of dirt or grass not caught above
			} else if (
			( strstrofs(trace_dphittexturename, "caulk", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "common", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "base", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "door", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "tile", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "barrel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "detail", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "decal", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "wall", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "carpet", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plastic", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "panel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "floor", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "flr_", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plaster", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "trim", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "celing", 0) != -1 )
			)
			{
				//If the thing was any of the other "real" materials, we do not get here
				//If it isn't any of the rest, before allowing, check to see if 
				//it has some stated purpose that we should not grown things on
				//print("Stated Purpose\n");
				if (spawnfoliagearound_overgrowth < 6) {
					remove(e);
					g_spawnfoliagearound_currentfail = g_spawnfoliagearound_currentfail + 1;
					return '0 0 0';
				}
			} else {
				//print("NotMetal\n");
			}
		}
		
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location for Foliage\n");
		g_spawnfoliagearound_currentwin = g_spawnfoliagearound_currentwin + 1;
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

void Foliage_Zero_Out_Vars(void)
{
	g_spawnfoliagearound_current = 0;
	g_spawnfoliagearound_currentfail = 0;
	g_spawnfoliagearound_currentwin = 0;
	g_spawnfoliagearound_started = 0;
	g_spawnfoliagearound_waterlevel_started = 0;
	g_spawnfoliagearound_lavalevel_started = 0;
	g_spawnfoliagearound_slimelevel_started = 0;
	g_spawnfoliagearound_meadowscurrent = 0;
	g_spawnfoliagearound_meadowscurrentfail = 0;
	g_spawnfoliagearound_meadowscurrentwin = 0;
	g_spawnfoliagearound_forestscurrent = 0;
	g_spawnfoliagearound_forestscurrentfail = 0;
	g_spawnfoliagearound_forestscurrentwin = 0;
	
	spawnfoliagearound_uselimits = 0;
	spawnfoliagearound_maxx = 0;
	spawnfoliagearound_maxy = 0;
	spawnfoliagearound_maxz = 0;
	spawnfoliagearound_minx = 0;
	spawnfoliagearound_miny = 0;
	spawnfoliagearound_minz = 0;
	spawnfoliagearound_uselimits_reverse = 0;
	
	
	spawnfoliagearound_specialconsiderations0 = 0;
	spawnfoliagearound_specialconsiderations0_season = 0;
	spawnfoliagearound_specialconsiderations0_texture = "";

	spawnfoliagearound_specialconsiderations1 = 0;
	spawnfoliagearound_specialconsiderations1_season = 0;
	spawnfoliagearound_specialconsiderations1_texture = "";

	spawnfoliagearound_specialconsiderations2 = 0;
	spawnfoliagearound_specialconsiderations2_season = 0;
	spawnfoliagearound_specialconsiderations2_texture = "";

	spawnfoliagearound_specialconsiderations3 = 0;
	spawnfoliagearound_specialconsiderations3_season = 0;
	spawnfoliagearound_specialconsiderations3_texture = "";

	spawnfoliagearound_specialconsiderations4 = 0;
	spawnfoliagearound_specialconsiderations4_season = 0;
	spawnfoliagearound_specialconsiderations4_texture = "";

	spawnfoliagearound_specialconsiderations5 = 0;
	spawnfoliagearound_specialconsiderations5_season = 0;
	spawnfoliagearound_specialconsiderations5_texture = "";
	
	
	g_foliage_maybeignitetreesinlava_lavadone = 0;
	g_foliage_maybeignitetreesinlava_treesdone = 0;
	if (teamplay || autocvar_g_spawn_around_findbases_nonteamplay)
	{
		Mutator_FindBases_ZeroOutCvars(); //for g_spawn_around_findbases_nonteamplay
	}
}

void Foliage_SetSpecialConsiderations(void) {
	//print("\n\nSetting_SpecialConsiderations\n\n");
	spawnfoliagearound_specialconsiderations0 = autocvar_g_spawnfoliagearound_specialconsiderations0;
	spawnfoliagearound_specialconsiderations0_season = autocvar_g_spawnfoliagearound_specialconsiderations0_season;
	spawnfoliagearound_specialconsiderations0_texture = autocvar_g_spawnfoliagearound_specialconsiderations0_texture;

	spawnfoliagearound_specialconsiderations1 = autocvar_g_spawnfoliagearound_specialconsiderations1;
	spawnfoliagearound_specialconsiderations1_season = autocvar_g_spawnfoliagearound_specialconsiderations1_season;
	spawnfoliagearound_specialconsiderations1_texture = autocvar_g_spawnfoliagearound_specialconsiderations1_texture;

	spawnfoliagearound_specialconsiderations2 = autocvar_g_spawnfoliagearound_specialconsiderations2;
	spawnfoliagearound_specialconsiderations2_season = autocvar_g_spawnfoliagearound_specialconsiderations2_season;
	spawnfoliagearound_specialconsiderations2_texture = autocvar_g_spawnfoliagearound_specialconsiderations2_texture;

	spawnfoliagearound_specialconsiderations3 = autocvar_g_spawnfoliagearound_specialconsiderations3;
	spawnfoliagearound_specialconsiderations3_season = autocvar_g_spawnfoliagearound_specialconsiderations3_season;
	spawnfoliagearound_specialconsiderations3_texture = autocvar_g_spawnfoliagearound_specialconsiderations3_texture;

	spawnfoliagearound_specialconsiderations4 = autocvar_g_spawnfoliagearound_specialconsiderations4;
	spawnfoliagearound_specialconsiderations4_season = autocvar_g_spawnfoliagearound_specialconsiderations4_season;
	spawnfoliagearound_specialconsiderations4_texture = autocvar_g_spawnfoliagearound_specialconsiderations4_texture;

	spawnfoliagearound_specialconsiderations5 = autocvar_g_spawnfoliagearound_specialconsiderations5;
	spawnfoliagearound_specialconsiderations5_season = autocvar_g_spawnfoliagearound_specialconsiderations5_season;
	spawnfoliagearound_specialconsiderations5_texture = autocvar_g_spawnfoliagearound_specialconsiderations5_texture;
}

void Foliage_SetSuggestedSpecialConsiderations(void) {
	//print("\n\nSettingSuggestedSpecialConsiderations\n\n");
	spawnfoliagearound_specialconsiderations0 = autocvar_g_suggested_spawnfoliagearound_specialconsiderations0;
	spawnfoliagearound_specialconsiderations0_season = autocvar_g_suggested_spawnfoliagearound_specialconsiderations0_season;
	spawnfoliagearound_specialconsiderations0_texture = autocvar_g_suggested_spawnfoliagearound_specialconsiderations0_texture;

	spawnfoliagearound_specialconsiderations1 = autocvar_g_suggested_spawnfoliagearound_specialconsiderations1;
	spawnfoliagearound_specialconsiderations1_season = autocvar_g_suggested_spawnfoliagearound_specialconsiderations1_season;
	spawnfoliagearound_specialconsiderations1_texture = autocvar_g_suggested_spawnfoliagearound_specialconsiderations1_texture;

	spawnfoliagearound_specialconsiderations2 = autocvar_g_suggested_spawnfoliagearound_specialconsiderations2;
	spawnfoliagearound_specialconsiderations2_season = autocvar_g_suggested_spawnfoliagearound_specialconsiderations2_season;
	spawnfoliagearound_specialconsiderations2_texture = autocvar_g_suggested_spawnfoliagearound_specialconsiderations2_texture;

	spawnfoliagearound_specialconsiderations3 = autocvar_g_suggested_spawnfoliagearound_specialconsiderations3;
	spawnfoliagearound_specialconsiderations3_season = autocvar_g_suggested_spawnfoliagearound_specialconsiderations3_season;
	spawnfoliagearound_specialconsiderations3_texture = autocvar_g_suggested_spawnfoliagearound_specialconsiderations3_texture;

	spawnfoliagearound_specialconsiderations4 = autocvar_g_suggested_spawnfoliagearound_specialconsiderations4;
	spawnfoliagearound_specialconsiderations4_season = autocvar_g_suggested_spawnfoliagearound_specialconsiderations4_season;
	spawnfoliagearound_specialconsiderations4_texture = autocvar_g_suggested_spawnfoliagearound_specialconsiderations4_texture;

	spawnfoliagearound_specialconsiderations5 = autocvar_g_suggested_spawnfoliagearound_specialconsiderations5;
	spawnfoliagearound_specialconsiderations5_season = autocvar_g_suggested_spawnfoliagearound_specialconsiderations5_season;
	spawnfoliagearound_specialconsiderations5_texture = autocvar_g_suggested_spawnfoliagearound_specialconsiderations5_texture;
}

void Foliage_GetSpecialConsiderations(void) {
	if ((g_suggested_spawnfoliagearound) && !(g_spawnfoliagearound)) {
		Foliage_SetSuggestedSpecialConsiderations();
	} else {
		Foliage_SetSpecialConsiderations();
	}
}

void Foliage_GetAutoCvars_Precache(void) {
	//called from g_world.qc
	if (autocvar_g_spawnfoliagearound_beechtree_amnt) {
		precache_model ("models/beechtree.iqm");
		precache_model ("models/beechtree_lod1.iqm");
		precache_model ("models/beechtree_lod2.iqm");
	}

	if (autocvar_g_spawnfoliagearound_epinetree_amnt) {
		precache_model ("models/epinetree.iqm");
		precache_model ("models/epinetree_lod1.iqm");
		precache_model ("models/epinetree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_eucatree_amnt) {
		precache_model ("models/eucatree.iqm");
		precache_model ("models/eucatree_lod1.iqm");
		precache_model ("models/eucatree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_iftree_amnt) {
		precache_model ("models/iftree.iqm");
		precache_model ("models/iftree_lod1.iqm");
		precache_model ("models/iftree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_rosebush_amnt) {
		precache_model ("models/rose_bush.iqm");
		precache_model ("models/rose_bush_lod1.iqm");
		precache_model ("models/rose_bush_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_boubush_amnt) {
		precache_model ("models/bou_bush.iqm");
		precache_model ("models/bou_bush_lod1.iqm");
		precache_model ("models/bou_bush_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_jubpalmtree_amnt) {
		precache_model ("models/jubpalmtree.iqm");
		precache_model ("models/jubpalmtree_lod1.iqm");
		precache_model ("models/jubpalmtree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_quercustree_amnt) {
		precache_model ("models/quercustree.iqm");
		precache_model ("models/quercustree_lod1.iqm");
		precache_model ("models/quercustree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_oldoaktree_amnt) {
		precache_model ("models/oldoaktree.iqm");
		precache_model ("models/oldoaktree_lod1.iqm");
		precache_model ("models/oldoaktree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_cedartree_amnt) {
		precache_model ("models/cedartree.iqm");
		precache_model ("models/cedartree_lod1.iqm");
		precache_model ("models/cedartree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_swamptree_amnt) {
		precache_model ("models/swamptree.iqm");
		precache_model ("models/swamptree_lod1.iqm");
		precache_model ("models/swamptree_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_grassyarea_amnt) {
		precache_model ("models/grassyarea.iqm");
		precache_model ("models/grassyarea_lod1.iqm");
		precache_model ("models/grassyarea_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_dypbush_amnt) {
		precache_model ("models/dyp_bush.iqm");
		precache_model ("models/dyp_bush_lod1.iqm");
		precache_model ("models/dyp_bush_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_bnabush_amnt) {
		precache_model ("models/bna_bush.iqm");
		precache_model ("models/bna_bush_lod1.iqm");
		precache_model ("models/bna_bush_lod2.iqm");
	}
		
		
		//Used to use stuff like: , here... now that is not needed...
		//	( (cvar("g_suggested_spawnfoliagearound"))
		//	&& (Foliage_Suggested_Uses_Groves()) )
				
	if (autocvar_g_spawnfoliagearound_beechtreegrove_amnt) {
		precache_model ("models/groves/beechtree/beechtreegrove.iqm");
		precache_model ("models/groves/beechtree/beechtreegrove_lod1.iqm");
		precache_model ("models/groves/beechtree/beechtreegrove_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_iftreegrove_amnt) {
		precache_model ("models/groves/iftree/iftreegrove.iqm");
		precache_model ("models/groves/iftree/iftreegrove_lod1.iqm");
		precache_model ("models/groves/iftree/iftreegrove_lod2.iqm");
	}
	
	if (autocvar_g_spawnfoliagearound_jubpalmtreegrove_amnt) {
		precache_model ("models/groves/jubpalmtree/jubpalmtreegrove.iqm");
		precache_model ("models/groves/jubpalmtree/jubpalmtreegrove_lod1.iqm");
		precache_model ("models/groves/jubpalmtree/jubpalmtreegrove_lod2.iqm");
	}
}

void Foliage_GetAutoCvars(void) {
	if (cvar("g_spawnfoliagearound_preset") < 1) {
		spawnfoliagearound_season = autocvar_g_spawnfoliagearound_season;
		spawnfoliagearound_beechtree_amnt = autocvar_g_spawnfoliagearound_beechtree_amnt;
		spawnfoliagearound_quercustree_amnt = autocvar_g_spawnfoliagearound_quercustree_amnt;
		spawnfoliagearound_oldoaktree_amnt = autocvar_g_spawnfoliagearound_oldoaktree_amnt;
		spawnfoliagearound_cedartree_amnt = autocvar_g_spawnfoliagearound_cedartree_amnt;
		spawnfoliagearound_swamptree_amnt = autocvar_g_spawnfoliagearound_swamptree_amnt;
		spawnfoliagearound_grassyarea_amnt = autocvar_g_spawnfoliagearound_grassyarea_amnt;
		spawnfoliagearound_grassyarea_altseason = autocvar_g_spawnfoliagearound_grassyarea_altseason;
		spawnfoliagearound_beechtreegrove_amnt = autocvar_g_spawnfoliagearound_beechtreegrove_amnt;
		spawnfoliagearound_epinetree_amnt = autocvar_g_spawnfoliagearound_epinetree_amnt;
		spawnfoliagearound_eucatree_amnt = autocvar_g_spawnfoliagearound_eucatree_amnt;
		spawnfoliagearound_iftree_amnt = autocvar_g_spawnfoliagearound_iftree_amnt;
		spawnfoliagearound_rosebush_amnt = autocvar_g_spawnfoliagearound_rosebush_amnt;
		spawnfoliagearound_boubush_amnt = autocvar_g_spawnfoliagearound_boubush_amnt;
		spawnfoliagearound_jubpalmtree_amnt = autocvar_g_spawnfoliagearound_jubpalmtree_amnt;
		spawnfoliagearound_dypbush_amnt = autocvar_g_spawnfoliagearound_dypbush_amnt;
		spawnfoliagearound_bnabush_amnt = autocvar_g_spawnfoliagearound_bnabush_amnt;
		spawnfoliagearound_iftreegrove_amnt = autocvar_g_spawnfoliagearound_iftreegrove_amnt;
		spawnfoliagearound_jubpalmtreegrove_amnt = autocvar_g_spawnfoliagearound_jubpalmtreegrove_amnt;

		spawnfoliagearound_scale = autocvar_g_spawnfoliagearound_scale;
		spawnfoliagearound_scaleunder = autocvar_g_spawnfoliagearound_scaleunder;
		spawnfoliagearound_scaleunder_min = autocvar_g_spawnfoliagearound_scaleunder_min;
		spawnfoliagearound_scaleunder_max = autocvar_g_spawnfoliagearound_scaleunder_max;
		spawnfoliagearound_scale_bush = autocvar_g_spawnfoliagearound_scale_bush;
		spawnfoliagearound_scale_tree = autocvar_g_spawnfoliagearound_scale_tree;
		spawnfoliagearound_overgrowth = autocvar_g_spawnfoliagearound_overgrowth;
		spawnfoliagearound_meadow_min = autocvar_g_spawnfoliagearound_meadow_min;
		spawnfoliagearound_meadow_max = autocvar_g_spawnfoliagearound_meadow_max;
		spawnfoliagearound_meadow_brush = autocvar_g_spawnfoliagearound_meadow_brush;
		spawnfoliagearound_forest_min = autocvar_g_spawnfoliagearound_forest_min;
		spawnfoliagearound_forest_max = autocvar_g_spawnfoliagearound_forest_max;
		
		spawnfoliagearound_spawnnearteam = autocvar_g_spawnfoliagearound_spawnnearteam;
		spawnfoliagearound_resourcemultiplier = autocvar_g_spawnfoliagearound_resourcemultiplier;
	}
}

float Foliage_Suggested_Uses_Groves(void)
{
	//preset 20 is when the groves were made,
	//so if above that (and using map suggested), precache them too
	//later we might make some more advanced routine, if we add
	//presets that are above 20 and don't use groves
	//It's right here above the preset code so hopefully
	//it will be noticed and updated.
	if (cvar("g_suggested_spawnfoliagearound_preset") >= 20)
	{
		return TRUE;
	} else {
		return FALSE;
	}
}

void Foliage_Presets_Precache(void) {
		if (spawnfoliagearound_beechtree_amnt) {
			precache_model ("models/beechtree.iqm");
			precache_model ("models/beechtree_lod1.iqm");
			precache_model ("models/beechtree_lod2.iqm");
		}
		
		if (spawnfoliagearound_quercustree_amnt) {
			precache_model ("models/quercustree.iqm");
			precache_model ("models/quercustree_lod1.iqm");
			precache_model ("models/quercustree_lod2.iqm");
		}
		
		if (spawnfoliagearound_oldoaktree_amnt) {
			precache_model ("models/oldoaktree.iqm");
			precache_model ("models/oldoaktree_lod1.iqm");
			precache_model ("models/oldoaktree_lod2.iqm");
		}
		
		if (spawnfoliagearound_cedartree_amnt) {
			precache_model ("models/cedartree.iqm");
			precache_model ("models/cedartree_lod1.iqm");
			precache_model ("models/cedartree_lod2.iqm");
		}
		
		if (spawnfoliagearound_swamptree_amnt) {
			precache_model ("models/swamptree.iqm");
			precache_model ("models/swamptree_lod1.iqm");
			precache_model ("models/swamptree_lod2.iqm");
		}
		
		if (spawnfoliagearound_grassyarea_amnt) {
			precache_model ("models/grassyarea.iqm");
			precache_model ("models/grassyarea_lod1.iqm");
			precache_model ("models/grassyarea_lod2.iqm");
		}
		
		if (spawnfoliagearound_beechtreegrove_amnt) {
			precache_model ("models/groves/beechtree/beechtreegrove.iqm");
			precache_model ("models/groves/beechtree/beechtreegrove_lod1.iqm");
			precache_model ("models/groves/beechtree/beechtreegrove_lod2.iqm");
		}
		
		if (spawnfoliagearound_iftreegrove_amnt) {
			precache_model ("models/groves/iftree/iftreegrove.iqm");
			precache_model ("models/groves/iftree/iftreegrove_lod1.iqm");
			precache_model ("models/groves/iftree/iftreegrove_lod2.iqm");
		}
		
		if (spawnfoliagearound_jubpalmtreegrove_amnt) {
			precache_model ("models/groves/jubpalmtree/jubpalmtreegrove.iqm");
			precache_model ("models/groves/jubpalmtree/jubpalmtreegrove_lod1.iqm");
			precache_model ("models/groves/jubpalmtree/jubpalmtreegrove_lod2.iqm");
		}
		
		if (spawnfoliagearound_epinetree_amnt) {
			precache_model ("models/epinetree.iqm");
			precache_model ("models/epinetree_lod1.iqm");
			precache_model ("models/epinetree_lod2.iqm");
		}
		
		if (spawnfoliagearound_eucatree_amnt) {
			precache_model ("models/eucatree.iqm");
			precache_model ("models/eucatree_lod1.iqm");
			precache_model ("models/eucatree_lod2.iqm");
		}
		
		if (spawnfoliagearound_iftree_amnt) {
			precache_model ("models/iftree.iqm");
			precache_model ("models/iftree_lod1.iqm");
			precache_model ("models/iftree_lod2.iqm");
		}
		
		if (spawnfoliagearound_rosebush_amnt) {
			precache_model ("models/rose_bush.iqm");
			precache_model ("models/rose_bush_lod1.iqm");
			precache_model ("models/rose_bush_lod2.iqm");
		}
		
		if (spawnfoliagearound_boubush_amnt) {
			precache_model ("models/bou_bush.iqm");
			precache_model ("models/bou_bush_lod1.iqm");
			precache_model ("models/bou_bush_lod2.iqm");
		}
		
		if (spawnfoliagearound_jubpalmtree_amnt) {
			precache_model ("models/jubpalmtree.iqm");
			precache_model ("models/jubpalmtree_lod1.iqm");
			precache_model ("models/jubpalmtree_lod2.iqm");
		}
		
		if (spawnfoliagearound_dypbush_amnt) {
			precache_model ("models/dyp_bush.iqm");
			precache_model ("models/dyp_bush_lod1.iqm");
			precache_model ("models/dyp_bush_lod2.iqm");
		}
		
		if (spawnfoliagearound_bnabush_amnt) {
			precache_model ("models/bna_bush.iqm");
			precache_model ("models/bna_bush_lod1.iqm");
			precache_model ("models/bna_bush_lod2.iqm");
		}
		
}

void Foliage_Presets_Set(float p) {
	if (p == 1) {
		//Regular
		spawnfoliagearound_season = 0;
		spawnfoliagearound_beechtree_amnt = 0.4;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0.1;
		spawnfoliagearound_iftree_amnt = 0.14;
		spawnfoliagearound_rosebush_amnt = 0.11;
		spawnfoliagearound_boubush_amnt = 0.09;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 2) {
		//Garden Roulette
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0.4;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0.1;
		spawnfoliagearound_iftree_amnt = 1.0;
		spawnfoliagearound_rosebush_amnt = 0.11;
		spawnfoliagearound_boubush_amnt = 0.09;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	}  else if (p == 3) {
		//Venue ONS
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0.1;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 1.0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 4) {
		//Sideloop
		spawnfoliagearound_season = 4;
		spawnfoliagearound_beechtree_amnt = 0.4;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.1;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0.4;
		spawnfoliagearound_boubush_amnt = 0.1;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 5) {
		//Strange Tropical
		spawnfoliagearound_season = 4;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 1;
		spawnfoliagearound_dypbush_amnt = 0.6;
		spawnfoliagearound_bnabush_amnt = 0.5;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 7;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 6) {
		//Reg Tropical
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 1;
		spawnfoliagearound_dypbush_amnt = 0.6;
		spawnfoliagearound_bnabush_amnt = 0.5;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 7) {
		//Sunset Park Tropical
		spawnfoliagearound_season = 5;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 1;
		spawnfoliagearound_dypbush_amnt = 0.6;
		spawnfoliagearound_bnabush_amnt = 0.5;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 7;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 8) {
		//Desert Arid
		spawnfoliagearound_season = 2;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0.25;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 1;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 1;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 9) {
		//European Beechtree forest
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 1;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 512;
		spawnfoliagearound_meadow_max = 2048;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 10) {
		//BapistryAlone
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0.2;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 1.0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 11) {
		//Winter European Beechtree forest
		spawnfoliagearound_season = 3;
		spawnfoliagearound_beechtree_amnt = 1;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 512;
		spawnfoliagearound_meadow_max = 2048;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 12) {
		//Only Palms
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 1;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 13) {
		//Desert Oasis
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 1;
		spawnfoliagearound_dypbush_amnt = 0.2;
		spawnfoliagearound_bnabush_amnt = 0.1;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 14) {
		//OrganicOasis
		spawnfoliagearound_season = 0;
		spawnfoliagearound_beechtree_amnt = 0.4;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0.1;
		spawnfoliagearound_iftree_amnt = 0.04;
		spawnfoliagearound_rosebush_amnt = 0.11;
		spawnfoliagearound_boubush_amnt = 0.09;
		spawnfoliagearound_jubpalmtree_amnt = 0.1;
		spawnfoliagearound_dypbush_amnt = 0.05;
		spawnfoliagearound_bnabush_amnt = 0.05;
		spawnfoliagearound_scale = 10;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 349525;
		spawnfoliagearound_forest_max = 524288;
		spawnfoliagearound_scaleunder = 0.4;
		spawnfoliagearound_scaleunder_min = 0.01;
		spawnfoliagearound_scaleunder_max = 0.4;
	} else if (p == 15) {
		//Fall
		spawnfoliagearound_season = 2;
		spawnfoliagearound_beechtree_amnt = 0.4;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0.1;
		spawnfoliagearound_iftree_amnt = 0.14;
		spawnfoliagearound_rosebush_amnt = 0.11;
		spawnfoliagearound_boubush_amnt = 0.09;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 16) {
		//European Beechtree forest2
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 1;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0.01;
		spawnfoliagearound_boubush_amnt = 0.015;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 2;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 512;
		spawnfoliagearound_meadow_max = 2048;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 2048;
		spawnfoliagearound_scaleunder = 0.99;
		spawnfoliagearound_scaleunder_min = 0.2;
		spawnfoliagearound_scaleunder_max = 0.7;
	} else if (p == 17) {
		//Brittania Beechtree and pinetree forest2
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 1;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.5;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0.01;
		spawnfoliagearound_boubush_amnt = 0.015;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 2;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 512;
		spawnfoliagearound_meadow_max = 2048;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 2048;
		spawnfoliagearound_scaleunder = 0.99;
		spawnfoliagearound_scaleunder_min = 0.2;
		spawnfoliagearound_scaleunder_max = 0.7;
	} else if (p == 18) {
		//Regular2
		spawnfoliagearound_season = 0;
		spawnfoliagearound_beechtree_amnt = 0.3;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0.1;
		spawnfoliagearound_iftree_amnt = 0.14;
		spawnfoliagearound_rosebush_amnt = 0.2;
		spawnfoliagearound_boubush_amnt = 0.2;
		spawnfoliagearound_jubpalmtree_amnt = 0.03;
		spawnfoliagearound_dypbush_amnt = 0.03;
		spawnfoliagearound_bnabush_amnt = 0.03;
		spawnfoliagearound_scale = 2;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_scaleunder = 0.99;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
		spawnfoliagearound_scaleunder_min = 0.2;
		spawnfoliagearound_scaleunder_max = 0.7;
	} else if (p == 19) {
		//Palms and misc for island
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0.3;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0.2;
		spawnfoliagearound_iftree_amnt = 0.22;
		spawnfoliagearound_rosebush_amnt = 0.2;
		spawnfoliagearound_boubush_amnt = 0.2;
		spawnfoliagearound_jubpalmtree_amnt = 1.00;
		spawnfoliagearound_dypbush_amnt = 0.06;
		spawnfoliagearound_bnabush_amnt = 0.06;
		spawnfoliagearound_scale = 15;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_scaleunder = 0.80;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
		spawnfoliagearound_scaleunder_min = 0.3;
		spawnfoliagearound_scaleunder_max = 0.8;
	} else if (p == 20) {
		//OrganicOasis Similar Using groves
		spawnfoliagearound_season = 0;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0.6;
		spawnfoliagearound_iftreegrove_amnt = 0.2;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0.2;
		spawnfoliagearound_epinetree_amnt = 0.02;
		spawnfoliagearound_eucatree_amnt = 0.02;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0.11;
		spawnfoliagearound_boubush_amnt = 0.09;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0.05;
		spawnfoliagearound_bnabush_amnt = 0.05;
		spawnfoliagearound_scale = 10;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 349525;
		spawnfoliagearound_forest_max = 524288;
		spawnfoliagearound_scaleunder = 0.4;
		spawnfoliagearound_scaleunder_min = 0.01;
		spawnfoliagearound_scaleunder_max = 0.4;
	} else if (p == 21) {
		//Palms and misc for island using groves
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0.3;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 1.00;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0.2;
		spawnfoliagearound_iftree_amnt = 0.22;
		spawnfoliagearound_rosebush_amnt = 0.2;
		spawnfoliagearound_boubush_amnt = 0.2;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0.06;
		spawnfoliagearound_bnabush_amnt = 0.06;
		spawnfoliagearound_scale = 15;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_scaleunder = 0.80;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
		spawnfoliagearound_scaleunder_min = 0.3;
		spawnfoliagearound_scaleunder_max = 0.8;
	} else if (p == 22) {
		//Groves for mountanous area
		spawnfoliagearound_season = 0;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 1.00;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.0;
		spawnfoliagearound_eucatree_amnt = 0.0;
		spawnfoliagearound_iftree_amnt = 0.0;
		spawnfoliagearound_rosebush_amnt = 0.0;
		spawnfoliagearound_boubush_amnt = 0.0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0.0;
		spawnfoliagearound_bnabush_amnt = 0.0;
		spawnfoliagearound_scale = 2.25;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_scaleunder = 0.2;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
		spawnfoliagearound_scaleunder_min = 1;
		spawnfoliagearound_scaleunder_max = 2;
	} else if (p == 23) {
		//Green Groves
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 1.00;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.0;
		spawnfoliagearound_eucatree_amnt = 0.0;
		spawnfoliagearound_iftree_amnt = 0.0;
		spawnfoliagearound_rosebush_amnt = 0.0;
		spawnfoliagearound_boubush_amnt = 0.0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0.0;
		spawnfoliagearound_bnabush_amnt = 0.0;
		spawnfoliagearound_scale = 2.25;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_scaleunder = 0.2;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
		spawnfoliagearound_scaleunder_min = 1;
		spawnfoliagearound_scaleunder_max = 2;
	} else if (p == 24) {
		//Green Groves 2
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 1.00;
		spawnfoliagearound_iftreegrove_amnt = 0.25;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.0;
		spawnfoliagearound_eucatree_amnt = 0.0;
		spawnfoliagearound_iftree_amnt = 0.0;
		spawnfoliagearound_rosebush_amnt = 0.0;
		spawnfoliagearound_boubush_amnt = 0.0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0.0;
		spawnfoliagearound_bnabush_amnt = 0.0;
		spawnfoliagearound_scale = 2.25;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_scaleunder = 0.2;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
		spawnfoliagearound_scaleunder_min = 1;
		spawnfoliagearound_scaleunder_max = 2;
	} else if (p == 25) {
		//Green Groves 3
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 1.00;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.0;
		spawnfoliagearound_eucatree_amnt = 0.0;
		spawnfoliagearound_iftree_amnt = 0.0;
		spawnfoliagearound_rosebush_amnt = 0.0;
		spawnfoliagearound_boubush_amnt = 0.0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0.0;
		spawnfoliagearound_bnabush_amnt = 0.0;
		spawnfoliagearound_scale = 2.25;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_scaleunder = 0.2;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
		spawnfoliagearound_scaleunder_min = 1;
		spawnfoliagearound_scaleunder_max = 2;
	} else if (p == 26) {
		//SaffersWar (like greece, has grass tho)
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 1;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 1;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.16;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 1.25;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_overgrowth = 2;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 27) {
		//Reg Tropical Plus Groves Plus Grass
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0;
		spawnfoliagearound_cedartree_amnt = 0;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0.5;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0.5;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 1;
		spawnfoliagearound_dypbush_amnt = 0.6;
		spawnfoliagearound_bnabush_amnt = 0.5;
		spawnfoliagearound_scale = 1.5;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_scaleunder = 0.6;
		spawnfoliagearound_scaleunder_min = 0.9;
		spawnfoliagearound_scaleunder_max = 1.25;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 28) {
		//Green Groves Plus Grass and others
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0.1;
		spawnfoliagearound_quercustree_amnt = 0.1;
		spawnfoliagearound_oldoaktree_amnt = 0.2;
		spawnfoliagearound_cedartree_amnt = 0.2;
		spawnfoliagearound_swamptree_amnt = 0.2;
		spawnfoliagearound_grassyarea_amnt = 0.5;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 1;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0;
		spawnfoliagearound_rosebush_amnt = 0;
		spawnfoliagearound_boubush_amnt = 0;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 3.0;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_scaleunder = 0.6;
		spawnfoliagearound_scaleunder_min = 0.9;
		spawnfoliagearound_scaleunder_max = 1.5;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 0;
		spawnfoliagearound_meadow_max = 0;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	} else if (p == 29) {
		//Cedar and others
		spawnfoliagearound_season = 1;
		spawnfoliagearound_beechtree_amnt = 0.625;
		spawnfoliagearound_quercustree_amnt = 0;
		spawnfoliagearound_oldoaktree_amnt = 0.2;
		spawnfoliagearound_cedartree_amnt = 1;
		spawnfoliagearound_swamptree_amnt = 0;
		spawnfoliagearound_grassyarea_amnt = 0;
		spawnfoliagearound_grassyarea_altseason = 0;
		spawnfoliagearound_beechtreegrove_amnt = 0;
		spawnfoliagearound_iftreegrove_amnt = 0;
		spawnfoliagearound_jubpalmtreegrove_amnt = 0;
		spawnfoliagearound_epinetree_amnt = 0.2;
		spawnfoliagearound_eucatree_amnt = 0;
		spawnfoliagearound_iftree_amnt = 0.4;
		spawnfoliagearound_rosebush_amnt = 0.1;
		spawnfoliagearound_boubush_amnt = 0.1;
		spawnfoliagearound_jubpalmtree_amnt = 0;
		spawnfoliagearound_dypbush_amnt = 0;
		spawnfoliagearound_bnabush_amnt = 0;
		spawnfoliagearound_scale = 1.5;
		spawnfoliagearound_scale_bush = 0;
		spawnfoliagearound_scale_tree = 0;
		spawnfoliagearound_scaleunder = 0.6;
		spawnfoliagearound_scaleunder_min = 0.8;
		spawnfoliagearound_scaleunder_max = 1.2;
		spawnfoliagearound_overgrowth = 0;
		spawnfoliagearound_meadow_min = 1024;
		spawnfoliagearound_meadow_max = 4096;
		spawnfoliagearound_meadow_brush = 0;
		spawnfoliagearound_forest_min = 1024;
		spawnfoliagearound_forest_max = 4096;
	}	
}

void Foliage_Presets(void) {
	//Mainly for campaigns which can't use autocvars
	float p;
	if ((g_suggested_spawnfoliagearound) && !(g_spawnfoliagearound)) {
		p = cvar("g_suggested_spawnfoliagearound_preset");
		//print("suggested preset\n\n");
	} else {
		p = cvar("g_spawnfoliagearound_preset");
		//print("reg preset\n\n");
	}
	
	spawnfoliagearound_scaleunder = 0;
	spawnfoliagearound_scaleunder_min = 0;
	spawnfoliagearound_scaleunder_max = 0;
	
	Foliage_Presets_Set(p);
	
	if ((g_suggested_spawnfoliagearound) && !(g_spawnfoliagearound)) {
		//Map Suggested Foliage gets it's own overgrowth.
		spawnfoliagearound_overgrowth = cvar("g_suggested_spawnfoliagearound_overgrowth");
		spawnfoliagearound_spawnnearteam = cvar("g_suggested_spawnfoliagearound_spawnnearteam");
		spawnfoliagearound_resourcemultiplier = cvar("g_suggested_spawnfoliagearound_resourcemultiplier");
	} 
}

void Foliage_Scale_Tree(entity e) 
{
	if (spawnfoliagearound_scale_tree > 0) {
		e.scale = e.scale * spawnfoliagearound_scale_tree;
		e.mins = e.mins * (spawnfoliagearound_scale_tree*0.25);
		e.maxs = e.maxs * (spawnfoliagearound_scale_tree*0.25);
	}
			
}

void Foliage_Scale_Bush(entity e) 
{
	if (spawnfoliagearound_scale_bush > 0) {
		e.scale = e.scale * spawnfoliagearound_scale_bush;
		e.mins = e.mins * (spawnfoliagearound_scale_bush*0.25);
		e.maxs = e.maxs * (spawnfoliagearound_scale_bush*0.25);
	}
}

float Foliage_Place_Forests(float spawns_we_want)
{
	if (g_spawnfoliagearound_forestscurrent >= cvar("g_spawnfoliagearound_forestsmax")) {
		//dprint("We have enough forests\n");
		return 0;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Forests\n");
	for(i = 1; i <= spawns_we_want;)
	{
		if ((g_spawnfoliagearound_forestscurrentfail > autocvar_g_spawnfoliagearound_forestsmaxfail)
		&& ((g_spawnfoliagearound_forestscurrentwin * 1.5) < g_spawnfoliagearound_forestscurrentfail)
		) {
			//If too difficult to find a spot and above maxfail, giveup
			print("Giving up attempt to Place Forests\n");
			i = spawns_we_want + 1;
			++i; //Yeah
		} else {
		
		//getautocvars

		selected_origin = Foliage_Select_Spawn_Point('0 0 0', 0);
		if(selected_origin != '0 0 0')
		{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.solid = SOLID_NOT;
			
			e.mins = ('0 0 0');
			e.maxs = ('0 0 0');
			
			////Debug stuff
			//e.mins = ('-1 -1 -1');
			//e.maxs = ('1 1 1');	
			//e.model = "models/beechtree_lod2.iqm";
			//e.lodmodel1 = "models/beechtree_lod2.iqm";
			//e.lodmodel2 = "models/beechtree_lod2.iqm";
			//e.skin = 6;
			////////////////
			
			e.alpha = -1;
						
			float randvar;
			randvar = spawnfoliagearound_forest_min + ((spawnfoliagearound_forest_max - spawnfoliagearound_forest_min) * random());
			
			e.cnt = randvar; //Search Radius
			
			//if (random() < spawnfoliagearound_forest_brush) {
			//	e.spawnflags = 1;
			//}
			
			e.classname = "sffrst"; //Spawn Foliage FoReST Radius(type)
			
			self = e;
			setorigin(self, self.origin);
       			tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNFOLIAGE_FORCE_TRACE_MOVETYPE(), self);
        		setorigin(self, trace_endpos);
			
			//spawnfunc_misc_gamemodel();
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnfoliagearound_forestscurrent = g_spawnfoliagearound_forestscurrent + 1;
		}
		}
	}
	return TRUE;
}

float Foliage_Grow_Thicker(float spawns_we_want, vector givenorigin, float usegiven, float maxfail);
void Foliage_Populate_Forest(entity m, float amt)
{
	if (amt >= 1)
	if (g_spawnfoliagearound_current < cvar("g_spawnfoliagearound_max")) {
		float i = 0;
		
		//print(sprintf("Current: %f \n", g_spawnfoliagearound_current));
		//print(sprintf("Current: %f Max %f \n", g_spawnfoliagearound_current, cvar("g_spawnfoliagearound_max")));
		
		while (i < amt) {
			i++;
			vector o;
			o_x = m.origin_x + (m.cnt * (random() - 0.5));
			o_y = m.origin_y + (m.cnt * (random() - 0.5));
			o_z = m.origin_z + autocvar_g_spawnfoliagearound_forestsbackup;
			//print(sprintf("M count: %f AMT %f\n", m.cnt, amt));
		
			Foliage_Grow_Thicker(1, o, 1, (autocvar_g_spawnfoliagearound_maxfail * 1.5)); //Directed verdict (origin o)
		}
	}
}

void Foliage_Populate_Forests(float amt)
{
		if (amt < 1) {
			//print("Less than 1 amt\n");
		} else {
			entity e;
  			for(e = world; (e = find(e, classname, "sffrst")); ) {
    				//print("Meadow point found at ", vtos(e.origin), "\n");
				Foliage_Populate_Forest(e, amt);
			}
		}
}

float Foliage_Place_Meadows(float spawns_we_want)
{
	if (g_spawnfoliagearound_meadowscurrent >= cvar("g_spawnfoliagearound_meadowsmax")) {
		//dprint("We have enough meadows\n");
		return 0;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Meadows\n");
	for(i = 1; i <= spawns_we_want;)
	{
		if ((g_spawnfoliagearound_meadowscurrentfail > autocvar_g_spawnfoliagearound_meadowsmaxfail)
		&& ((g_spawnfoliagearound_meadowscurrentwin * 1.5) < g_spawnfoliagearound_meadowscurrentfail)
		) {
			//If too difficult to find a spot and above maxfail, giveup
			print("Giving up attempt to Place Meadows\n");
			i = spawns_we_want + 1;
			++i; //Yeah
		} else {
		
		//getautocvars

		selected_origin = Foliage_Select_Spawn_Point('0 0 0', 0);
		if(selected_origin != '0 0 0')
		{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.solid = SOLID_NOT;
			
			e.mins = ('0 0 0');
			e.maxs = ('0 0 0');
			
			////Debug stuff
			//e.mins = ('-1 -1 -1');
			//e.maxs = ('1 1 1');	
			//e.model = "models/beechtree_lod2.iqm";
			//e.lodmodel1 = "models/beechtree_lod2.iqm";
			//e.lodmodel2 = "models/beechtree_lod2.iqm";
			//e.skin = 6;
			////////////////
			
			e.alpha = -1;
						
			float randvar;
			randvar = spawnfoliagearound_meadow_min + ((spawnfoliagearound_meadow_max - spawnfoliagearound_meadow_min) * random());
			
			e.cnt = randvar; //Search Radius
			
			if (random() < spawnfoliagearound_meadow_brush) {
				e.spawnflags = 1;
			}
			
			e.classname = "sfmdwr"; //Spawn Foliage MeaDoW Radius(type)
			
			self = e;
			setorigin(self, self.origin);
       			tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNFOLIAGE_FORCE_TRACE_MOVETYPE(), self);
        		setorigin(self, trace_endpos);
			
			//spawnfunc_misc_gamemodel();
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnfoliagearound_meadowscurrent = g_spawnfoliagearound_meadowscurrent + 1;
		}
		}
	}
	return TRUE;
}

void Foliage_Remove_Self()
{
	self.think = func_null;
	self.nextthink = 0;
	//print("removing self\n");
	remove_safely(self);
}

void Foliage_Fall()
{
	self.origin_z = self.origin_z - (frametime * autocvar_sv_gravity);
	self.health = self.health - (frametime * autocvar_sv_gravity);
	self.nextthink = time;
	setorigin(self, self.origin);
	
	if (self.dstrybldondeath) {
		if (self.dstrybldondeath != world) {
			if (self.dstrybldondeath.multitool_hitbox)
			if (self.dstrybldondeath.multitool_hitbox != world) {
				//print("Damaging building attached to tree with DEATH_TOUCHEXPLODE\n");
				Damage (self.dstrybldondeath.multitool_hitbox, world, world, 1000000, DEATH_TOUCHEXPLODE, self.dstrybldondeath.origin, '0 0 0');
				self.dstrybldondeath = world; //Once and done
			}
		}
	}
	
	if (self.health < 0) {
		////remove(self); //Causes problems 
		//print ("found\n");
		self.alpha = -1;
		self.skin = 0;
			
		self.solid = SOLID_NOT;
			
		self.mins = ('0 0 0');
		self.maxs = ('0 0 0');
			
		self.classname = "";
		self.accptcrrdbldspltr = 0; //Not likely to be set, maybe if you have bsp trees..
			
		setmodel(self, "null");
		self.model = string_null;
		self.lodmodel1 = string_null;
		self.lodmodel2 = string_null;
			
		self.fire_endtime = 0;
			
		self.think = Foliage_Remove_Self;
		self.nextthink = time;
	}
}

void Foliage_Clear_Meadow(entity m)
{
	//print ("checking\n");
	
	local entity eclear;
	eclear = findradius(m.origin, m.cnt);
	while(eclear)
	{
		
		if ((!(m.spawnflags & 1) && (eclear.classname == "tree" || eclear.classname == "bush"))
		|| ((m.spawnflags & 1) && (eclear.classname == "tree")))
		{
			////remove(eclear); //Causes problems 
			//print ("found\n");
			eclear.alpha = -1;
			eclear.skin = 0;
			
			eclear.solid = SOLID_NOT;
			
			eclear.mins = ('0 0 0');
			eclear.maxs = ('0 0 0');
			
			eclear.classname = "";
			eclear.accptcrrdbldspltr = 0;  //Not likely to be set, maybe if you have bsp trees..
			
			setmodel(eclear, "null");
			eclear.model = string_null;
			eclear.lodmodel1 = string_null;
			eclear.lodmodel2 = string_null;
			
			eclear.fire_endtime = 0;
			
			eclear.think = Foliage_Remove_Self;
			eclear.nextthink = time;		
		}
		
		eclear = eclear.chain;
	}
}

void Foliage_Clear_Meadows()
{
		entity e;
  		for(e = world; (e = find(e, classname, "sfmdwr")); ) {
    			//print("Meadow point found at ", vtos(e.origin), "\n");
			Foliage_Clear_Meadow(e);
		}
}

float Foliage_SetSeason_SpecialConsiderations (float theseason)
{
	if (spawnfoliagearound_specialconsiderations0) {
		//print (trace_dphittexturename, "--\n");
		//print (spawnfoliagearound_specialconsiderations0_texture, "**\n");
		if ( strstrofs(trace_dphittexturename, spawnfoliagearound_specialconsiderations0_texture, 0) != -1 )
		{
			return spawnfoliagearound_specialconsiderations0_season;
		}
	}
	
	if (spawnfoliagearound_specialconsiderations1) {
		if ( strstrofs(trace_dphittexturename, spawnfoliagearound_specialconsiderations1_texture, 0) != -1 )
		{
			return spawnfoliagearound_specialconsiderations1_season;
		}
	}
	
	if (spawnfoliagearound_specialconsiderations2) {
		if ( strstrofs(trace_dphittexturename, spawnfoliagearound_specialconsiderations2_texture, 0) != -1 )
		{
			return spawnfoliagearound_specialconsiderations2_season;
		}
	}
	
	if (spawnfoliagearound_specialconsiderations3) {
		if ( strstrofs(trace_dphittexturename, spawnfoliagearound_specialconsiderations3_texture, 0) != -1 )
		{
			return spawnfoliagearound_specialconsiderations3_season;
		}
	}
	
	if (spawnfoliagearound_specialconsiderations4) {
		if ( strstrofs(trace_dphittexturename, spawnfoliagearound_specialconsiderations4_texture, 0) != -1 )
		{
			return spawnfoliagearound_specialconsiderations4_season;
		}
	}
	
	if (spawnfoliagearound_specialconsiderations5) {
		if ( strstrofs(trace_dphittexturename, spawnfoliagearound_specialconsiderations5_texture, 0) != -1 )
		{
			return spawnfoliagearound_specialconsiderations5_season;
		}
	}
	
	return theseason;
}

//////
//////

void Folaige_iftree_do (entity e, float myseason)
{
					float wrandvar;

					e.model = "models/iftree.iqm";
					e.lodmodel1 = "models/iftree_lod1.iqm";
					e.lodmodel2 = "models/iftree_lod2.iqm";
					e.scale = random() + 0.4;
					e.mins = ('-6 -6 0') * (e.scale*0.25);
					e.maxs = ('6 6 0') * (e.scale*0.25);
					e.maxs_z = 256 * e.scale;
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 8;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 7; //Orangish
						} else if(wrandvar > 30) {
							e.skin = 6; //Slightly Parched Green
						} else if(wrandvar > 10) {
							e.skin = 8; //Green
						}
						//Otherwise normal green
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 5;
						} else if(wrandvar > 35) {
							e.skin = 9;	
						} else {
							e.skin = 4;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							e.skin = 7; //Orangish
						} else {
							e.skin = 1; //Black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7; //Don't have red, so here's orange
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 7;
						} else if(wrandvar > 70) {
							e.skin = 6;	
						} else if(wrandvar > 55) {
							e.skin = 8;	
						}
					}
					Foliage_Scale_Tree(e);
}




void Folaige_eucatree_do (entity e, float myseason)
{
					float wrandvar;
					
					e.model = "models/eucatree.iqm";
					e.lodmodel1 = "models/eucatree_lod1.iqm";
					e.lodmodel2 = "models/eucatree_lod2.iqm";
					e.scale = random() + 0.5;
					e.mins = ('-7 -7 0') * (e.scale*0.25);
					e.maxs = ('7 7 0') * (e.scale*0.25);
					e.maxs_z = 256 * e.scale;
					if (myseason == 2) {
						//"Spring" or rather "Fall"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 5;
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 4;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 1;
						} else {
							e.skin = 5;
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 5; //Don't have Red, so here's orange
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					}
					Foliage_Scale_Tree(e);
}


void Folaige_epinetree_do (entity e, float myseason)
{
					float wrandvar;
					
					e.model = "models/epinetree.iqm";
					e.lodmodel1 = "models/epinetree_lod1.iqm";
					e.lodmodel2 = "models/epinetree_lod2.iqm";
					if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 85) {
							e.skin = 1;
						} else {
							e.skin = 5;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 45) {
							e.skin = 3;
						} else {
							e.skin = 4;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 45) {
							e.skin = 6;
						} else {
							e.skin = 2;
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 6; //Don't have red, so here's orange
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 5;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 2;
					}
					Foliage_Scale_Tree(e);
}




void Folaige_beechtree_do (entity e, float myseason)
{
					float wrandvar;
					
					wrandvar = random() * 100;
					if (myseason == 1) {
						//Summer etc
						if (wrandvar > 55) {
							e.skin = 5;
						} else {
							e.skin = 0;
						}
					} else if (myseason == 2) {
						//Fall
						if (wrandvar > 95) {
							e.skin = 5;
						} else if(wrandvar > 90) {
							e.skin = 0;	
						} else if(wrandvar > 75) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 7;	
						} else if(wrandvar > 35) {
							e.skin = 2;
						} else if(wrandvar > 17) {
							e.skin = 8;
						} else if(wrandvar > 13) {
							e.skin = 9;
						} else {
							e.skin = 1;
						}
					} else if (myseason == 3) {
						//"Winter"
						if(wrandvar > 80) {
							e.skin = 10;
						} else if(wrandvar > 60) {
							e.skin = 13;	
						} else {
							e.skin = 6;
						}
					} else if (myseason == 4) {
						//"Spring" Or rather "Strange"
						if(wrandvar > 60) {
							e.skin = 11;
						} else if(wrandvar > 30) {
							e.skin = 12;
						} else {
							e.skin = 3;
						}
					} else if (myseason == 5) {
						//Sunset Park
						if (wrandvar > 60) {
							e.skin = 2;
						} else if(wrandvar > 30) {
							e.skin = 8;	
						} else {
							e.skin = 9; //black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7;
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 6;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 9;
					} else {
						//Default
						if (wrandvar > 90) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 40) {
							e.skin = 3;
						} else if(wrandvar > 30) {
							e.skin = 2;
						} else if(wrandvar > 20) {
							e.skin = 1;
						} else {
							e.skin = 0;
						}
					}
					Foliage_Scale_Tree(e);
}




void Folaige_rosebush_do (entity e, float myseason)
{
					float wrandvar;
					
					e.model = "models/rose_bush.iqm";
					e.lodmodel1 = "models/rose_bush_lod1.iqm";
					e.lodmodel2 = "models/rose_bush_lod2.iqm";
					e.scale = random() + 0.4;
					e.mins = '-2 -2 -1';
					e.maxs = '2 2 1';
					//e.solid = SOLID_NOT; //Solid 0
				
					//Pretty colors
					wrandvar = random() * 100;
					if (wrandvar > 80) {
						//Hack to not have a color map
						//Works untill the 254th player joins or so...
						e.colormap = 1023;
					} else if (wrandvar > 70) {
						//Purple mixed with red
						e.colormap = (1024 + 8 + 4 * 16);
					} else if (wrandvar > 60) {
						//Magenta mixed with red
						e.colormap = (1024 + 9 + 4 * 16);
					} else if (wrandvar > 50) {
						//RoseMagenta
						e.colormap = (1024 + 10 + 10 * 16);
					} else if (wrandvar > 45) {	
						//Cyan
						e.colormap = (1024 + 6 + 6 * 16);
					} else if (wrandvar > 40) {	
						//Blue
						e.colormap = (1024 + 5 + 5 * 16);
					} else if (wrandvar > 28) {	
						//Red
						e.colormap = (1024 + 4 + 4 * 16);
					} else if (wrandvar > 10) {	
						//randcolor
						float wrandcolor;
						wrandcolor = (floor(random() * 16));
						e.colormap = (1024 + wrandcolor + wrandcolor * 16);
					} else if (wrandvar > 3) {	
						//?? mixed with ??
						e.colormap = (1024 + (floor(random() * 16)) + (floor(random() * 16)) * 16);
					} //Otherwise dont set (white colormap) //Yes intentional that I did similar above
					
					if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							//Oranges
							e.colormap = (1024 + 1 + 1 * 16);
						} else if(wrandvar > 60) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 40) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else {
							e.colormap = 1023; //None	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.colormap = (1024 + 4 + 4 * 16);
					} else if (myseason == 1002) {
						//Solid Color White
						e.colormap = 1024;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.colormap = 1023; //None
					}
					
					e.classname = "bush";
					Foliage_Scale_Bush(e);
}




void Folaige_boubush_do (entity e, float myseason)
{
					e.model = "models/bou_bush.iqm";
					e.lodmodel1 = "models/bou_bush_lod1.iqm";
					e.lodmodel2 = "models/bou_bush_lod2.iqm";
					e.mins = '-2 -2 -1';
					e.maxs = '2 2 1';
					//e.solid = SOLID_NOT;
					e.classname = "bush";
					Foliage_Scale_Bush(e);
}




void Folaige_jubpalmtree_do (entity e, float myseason)
{
				float wrandvar;
				
				//Palmtree
				e.model = "models/jubpalmtree.iqm";
				e.lodmodel1 = "models/jubpalmtree_lod1.iqm";
				e.lodmodel2 = "models/jubpalmtree_lod2.iqm";
				e.maxs_z = 216 * e.scale;
				
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 8;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 30) {
							e.skin = 5;
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 6;
						} else if(wrandvar > 35) {
							e.skin = 9;	
						} else {
							e.skin = 7;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							e.skin = 5;
						} else {
							e.skin = 1;	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 6; //Don't have red, but here's close
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 8;	
						} 
					}
				Foliage_Scale_Tree(e);
}




void Folaige_dypbush_do (entity e, float myseason)
{
				float wrandvar;
				
				//Dypsis
				e.model = "models/dyp_bush.iqm";
				e.lodmodel1 = "models/dyp_bush_lod1.iqm";
				e.lodmodel2 = "models/dyp_bush_lod2.iqm";
				e.scale = random() + 0.4;
				e.mins = '-2 -2 -1';
				e.maxs = '2 2 1';
				//e.solid = SOLID_NOT;
				e.classname = "bush";
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
							//Green
							e.colormap = (1024 + 7 + 7 * 16);
						}
					} else if (myseason == 2) {
						//Fall etc
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//Oranges
							e.colormap = (1024 + 1 + 14 * 16);
						} else if(wrandvar > 50) {
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);
						} else if(wrandvar > 40) {
							//Green with Orange
							e.colormap = (1024 + 7 + 1 * 16);
						} else if(wrandvar > 30) {
							//Green with Orange
							e.colormap = (1024 + 7 + 14 * 16);
						} else if(wrandvar > 20) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 10) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							//Purple mixed with magenta
							e.colormap = (1024 + 8 + 9 * 16);
						} else if(wrandvar > 35) {
							//Blue
							e.colormap = (1024 + 5 + 5 * 16);	
						} else {
							//Cyan
							e.colormap = (1024 + 6 + 6 * 16);
						}
					} else if (myseason == 5) {
						//Sunset Park
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							//Oranges
							e.colormap = (1024 + 1 + 1 * 16);
						} else if(wrandvar > 60) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 40) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else if(wrandvar > 20) {
							//Orange
							e.colormap = 1023; //Silver	
						} else {
							e.skin = 1; //Black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 4;
						e.colormap = (1024 + 4 + 4 * 16);
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 4;
						e.colormap = 1024;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 4;
						e.colormap = 1023; //None
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 90) {
							e.skin = 4;
							//Green with cyan
							e.colormap = (1024 + 7 + 6 * 16);
						} else if(wrandvar > 80) {
							e.skin = 4;
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);	
						}
					}
				Foliage_Scale_Bush(e);
}




void Folaige_bnabush_do (entity e, float myseason)
{
				float wrandvar;
				
				//Banana
				e.model = "models/bna_bush.iqm";
				e.lodmodel1 = "models/bna_bush_lod1.iqm";
				e.lodmodel2 = "models/bna_bush_lod2.iqm";
				e.scale = random() + 0.4;
				e.mins = '-2 -2 -1';
				e.maxs = '2 2 1';
				//e.solid = SOLID_NOT;
				e.classname = "bush";
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 6;
						} else if(wrandvar > 50) {
							e.skin = 12;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 30) {
							e.skin = 5;
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 75) {
							e.skin = 8;
						} else if(wrandvar > 50) {
							e.skin = 9;
						} else if(wrandvar > 25) {
							e.skin = 10;	
						} else {
							e.skin = 11;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							e.skin = 4;
						} else if(wrandvar > 60) {
							e.skin = 13;
						} else if(wrandvar > 40) {
							e.skin = 14;
						} else if(wrandvar > 20) {
							e.skin = 1; //Black	
						} else {
							e.skin = 15;	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 8; //Don't have red, but here's close
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 7;	
						} else if(wrandvar > 55) {
							e.skin = 6;	
						} 
					}
					
					Foliage_Scale_Bush(e);
}




void Folaige_quercustree_do (entity e, float myseason, float myscaletree)
{
					float wrandvar;
					
					//e.scale = random() + 0.8;
					if (myscaletree > 0 && myscaletree < 4) {
						e.mins = ('-120 -120 -128') * (e.scale*0.25);
						e.maxs = ('120 120 0') * (e.scale*0.25);
					} else {
						e.mins = ('-60 -60 -64') * (e.scale*0.25);
						e.maxs = ('60 60 0') * (e.scale*0.25);
					}
					e.maxs_z = 432 * e.scale;
					e.model = "models/quercustree.iqm";
					e.lodmodel1 = "models/quercustree_lod1.iqm";
					e.lodmodel2 = "models/quercustree_lod2.iqm";
					wrandvar = random() * 100;
					if (myseason == 1) {
						//Summer etc
						if (wrandvar > 55) {
							e.skin = 5;
						} else {
							e.skin = 0;
						}
					} else if (myseason == 2) {
						//Fall
						if (wrandvar > 95) {
							e.skin = 5;
						} else if(wrandvar > 90) {
							e.skin = 0;	
						} else if(wrandvar > 75) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 7;	
						} else if(wrandvar > 35) {
							e.skin = 2;
						} else if(wrandvar > 17) {
							e.skin = 8;
						} else if(wrandvar > 13) {
							e.skin = 9;
						} else {
							e.skin = 1;
						}
					} else if (myseason == 3) {
						//"Winter"
						if(wrandvar > 80) {
							e.skin = 10;
						} else if(wrandvar > 60) {
							e.skin = 13;	
						} else {
							e.skin = 6;
						}
					} else if (myseason == 4) {
						//"Spring" Or rather "Strange"
						if(wrandvar > 60) {
							e.skin = 11;
						} else if(wrandvar > 30) {
							e.skin = 12;
						} else {
							e.skin = 3;
						}
					} else if (myseason == 5) {
						//Sunset Park
						if (wrandvar > 60) {
							e.skin = 2;
						} else if(wrandvar > 30) {
							e.skin = 8;	
						} else {
							e.skin = 9; //black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7;
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 6;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 9;
					} else {
						//Default
						if (wrandvar > 90) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 40) {
							e.skin = 3;
						} else if(wrandvar > 30) {
							e.skin = 2;
						} else if(wrandvar > 20) {
							e.skin = 1;
						} else {
							e.skin = 0;
						}
					}
					Foliage_Scale_Tree(e);
					if (myscaletree > 0) {
						if (myscaletree < 4) {
							e.maxs_z = e.maxs_z * 1.5;
						}
					}
}




void Folaige_oldoaktree_do (entity e, float myseason, float myscaletree)
{
					float wrandvar;
					
					//e.scale = random() + 0.8;
					if (myscaletree > 0 && myscaletree < 4) {
						e.mins = ('-300 -300 -128') * (e.scale*0.25);
						e.maxs = ('300 300 0') * (e.scale*0.25);
					} else {
						e.mins = ('-150 -150 -64') * (e.scale*0.25);
						e.maxs = ('150 150 0') * (e.scale*0.25);
					}
					e.maxs_z = 256 * e.scale;
					e.model = "models/oldoaktree.iqm";
					e.lodmodel1 = "models/oldoaktree_lod1.iqm";
					e.lodmodel2 = "models/oldoaktree_lod2.iqm";
					wrandvar = random() * 100;
					if (myseason == 1) {
						//Summer etc
						if (wrandvar > 55) {
							e.skin = 5;
						} else {
							e.skin = 0;
						}
					} else if (myseason == 2) {
						//Fall
						if (wrandvar > 95) {
							e.skin = 5;
						} else if(wrandvar > 90) {
							e.skin = 0;	
						} else if(wrandvar > 75) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 7;	
						} else if(wrandvar > 35) {
							e.skin = 2;
						} else if(wrandvar > 17) {
							e.skin = 8;
						} else if(wrandvar > 13) {
							e.skin = 9;
						} else {
							e.skin = 1;
						}
					} else if (myseason == 3) {
						//"Winter"
						if(wrandvar > 80) {
							e.skin = 10;
						} else if(wrandvar > 60) {
							e.skin = 13;	
						} else {
							e.skin = 6;
						}
					} else if (myseason == 4) {
						//"Spring" Or rather "Strange"
						if(wrandvar > 60) {
							e.skin = 11;
						} else if(wrandvar > 30) {
							e.skin = 12;
						} else {
							e.skin = 3;
						}
					} else if (myseason == 5) {
						//Sunset Park
						if (wrandvar > 60) {
							e.skin = 2;
						} else if(wrandvar > 30) {
							e.skin = 8;	
						} else {
							e.skin = 9; //black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7;
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 6;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 9;
					} else {
						//Default
						if (wrandvar > 90) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 40) {
							e.skin = 3;
						} else if(wrandvar > 30) {
							e.skin = 2;
						} else if(wrandvar > 20) {
							e.skin = 1;
						} else {
							e.skin = 0;
						}
					}
					Foliage_Scale_Tree(e);
					if (myscaletree > 0) {
						if (myscaletree < 4) {
							e.maxs_z = e.maxs_z * 1.5;
						}
					}
}




void Folaige_cedartree_do (entity e, float myseason, float myscaletree)
{
					float wrandvar;
					
					//e.scale = random() + 0.8;
					if (myscaletree > 0 && myscaletree < 4) {
						e.mins = ('-120 -120 -64') * (e.scale*0.25);
						e.maxs = ('120 120 0') * (e.scale*0.25);
					} else {
						e.mins = ('-50 -50 -32') * (e.scale*0.25);
						e.maxs = ('50 50 0') * (e.scale*0.25);
					}
					e.maxs_z = 448 * e.scale;
					e.model = "models/cedartree.iqm";
					e.lodmodel1 = "models/cedartree_lod1.iqm";
					e.lodmodel2 = "models/cedartree_lod2.iqm";
					
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 8;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 30) {
							e.skin = 5;
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 6;
						} else if(wrandvar > 35) {
							e.skin = 9;	
						} else {
							e.skin = 7;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							e.skin = 5;
						} else {
							e.skin = 1;	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 6; //Don't have red, but close
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 8;	
						} 
					}
					
					Foliage_Scale_Tree(e);
					if (myscaletree > 0) {
						if (myscaletree < 4) {
							e.maxs_z = e.maxs_z * 1.5;
						}
					}
}




void Folaige_swamptree_do (entity e, float myseason, float myscaletree)
{
					float wrandvar;
					
					//e.scale = random() + 0.8;
					if (myscaletree > 0 && myscaletree < 4) {
						e.mins = ('-105 -105 -128') * (e.scale*0.25);
						e.maxs = ('105 105 0') * (e.scale*0.25);
					} else {
						e.mins = ('-50 -50 -64') * (e.scale*0.25);
						e.maxs = ('50 50 0') * (e.scale*0.25);
					}
					e.maxs_z = 256 * e.scale;
					e.model = "models/swamptree.iqm";
					e.lodmodel1 = "models/swamptree_lod1.iqm";
					e.lodmodel2 = "models/swamptree_lod2.iqm";
					
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
							//Green
							e.colormap = (1024 + 7 + 7 * 16);
						}
					} else if (myseason == 2) {
						//Fall etc
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//Oranges
							e.colormap = (1024 + 1 + 14 * 16);
						} else if(wrandvar > 50) {
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);
						} else if(wrandvar > 40) {
							//Green with Orange
							e.colormap = (1024 + 7 + 1 * 16);
						} else if(wrandvar > 30) {
							//Green with Orange
							e.colormap = (1024 + 7 + 14 * 16);
						} else if(wrandvar > 20) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 10) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							//Purple mixed with magenta
							e.colormap = (1024 + 8 + 9 * 16);
						} else if(wrandvar > 35) {
							//Blue
							e.colormap = (1024 + 5 + 5 * 16);	
						} else {
							//Cyan
							e.colormap = (1024 + 6 + 6 * 16);
						}
					} else if (myseason == 5) {
						//Sunset Park
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							//Oranges
							e.colormap = (1024 + 1 + 1 * 16);
						} else if(wrandvar > 60) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 40) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else if(wrandvar > 20) {
							//Orange
							e.colormap = 1023; //Silver	
						} else {
							e.skin = 1; //Black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 4;
						e.colormap = (1024 + 4 + 4 * 16); //Red
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 90) {
							e.skin = 4;
							//Green with cyan
							e.colormap = (1024 + 7 + 6 * 16);
						} else if(wrandvar > 80) {
							e.skin = 4;
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);	
						}
					}
					
					Foliage_Scale_Tree(e);
					if (myscaletree > 0) {
						if (myscaletree < 4) {
							e.maxs_z = e.maxs_z * 1.5;
						}
					}
}

//////
//////

void spawnfoliageindividualstart()
{	
	if (!(self.angles_x)
	&& !(self.angles_y)
	&& !(self.angles_z))
	{
		//No angles set? We'll set some angles...
		self.angles_y = random() * 180;
	}
	
	if (self.spawnflags & 64) {
		droptofloor();
		self.spawnflags &~= 64;
	}
	
	self.fixangle = TRUE;
			
	self.model = "models/beechtree.iqm";
	self.lodmodel1 = "models/beechtree_lod1.iqm";
	self.lodmodel2 = "models/beechtree_lod2.iqm";
	
	if (self.modelscale) {
		self.scale = self.modelscale;
		self.modelscale = 0;
	}
	
	if (self.scale) {
		//Save info for later
		self.ammount4 = self.scale;
	}
	
	if not(self.scale) {		
		self.scale = random() + 0.8;
	}
	
	self.mins = ('-9 -9 0') * (self.scale*0.25);
	self.maxs = ('9 9 0') * (self.scale*0.25);
	self.maxs_z = 256 * self.scale;
			
	self.ballistics_density = autocvar_g_ballistics_density_wood;
	self.solid = SOLID_SLIDEBOX; //Solid 3
			
	self.classname = "tree";
}

//For trees defined by map object
void spawnfoliagemapdefinedindividualstart(float mysizexy, float myheight)
{	
	if (!(self.angles_x)
	&& !(self.angles_y)
	&& !(self.angles_z))
	{
		//No angles set? We'll set some angles...
		self.angles_y = random() * 180;
	}
	
	if (self.spawnflags & 64) {
		droptofloor();
		self.spawnflags &~= 64;
	}
	
	self.fixangle = TRUE;
	
	//Don't set model here
	
	if (self.modelscale) {
		self.scale = self.modelscale;
		self.modelscale = 0;
	}
	
	if (self.scale) {
		//Save info for later
		self.ammount4 = self.scale;
	}
	
	if not(self.scale) {		
		self.scale = random() + 0.8;
	}
	
	if (mysizexy) {
	self.mins = (('-1 -1 0') * mysizexy) * (self.scale*0.25);
	self.maxs = (('1 1 0') * mysizexy) * (self.scale*0.25);
	} else {
	self.mins = ('-9 -9 0') * (self.scale*0.25);
	self.maxs = ('9 9 0') * (self.scale*0.25);
	}
	
	if (myheight) {
	self.maxs_z = myheight * self.scale;
	} else {
	self.maxs_z = 256 * self.scale;
	}
			
	self.ballistics_density = autocvar_g_ballistics_density_wood;
	self.solid = SOLID_SLIDEBOX; //Solid 3
			
	self.classname = "tree";
}

void spawnfoliageindividualend()
{
			//if (self.ammount4) {
			//	self.scale = self.ammount4;
			//}
			
			//Tanken from Foliage_Grow_Thicker
			//Consult there for reasons
			
			if (self.ammount4 > 0) {
				
					self.scale = self.scale * self.ammount4;
					self.mins = self.mins * (self.ammount4*0.25);
					self.maxs = self.maxs * (self.ammount4*0.25);
				
				if (self.scale > 3)
				{
					if (((world.maxs_x - world.mins_x) > 60000)
					|| ((world.maxs_y - world.mins_y) > 60000))
					{	
						//print("Hugemap, increase lod\n");
						
						
							if(!self.loddistance1)
								self.loddistance1 = 1000 * self.scale;
							if(!self.loddistance2)
								self.loddistance2 = 2000 * self.scale;
							if(!self.loddistance3)
								self.loddistance3 = 3000 * self.scale;
							if(!self.loddistance4)
								self.loddistance4 = 4000 * self.scale;
					}
				}
			}
			
			self.vehicle_health = self.maxs_x * 3280;			
			
			self.multitool_ammocurrent = (self.maxs_x * self.maxs_y * 4) * self.maxs_z * 0.06;
			if (spawnfoliagearound_resourcemultiplier) {
			 if (spawnfoliagearound_resourcemultiplier != 1) {
			  if (spawnfoliagearound_resourcemultiplier > 0) {
				self.multitool_ammocurrent = self.multitool_ammocurrent * spawnfoliagearound_resourcemultiplier;
			  }
			 }
			}
			
			setorigin(self, self.origin);
			
			spawnfunc_misc_gamemodel();
}

float spawnfoliageindividualseason()
{
	local float myseason;
	
	if (self.count < 0) {
		myseason = 0;
		self.count = 0;
	} else if (self.count) {
		myseason = self.count;
		self.count = 0;
	} else if (spawnfoliagearound_season > 0) {
		myseason = spawnfoliagearound_season;
	} else if (cvar("g_spawnfoliagearound") && (cvar("g_spawnfoliagearound_preset") < 1)) {
		myseason = autocvar_g_spawnfoliagearound_season;
	} else {
		myseason = 0;
	}
	
	return myseason;
}

void spawnfunc_foliage_beechtree()
{	
	spawnfoliageindividualstart();
	Folaige_beechtree_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_iftree()
{	
	spawnfoliageindividualstart();
	Folaige_iftree_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_eucatree()
{	
	spawnfoliageindividualstart();
	Folaige_eucatree_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_epinetree()
{	
	spawnfoliageindividualstart();
	Folaige_epinetree_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_jubpalmtree()
{	
	spawnfoliageindividualstart();
	Folaige_jubpalmtree_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_rosebush()
{	
	spawnfoliageindividualstart();
	Folaige_rosebush_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_dypbush()
{	
	spawnfoliageindividualstart();
	Folaige_dypbush_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_bnabush()
{	
	spawnfoliageindividualstart();
	Folaige_bnabush_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_boubush()
{	
	spawnfoliageindividualstart();
	Folaige_boubush_do(self, spawnfoliageindividualseason());
	spawnfoliageindividualend();
}

void spawnfunc_foliage_quercustree()
{	
	spawnfoliageindividualstart();
	Folaige_quercustree_do(self, spawnfoliageindividualseason(), self.ammount4);
	spawnfoliageindividualend();
}

void spawnfunc_foliage_oldoaktree()
{	
	spawnfoliageindividualstart();
	Folaige_oldoaktree_do(self, spawnfoliageindividualseason(), self.ammount4);
	spawnfoliageindividualend();
}

void spawnfunc_foliage_cedartree()
{	
	spawnfoliageindividualstart();
	Folaige_cedartree_do(self, spawnfoliageindividualseason(), self.ammount4);
	spawnfoliageindividualend();
}

void spawnfunc_foliage_swamptree()
{	
	spawnfoliageindividualstart();
	Folaige_swamptree_do(self, spawnfoliageindividualseason(), self.ammount4);
	spawnfoliageindividualend();
}


//////Map defined foliage
void spawnfoliagemapdefinedindividualsetseason (entity e, float myseason, float myseasonset)
{
	float wrandvar;
	if (myseasonset) {
		wrandvar = random() * 100;
	} else {
		return;
	}
	
	if (myseasonset == 1) {
	//Beechtreestyle
					if (myseason == 1) {
						//Summer etc
						if (wrandvar > 55) {
							e.skin = 5;
						} else {
							e.skin = 0;
						}
					} else if (myseason == 2) {
						//Fall
						if (wrandvar > 95) {
							e.skin = 5;
						} else if(wrandvar > 90) {
							e.skin = 0;	
						} else if(wrandvar > 75) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 7;	
						} else if(wrandvar > 35) {
							e.skin = 2;
						} else if(wrandvar > 17) {
							e.skin = 8;
						} else if(wrandvar > 13) {
							e.skin = 9;
						} else {
							e.skin = 1;
						}
					} else if (myseason == 3) {
						//"Winter"
						if(wrandvar > 80) {
							e.skin = 10;
						} else if(wrandvar > 60) {
							e.skin = 13;	
						} else {
							e.skin = 6;
						}
					} else if (myseason == 4) {
						//"Spring" Or rather "Strange"
						if(wrandvar > 60) {
							e.skin = 11;
						} else if(wrandvar > 30) {
							e.skin = 12;
						} else {
							e.skin = 3;
						}
					} else if (myseason == 5) {
						//Sunset Park
						if (wrandvar > 60) {
							e.skin = 2;
						} else if(wrandvar > 30) {
							e.skin = 8;	
						} else {
							e.skin = 9; //black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7;
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 6;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 9;
					} else {
						//Default
						if (wrandvar > 90) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 40) {
							e.skin = 3;
						} else if(wrandvar > 30) {
							e.skin = 2;
						} else if(wrandvar > 20) {
							e.skin = 1;
						} else {
							e.skin = 0;
						}
					}
	} else if (myseasonset == 2) {
	//Eucatree style
					if (myseason == 2) {
						//"Spring" or rather "Fall"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 5;
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 4;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 1;
						} else {
							e.skin = 5;
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 5; //Don't have Red, so here's orange
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					}
	} else if (myseasonset == 3) {
	//EPine tree style
					if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 85) {
							e.skin = 1;
						} else {
							e.skin = 5;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 45) {
							e.skin = 3;
						} else {
							e.skin = 4;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 45) {
							e.skin = 6;
						} else {
							e.skin = 2;
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 6; //Don't have red, so here's orange
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 5;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 2;
					}
	} else if (myseasonset == 4) {
	//Iftree Style
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 8;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 7; //Orangish
						} else if(wrandvar > 30) {
							e.skin = 6; //Slightly Parched Green
						} else if(wrandvar > 10) {
							e.skin = 8; //Green
						}
						//Otherwise normal green
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 5;
						} else if(wrandvar > 35) {
							e.skin = 9;	
						} else {
							e.skin = 4;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							e.skin = 7; //Orangish
						} else {
							e.skin = 1; //Black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7; //Don't have red, so here's orange
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 7;
						} else if(wrandvar > 70) {
							e.skin = 6;	
						} else if(wrandvar > 55) {
							e.skin = 8;	
						}
					}				
	} else if (myseasonset == 5) {
	//JubPalmTree Style
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 8;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 30) {
							e.skin = 5;
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 6;
						} else if(wrandvar > 35) {
							e.skin = 9;	
						} else {
							e.skin = 7;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							e.skin = 5;
						} else {
							e.skin = 1;	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 6; //Don't have red, but here's close
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 8;	
						} 
					}
	} else if (myseasonset == 6) {
	//Dyp Bush Style
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
							//Green
							e.colormap = (1024 + 7 + 7 * 16);
						}
					} else if (myseason == 2) {
						//Fall etc
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//Oranges
							e.colormap = (1024 + 1 + 14 * 16);
						} else if(wrandvar > 50) {
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);
						} else if(wrandvar > 40) {
							//Green with Orange
							e.colormap = (1024 + 7 + 1 * 16);
						} else if(wrandvar > 30) {
							//Green with Orange
							e.colormap = (1024 + 7 + 14 * 16);
						} else if(wrandvar > 20) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 10) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							//Purple mixed with magenta
							e.colormap = (1024 + 8 + 9 * 16);
						} else if(wrandvar > 35) {
							//Blue
							e.colormap = (1024 + 5 + 5 * 16);	
						} else {
							//Cyan
							e.colormap = (1024 + 6 + 6 * 16);
						}
					} else if (myseason == 5) {
						//Sunset Park
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							//Oranges
							e.colormap = (1024 + 1 + 1 * 16);
						} else if(wrandvar > 60) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 40) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else if(wrandvar > 20) {
							//Orange
							e.colormap = 1023; //Silver	
						} else {
							e.skin = 1; //Black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 4;
						e.colormap = (1024 + 4 + 4 * 16);
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 4;
						e.colormap = 1024;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 4;
						e.colormap = 1023; //None
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 90) {
							e.skin = 4;
							//Green with cyan
							e.colormap = (1024 + 7 + 6 * 16);
						} else if(wrandvar > 80) {
							e.skin = 4;
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);	
						}
					}
	} else if (myseasonset == 7) {
	//Bna Bush Style
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 6;
						} else if(wrandvar > 50) {
							e.skin = 12;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 30) {
							e.skin = 5;
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 75) {
							e.skin = 8;
						} else if(wrandvar > 50) {
							e.skin = 9;
						} else if(wrandvar > 25) {
							e.skin = 10;	
						} else {
							e.skin = 11;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							e.skin = 4;
						} else if(wrandvar > 60) {
							e.skin = 13;
						} else if(wrandvar > 40) {
							e.skin = 14;
						} else if(wrandvar > 20) {
							e.skin = 1; //Black	
						} else {
							e.skin = 15;	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 8; //Don't have red, but here's close
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 7;	
						} else if(wrandvar > 55) {
							e.skin = 6;	
						} 
					}		
	} else if (myseasonset == 8) {
	//By the numbers Style
					if (myseason == 1) {
						//Summer etc
						e.skin = 0;
					//Skin1 is black
					} else if (myseason == 2) {
						//Fall etc
						e.skin = 2;
					} else if (myseason == 3) {
						//"Winter"
						e.skin = 3;
					} else if (myseason == 4) {
						//"Strange"
						e.skin = 4;
					} else if (myseason == 5) {
						//Sunset Park
						e.skin = 5;
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 6; //Don't have red, but here's close
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 50) {
							e.skin = 0;	
						} else {
							e.skin = 1;	
						} 
					}		
	}
}

void spawnfunc_foliage_map_treemodel()
{	
	local float mysizexy, myheight, myseasonset, mysolid;
	mysizexy = myheight = myseasonset = mysolid = 0;
	if (self.model == "") {
		remove(self);
		return;
	}
	
	if (self.amnt) mysizexy = self.amnt;
	
	self.amnt = 0;
	
	if (self.cnt) myheight = self.cnt;
	
	self.cnt = 0;
	
	if (self.ammount) myseasonset = self.ammount;
	
	self.ammount = 0;
	
	if (self.solid) mysolid = self.solid;
	
	spawnfoliagemapdefinedindividualsetseason(self, myseasonset, spawnfoliageindividualseason());
	
	spawnfoliagemapdefinedindividualstart(mysizexy, myheight);
	Foliage_Scale_Tree(self);
	if (mysolid) {
		if (mysolid < 0) {
			self.solid = SOLID_NOT;
		} else {
			self.solid = mysolid;
		}
	}
	spawnfoliageindividualend();
}

void spawnfunc_foliage_map_bushmodel()
{	
	local float mysizexy, myheight, myseasonset, mysolid;
	mysizexy = myheight = myseasonset = mysolid = 0;
	if (self.model == "") {
		remove(self);
		return;
	}
	
	if (self.amnt) mysizexy = self.amnt;
	
	self.amnt = 0;
	
	if (self.cnt) myheight = self.cnt;
	
	self.cnt = 0;
	
	if (self.ammount) myseasonset = self.ammount;
	
	self.ammount = 0;
	
	if (self.solid) mysolid = self.solid;

	spawnfoliagemapdefinedindividualsetseason(self, myseasonset, spawnfoliageindividualseason());
	
	spawnfoliagemapdefinedindividualstart(mysizexy, myheight);
	self.mins = '-2 -2 -1';
	self.maxs = '2 2 1';
	self.classname = "bush";
	Foliage_Scale_Bush(self);
	if (mysolid) {
		if (mysolid < 0) {
			self.solid = SOLID_NOT;
		} else {
			self.solid = mysolid;
		}
	}
	spawnfoliageindividualend();
}

//////
//////

float Foliage_Grow_Thicker(float spawns_we_want, vector givenorigin, float usegiven, float maxfail)
{
	if (g_spawnfoliagearound_current >= cvar("g_spawnfoliagearound_max")) {
		//dprint("We have enough foliage\n");
		return 0;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Foliage\n");
	for(i = 1; i <= spawns_we_want;)
	{
		if ((g_spawnfoliagearound_currentfail > maxfail)
		&& ((g_spawnfoliagearound_currentwin * 1.5) < g_spawnfoliagearound_currentfail)
		) {
			//If too difficult to find a spot and above maxfail, giveup
			//print("Giving up attempt to Spawn Foliage\n");
			i = spawns_we_want + 1;
			++i; //Yeah
		} else {
		
		//getautocvars

		if (usegiven)
		{
			if (usegiven >= 2)
			{
				//Force
				selected_origin = givenorigin;
			} else {
				selected_origin = Foliage_Select_Spawn_Point(givenorigin, 1);
				if(selected_origin == '0 0 0')
					return FALSE; //If that point returns false, it's going to keep doing so
			}
		}
		else
			selected_origin = Foliage_Select_Spawn_Point('0 0 0', 0);
		
		if(selected_origin != '0 0 0')
		{
			local float mytreeisgrove;
			local float mybushisarea; //grass area etc
			local float mytreesetcustomlod;
			local float myseason;
			myseason = Foliage_SetSeason_SpecialConsiderations(spawnfoliagearound_season);
			mytreeisgrove = 0;
			mybushisarea = 0;
			mytreesetcustomlod = 0;
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			
			e.model = "models/beechtree.iqm";
			e.lodmodel1 = "models/beechtree_lod1.iqm";
			e.lodmodel2 = "models/beechtree_lod2.iqm";
			
			e.scale = random() + 0.8;
			e.mins = ('-9 -9 0') * (e.scale*0.25);
			e.maxs = ('9 9 0') * (e.scale*0.25);
			e.maxs_z = 256 * e.scale;
			
			e.ballistics_density = autocvar_g_ballistics_density_wood;
			e.solid = SOLID_SLIDEBOX; //Solid 3
			
			e.classname = "tree";
			
			
			float randvar;
			randvar = random() *
			(spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			+ spawnfoliagearound_jubpalmtreegrove_amnt
			+ spawnfoliagearound_quercustree_amnt
			+ spawnfoliagearound_oldoaktree_amnt
			+ spawnfoliagearound_cedartree_amnt
			+ spawnfoliagearound_swamptree_amnt
			+ spawnfoliagearound_grassyarea_amnt
			);
			float wrandvar;
			
			
			if (randvar < spawnfoliagearound_beechtree_amnt) {
					Folaige_beechtree_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			)) {
					Folaige_epinetree_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			)) {
					Folaige_eucatree_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			)) {
					Folaige_iftree_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			)) {
					Folaige_rosebush_do(e, myseason);			
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			)) {
					Folaige_boubush_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			)) {
				Folaige_jubpalmtree_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			)) {
				Folaige_dypbush_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			)) {
				Folaige_bnabush_do(e, myseason);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			)) {
					if (autocvar_g_spawnfoliagearound_groves_are_solid)
					{
						//More CPU time, but some can spare it.
						e.mins = '0 0 0';
						e.maxs = '0 0 0';
						e.solid = SOLID_BSP;
					}
					//Grove of beechtrees (5), for more trees per entity used
					e.model = "models/groves/beechtree/beechtreegrove.iqm";
					e.lodmodel1 = "models/groves/beechtree/beechtreegrove_lod1.iqm";
					e.lodmodel2 = "models/groves/beechtree/beechtreegrove_lod2.iqm";
					
					wrandvar = random() * 100;
					if (myseason == 1) {
						//Summer etc
						if (wrandvar > 55) {
							e.skin = 5;
						} else {
							e.skin = 0;
						}
					} else if (myseason == 2) {
						//Fall
						if (wrandvar > 95) {
							e.skin = 5;
						} else if(wrandvar > 90) {
							e.skin = 0;	
						} else if(wrandvar > 75) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 7;	
						} else if(wrandvar > 35) {
							e.skin = 2;
						} else if(wrandvar > 17) {
							e.skin = 8;
						} else if(wrandvar > 13) {
							e.skin = 9;
						} else {
							e.skin = 1;
						}
					} else if (myseason == 3) {
						//"Winter"
						if(wrandvar > 80) {
							e.skin = 10;
						} else if(wrandvar > 60) {
							e.skin = 13;	
						} else {
							e.skin = 6;
						}
					} else if (myseason == 4) {
						//"Spring" Or rather "Strange"
						if(wrandvar > 60) {
							e.skin = 11;
						} else if(wrandvar > 30) {
							e.skin = 12;
						} else {
							e.skin = 3;
						}
					} else if (myseason == 5) {
						//Sunset Park
						if (wrandvar > 60) {
							e.skin = 2;
						} else if(wrandvar > 30) {
							e.skin = 8;	
						} else {
							e.skin = 9; //black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7;
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 6;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 9;
					} else {
						//Default
						if (wrandvar > 90) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 40) {
							e.skin = 3;
						} else if(wrandvar > 30) {
							e.skin = 2;
						} else if(wrandvar > 20) {
							e.skin = 1;
						} else {
							e.skin = 0;
						}
					}
					mytreeisgrove = 1;
					Foliage_Scale_Tree(e);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			)) {
					if (autocvar_g_spawnfoliagearound_groves_are_solid)
					{
						//More CPU time, but some can spare it.
						e.mins = '0 0 0';
						e.maxs = '0 0 0';
						e.solid = SOLID_BSP;
					}
					//Grove of iftrees (5), for more trees per entity used
					e.model = "models/groves/iftree/iftreegrove.iqm";
					e.lodmodel1 = "models/groves/iftree/iftreegrove_lod1.iqm";
					e.lodmodel2 = "models/groves/iftree/iftreegrove_lod2.iqm";
					e.scale = random() + 0.4;
					e.mins = ('-6 -6 0') * (e.scale*0.25);
					e.maxs = ('6 6 0') * (e.scale*0.25);
					e.maxs_z = 256 * e.scale;
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 8;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 7; //Orangish
						} else if(wrandvar > 30) {
							e.skin = 6; //Slightly Parched Green
						} else if(wrandvar > 10) {
							e.skin = 8; //Green
						}
						//Otherwise normal green
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 5;
						} else if(wrandvar > 35) {
							e.skin = 9;	
						} else {
							e.skin = 4;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							e.skin = 7; //Orangish
						} else {
							e.skin = 1; //Black	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 7; //Don't have red, so here's orange
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 7;
						} else if(wrandvar > 70) {
							e.skin = 6;	
						} else if(wrandvar > 55) {
							e.skin = 8;	
						} 
					}
					
					mytreeisgrove = 1;
					Foliage_Scale_Tree(e);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			+ spawnfoliagearound_jubpalmtreegrove_amnt
			)) {
					if (autocvar_g_spawnfoliagearound_groves_are_solid)
					{
						//More CPU time, but some can spare it.
						e.mins = '0 0 0';
						e.maxs = '0 0 0';
						e.solid = SOLID_BSP;
					}
					//Grove of jubpalmtree (5), for more trees per entity used
					e.model = "models/groves/jubpalmtree/jubpalmtreegrove.iqm";
					e.lodmodel1 = "models/groves/jubpalmtree/jubpalmtreegrove_lod1.iqm";
					e.lodmodel2 = "models/groves/jubpalmtree/jubpalmtreegrove_lod2.iqm";
					e.maxs_z = 216 * e.scale;
				
					if (myseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 8;
						}
					} else if (myseason == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
						} else if(wrandvar > 30) {
							e.skin = 5;
						} else {
							e.skin = 0;	
						}
					} else if (myseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (myseason == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							e.skin = 6;
						} else if(wrandvar > 35) {
							e.skin = 9;	
						} else {
							e.skin = 7;
						}
					} else if (myseason == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							e.skin = 5;
						} else {
							e.skin = 1;	
						}
					} else if (myseason == 1001) {
						//Solid Color Red
						e.skin = 6; //Don't have red, but here's close
					} else if (myseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (myseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 97) {
							e.skin = 5;
						} else if(wrandvar > 70) {
							e.skin = 4;	
						} else if(wrandvar > 55) {
							e.skin = 8;	
						} 
					}
					
					mytreeisgrove = 1;
					Foliage_Scale_Tree(e);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			+ spawnfoliagearound_jubpalmtreegrove_amnt
			+ spawnfoliagearound_quercustree_amnt
			)) {
					e.loddistance1 = 7000;
					e.loddistance2 = 14000;
					e.loddistance3 = 32000;
					mytreesetcustomlod = 1;
					Folaige_quercustree_do(e, myseason, spawnfoliagearound_scale_tree);
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			+ spawnfoliagearound_jubpalmtreegrove_amnt
			+ spawnfoliagearound_quercustree_amnt
			+ spawnfoliagearound_oldoaktree_amnt
			)) {
					if (autocvar_g_spawnfoliagearound_oldoaktree_is_solid)
					{
						//More CPU time, but some can spare it.
						//e.mins = '0 0 0';
						//e.maxs = '0 0 0';
						e.solid = SOLID_BSP;
					}
					e.loddistance1 = 8000;
					e.loddistance2 = 16000;
					e.loddistance3 = 32000;
					mytreesetcustomlod = 1;
					Folaige_oldoaktree_do(e, myseason, spawnfoliagearound_scale_tree);
			//
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			+ spawnfoliagearound_jubpalmtreegrove_amnt
			+ spawnfoliagearound_quercustree_amnt
			+ spawnfoliagearound_oldoaktree_amnt
			+ spawnfoliagearound_cedartree_amnt
			)) {
					e.loddistance1 = 8000;
					e.loddistance2 = 16000;
					e.loddistance3 = 32000;
					mytreesetcustomlod = 1;
					Folaige_cedartree_do(e, myseason, spawnfoliagearound_scale_tree);
			//
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			+ spawnfoliagearound_jubpalmtreegrove_amnt
			+ spawnfoliagearound_quercustree_amnt
			+ spawnfoliagearound_oldoaktree_amnt
			+ spawnfoliagearound_cedartree_amnt
			+ spawnfoliagearound_swamptree_amnt
			)) {
					//Skin 4 is colormap, 1 is black, 2 is inverted, 3 is white
					//(like dyp bush)
					e.loddistance1 = 8000;
					e.loddistance2 = 16000;
					e.loddistance3 = 32000;
					mytreesetcustomlod = 1;
					Folaige_swamptree_do(e, myseason, spawnfoliagearound_scale_tree);
			//
			} else if (randvar < (
			spawnfoliagearound_beechtree_amnt
			+ spawnfoliagearound_epinetree_amnt
			+ spawnfoliagearound_eucatree_amnt
			+ spawnfoliagearound_iftree_amnt
			+ spawnfoliagearound_rosebush_amnt
			+ spawnfoliagearound_boubush_amnt
			+ spawnfoliagearound_jubpalmtree_amnt
			+ spawnfoliagearound_dypbush_amnt
			+ spawnfoliagearound_bnabush_amnt
			+ spawnfoliagearound_beechtreegrove_amnt
			+ spawnfoliagearound_iftreegrove_amnt
			+ spawnfoliagearound_jubpalmtreegrove_amnt
			+ spawnfoliagearound_quercustree_amnt
			+ spawnfoliagearound_oldoaktree_amnt
			+ spawnfoliagearound_cedartree_amnt
			+ spawnfoliagearound_swamptree_amnt
			+ spawnfoliagearound_grassyarea_amnt
			)) {
				local float mygrassseason;
					//Skin 4 is colormap, 1 is black, 2 is inverted, 3 is white
					//(like dyp bush)
					e.loddistance1 = 8000;
					e.loddistance2 = 16000;
					e.loddistance3 = 32000;
					mytreesetcustomlod = 1;
					mybushisarea = 1;
					
					e.model = "models/grassyarea.iqm";
					e.lodmodel1 = "models/grassyarea_lod1.iqm";
					e.lodmodel2 = "models/grassyarea_lod2.iqm";
					
					e.scale = random() + 0.64;
					e.mins = '-2 -2 -1';
					e.maxs = '2 2 1';
					//e.solid = SOLID_NOT;
					e.classname = "bush";
					
					if (spawnfoliagearound_grassyarea_altseason) {
						mygrassseason = spawnfoliagearound_grassyarea_altseason;
					} else {
						mygrassseason = myseason;
					}
				
					if (mygrassseason == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 4;
							//Green
							e.colormap = (1024 + 7 + 7 * 16);
						}
					} else if (mygrassseason == 2) {
						//Fall etc
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//Oranges
							e.colormap = (1024 + 1 + 14 * 16);
						} else if(wrandvar > 50) {
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);
						} else if(wrandvar > 40) {
							//Green with Orange
							e.colormap = (1024 + 7 + 1 * 16);
						} else if(wrandvar > 30) {
							//Green with Orange
							e.colormap = (1024 + 7 + 14 * 16);
						} else if(wrandvar > 20) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 10) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else {
							e.skin = 0;	
						}
					} else if (mygrassseason == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							e.skin = 2;
						} else {
							e.skin = 3;	
						}
					} else if (mygrassseason == 4) {
						//"Spring" or rather "Strange"
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							//Purple mixed with magenta
							e.colormap = (1024 + 8 + 9 * 16);
						} else if(wrandvar > 35) {
							//Blue
							e.colormap = (1024 + 5 + 5 * 16);	
						} else {
							//Cyan
							e.colormap = (1024 + 6 + 6 * 16);
						}
					} else if (mygrassseason == 5) {
						//Sunset Park
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							//Oranges
							e.colormap = (1024 + 1 + 1 * 16);
						} else if(wrandvar > 60) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 40) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else if(wrandvar > 20) {
							//Orange
							e.colormap = 1023; //Silver	
						} else {
							e.skin = 1; //Black	
						}
					} else if (mygrassseason == 30) {
						//Special for grassyarea_altseason
						//Fall Winterish
						e.skin = 4;
						wrandvar = random() * 100;
						if(wrandvar > 75) {
							//Oranges
							e.colormap = (1024 + 1 + 14 * 16);
						} else if(wrandvar > 50) {
							//Yellow
							e.colormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 25) {
							//Orange
							e.colormap = (1024 + 14 + 14 * 16);
						} else {
							//White
							e.skin = 3;
						}
					} else if (mygrassseason == 1001) {
						//Solid Color Red
						e.skin = 4;
						e.colormap = (1024 + 4 + 4 * 16); //Red
					} else if (mygrassseason == 1002) {
						//Solid Color White
						e.skin = 3;
					} else if (mygrassseason == 1002) {
						//Solid Color Black
						e.skin = 1;
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 90) {
							e.skin = 4;
							//Green with cyan
							e.colormap = (1024 + 7 + 6 * 16);
						} else if(wrandvar > 80) {
							e.skin = 4;
							//Green with yellow
							e.colormap = (1024 + 7 + 12 * 16);	
						}
					}
					
					Foliage_Scale_Bush(e);
			} else {
				//Failsafe, mini trees
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.scale = random() * 0.1;
			}
			
			local vector mytreeisgrovemins;
			local vector mytreeisgrovemaxs;
			if (mytreeisgrove) {
				if (mytreesetcustomlod) {
					e.loddistance1 = e.loddistance1 + 1000;
					e.loddistance2 = e.loddistance2 + 1000;
					e.loddistance3 = e.loddistance3 + 1000;
					e.loddistance4 = e.loddistance4 + 1000;
				} else {		
					e.loddistance1 = 2000; //1000 more for all
					e.loddistance2 = 3000;
					e.loddistance3 = 4000;
					e.loddistance4 = 5000;
				}
				
				if not (autocvar_g_spawnfoliagearound_groves_are_solid) {
					mytreeisgrovemins = e.mins;
					mytreeisgrovemaxs = e.maxs;
				}
			}
			
			if (spawnfoliagearound_scale > 0) {
				if((spawnfoliagearound_scaleunder)
				&& (spawnfoliagearound_scaleunder > random()))
				{
					local float xmt;
					//Example algo: 0.1+((0.33 * (0.4-0.1)))
					xmt = spawnfoliagearound_scaleunder_min + ((random() * (spawnfoliagearound_scaleunder_max - spawnfoliagearound_scaleunder_min)));
					e.scale = e.scale * spawnfoliagearound_scale*xmt;
					e.mins = e.mins * (spawnfoliagearound_scale*xmt*0.25);
					e.maxs = e.maxs * (spawnfoliagearound_scale*xmt*0.25);
					//print(ftos(e.scale),"\n");
				}
				else
				{ 
					e.scale = e.scale * spawnfoliagearound_scale;
					e.mins = e.mins * (spawnfoliagearound_scale*0.25);
					e.maxs = e.maxs * (spawnfoliagearound_scale*0.25);
				}
				
				if (e.scale > 3)
				{
					if (((world.maxs_x - world.mins_x) > 60000)
					|| ((world.maxs_y - world.mins_y) > 60000))
					{	
						//print("Hugemap, increase lod\n");
						if (mytreesetcustomlod) {
							e.loddistance1 = e.loddistance1 + (1000 * e.scale);
							e.loddistance2 = e.loddistance2 + (2000 * e.scale);
							e.loddistance3 = e.loddistance3 + (3000 * e.scale);
							e.loddistance4 = e.loddistance4 + (4000 * e.scale);
						} else {
						
							if(!e.loddistance1)
								e.loddistance1 = 1000 * e.scale;
							if(!e.loddistance2)
								e.loddistance2 = 2000 * e.scale;
							if(!e.loddistance3)
								e.loddistance3 = 3000 * e.scale;
							if(!e.loddistance4)
								e.loddistance4 = 4000 * e.scale;
						}
					}
				}
			}
			
			local float mygrovelodscale;
			if (mytreeisgrove && e.scale > 1) {
				if (e.scale > 15) {
					mygrovelodscale = 15; //Largest it will scale usually
				} else {
					mygrovelodscale = e.scale;
				}
				e.loddistance1 = e.loddistance1 * mygrovelodscale;
				e.loddistance2 = e.loddistance2 * mygrovelodscale;
				e.loddistance3 = e.loddistance3 * mygrovelodscale;
				e.loddistance4 = e.loddistance4 * mygrovelodscale;
			} else if (mybushisarea && e.scale > 2) {
				if (e.scale > 15) {
					mygrovelodscale = 15; //Largest it will scale usually
				} else {
					mygrovelodscale = e.scale * 0;
				}
				//Give some more distance
				e.loddistance1 = e.loddistance1 + (mygrovelodscale * 16000);
				e.loddistance2 = e.loddistance2 + (mygrovelodscale * 18000);
				e.loddistance3 = e.loddistance3 + (mygrovelodscale * 20000);
				e.loddistance4 = e.loddistance4 + (mygrovelodscale * 22000);
			}
			
				//print(ftos(e.maxs_x), "max x\n");
			////Old Algo (area based: cubic growth)
			////Set based on cross-section of trunk (how long it would take to chop down with an axe)
			////e.vehicle_health = (e.maxs_x * e.maxs_y * 4) * 1000;
				////print(ftos(e.vehicle_health), "old algo\n");
			//New Algo (linear growth)
			//Set based on linear cross-section of trunk, rather than area (we are not using a pinpoint laser to oblitrate every atom, we are using a chainsaw or axe to cut a line)
			//Basing off of: (9*9*4)*1000 (above default), want same for that point here. (the 4 was the 4 quadrants)
			//Will grow linearly rather than cubic.
			//e.vehicle_health = e.maxs_x * 36000; //Reduced from: (X * 2) * 18000
			//Basing off of (1.14*1.14*4)*1000
			//e.vehicle_health = e.maxs_x * 4560; //Reduced from (X * 2) * 2280
			//Basing off of (0.82*0.82*4)*1000
			e.vehicle_health = e.maxs_x * 3280; //Reduced from (X * 2) * 1640
				//print(ftos(e.vehicle_health), "new algo\n\n");
			
			
			//Set based on cross-section of trunk times height (amount of resources it gives)
			//e.multitool_ammocurrent = (e.maxs_x * e.maxs_y * 4) * e.maxs_z * 0.01;
			e.multitool_ammocurrent = (e.maxs_x * e.maxs_y * 4) * e.maxs_z * 0.06;
			if (spawnfoliagearound_resourcemultiplier) {
			 if (spawnfoliagearound_resourcemultiplier != 1) {
			  if (spawnfoliagearound_resourcemultiplier > 0) {
				e.multitool_ammocurrent = e.multitool_ammocurrent * spawnfoliagearound_resourcemultiplier;
			  }
			 }
			}
			
			//Groves are mutiple trees for 1 model (5 usually)
			//Give more resources when they are taken down.
			if (mytreeisgrove) {
			 if (autocvar_g_spawnfoliagearound_groveresourcemultiplier) {
			  if (autocvar_g_spawnfoliagearound_groveresourcemultiplier != 1) {
			   if (autocvar_g_spawnfoliagearound_groveresourcemultiplier > 0) {
			 	e.multitool_ammocurrent = e.multitool_ammocurrent * autocvar_g_spawnfoliagearound_groveresourcemultiplier;
			   }
			  }
			 }
			}
			
			self = e;
			setorigin(self, self.origin);
       			tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 100000', G_SPAWNFOLIAGE_FORCE_TRACE_MOVETYPE(), self);
        		setorigin(self, trace_endpos);
			
			if (mybushisarea) {
				//KISS, re-paste this code for simplicity
				//Grass areas etc always follow the land
				if (autocvar_g_spawnfoliagearound_bushareaangles2norm) {
				  if (autocvar_g_spawnfoliagearound_bushareaangles2norm > random()) {
					tracebox(e.origin + '0 0 512', '-128 -128 0', '128 128 0',  e.origin - '0 0 1024', G_SPAWNFOLIAGE_FORCE_TRACE_MOVETYPE(), e);
					
					//print(vtos(trace_plane_normal), "tplane\n");
					
					if (trace_plane_normal_x == 0 && trace_plane_normal_y == 0
					&& (trace_plane_normal_z == 0 || trace_plane_normal_z == 1))
					{
						//Land is flat, do nothing
					} else {
						// now set angles_x so that the bsp model points parallel to the surface
						// (Notice no negation on the third statement below)
						// (This is likely due to Quake's different handling of brush(bsp) vs model models
						// thanks Divverent, this code is from the bugrigs stuff in cl_physics.qc mostly
						e.angles = vectoangles(
							'1 0 0' * v_forward_x * trace_plane_normal_z
							+
							'0 1 0' * v_forward_y * trace_plane_normal_z
							+
							'0 0 1' * (v_forward_x * trace_plane_normal_x + v_forward_y * trace_plane_normal_y)
							);
						
						//didangles2norm = 1;
						////Collision Will be huge fat box, as big
						////as it is tall now if we don't do this:
						//e.maxs_z = e.maxs_y * 4; //x4 for good measure
					}
				  }
				}
			} else if (autocvar_g_spawnfoliagearound_groveangles2norm) {
				if (mytreeisgrove) {
				 if (autocvar_g_spawnfoliagearound_groveangles2norm > random()) {
					tracebox(e.origin + '0 0 512', '-128 -128 0', '128 128 0',  e.origin - '0 0 1024', G_SPAWNFOLIAGE_FORCE_TRACE_MOVETYPE(), e);
					
					//print(vtos(trace_plane_normal), "tplane\n");
					
					if (trace_plane_normal_x == 0 && trace_plane_normal_y == 0
					&& (trace_plane_normal_z == 0 || trace_plane_normal_z == 1))
					{
						//Land is flat, do nothing
					} else {
						// now set angles_x so that the bsp model points parallel to the surface
						// (Notice no negation on the third statement below)
						// (This is likely due to Quake's different handling of brush(bsp) vs model models
						// thanks Divverent, this code is from the bugrigs stuff in cl_physics.qc mostly
						e.angles = vectoangles(
							'1 0 0' * v_forward_x * trace_plane_normal_z
							+
							'0 1 0' * v_forward_y * trace_plane_normal_z
							+
							'0 0 1' * (v_forward_x * trace_plane_normal_x + v_forward_y * trace_plane_normal_y)
							);
						
						//didangles2norm = 1;
						////Collision Will be huge fat box, as big
						////as it is tall now if we don't do this:
						//e.maxs_z = e.maxs_y * 4; //x4 for good measure
					}
				 }
				}
			}
			
			spawnfunc_misc_gamemodel();
			////spawnfunc_misc_clientmodel(); //LOD doesn't work reliably, no collision. Gotta use server side for now
			
			if (mytreeisgrove) {
				if not (autocvar_g_spawnfoliagearound_groves_are_solid) {
					//Reset as was "corrupted" with the rotation up there
					//Corrupted is in quotes because it was the engine attempting
					//to make the sizes correct, but that isn't good for our purposes
					self.mins = mytreeisgrovemins;
					self.maxs = mytreeisgrovemaxs;
					setsize(self, self.mins, self.maxs);
				}
			}
						
			self = previousself;

			++i; // we found a spot, lets progress to the next one now
			g_spawnfoliagearound_current = g_spawnfoliagearound_current + 1;
			
			if not(cvar("g_spawnfoliagearound")) {
				if (g_spawnfoliagearound_current >= cvar("g_suggested_spawnfoliagearound_min")) {
					//print("\n\n\nTREES DONE!\n\n\n");
					g_foliage_maybeignitetreesinlava_treesdone = 1;
					Foliage_MaybeIgniteTreesInLava();
				}
			} else if (g_spawnfoliagearound_current >= cvar("g_spawnfoliagearound_min")) {
				//print("\n\n\nTREES_DONE!\n\n\n");
				g_foliage_maybeignitetreesinlava_treesdone = 1;
				Foliage_MaybeIgniteTreesInLava();
			}
		}
		}
	}
	return TRUE;
}

void Foliage_Spawn_Gradual ()
{
	if (g_spawnfoliagearound_current >= cvar("g_spawnfoliagearound_max")) {
		self.nextthink = 0;
		self.think = func_null;
	} else if (g_spawnfoliagearound_current >= cvar("g_spawnfoliagearound_min")) {
		self.nextthink = time + 3;
	} else {
		SpawnFoliageAroundLimits();
		Foliage_Presets();
		Foliage_GetAutoCvars();
		Foliage_GetSpecialConsiderations();
		
		local float m, n;
		//Make sure we don't spawn more than max.
		m = cvar("g_spawnfoliagearound_min");
		n = m - g_spawnfoliagearound_current;
		if (n > autocvar_g_spawnfoliagearound_gradual_per) {
			n = autocvar_g_spawnfoliagearound_gradual_per;
		}
		
		if not(cvar("g_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((n / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
		Foliage_Populate_Forests((n / (1 + g_spawnfoliagearound_forestscurrent - (cvar("g_spawnfoliagearound_forestsonly")))));
		Foliage_Clear_Meadows();
		self.nextthink = time + autocvar_g_spawnfoliagearound_gradual;
	}
}

void Foliage_Spawn_GradualInit()
{
		entity e;
		
		e = spawn();
		e.think = Foliage_Spawn_Gradual;
		e.nextthink = time; //Start Right Away
}


//Here we return a value for how high oil, water, lava, etc should be
//if based isn't enabled we return the value unmolested
//32512 is the max value of the slider in the menu, this code allows
//one to set the slider to how filled up the map should be.
//Yes this is ugly, to replace the cvar(bla) calls with this
//We could have done it a better way, but we don't want things to break and have a limited
//time today. This code is called only a few times per round, when the oil etc is spawned.
float sfalqdlvl(string mycvar, string altcvar) {
	if (cvar(mycvar) && cvar("g_spawnfoliagearound_liquidlvl_based")) {
		local float f;
		f = ((world.maxs_z - world.mins_z)/32512) * cvar(mycvar); //Find the scale and multiply by our value
		f = f + world.mins_z; //Rebase back to wherever the bottom of the map is
		f = ceil(f); //We don't do floor as it could come to 0 and then nothing will be spawned, thus do ceiling so we are an interger
		return f;
	} else if ((!cvar(mycvar)) && cvar(altcvar)) {
		return cvar(altcvar);	
	} else {
		return cvar(mycvar);
	}
}



void Foliage_WaterIsTurquoise (entity g, float wscale)
{
	if (wscale > 64.1) {
		g.model = "models/misc/water32512surfacetzork_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/water32512surfacetzork_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/water32512surfacetzork_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/water32512surfacetzork_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/water32512surfacetzork_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/water32512surfacetzork_s8.bsp";
	} else {
		g.model = "models/misc/water32512surfacetzork.bsp";
	}
}

void Foliage_WaterIsGreen (entity g, float wscale)
{
	if (wscale > 64.1) {
		g.model = "models/misc/water32512surfacegreen_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/water32512surfacegreen_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/water32512surfacegreen_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/water32512surfacegreen_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/water32512surfacegreen_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/water32512surfacegreen_s8.bsp";
	} else {
		g.model = "models/misc/water32512surfacegreen.bsp";
	}
}

void Foliage_WaterIsGray (entity g, float wscale)
{
	if (wscale > 64.1) {
		g.model = "models/misc/water32512surfacegray_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/water32512surfacegray_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/water32512surfacegray_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/water32512surfacegray_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/water32512surfacegray_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/water32512surfacegray_s8.bsp";
	} else {
		g.model = "models/misc/water32512surfacegray.bsp";
	}
}

void Foliage_WaterIsBlue (entity g, float wscale)
{
	if (wscale > 64.1) {
		g.model = "models/misc/water32512surfaceblue_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/water32512surfaceblue_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/water32512surfaceblue_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/water32512surfaceblue_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/water32512surfaceblue_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/water32512surfaceblue_s8.bsp";
	} else {
		g.model = "models/misc/water32512surfaceblue.bsp";
	}
}

void Foliage_Spawn_Water ()
{
	g_spawnfoliagearound_waterlevel_send = 1;
	self.think = func_null;
	
	float wscale;
	wscale = 0;
	if (world.maxs_x > 32512 || world.maxs_y > 32512 || world.maxs_z > 32512
	|| world.mins_x < -32512 || world.mins_y < -32512 || world.mins_z < -32512)
	{
		print("world is extra big, we shall scale the wasser\n");
		
		local float topcontender;
		
		topcontender = world.maxs_x;
		
		if (world.maxs_y > topcontender)
			topcontender = world.maxs_y;
		
		if (world.maxs_z > topcontender)
			topcontender = world.maxs_z;
			
		if ((world.mins_x * -1) > topcontender)
			topcontender = world.mins_x * -1;
			
		if ((world.mins_y * -1) > topcontender)
			topcontender = world.mins_y * -1;
			
		if ((world.mins_z * -1) > topcontender)
			topcontender = world.mins_z * -1;
		
		wscale = topcontender/32512;
		print (ftos(wscale),"\n");
	}

	//Surface
	entity previousself = self;
	entity g = spawn();
	g.origin = '0 0 1';
	g.origin = g.origin * sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel");
	
	float mywatertype;
	if not(cvar("g_spawnfoliagearound_waterlevel")) {
		mywatertype = cvar("g_suggested_spawnfoliagearound_watertype");
	} else {
		mywatertype = cvar("g_spawnfoliagearound_watertype");
	}
	
	if (mywatertype == 1) {
		Foliage_WaterIsGray(g, wscale);
	} else if (mywatertype == 2) {
		Foliage_WaterIsGreen(g, wscale);
	} else if (mywatertype == 3) {
		Foliage_WaterIsTurquoise(g, wscale);
	} else {
		Foliage_WaterIsBlue(g, wscale);
	}
	g.solid = SOLID_BSP;
	//g.scale = wscale; //Doesn't work so well with bsp volumes
	//g.effects = 8192;
	//g.effects = (EF_ADDITIVE | EF_DOUBLESIDED | EF_LOWPRECISION);
	g.effects = (EF_LOWPRECISION | EF_DOUBLESIDED | EF_NODEPTHTEST);
	g.clientmodel_nosendeffects = 1;
			
	self = g;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
	
	//Body of water
	previousself = self;
	entity e = spawn();
	e.origin = '0 0 1';
	e.origin = e.origin * sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel");
			
	if (wscale > 64.1) {
		e.model = "models/misc/water32512brush_nodraw_s128.bsp";
	} else if (wscale > 32.1) {
		e.model = "models/misc/water32512brush_nodraw_s64.bsp";
	} else if (wscale > 16.1) {
		e.model = "models/misc/water32512brush_nodraw_s32.bsp";
	} else if (wscale > 10.1) {
		e.model = "models/misc/water32512brush_nodraw_s16.bsp";
	} else if (wscale > 8.1) {
		e.model = "models/misc/water32512brush_nodraw_s10.bsp";
	} else if (wscale > 1.1) {
		e.model = "models/misc/water32512brush_nodraw_s8.bsp";
	} else {
		e.model = "models/misc/water32512brush_nodraw.bsp";
	}
	e.solid = SOLID_BSP;
	//e.scale = wscale; //Doesn't work so well with bsp volumes
	e.effects = EF_LOWPRECISION;
			
	self = e;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
			
			////Water all the way down
			
	previousself = self;
	entity f = spawn();
	f.origin = '0 0 1';
	if (wscale > 64.1) {
		////e.model = "models/misc/water32512brush_nodraw_s128.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel") - (32000 * 128));
	} else if (wscale > 32.1) {
		////e.model = "models/misc/water32512brush_nodraw_s64.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel") - (32000 * 64));
	} else if (wscale > 16.1) {
		////e.model = "models/misc/water32512brush_nodraw_s32.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel") - (32000 * 32));
	} else if (wscale > 10.1) {
		////e.model = "models/misc/water32512brush_nodraw_s16.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel") - (32000 * 16));
	} else if (wscale > 8.1) {
		////e.model = "models/misc/water32512brush_nodraw_s10.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel") - (32000 * 10));
	} else if (wscale > 1.1) {
		////e.model = "models/misc/water32512brush_nodraw_s8.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel") - (32000 * 8));
	} else {
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel") - 32000);
	}
			
	f.model = e.model;
	f.solid = SOLID_BSP;
	//f.scale = wscale; //Doesn't work so well with bsp volumes
	f.effects = EF_LOWPRECISION;
			
	self = f;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;			
	self = previousself;
	
	//Tell everybody
	entity ple;
  	for(ple = findchain(classname, "player"); ple; ple = ple.chain) {
		if ((clienttype(ple) == CLIENTTYPE_REAL)) {
  			stuffcmd(ple, strcat("cl_cmd settemp hud_waterlevel ", ftos(g_spawnfoliagearound_waterlevel), "\n"));
		}
	}
}

void Foliage_Spawn_WaterInit()
{
		entity e;
		
		e = spawn();
		e.think = Foliage_Spawn_Water;
		if not(cvar("g_spawnfoliagearound_waterlevel"))
			e.nextthink = time + cvar("g_suggested_spawnfoliagearound_waterstart"); //Start quickly
		else if (cvar("g_spawnfoliagearound_liquidlvl_immediate"))
			e.nextthink = time; //Start right away
		else
			e.nextthink = time + cvar("g_spawnfoliagearound_waterstart"); //Start Later So Other Stuff has time to spawn
}

void spawnfoliagearoundwaterplayerspawn()
{
	if (g_spawnfoliagearound_waterlevel_started == 0) {
		g_spawnfoliagearound_waterlevel = sfalqdlvl("g_spawnfoliagearound_waterlevel", "g_suggested_spawnfoliagearound_waterlevel");
		if(g_spawnfoliagearound_waterlevel != 0)
		{
			Foliage_Spawn_WaterInit();	
		}
		
		g_spawnfoliagearound_waterlevel_started = 1;
	} else if (g_spawnfoliagearound_waterlevel_send == 1) {
		if(g_spawnfoliagearound_waterlevel != 0)
		{
			if ((clienttype(self) == CLIENTTYPE_REAL)) {
				stuffcmd(self, strcat("cl_cmd settemp hud_waterlevel ", ftos(g_spawnfoliagearound_waterlevel), "\n"));
			}
		}
	}
}

//Start Lavalvl
void Foliage_Spawn_Lava ()
{
	g_spawnfoliagearound_lavalevel_send = 1;
	self.think = func_null;
	
	float wscale;
	wscale = 0;
	if (world.maxs_x > 32512 || world.maxs_y > 32512 || world.maxs_z > 32512
	|| world.mins_x < -32512 || world.mins_y < -32512 || world.mins_z < -32512)
	{
		print("world is extra big, we shall scale the wasser\n");
		
		local float topcontender;
		
		topcontender = world.maxs_x;
		
		if (world.maxs_y > topcontender)
			topcontender = world.maxs_y;
		
		if (world.maxs_z > topcontender)
			topcontender = world.maxs_z;
			
		if ((world.mins_x * -1) > topcontender)
			topcontender = world.mins_x * -1;
			
		if ((world.mins_y * -1) > topcontender)
			topcontender = world.mins_y * -1;
			
		if ((world.mins_z * -1) > topcontender)
			topcontender = world.mins_z * -1;
		
		wscale = topcontender/32512;
		print (ftos(wscale),"\n");
	}

	//Surface
	entity previousself = self;
	entity g = spawn();
	g.origin = '0 0 1';
	g.origin = g.origin * sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel");
	
	if (wscale > 64.1) {
		g.model = "models/misc/lava32512surfacesolid_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/lava32512surfacesolid_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/lava32512surfacesolid_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/lava32512surfacesolid_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/lava32512surfacesolid_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/lava32512surfacesolid_s8.bsp";
	} else {
		g.model = "models/misc/lava32512surfacesolid.bsp";
	}
	g.solid = SOLID_BSP;
	//g.scale = wscale; //Doesn't work so well with bsp volumes
	//g.effects = 8192;
	//g.effects = (EF_ADDITIVE | EF_DOUBLESIDED | EF_LOWPRECISION);
	g.effects = (EF_LOWPRECISION | EF_DOUBLESIDED | EF_NODEPTHTEST);
	g.clientmodel_nosendeffects = 1;
			
	self = g;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
	
	//Body of lava
	previousself = self;
	entity e = spawn();
	e.origin = '0 0 1';
	e.origin = e.origin * sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel");
			
	if (wscale > 64.1) {
		e.model = "models/misc/lava32512brush_nodraw_s128.bsp";
	} else if (wscale > 32.1) {
		e.model = "models/misc/lava32512brush_nodraw_s64.bsp";
	} else if (wscale > 16.1) {
		e.model = "models/misc/lava32512brush_nodraw_s32.bsp";
	} else if (wscale > 10.1) {
		e.model = "models/misc/lava32512brush_nodraw_s16.bsp";
	} else if (wscale > 8.1) {
		e.model = "models/misc/lava32512brush_nodraw_s10.bsp";
	} else if (wscale > 1.1) {
		e.model = "models/misc/lava32512brush_nodraw_s8.bsp";
	} else {
		e.model = "models/misc/lava32512brush_nodraw.bsp";
	}
	e.solid = SOLID_BSP;
	//e.scale = wscale; //Doesn't work so well with bsp volumes
	e.effects = EF_LOWPRECISION;
			
	self = e;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
			
			////Lava all the way down
			
	previousself = self;
	entity f = spawn();
	f.origin = '0 0 1';
	if (wscale > 64.1) {
		////e.model = "models/misc/lava32512brush_nodraw_s128.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel") - (32000 * 128));
	} else if (wscale > 32.1) {
		////e.model = "models/misc/lava32512brush_nodraw_s64.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel") - (32000 * 64));
	} else if (wscale > 16.1) {
		////e.model = "models/misc/lava32512brush_nodraw_s32.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel") - (32000 * 32));
	} else if (wscale > 10.1) {
		////e.model = "models/misc/lava32512brush_nodraw_s16.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel") - (32000 * 16));
	} else if (wscale > 8.1) {
		////e.model = "models/misc/lava32512brush_nodraw_s10.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel") - (32000 * 10));
	} else if (wscale > 1.1) {
		////e.model = "models/misc/lava32512brush_nodraw_s8.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel") - (32000 * 8));
	} else {
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel") - 32000);
	}
			
	f.model = e.model;
	f.solid = SOLID_BSP;
	//f.scale = wscale; //Doesn't work so well with bsp volumes
	f.effects = EF_LOWPRECISION;
			
	self = f;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;			
	self = previousself;
	
	g_foliage_maybeignitetreesinlava_lavadone = 1;
	Foliage_MaybeIgniteTreesInLava(); //Maybe do so, if done spawning trees, otherwise wait
	
	//Tell everybody
	entity ple;
  	for(ple = findchain(classname, "player"); ple; ple = ple.chain) {
		if ((clienttype(ple) == CLIENTTYPE_REAL)) {
  			stuffcmd(ple, strcat("cl_cmd settemp hud_lavalevel ", ftos(g_spawnfoliagearound_lavalevel), "\n"));
		}
	}
}

void Foliage_Spawn_LavaInit()
{
		entity e;
		
		e = spawn();
		e.think = Foliage_Spawn_Lava;
		if not(cvar("g_spawnfoliagearound_lavalevel"))
			e.nextthink = time + cvar("g_suggested_spawnfoliagearound_lavastart"); //Start quickly
		else if (cvar("g_spawnfoliagearound_liquidlvl_immediate"))
			e.nextthink = time; //Start right away
		else
			e.nextthink = time + cvar("g_spawnfoliagearound_lavastart"); //Start Later So Other Stuff has time to spawn
}

void spawnfoliagearoundlavaplayerspawn()
{
	if (g_spawnfoliagearound_lavalevel_started == 0) {
		g_spawnfoliagearound_lavalevel = sfalqdlvl("g_spawnfoliagearound_lavalevel", "g_suggested_spawnfoliagearound_lavalevel");
		if(g_spawnfoliagearound_lavalevel != 0)
		{
			Foliage_Spawn_LavaInit();	
		}
		
		g_spawnfoliagearound_lavalevel_started = 1;
	} else if (g_spawnfoliagearound_lavalevel_send == 1) {
		if(g_spawnfoliagearound_lavalevel != 0)
		{
			if ((clienttype(self) == CLIENTTYPE_REAL)) {
				stuffcmd(self, strcat("cl_cmd settemp hud_lavalevel ", ftos(g_spawnfoliagearound_lavalevel), "\n"));
			}
		}
	}
}
//End Lavalvl

//Start Slimelvl
void Foliage_Spawn_Slime ()
{
	g_spawnfoliagearound_slimelevel_send = 1;
	self.think = func_null;
	
	float wscale;
	wscale = 0;
	if (world.maxs_x > 32512 || world.maxs_y > 32512 || world.maxs_z > 32512
	|| world.mins_x < -32512 || world.mins_y < -32512 || world.mins_z < -32512)
	{
		print("world is extra big, we shall scale the wasser\n");
		
		local float topcontender;
		
		topcontender = world.maxs_x;
		
		if (world.maxs_y > topcontender)
			topcontender = world.maxs_y;
		
		if (world.maxs_z > topcontender)
			topcontender = world.maxs_z;
			
		if ((world.mins_x * -1) > topcontender)
			topcontender = world.mins_x * -1;
			
		if ((world.mins_y * -1) > topcontender)
			topcontender = world.mins_y * -1;
			
		if ((world.mins_z * -1) > topcontender)
			topcontender = world.mins_z * -1;
		
		wscale = topcontender/32512;
		print (ftos(wscale),"\n");
	}

	//Surface
	entity previousself = self;
	entity g = spawn();
	g.origin = '0 0 1';
	g.origin = g.origin * sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel");
	
	if (wscale > 64.1) {
		g.model = "models/misc/slime32512surfacegel_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/slime32512surfacegel_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/slime32512surfacegel_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/slime32512surfacegel_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/slime32512surfacegel_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/slime32512surfacegel_s8.bsp";
	} else {
		g.model = "models/misc/slime32512surfacegel.bsp";
	}
	g.solid = SOLID_BSP;
	//g.scale = wscale; //Doesn't work so well with bsp volumes
	//g.effects = 8192;
	//g.effects = (EF_ADDITIVE | EF_DOUBLESIDED | EF_LOWPRECISION);
	g.effects = (EF_LOWPRECISION | EF_DOUBLESIDED | EF_NODEPTHTEST);
	g.clientmodel_nosendeffects = 1;
			
	self = g;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
	
	//Body of slime
	previousself = self;
	entity e = spawn();
	e.origin = '0 0 1';
	e.origin = e.origin * sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel");
			
	if (wscale > 64.1) {
		e.model = "models/misc/slime32512brush_nodraw_s128.bsp";
	} else if (wscale > 32.1) {
		e.model = "models/misc/slime32512brush_nodraw_s64.bsp";
	} else if (wscale > 16.1) {
		e.model = "models/misc/slime32512brush_nodraw_s32.bsp";
	} else if (wscale > 10.1) {
		e.model = "models/misc/slime32512brush_nodraw_s16.bsp";
	} else if (wscale > 8.1) {
		e.model = "models/misc/slime32512brush_nodraw_s10.bsp";
	} else if (wscale > 1.1) {
		e.model = "models/misc/slime32512brush_nodraw_s8.bsp";
	} else {
		e.model = "models/misc/slime32512brush_nodraw.bsp";
	}
	e.solid = SOLID_BSP;
	//e.scale = wscale; //Doesn't work so well with bsp volumes
	e.effects = EF_LOWPRECISION;
			
	self = e;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
			
			////Slime all the way down
			
	previousself = self;
	entity f = spawn();
	f.origin = '0 0 1';
	if (wscale > 64.1) {
		////e.model = "models/misc/slime32512brush_nodraw_s128.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel") - (32000 * 128));
	} else if (wscale > 32.1) {
		////e.model = "models/misc/slime32512brush_nodraw_s64.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel") - (32000 * 64));
	} else if (wscale > 16.1) {
		////e.model = "models/misc/slime32512brush_nodraw_s32.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel") - (32000 * 32));
	} else if (wscale > 10.1) {
		////e.model = "models/misc/slime32512brush_nodraw_s16.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel") - (32000 * 16));
	} else if (wscale > 8.1) {
		////e.model = "models/misc/slime32512brush_nodraw_s10.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel") - (32000 * 10));
	} else if (wscale > 1.1) {
		////e.model = "models/misc/slime32512brush_nodraw_s8.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel") - (32000 * 8));
	} else {
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel") - 32000);
	}
			
	f.model = e.model;
	f.solid = SOLID_BSP;
	//f.scale = wscale; //Doesn't work so well with bsp volumes
	f.effects = EF_LOWPRECISION;
			
	self = f;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;			
	self = previousself;
	
	//Tell everybody
	entity ple;
  	for(ple = findchain(classname, "player"); ple; ple = ple.chain) {
		if ((clienttype(ple) == CLIENTTYPE_REAL)) {
  			stuffcmd(ple, strcat("cl_cmd settemp hud_slimelevel ", ftos(g_spawnfoliagearound_slimelevel), "\n"));
		}
	}
}

void Foliage_Spawn_SlimeInit()
{
		entity e;
		
		e = spawn();
		e.think = Foliage_Spawn_Slime;
		if not(cvar("g_spawnfoliagearound_slimelevel"))
			e.nextthink = time + cvar("g_suggested_spawnfoliagearound_slimestart"); //Start quickly
		else if (cvar("g_spawnfoliagearound_liquidlvl_immediate"))
			e.nextthink = time; //Start right away
		else
			e.nextthink = time + cvar("g_spawnfoliagearound_slimestart"); //Start Later So Other Stuff has time to spawn
}

void spawnfoliagearoundslimeplayerspawn()
{
	if (g_spawnfoliagearound_slimelevel_started == 0) {
		g_spawnfoliagearound_slimelevel = sfalqdlvl("g_spawnfoliagearound_slimelevel", "g_suggested_spawnfoliagearound_slimelevel");
		if(g_spawnfoliagearound_slimelevel != 0)
		{
			Foliage_Spawn_SlimeInit();	
		}
		
		g_spawnfoliagearound_slimelevel_started = 1;
	} else if (g_spawnfoliagearound_slimelevel_send == 1) {
		if(g_spawnfoliagearound_slimelevel != 0)
		{
			if ((clienttype(self) == CLIENTTYPE_REAL)) {
				stuffcmd(self, strcat("cl_cmd settemp hud_slimelevel ", ftos(g_spawnfoliagearound_slimelevel), "\n"));
			}
		}
	}
}
//End Slimelvl


//Start Oillvl
void Foliage_Spawn_Oil ()
{
	g_spawnfoliagearound_oillevel_send = 1;
	g_spawnfoliagearound_oillevel_unchanging = sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel"); //So we can use even if someone changes the cvar during the match
	self.think = func_null;
	
	float wscale;
	wscale = 0;
	if (world.maxs_x > 32512 || world.maxs_y > 32512 || world.maxs_z > 32512
	|| world.mins_x < -32512 || world.mins_y < -32512 || world.mins_z < -32512)
	{
		print("world is extra big, we shall scale the wasser\n");
		
		local float topcontender;
		
		topcontender = world.maxs_x;
		
		if (world.maxs_y > topcontender)
			topcontender = world.maxs_y;
		
		if (world.maxs_z > topcontender)
			topcontender = world.maxs_z;
			
		if ((world.mins_x * -1) > topcontender)
			topcontender = world.mins_x * -1;
			
		if ((world.mins_y * -1) > topcontender)
			topcontender = world.mins_y * -1;
			
		if ((world.mins_z * -1) > topcontender)
			topcontender = world.mins_z * -1;
		
		wscale = topcontender/32512;
		print (ftos(wscale),"\n");
	}

	//Surface
	entity previousself = self;
	entity g = spawn();
	g.origin = '0 0 1';
	g.origin = g.origin * sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel");
	
	if (wscale > 64.1) {
		g.model = "models/misc/oil32512surfaceblack_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/oil32512surfaceblack_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/oil32512surfaceblack_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/oil32512surfaceblack_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/oil32512surfaceblack_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/oil32512surfaceblack_s8.bsp";
	} else {
		g.model = "models/misc/oil32512surfaceblack.bsp";
	}
	g.solid = SOLID_BSP;
	//g.scale = wscale; //Doesn't work so well with bsp volumes
	//g.effects = 8192;
	//g.effects = (EF_ADDITIVE | EF_DOUBLESIDED | EF_LOWPRECISION);
	g.effects = (EF_LOWPRECISION | EF_DOUBLESIDED | EF_NODEPTHTEST);
	g.clientmodel_nosendeffects = 1;
			
	self = g;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
	
	//Body of oil
	previousself = self;
	entity e = spawn();
	e.origin = '0 0 1';
	e.origin = e.origin * sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel");
			
	if (wscale > 64.1) {
		e.model = "models/misc/water32512brush_nodraw_s128.bsp";
	} else if (wscale > 32.1) {
		e.model = "models/misc/water32512brush_nodraw_s64.bsp";
	} else if (wscale > 16.1) {
		e.model = "models/misc/water32512brush_nodraw_s32.bsp";
	} else if (wscale > 10.1) {
		e.model = "models/misc/water32512brush_nodraw_s16.bsp";
	} else if (wscale > 8.1) {
		e.model = "models/misc/water32512brush_nodraw_s10.bsp";
	} else if (wscale > 1.1) {
		e.model = "models/misc/water32512brush_nodraw_s8.bsp";
	} else {
		e.model = "models/misc/water32512brush_nodraw.bsp";
	}
	e.solid = SOLID_BSP;
	//e.scale = wscale; //Doesn't work so well with bsp volumes
	e.effects = EF_LOWPRECISION;
			
	self = e;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
			
			////Oil all the way down
			
	previousself = self;
	entity f = spawn();
	f.origin = '0 0 1';
	if (wscale > 64.1) {
		////e.model = "models/misc/water32512brush_nodraw_s128.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel") - (32000 * 128));
	} else if (wscale > 32.1) {
		////e.model = "models/misc/water32512brush_nodraw_s64.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel") - (32000 * 64));
	} else if (wscale > 16.1) {
		////e.model = "models/misc/water32512brush_nodraw_s32.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel") - (32000 * 32));
	} else if (wscale > 10.1) {
		////e.model = "models/misc/water32512brush_nodraw_s16.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel") - (32000 * 16));
	} else if (wscale > 8.1) {
		////e.model = "models/misc/water32512brush_nodraw_s10.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel") - (32000 * 10));
	} else if (wscale > 1.1) {
		////e.model = "models/misc/water32512brush_nodraw_s8.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel") - (32000 * 8));
	} else {
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel") - 32000);
	}
			
	f.model = e.model;
	f.solid = SOLID_BSP;
	//f.scale = wscale; //Doesn't work so well with bsp volumes
	f.effects = EF_LOWPRECISION;
			
	self = f;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;			
	self = previousself;
	
	//Tell everybody
	entity ple;
  	for(ple = findchain(classname, "player"); ple; ple = ple.chain) {
		if ((clienttype(ple) == CLIENTTYPE_REAL)) {
  			stuffcmd(ple, strcat("cl_cmd settemp hud_oillevel ", ftos(g_spawnfoliagearound_oillevel), "\n"));
		}
	}
}

void Foliage_Spawn_OilInit()
{
		entity e;
		
		e = spawn();
		e.think = Foliage_Spawn_Oil;
		if not(cvar("g_spawnfoliagearound_oillevel"))
			e.nextthink = time + cvar("g_suggested_spawnfoliagearound_oilstart"); //Start quickly
		else if (cvar("g_spawnfoliagearound_liquidlvl_immediate"))
			e.nextthink = time; //Start right away
		else
			e.nextthink = time + cvar("g_spawnfoliagearound_oilstart"); //Start Later So Other Stuff has time to spawn
}

void spawnfoliagearoundoilplayerspawn()
{
	if (g_spawnfoliagearound_oillevel_started == 0) {
		g_spawnfoliagearound_oillevel = sfalqdlvl("g_spawnfoliagearound_oillevel", "g_suggested_spawnfoliagearound_oillevel");
		if(g_spawnfoliagearound_oillevel != 0)
		{
			Foliage_Spawn_OilInit();	
		}
		
		g_spawnfoliagearound_oillevel_started = 1;
	} else if (g_spawnfoliagearound_oillevel_send == 1) {
		if(g_spawnfoliagearound_oillevel != 0)
		{
			if ((clienttype(self) == CLIENTTYPE_REAL)) {
				stuffcmd(self, strcat("cl_cmd settemp hud_oillevel ", ftos(g_spawnfoliagearound_oillevel), "\n"));
			}
		}
	}
}
//End Oillvl


//Start Chemlvl
void Foliage_Spawn_Chem ()
{
	g_spawnfoliagearound_chemlevel_send = 1;
	g_spawnfoliagearound_chemlevel_unchanging = sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel"); //So we can use even if someone changes the cvar during the match
	self.think = func_null;
	
	float wscale;
	wscale = 0;
	if (world.maxs_x > 32512 || world.maxs_y > 32512 || world.maxs_z > 32512
	|| world.mins_x < -32512 || world.mins_y < -32512 || world.mins_z < -32512)
	{
		print("world is extra big, we shall scale the wasser\n");
		
		local float topcontender;
		
		topcontender = world.maxs_x;
		
		if (world.maxs_y > topcontender)
			topcontender = world.maxs_y;
		
		if (world.maxs_z > topcontender)
			topcontender = world.maxs_z;
			
		if ((world.mins_x * -1) > topcontender)
			topcontender = world.mins_x * -1;
			
		if ((world.mins_y * -1) > topcontender)
			topcontender = world.mins_y * -1;
			
		if ((world.mins_z * -1) > topcontender)
			topcontender = world.mins_z * -1;
		
		wscale = topcontender/32512;
		print (ftos(wscale),"\n");
	}

	//Surface
	entity previousself = self;
	entity g = spawn();
	g.origin = '0 0 1';
	g.origin = g.origin * sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel");
	
	if (wscale > 64.1) {
		g.model = "models/misc/chem32512surfacegel_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/chem32512surfacegel_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/chem32512surfacegel_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/chem32512surfacegel_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/chem32512surfacegel_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/chem32512surfacegel_s8.bsp";
	} else {
		g.model = "models/misc/chem32512surfacegel.bsp";
	}
	g.solid = SOLID_BSP;
	//g.scale = wscale; //Doesn't work so well with bsp volumes
	//g.effects = 8192;
	//g.effects = (EF_ADDITIVE | EF_DOUBLESIDED | EF_LOWPRECISION);
	g.effects = (EF_LOWPRECISION | EF_DOUBLESIDED | EF_NODEPTHTEST);
	g.clientmodel_nosendeffects = 1;
			
	self = g;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
	
	//Body of chem
	previousself = self;
	entity e = spawn();
	e.origin = '0 0 1';
	e.origin = e.origin * sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel");
			
	if (wscale > 64.1) {
		e.model = "models/misc/water32512brush_nodraw_s128.bsp";
	} else if (wscale > 32.1) {
		e.model = "models/misc/water32512brush_nodraw_s64.bsp";
	} else if (wscale > 16.1) {
		e.model = "models/misc/water32512brush_nodraw_s32.bsp";
	} else if (wscale > 10.1) {
		e.model = "models/misc/water32512brush_nodraw_s16.bsp";
	} else if (wscale > 8.1) {
		e.model = "models/misc/water32512brush_nodraw_s10.bsp";
	} else if (wscale > 1.1) {
		e.model = "models/misc/water32512brush_nodraw_s8.bsp";
	} else {
		e.model = "models/misc/water32512brush_nodraw.bsp";
	}
	e.solid = SOLID_BSP;
	//e.scale = wscale; //Doesn't work so well with bsp volumes
	e.effects = EF_LOWPRECISION;
			
	self = e;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
			
			////Chem all the way down
			
	previousself = self;
	entity f = spawn();
	f.origin = '0 0 1';
	if (wscale > 64.1) {
		////e.model = "models/misc/water32512brush_nodraw_s128.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel") - (32000 * 128));
	} else if (wscale > 32.1) {
		////e.model = "models/misc/water32512brush_nodraw_s64.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel") - (32000 * 64));
	} else if (wscale > 16.1) {
		////e.model = "models/misc/water32512brush_nodraw_s32.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel") - (32000 * 32));
	} else if (wscale > 10.1) {
		////e.model = "models/misc/water32512brush_nodraw_s16.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel") - (32000 * 16));
	} else if (wscale > 8.1) {
		////e.model = "models/misc/water32512brush_nodraw_s10.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel") - (32000 * 10));
	} else if (wscale > 1.1) {
		////e.model = "models/misc/water32512brush_nodraw_s8.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel") - (32000 * 8));
	} else {
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel") - 32000);
	}
			
	f.model = e.model;
	f.solid = SOLID_BSP;
	//f.scale = wscale; //Doesn't work so well with bsp volumes
	f.effects = EF_LOWPRECISION;
			
	self = f;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;			
	self = previousself;
	
	//Tell everybody
	entity ple;
  	for(ple = findchain(classname, "player"); ple; ple = ple.chain) {
		if ((clienttype(ple) == CLIENTTYPE_REAL)) {
  			stuffcmd(ple, strcat("cl_cmd settemp hud_chemlevel ", ftos(g_spawnfoliagearound_chemlevel), "\n"));
		}
	}
}

void Foliage_Spawn_ChemInit()
{
		entity e;
		
		e = spawn();
		e.think = Foliage_Spawn_Chem;
		if not(cvar("g_spawnfoliagearound_chemlevel"))
			e.nextthink = time + cvar("g_suggested_spawnfoliagearound_chemstart"); //Start quickly
		else if (cvar("g_spawnfoliagearound_liquidlvl_immediate"))
			e.nextthink = time; //Start right away
		else
			e.nextthink = time + cvar("g_spawnfoliagearound_chemstart"); //Start Later So Other Stuff has time to spawn
}

void spawnfoliagearoundchemplayerspawn()
{
	if (g_spawnfoliagearound_chemlevel_started == 0) {
		g_spawnfoliagearound_chemlevel = sfalqdlvl("g_spawnfoliagearound_chemlevel", "g_suggested_spawnfoliagearound_chemlevel");
		if(g_spawnfoliagearound_chemlevel != 0)
		{
			Foliage_Spawn_ChemInit();	
		}
		
		g_spawnfoliagearound_chemlevel_started = 1;
	} else if (g_spawnfoliagearound_chemlevel_send == 1) {
		if(g_spawnfoliagearound_chemlevel != 0)
		{
			if ((clienttype(self) == CLIENTTYPE_REAL)) {
				stuffcmd(self, strcat("cl_cmd settemp hud_chemlevel ", ftos(g_spawnfoliagearound_chemlevel), "\n"));
			}
		}
	}
}
//End Chemlvl


//Start Methanelvl
void Foliage_Spawn_Methane ()
{
	g_spawnfoliagearound_methanelevel_send = 1;
	g_spawnfoliagearound_methanelevel_unchanging = sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel"); //So we can use even if someone changes the cvar during the match
	self.think = func_null;
	
	float wscale;
	wscale = 0;
	if (world.maxs_x > 32512 || world.maxs_y > 32512 || world.maxs_z > 32512
	|| world.mins_x < -32512 || world.mins_y < -32512 || world.mins_z < -32512)
	{
		print("world is extra big, we shall scale the wasser\n");
		
		local float topcontender;
		
		topcontender = world.maxs_x;
		
		if (world.maxs_y > topcontender)
			topcontender = world.maxs_y;
		
		if (world.maxs_z > topcontender)
			topcontender = world.maxs_z;
			
		if ((world.mins_x * -1) > topcontender)
			topcontender = world.mins_x * -1;
			
		if ((world.mins_y * -1) > topcontender)
			topcontender = world.mins_y * -1;
			
		if ((world.mins_z * -1) > topcontender)
			topcontender = world.mins_z * -1;
		
		wscale = topcontender/32512;
		print (ftos(wscale),"\n");
	}

	//Surface
	entity previousself = self;
	entity g = spawn();
	g.origin = '0 0 1';
	g.origin = g.origin * sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel");
	
	if (wscale > 64.1) {
		g.model = "models/misc/methane32512surfacegel_s128.bsp";
	} else if (wscale > 32.1) {
		g.model = "models/misc/methane32512surfacegel_s64.bsp";
	} else if (wscale > 16.1) {
		g.model = "models/misc/methane32512surfacegel_s32.bsp";
	} else if (wscale > 10.1) {
		g.model = "models/misc/methane32512surfacegel_s16.bsp";
	} else if (wscale > 8.1) {
		g.model = "models/misc/methane32512surfacegel_s10.bsp";
	} else if (wscale > 1.1) {
		g.model = "models/misc/methane32512surfacegel_s8.bsp";
	} else {
		g.model = "models/misc/methane32512surfacegel.bsp";
	}
	g.solid = SOLID_BSP;
	//g.scale = wscale; //Doesn't work so well with bsp volumes
	//g.effects = 8192;
	//g.effects = (EF_ADDITIVE | EF_DOUBLESIDED | EF_LOWPRECISION);
	g.effects = (EF_LOWPRECISION | EF_DOUBLESIDED | EF_NODEPTHTEST);
	g.clientmodel_nosendeffects = 1;
			
	self = g;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
	
	//Body of methane
	previousself = self;
	entity e = spawn();
	e.origin = '0 0 1';
	e.origin = e.origin * sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel");
			
	if (wscale > 64.1) {
		e.model = "models/misc/water32512brush_nodraw_s128.bsp";
	} else if (wscale > 32.1) {
		e.model = "models/misc/water32512brush_nodraw_s64.bsp";
	} else if (wscale > 16.1) {
		e.model = "models/misc/water32512brush_nodraw_s32.bsp";
	} else if (wscale > 10.1) {
		e.model = "models/misc/water32512brush_nodraw_s16.bsp";
	} else if (wscale > 8.1) {
		e.model = "models/misc/water32512brush_nodraw_s10.bsp";
	} else if (wscale > 1.1) {
		e.model = "models/misc/water32512brush_nodraw_s8.bsp";
	} else {
		e.model = "models/misc/water32512brush_nodraw.bsp";
	}
	e.solid = SOLID_BSP;
	//e.scale = wscale; //Doesn't work so well with bsp volumes
	e.effects = EF_LOWPRECISION;
			
	self = e;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;		
	self = previousself;
			
			////Methane all the way down
			
	previousself = self;
	entity f = spawn();
	f.origin = '0 0 1';
	if (wscale > 64.1) {
		////e.model = "models/misc/water32512brush_nodraw_s128.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel") - (32000 * 128));
	} else if (wscale > 32.1) {
		////e.model = "models/misc/water32512brush_nodraw_s64.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel") - (32000 * 64));
	} else if (wscale > 16.1) {
		////e.model = "models/misc/water32512brush_nodraw_s32.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel") - (32000 * 32));
	} else if (wscale > 10.1) {
		////e.model = "models/misc/water32512brush_nodraw_s16.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel") - (32000 * 16));
	} else if (wscale > 8.1) {
		////e.model = "models/misc/water32512brush_nodraw_s10.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel") - (32000 * 10));
	} else if (wscale > 1.1) {
		////e.model = "models/misc/water32512brush_nodraw_s8.bsp";
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel") - (32000 * 8));
	} else {
		f.origin = f.origin * (sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel") - 32000);
	}
			
	f.model = e.model;
	f.solid = SOLID_BSP;
	//f.scale = wscale; //Doesn't work so well with bsp volumes
	f.effects = EF_LOWPRECISION;
			
	self = f;
	setorigin(self, self.origin);
	spawnfunc_misc_clientmodel();
	self.movetype = MOVETYPE_PUSH;			
	self = previousself;
	
	//Tell everybody
	entity ple;
  	for(ple = findchain(classname, "player"); ple; ple = ple.chain) {
		if ((clienttype(ple) == CLIENTTYPE_REAL)) {
  			stuffcmd(ple, strcat("cl_cmd settemp hud_methanelevel ", ftos(g_spawnfoliagearound_methanelevel), "\n"));
		}
	}
}

void Foliage_Spawn_MethaneInit()
{
		entity e;
		
		e = spawn();
		e.think = Foliage_Spawn_Methane;
		if not(cvar("g_spawnfoliagearound_methanelevel"))
			e.nextthink = time + cvar("g_suggested_spawnfoliagearound_methanestart"); //Start quickly
		else if (cvar("g_spawnfoliagearound_liquidlvl_immediate"))
			e.nextthink = time; //Start right away
		else
			e.nextthink = time + cvar("g_spawnfoliagearound_methanestart"); //Start Later So Other Stuff has time to spawn
}

void spawnfoliagearoundmethaneplayerspawn()
{
	if (g_spawnfoliagearound_methanelevel_started == 0) {
		g_spawnfoliagearound_methanelevel = sfalqdlvl("g_spawnfoliagearound_methanelevel", "g_suggested_spawnfoliagearound_methanelevel");
		if(g_spawnfoliagearound_methanelevel != 0)
		{
			Foliage_Spawn_MethaneInit();	
		}
		
		g_spawnfoliagearound_methanelevel_started = 1;
	} else if (g_spawnfoliagearound_methanelevel_send == 1) {
		if(g_spawnfoliagearound_methanelevel != 0)
		{
			if ((clienttype(self) == CLIENTTYPE_REAL)) {
				stuffcmd(self, strcat("cl_cmd settemp hud_methanelevel ", ftos(g_spawnfoliagearound_methanelevel), "\n"));
			}
		}
	}
}
//End Methanelvl


MUTATOR_HOOKFUNCTION(spawnfoliage_MatchEnd)
{
	Foliage_Zero_Out_Vars();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnfoliage_PlayerSpawn)
{
	spawnfoliagearoundwaterplayerspawn(); //Go look.
	spawnfoliagearoundlavaplayerspawn();
	spawnfoliagearoundslimeplayerspawn();
	spawnfoliagearoundoilplayerspawn();
	spawnfoliagearoundchemplayerspawn();
	spawnfoliagearoundmethaneplayerspawn();
	
	if ((cvar("g_spawnfoliagearound_min")) && (g_spawnfoliagearound_started == 0)) {
		if (autocvar_g_spawnfoliagearound_gradual) {
			SpawnFoliageAroundLimits();
			Foliage_Presets();
			Foliage_GetAutoCvars();
			Foliage_GetSpecialConsiderations();
			Foliage_Place_Meadows(cvar("g_spawnfoliagearound_meadowsmin"));
			Foliage_Place_Forests(cvar("g_spawnfoliagearound_forestsmin"));
			Foliage_Spawn_GradualInit();
		} else {
			SpawnFoliageAroundLimits();
			Foliage_Presets();
			Foliage_GetAutoCvars();
			Foliage_GetSpecialConsiderations();
			if not(cvar("g_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((cvar("g_spawnfoliagearound_min") / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
			Foliage_Populate_Forests((cvar("g_spawnfoliagearound_min") / (1 + g_spawnfoliagearound_forestscurrent - (cvar("g_spawnfoliagearound_forestsonly")))));
			Foliage_Place_Meadows(cvar("g_spawnfoliagearound_meadowsmin"));
			Foliage_Place_Forests(cvar("g_spawnfoliagearound_forestsmin"));
			Foliage_Clear_Meadows();
		}
		
		g_spawnfoliagearound_started = 1;
	} else {
		SpawnFoliageAroundLimits();
		Foliage_Presets();
		Foliage_GetAutoCvars();
		Foliage_GetSpecialConsiderations();
		if not(cvar("g_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((cvar("g_spawnfoliagearound_per") / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
		Foliage_Populate_Forests((cvar("g_spawnfoliagearound_per") / (1 + g_spawnfoliagearound_forestscurrent - (cvar("g_spawnfoliagearound_forestsonly")))));
		Foliage_Place_Meadows(cvar("g_spawnfoliagearound_meadowsper")); //So you can add more dynamically if you wish
		Foliage_Place_Forests(cvar("g_spawnfoliagearound_forestsper")); //So you can add more dynamically if you wish
		Foliage_Clear_Meadows();
	}
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnfoliage_PlayerDies)
{
	SpawnFoliageAroundLimits();
	Foliage_Presets();
	Foliage_GetAutoCvars();
	Foliage_GetSpecialConsiderations();
	if not(cvar("g_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((cvar("g_spawnfoliagearound_perdeath") / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
	Foliage_Populate_Forests((cvar("g_spawnfoliagearound_perdeath") / (1 + g_spawnfoliagearound_forestscurrent - (cvar("g_spawnfoliagearound_forestsonly")))));
	Foliage_Place_Meadows(cvar("g_spawnfoliagearound_meadowsperdeath")); //So you can add more dynamically if you wish
	Foliage_Place_Meadows(cvar("g_spawnfoliagearound_forestsperdeath")); //So you can add more dynamically if you wish
	Foliage_Clear_Meadows();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnfoliage_BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":spawnfoliage");
	Foliage_Zero_Out_Vars();
	SpawnFoliageAroundLimits();
	Foliage_Presets();
	Foliage_GetAutoCvars();
	Foliage_GetSpecialConsiderations();
	return 0;
}

MUTATOR_HOOKFUNCTION(spawnfoliage_BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", Spawn Foliage");
	return 0;
}

MUTATOR_DEFINITION(mutator_spawnfoliage)
{
	MUTATOR_HOOK(MatchEnd, spawnfoliage_MatchEnd, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerSpawn, spawnfoliage_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerDies, spawnfoliage_PlayerDies, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, spawnfoliage_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, spawnfoliage_BuildMutatorsPrettyString, CBC_ORDER_ANY);
	
	// this just turns on the cvar.
	MUTATOR_ONADD
	{
		g_spawnfoliagearound = 1;
	}

	// this just turns off the cvar.
	MUTATOR_ONREMOVE
	{	 
		g_spawnfoliagearound = 0;
	}
	
	g_spawnfoliagearound_waterlevel = 0;
	g_spawnfoliagearound_waterlevel_send = 0;
	
	return 0;
}

///////////////////////////////////////////////////////////////////////
////If A foliage mutator isn't on, we do this to make sure we have waterlevel if needed
MUTATOR_HOOKFUNCTION(waterlevel_MatchEnd)
{
	Foliage_Zero_Out_Vars();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(waterlevel_PlayerSpawn)
{
	spawnfoliagearoundwaterplayerspawn(); //Go look.
	spawnfoliagearoundlavaplayerspawn();
	spawnfoliagearoundslimeplayerspawn();
	spawnfoliagearoundoilplayerspawn();
	spawnfoliagearoundchemplayerspawn();
	spawnfoliagearoundmethaneplayerspawn();

	return TRUE;
}

MUTATOR_HOOKFUNCTION(waterlevel_BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":InvincibleProjectiles");
	return 0;
}

MUTATOR_HOOKFUNCTION(waterlevel_BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", WaterLevel");
	return 0;
}

MUTATOR_DEFINITION(mutator_waterlevel)
{
	MUTATOR_HOOK(MatchEnd, waterlevel_MatchEnd, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerSpawn, waterlevel_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, waterlevel_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, waterlevel_BuildMutatorsPrettyString, CBC_ORDER_ANY);

	return 0;
}
////Above: If A foliage mutator isn't on, we do this to make sure we have waterlevel if needed
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////
//Begin SkyCycle code
///////////////////////////////////////////////

float g_skycycle;
float g_skycycle_started;
float skycycle_skybox;
float skycycle_time;
float skycycle_timebetween;
float skycycle_timestart;
float skycycle_timecurrent;
float skycycle_timenext;
float skycycle_epoch;
float skycycle_intensity_realmax; //Max (Less than Goal if you want long days/nights)
float skycycle_intensity_realmin; //Min (More than Goal if you want long days/nights)
float skycycle_intensity_max; //Goal
float skycycle_intensity_min; //Goal
float skycycle_intensity_current;
float skycycle_ambient_realmax; //Max (Less than Goal if you want long days/nights)
float skycycle_ambient_realmin; //Min (More than Goal if you want long days/nights)
float skycycle_ambient_max; //Goal
float skycycle_ambient_min; //Goal
float skycycle_ambient_current;
float skycycle_skybox;
float skycycle_skybox_number;
float autocvar_g_skycycle_intensity_realmax;
float autocvar_g_skycycle_intensity_realmin;
float autocvar_g_skycycle_ambient_realmax;
float autocvar_g_skycycle_ambient_realmin;
float autocvar_g_skycycle_startatnight;
float autocvar_g_skycycle_startattime;
float autocvar_g_skycycle_timelock;
float autocvar_g_skycycle_nodynamiclights;
string autocvar_g_skycycle_nightsky;
string autocvar_g_skycycle_dusksky;
string autocvar_g_skycycle_daysky;
string skycycle_nightsky;
string skycycle_dusksky;
string skycycle_daysky;
float skycycle_nightsky_max;
float skycycle_dusksky_max;
float skycycle_playernextthink;


void SkyCycle_Set()
{
	skycycle_playernextthink = time;
	skycycle_time = cvar("g_skycycle_time");
	skycycle_timebetween = cvar("g_skycycle_timebetween");
	skycycle_intensity_max = cvar("g_skycycle_intensity_max");
	skycycle_intensity_min = cvar("g_skycycle_intensity_min");
	skycycle_ambient_max = cvar("g_skycycle_ambient_max");
	skycycle_ambient_min = cvar("g_skycycle_ambient_min");
	skycycle_intensity_realmax = cvar("g_skycycle_intensity_realmax");
	skycycle_intensity_realmin = cvar("g_skycycle_intensity_realmin");
	skycycle_ambient_realmax = cvar("g_skycycle_ambient_realmax");
	skycycle_ambient_realmin = cvar("g_skycycle_ambient_realmin");
	skycycle_nightsky = autocvar_g_skycycle_nightsky;
	skycycle_dusksky = autocvar_g_skycycle_dusksky;
	skycycle_daysky = autocvar_g_skycycle_daysky;
	skycycle_nightsky_max = cvar("g_skycycle_nightsky_max");
	skycycle_dusksky_max = cvar("g_skycycle_dusksky_max");
	skycycle_skybox = cvar("g_skycycle_skybox");
	skycycle_skybox_number = 0;
}

void SkyCycle_Restart()
{
	skycycle_timestart = time;
}

void SkyCycle_Lighten()
{
	//print("Lighten\n");
	float d, m;
	m = skycycle_intensity_max - skycycle_intensity_min;
	d = 
	skycycle_intensity_min +
	(m *
	((time - skycycle_timestart) / skycycle_time));
		
	skycycle_intensity_current = d;
	
	m = skycycle_ambient_max - skycycle_ambient_min;
	d = 
	skycycle_ambient_min +
	(m *
	((time - skycycle_timestart) / skycycle_time));
		
	skycycle_ambient_current = d;
}

void SkyCycle_Darken()
{
	//print("Darken\n");
	float d,  m;
	m = skycycle_intensity_max - skycycle_intensity_min;
	d = 
	skycycle_intensity_max -
	(m *
	((time - skycycle_timestart) / skycycle_time));
	
	skycycle_intensity_current = d;
	
	m = skycycle_ambient_max - skycycle_ambient_min;
	d = 
	skycycle_ambient_max -
	(m *
	((time - skycycle_timestart) / skycycle_time));
		
	skycycle_ambient_current = d;
}

void SkyCycle_Run ()
{
	//print("SkyCycle Run\n");
	
	if (time - skycycle_timestart > skycycle_time) {
			//Restart
			SkyCycle_Restart();
			if (skycycle_epoch == 1) {
				skycycle_epoch = 0;
			} else {
				skycycle_epoch = 1;
			}
	} else {
			if (skycycle_epoch == 1) {
				SkyCycle_Lighten();
			} else {
				SkyCycle_Darken();
			}
	}
	if (autocvar_g_skycycle_timelock) {
		//Advance start time at same pace if timelock is set
		skycycle_timestart += skycycle_timebetween;
	}
	self.nextthink = time + skycycle_timebetween;
}

void skycycle_spawntorchlight(entity myent) {
	local entity newtorchlight;
	local float trand;
	trand = random();
	newtorchlight = spawn();
	newtorchlight.classname = "skycycletorchlight";
	newtorchlight.pflags = PFLAGS_FULLDYNAMIC;
	newtorchlight.light_lev = 32 * myent.impulse; //So 8 = 256
	newtorchlight.color = '0.75 0.25 0'; //w_torch
	newtorchlight.color_x = newtorchlight.color_x + (0.25*(random () - 0.5));
	newtorchlight.color_y = newtorchlight.color_y + (0.25*(random () - 0.5));
	//print(vtos(newtorchlight.color),"----TorchColor\n");
	if (trand > 0.75) {
		newtorchlight.style = 11;
	} else {
		newtorchlight.style = 0;
	}
		
	newtorchlight.origin = ((myent.absmin + myent.absmax) * 0.5) + myent.origin;
	setorigin(newtorchlight, newtorchlight.origin);
	return;
}

void skycycle_spawnyellowlight(entity myent) {
	local entity newtorchlight;
	newtorchlight = spawn();
	newtorchlight.classname = "skycycleyellowlight";
	newtorchlight.pflags = PFLAGS_FULLDYNAMIC;
	newtorchlight.light_lev = 32 * myent.impulse; //So 8 = 256
	newtorchlight.color = '0.75 0.75 0.25';
	//newtorchlight.skin = 2; //Projective texture cubemap#.tga
	newtorchlight.style = 0;
	newtorchlight.origin = ((myent.absmin + myent.absmax) * 0.5) + myent.origin;
	setorigin(newtorchlight, newtorchlight.origin);
	return;
}

float skycycle_search_stardust (entity srchdent, float srchradius)
{
	float myreturn;
	myreturn = 0;
	entity f;
	f = findradius(srchdent.origin, srchradius);
  	while(f)
  	{
		if (f.classname == "func_stardust") {
			myreturn = myreturn + 1;
		}
		f = f.chain;
	}
	
	return myreturn;
}

float skycycle_search_stardust_light (entity srchdent, float srchradius)
{
	entity f;
	f = findradius(srchdent.origin, srchradius);
  	while(f)
  	{
		if (f.classname == "skycyclestrdst") {
			return 1;
		}
		f = f.chain;
	}
	
	return 0;
}

void skycycle_spawn_stardust_light(entity myent) {
	//Bit different, white light etc
	local entity newtorchlight;
	local float addlightlev;
	newtorchlight = spawn();
	newtorchlight.classname = "skycyclestrdst";
	newtorchlight.pflags = PFLAGS_FULLDYNAMIC;
	newtorchlight.color = '0.5 0.5 0.5';
	newtorchlight.style = 0;
	addlightlev = skycycle_search_stardust(myent, 128);
	//96 radius probably would be fine too for darkhold's stardusts
	//We only add if we can't find one in the vicinty
	//These are often closeby, don't want to add tons more
	//dyn light entities, instead add more light to one allready there
	//in skycycle_searchandincrease_stardust_light
	//If we haven't found any though, it returns nonzero and we do this
	newtorchlight.light_lev = 96 + (addlightlev * 32);
	//print(ftos(newtorchlight.light_lev),"LIGHTLEV\n-----------");
	newtorchlight.origin = myent.origin;
	setorigin(newtorchlight, newtorchlight.origin);
	//print (vtos(newtorchlight.origin),"SETORIG\n");
	return;
}

void skycycle_readdlights_torch()
{
	local entity f;
		f = find(world, classname, "func_pointparticles");
		while(f)
		{
		 	//In alot of maps, so you can set your arrows alight near these
			if (f.mdl == "torchflame"
			|| f.mdl == "torch_small"
			|| f.mdl == "flamethrower"
			|| f.mdl == "firefield"
			|| f.mdl == "TE_FLAMEJET"
			|| f.mdl == "EF_BIGFLAME"
			|| f.mdl == "EF_LARGEFLAME"
			|| f.mdl == "EF_HUGEFLAME"
			|| f.mdl == "EF_IMMENSEFLAME") {
				skycycle_spawntorchlight(f);
			}
			f = find(f, classname, "func_pointparticles");
		}
		return;	
}

void skycycle_readdlights_stardust()
{
	local entity f;
		f = find(world, classname, "func_stardust");
		while(f)
		{
			//print("trytospawnlight\n");
			if not (skycycle_search_stardust_light(f, 128)) {
				//These are often close by eachother, don't want to add tons more
				//dyn light entities, instead add more light to one allready there
				//via skycycle_search_stardust when we spawn the light
				//If we haven't found any though here we spawn a light
				//print("spawnlight\n");
				skycycle_spawn_stardust_light(f); //A white light
			}
			f = find(f, classname, "func_stardust");
		}
		return;
}

//Similar lookup in W_CrossbowCanLightBolt but this is searching the whole map and not just for flame
void SkyCycle_ReAddLights()
{
	if not (autocvar_g_skycycle_nodynamiclights) {
		skycycle_readdlights_torch();
		skycycle_readdlights_stardust();
	}
}

void SkyCycle_Spawn()
{
		SkyCycle_Set();
		entity e;
		
		e = spawn();
		e.think = SkyCycle_Run;
		e.nextthink = time; //Start Right Away
		skycycle_epoch = 0;
		SkyCycle_Restart();
		
		//print("spawning sky cycle\n");
}

void SkyCycle_NukeFlashDo(entity player, float srfakelight, float srambient)
{
	float nukefakelight, nukeambient;
	float maxfakelight, maxambient;
	maxfakelight = 20;
	maxambient = 500;
	
	if (player.stat_nukeflash >= 100) {
		nukefakelight = maxfakelight;
		nukeambient = maxambient;
	} else {
		nukefakelight = srfakelight+(player.stat_nukeflash *((maxfakelight - srfakelight)*0.01));
		nukeambient = srambient+(player.stat_nukeflash *((maxambient - srambient)*0.01));
	}
	
	stuffcmd(player, strcat("cl_cmd settemp r_fakelight_intensity ", ftos(nukefakelight), "\n"));
	stuffcmd(player, strcat("cl_cmd settemp r_ambient ", ftos(nukeambient), "\n"));
}

void SkyCycle_NukeFlashSet(entity player)
{
	if (skycycle_ambient_realmin > skycycle_ambient_current) {
		skycycle_ambient_current = autocvar_g_skycycle_ambient_realmin;
	}
	
	if (skycycle_intensity_realmin > skycycle_intensity_current) {
		skycycle_intensity_current = autocvar_g_skycycle_intensity_realmin;
	}
	
	if (skycycle_ambient_realmax < skycycle_ambient_current) {
		skycycle_ambient_current = autocvar_g_skycycle_ambient_realmax;
	}
	
	if (skycycle_intensity_realmax < skycycle_intensity_current) {
		skycycle_intensity_current = autocvar_g_skycycle_intensity_realmax;
	}
	
	
	//print("sending sky stuff\n");
	//print(strcat("maxintensity ", ftos(skycycle_intensity_realmax), "\n"));
	//print(strcat("maxambient", ftos(skycycle_ambient_realmax), "\n"));
	//print(strcat("intensity    ", ftos(skycycle_intensity_current), "\n"));
	//print(strcat("ambient   ", ftos(skycycle_ambient_current), "\n"));
	
	SkyCycle_NukeFlashDo(self, skycycle_intensity_current, skycycle_ambient_current);
}

void SkyCycle_SendPlayer(float checkboxnum)
{
	if (skycycle_ambient_realmin > skycycle_ambient_current) {
		skycycle_ambient_current = autocvar_g_skycycle_ambient_realmin;
	}
	
	if (skycycle_intensity_realmin > skycycle_intensity_current) {
		skycycle_intensity_current = autocvar_g_skycycle_intensity_realmin;
	}
	
	if (skycycle_ambient_realmax < skycycle_ambient_current) {
		skycycle_ambient_current = autocvar_g_skycycle_ambient_realmax;
	}
	
	if (skycycle_intensity_realmax < skycycle_intensity_current) {
		skycycle_intensity_current = autocvar_g_skycycle_intensity_realmax;
	}
	
	
	//print("sending sky stuff\n");
	//print(strcat("maxintensity ", ftos(skycycle_intensity_realmax), "\n"));
	//print(strcat("maxambient", ftos(skycycle_ambient_realmax), "\n"));
	//print(strcat("intensity    ", ftos(skycycle_intensity_current), "\n"));
	//print(strcat("ambient   ", ftos(skycycle_ambient_current), "\n"));
	if (self.stat_nukeflash) {
		SkyCycle_NukeFlashDo(self, skycycle_intensity_current, skycycle_ambient_current);
	} else {
		if (checkboxnum) {
			//Send to all players
			entity e;
  			for(e = findchain(classname, "player"); e; e = e.chain)
			{
			stuffcmd(e, strcat("cl_cmd settemp r_fakelight_intensity ", ftos(skycycle_intensity_current), "\n"));
			stuffcmd(e, strcat("cl_cmd settemp r_ambient ", ftos(skycycle_ambient_current), "\n"));
			}
		} else {
			stuffcmd(self, strcat("cl_cmd settemp r_fakelight_intensity ", ftos(skycycle_intensity_current), "\n"));
			stuffcmd(self, strcat("cl_cmd settemp r_ambient ", ftos(skycycle_ambient_current), "\n"));
		}
	}
	
	if (skycycle_skybox) {
		if (skycycle_intensity_current < skycycle_nightsky_max) {
			if ((skycycle_skybox_number == 2) && (checkboxnum)) {
				//Do nothing
			} else {
				if (checkboxnum) {
					//Send to all players
					entity e;
  					for(e = findchain(classname, "player"); e; e = e.chain)
    					stuffcmd(e, strcat("loadsky ", skycycle_nightsky, "\n"));	
				} else {
					stuffcmd(self, strcat("loadsky ", skycycle_nightsky, "\n"));
				}
				skycycle_skybox_number = 2;
			}
		} else if (skycycle_intensity_current < skycycle_dusksky_max) {
			if ((skycycle_skybox_number == 1) && (checkboxnum)) {
				//Do nothing
			} else {
				if (checkboxnum) {
					//Send to all players
					entity e;
  					for(e = findchain(classname, "player"); e; e = e.chain)
    					stuffcmd(e, strcat("loadsky ", skycycle_dusksky, "\n"));	
				} else {
					stuffcmd(self, strcat("loadsky ", skycycle_dusksky, "\n"));
				}
				skycycle_skybox_number = 1;
			}
		} else {
			if ((skycycle_skybox_number == 0) && (checkboxnum)) {
				//Do nothing
			} else {
				if (checkboxnum) {
					//Send to all players
					entity e;
  					for(e = findchain(classname, "player"); e; e = e.chain)
    					stuffcmd(e, strcat("loadsky ", skycycle_daysky, "\n"));	
				} else {
					stuffcmd(self, strcat("loadsky ", skycycle_daysky, "\n"));
				}
				skycycle_skybox_number = 0;
			}
		}
	}
}

MUTATOR_HOOKFUNCTION(skycycle_PlayerPreThink)
{
	if (g_skycycle)
	if (time > skycycle_playernextthink)
	{
		SkyCycle_SendPlayer(1);
		skycycle_playernextthink = time + 1;
	}
	return TRUE;
}

MUTATOR_HOOKFUNCTION(skycycle_MatchEnd)
{
	//Foliage_Zero_Out_Vars();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(skycycle_PlayerSpawn)
{
	if (g_skycycle) {
		stuffcmd(self, "cl_cmd settemp r_fakelight 2\n");
		
		if (g_skycycle_started == 0) {
			SkyCycle_Spawn();
			SkyCycle_ReAddLights();
			//print("Spawning SkyCycle\n");
			
			if (autocvar_g_skycycle_startatnight) {
				skycycle_epoch = 1;
			}
			if (autocvar_g_skycycle_startattime) {
				skycycle_timestart = time - (skycycle_time * autocvar_g_skycycle_startattime);
			}
				
			g_skycycle_started = 1;
		} else {
			SkyCycle_SendPlayer(0);
		}
	}
	return TRUE;
}

MUTATOR_HOOKFUNCTION(skycycle_PlayerDies)
{
	if (g_skycycle) {
		SkyCycle_SendPlayer(0);
	}
	return TRUE;
}

MUTATOR_HOOKFUNCTION(skycycle_BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":skycycle");
	Foliage_Zero_Out_Vars();
	SpawnFoliageAroundLimits();
	Foliage_Presets();
	Foliage_GetAutoCvars();
	Foliage_GetSpecialConsiderations();
	return 0;
}

MUTATOR_HOOKFUNCTION(skycycle_BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", Sky Cycle");
	return 0;
}

MUTATOR_DEFINITION(mutator_skycycle)
{
	MUTATOR_HOOK(PlayerSpawn, skycycle_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerDies, skycycle_PlayerDies, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerPreThink, skycycle_PlayerPreThink, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, skycycle_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, skycycle_BuildMutatorsPrettyString, CBC_ORDER_ANY);
	
	// this just turns on the cvar.
	MUTATOR_ONADD
	{
		g_skycycle = 1;
	}

	// this just turns off the cvar.
	MUTATOR_ONREMOVE
	{	 
		g_skycycle = 0;
	}

	return 0;
}
///////////////////////////////////////////////
//End SkyCycle code
///////////////////////////////////////////////

///////////////////////////////////////////////
//Begin Map Suggested Foliage code
///////////////////////////////////////////////

void Suggested_Foliage_Spawn_Gradual ()
{
	if (g_spawnfoliagearound_current >= cvar("g_spawnfoliagearound_max")) {
		self.nextthink = 0;
		self.think = func_null;
	} else if (g_spawnfoliagearound_current >= cvar("g_suggested_spawnfoliagearound_min")) {
		self.nextthink = time + 3;
	} else {
		SpawnFoliageAroundLimits();
		Foliage_Presets();
		Foliage_GetSpecialConsiderations();
		//We only use presets for this.
				
		local float m, n;
		//Make sure we don't spawn more than max.
		m = cvar("g_suggested_spawnfoliagearound_min");
		n = m - g_spawnfoliagearound_current;
		if (n > autocvar_g_spawnfoliagearound_gradual_per) {
			n = autocvar_g_spawnfoliagearound_gradual_per;
		}
		
		if not(cvar("g_suggested_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((n / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
		Foliage_Populate_Forests((n / (1 + g_spawnfoliagearound_forestscurrent)));
		Foliage_Clear_Meadows();
		self.nextthink = time + autocvar_g_spawnfoliagearound_gradual;
	}
}

void Suggested_Foliage_Spawn_GradualInit()
{
		entity e;
		
		e = spawn();
		e.think = Suggested_Foliage_Spawn_Gradual;
		e.nextthink = time; //Start Right Away
}


MUTATOR_HOOKFUNCTION(suggested_spawnfoliage_MatchEnd)
{
	Foliage_Zero_Out_Vars();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(suggested_spawnfoliage_PlayerSpawn)
{
	if not(cvar("g_spawnfoliagearound")) {
		spawnfoliagearoundwaterplayerspawn(); //So water mutator works regardless
		spawnfoliagearoundlavaplayerspawn();
		spawnfoliagearoundslimeplayerspawn();
		spawnfoliagearoundoilplayerspawn();
		spawnfoliagearoundchemplayerspawn();
		spawnfoliagearoundmethaneplayerspawn();
	
		if ((cvar("g_suggested_spawnfoliagearound_min")) && (g_spawnfoliagearound_started == 0)) {
			if (autocvar_g_spawnfoliagearound_gradual) {
				SpawnFoliageAroundLimits();
				Foliage_Presets();
				Foliage_GetSpecialConsiderations();
				Foliage_Place_Meadows(cvar("g_suggested_spawnfoliagearound_meadowsmin"));
				Foliage_Place_Forests(cvar("g_suggested_spawnfoliagearound_forestsmin"));
				Suggested_Foliage_Spawn_GradualInit();
			} else {
				SpawnFoliageAroundLimits();
				Foliage_Presets();
				Foliage_GetSpecialConsiderations();
				//We only use presets for this.
				if not(cvar("g_suggested_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((cvar("g_suggested_spawnfoliagearound_min") / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
				Foliage_Populate_Forests((cvar("g_suggested_spawnfoliagearound_min") / (1 + g_spawnfoliagearound_forestscurrent)));
				Foliage_Place_Meadows(cvar("g_suggested_spawnfoliagearound_meadowsmin"));
				Foliage_Place_Forests(cvar("g_suggested_spawnfoliagearound_forestsmin"));
				Foliage_Clear_Meadows();
			}
			g_spawnfoliagearound_started = 1;
		} else {
			SpawnFoliageAroundLimits();
			Foliage_Presets();
			Foliage_GetSpecialConsiderations();
			//We only use presets for this.
			if not(cvar("g_suggested_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((cvar("g_suggested_spawnfoliagearound_per") / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
			Foliage_Populate_Forests((cvar("g_suggested_spawnfoliagearound_per") / (1 + g_spawnfoliagearound_forestscurrent)));
			Foliage_Place_Meadows(cvar("g_suggested_spawnfoliagearound_meadowsper")); //So you can add more dynamically if you wish
			Foliage_Place_Forests(cvar("g_suggested_spawnfoliagearound_forestsper")); //So you can add more dynamically if you wish
			Foliage_Clear_Meadows();
		}
	}
	return TRUE;
}

MUTATOR_HOOKFUNCTION(suggested_spawnfoliage_PlayerDies)
{
	if not(g_spawnfoliagearound) {
	SpawnFoliageAroundLimits();
	Foliage_Presets();
	Foliage_GetAutoCvars();
	Foliage_GetSpecialConsiderations();
	if not(cvar("g_suggested_spawnfoliagearound_forestsonly")) Foliage_Grow_Thicker((cvar("g_suggested_spawnfoliagearound_perdeath") / (1 + g_spawnfoliagearound_forestscurrent)), '0 0 0', 0, autocvar_g_spawnfoliagearound_maxfail);
	Foliage_Populate_Forests((cvar("g_suggested_spawnfoliagearound_perdeath") / (1 + g_spawnfoliagearound_forestscurrent)));
	Foliage_Place_Meadows(cvar("g_suggested_spawnfoliagearound_meadowsperdeath")); //So you can add more dynamically if you wish
	Foliage_Place_Forests(cvar("g_suggested_spawnfoliagearound_forestsperdeath")); //So you can add more dynamically if you wish
	Foliage_Clear_Meadows();
	}
	return TRUE;
}

MUTATOR_HOOKFUNCTION(suggested_spawnfoliage_BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":suggested_spawnfoliage");
	Foliage_Zero_Out_Vars();
	SpawnFoliageAroundLimits();
	Foliage_Presets();
	Foliage_GetAutoCvars();
	Foliage_GetSpecialConsiderations();
	return 0;
}

MUTATOR_HOOKFUNCTION(suggested_spawnfoliage_BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", Map Suggested Foliage");
	return 0;
}

MUTATOR_DEFINITION(mutator_suggested_spawnfoliage)
{
	MUTATOR_HOOK(MatchEnd, suggested_spawnfoliage_MatchEnd, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerSpawn, suggested_spawnfoliage_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerDies, suggested_spawnfoliage_PlayerDies, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, suggested_spawnfoliage_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, suggested_spawnfoliage_BuildMutatorsPrettyString, CBC_ORDER_ANY);
	
	// this just turns on the cvar.
	MUTATOR_ONADD
	{
		g_suggested_spawnfoliagearound = 1;
	}

	// this just turns off the cvar.
	MUTATOR_ONREMOVE
	{	 
		g_suggested_spawnfoliagearound = 0;
	}

	return 0;
}
///////////////////////////////////////////////
//End Map Suggested Foliage code
///////////////////////////////////////////////

//Misc Items
//
//
//
float g_spawnmiscitemsaround;
float autocvar_g_spawnmiscitemsaround_bumper_per;
float autocvar_g_spawnmiscitemsaround_bumper_max;
float autocvar_g_spawnmiscitemsaround_baloon_per;
float autocvar_g_spawnmiscitemsaround_baloon_max;
float autocvar_g_spawnmiscitemsaround_baloon_respawn;
float autocvar_g_spawnmiscitemsaround_baloon_airtime;
float autocvar_g_spawnmiscitemsaround_spikeball_per;
float autocvar_g_spawnmiscitemsaround_spikeball_max;
float spawnmiscitemsaround_spikeball_xamnt;
float spawnmiscitemsaround_spikeball_yamnt;
float spawnmiscitemsaround_spikeball_zamnt;
float spawnmiscitemsaround_spikeball_celingamnt;
float spawnmiscitemsaround_spikeball_floatamnt;
float spawnmiscitemsaround_spikeball_standamnt;
float spawnmiscitemsaround_overgrowth;
float autocvar_g_spawnmiscitemsaround_jumppad_per;
float autocvar_g_spawnmiscitemsaround_jumppad_max;
float autocvar_g_spawnmiscitemsaround_spikes_per;
float autocvar_g_spawnmiscitemsaround_spikes_max;
float autocvar_g_spawnmiscitemsaround_spikes_uz;
float autocvar_g_spawnmiscitemsaround_spikes_xy;
float autocvar_g_spawnmiscitemsaround_spikes_angles2norm;
float autocvar_g_spawnmiscitemsaround_spikes_solid;
float autocvar_g_spawnmiscitemsaround_tnkpyr_per;
float autocvar_g_spawnmiscitemsaround_tnkpyr_max;
float autocvar_g_spawnmiscitemsaround_tnkpyr_uz;
float autocvar_g_spawnmiscitemsaround_tnkpyr_xy;
float autocvar_g_spawnmiscitemsaround_tnkpyr_overgrowth;
float autocvar_g_spawnmiscitemsaround_tnkpyr_allowliquid;
float autocvar_g_spawnmiscitemsaround_tnkpyr_randomangle;
float autocvar_g_spawnmiscitemsaround_tnkpyr_fly;
float autocvar_g_spawnmiscitemsaround_tnkpyr_angles2norm;
float autocvar_g_spawnmiscitemsaround_tnkpyr_spawnnearteam;
float autocvar_g_spawnmiscitemsaround_tnkpyr_noforcedlight;
float autocvar_g_spawnmiscitemsaround_rock_per;
float autocvar_g_spawnmiscitemsaround_rock_max;
float autocvar_g_spawnmiscitemsaround_rock_uz;
float autocvar_g_spawnmiscitemsaround_rock_xy;
float autocvar_g_spawnmiscitemsaround_rock_overgrowth;
float autocvar_g_spawnmiscitemsaround_rock_allowliquid;
float autocvar_g_spawnmiscitemsaround_rock_randomangle;
float autocvar_g_spawnmiscitemsaround_rock_fly;
float autocvar_g_spawnmiscitemsaround_rock_angles2norm;
float autocvar_g_spawnmiscitemsaround_rock_spawnnearteam;
float autocvar_g_spawnmiscitemsaround_rock_tooclose;
float autocvar_g_spawnmiscitemsaround_rock_season5alwaysburning;
float autocvar_g_spawnmiscitemsaround_rock_season5alwaysdesert;
float autocvar_g_spawnmiscitemsaround_rock_suggested_season_use;
float autocvar_g_spawnmiscitemsaround_rock_avoidbuildings;
float autocvar_g_spawnmiscitemsaround_rock_noforcedlight;
float autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight;
float autocvar_g_spawnmiscitemsaround_abdbld_loddistance1; //Enables lod models for the buildings if set, set to the distance desired
float autocvar_g_spawnmiscitemsaround_abdbld_loddistance2;
float autocvar_g_spawnmiscitemsaround_abdbld_loddistance3;
float autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc; //Adds more distance before lod model1 for this type
float autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialuc; //Adds more distance before lod model1 for this type
float autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial; //Adds more distance before lod model1 for this type
float autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial; //Adds more distance to lod2 and latter etc
float autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
float autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
float autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2; //
float autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial; //Disable lod2 if you don't like the look
float autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3; //
float autocvar_g_spawnmiscitemsaround_abdbld_per;
float autocvar_g_spawnmiscitemsaround_abdbld_max;
float autocvar_g_spawnmiscitemsaround_abdbld_uz;
float autocvar_g_spawnmiscitemsaround_abdbld_xy;
float autocvar_g_spawnmiscitemsaround_abdbld_citytype;
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_rate;
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_shape; //0 box, 1 circle
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_meadows;
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_meadows_extrad;
vector autocvar_g_spawnmiscitemsaround_abdbld_citytype_center;  //Absolute
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_positionx; //Relative 0..1
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_positiony; //Relative 0..1
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_relativeposition; //Use
float autocvar_g_spawnmiscitemsaround_abdbld_citytype_position_mapedge_noprotect; //Allow cities near map edge (often map edge is water)
float autocvar_g_spawnmiscitemsaround_abdbld_overgrowth;
float autocvar_g_spawnmiscitemsaround_abdbld_overgrowth_rigor;
float autocvar_g_spawnmiscitemsaround_abdbld_overgrowth_skipprecheck;
float autocvar_g_spawnmiscitemsaround_abdbld_allowliquid;
float autocvar_g_spawnmiscitemsaround_abdbld_randomangle;
float autocvar_g_spawnmiscitemsaround_abdbld_fly;
float autocvar_g_spawnmiscitemsaround_abdbld_tooclose;
float autocvar_g_spawnmiscitemsaround_abdbld_tooclose_ignoretanktrapsetc;
float autocvar_g_spawnmiscitemsaround_abdbld_tooclose_extendedsearch;
float autocvar_g_spawnmiscitemsaround_abdbld_tooclose_spawnpoints;
float autocvar_g_spawnmiscitemsaround_abdbld_tooclose_flagbase;
float autocvar_g_spawnmiscitemsaround_abdbld_tooclose_onslaught;
float autocvar_g_spawnmiscitemsaround_abdbld_arrayrate;
float autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring;
float autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring_isbox;
float autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring2;
float autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring2_isbox;
float autocvar_g_spawnmiscitemsaround_abdbld_arrayreverseorder; //How often to mix up the order so larger blds won't be shut out by linear progression of bldg placement?
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt;
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_concrete;
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_glass;
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_misc;
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_fisc;
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc;
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc_shiftx;
float autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc_shifty;
float autocvar_g_spawnmiscitemsaround_abdbld_randombld;
float autocvar_g_spawnmiscitemsaround_abdbld_angles2norm;
float autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
float autocvar_g_spawnmiscitemsaround_abdbld_suggested_season_use;
float autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage; //0 nuke only, 1 allow bulldozer, 2 explosives aswell
float autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale;
float autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale_enable;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_fire;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood; //Must be greater than 0 to have any
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood; //Wooden suburban house etc
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_vinyl; //Plastic fence etc
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_vinyl;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;  //Brick houses
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_stone;  //Stone houses
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_stone;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_smallglassoffice;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_smallglassoffice;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete; //Prob 0 usually
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concretemil; //Prob 0 usually
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concretemil; //Prob 0 usually
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other; //Prob 0 usually
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other; //Farmland etc
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs; //Plants etc
float autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;

float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_concrete;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_concrete_ruin;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_concrete_destroyed;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass_ruin;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass_destroyed;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc_cupbase;
float autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc_destroyed;

float g_spawnmiscitemsaround_jumppad_current;
float g_spawnmiscitemsaround_bumper_current;
float g_spawnmiscitemsaround_baloon_current;
float g_spawnmiscitemsaround_spikes_current;
float g_spawnmiscitemsaround_tnkpyr_current;
float g_spawnmiscitemsaround_tnkpyr_currentfail;
float g_spawnmiscitemsaround_tnkpyr_currentwin;
float g_spawnmiscitemsaround_rock_current;
float g_spawnmiscitemsaround_rock_currentfail;
float g_spawnmiscitemsaround_rock_currentwin;
float g_spawnmiscitemsaround_rock_didprecache_misc;
float g_spawnmiscitemsaround_rock_didprecache_summer;
float g_spawnmiscitemsaround_rock_didprecache_fall;
float g_spawnmiscitemsaround_rock_didprecache_winter;
float g_spawnmiscitemsaround_rock_didprecache_strange;
float g_spawnmiscitemsaround_rock_didprecache_desert;
float g_spawnmiscitemsaround_rock_didprecache_graystone;
float g_spawnmiscitemsaround_rock_didprecache_blackstone;
float g_spawnmiscitemsaround_rock_didprecache_burning;
float g_spawnmiscitemsaround_abdbld_current;
float g_spawnmiscitemsaround_abdbld_currentfail;
float g_spawnmiscitemsaround_abdbld_currentwin;
float g_spawnmiscitemsaround_spikeball_current;
float g_spawnmiscitemsaround_abdbld_city1_meadowset;
vector g_spawnmiscitemsaround_abdbld_city1_meadowset_lastorigin;
float g_spawnmiscitemsaround_abdbld_city2_meadowset;
vector g_spawnmiscitemsaround_abdbld_city2_meadowset_lastorigin;
float g_spawnmiscitemsaround_abdbld_city3_meadowset;
vector g_spawnmiscitemsaround_abdbld_city3_meadowset_lastorigin;
float g_spawnmiscitemsaround_abdbld_city4_meadowset;
vector g_spawnmiscitemsaround_abdbld_city4_meadowset_lastorigin;
float autocvar_g_spawnmiscitemsaround_gradual;
float autocvar_g_spawnmiscitemsaround_gradual_per;
float g_spawnmiscitemsaround_gradual_started;

float SMI_Select_Building_ColorMap (float isfullrandom)
{
	local float mycolormap;
	mycolormap = 0;
	if (isfullrandom && (isfullrandom > random())) {
		mycolormap = (1024 + (floor(random()*15)) + (floor(random()*15)) * 16);
	} else {
		local float mysinglecolor;
		mysinglecolor = (floor(random()*15));
		mycolormap = (1024 + mysinglecolor + mysinglecolor * 16);
	}
	
	return mycolormap;
}

float SMI_Select_Building_ColorMap_OfficeBuildingSmall1and2()
{	local float mycolormap;
	mycolormap = 0;
	if (random() > 0.90) {
		if (random() > 0.5) {
			mycolormap = 1023;
		} else {
			mycolormap = 1024;
		}
	} else {
		mycolormap = SMI_Select_Building_ColorMap(0.10);

	}
	
	return mycolormap;
}

vector SMI_Select_Spawn_Point(void)
{
	entity e = spawn();
	e.mins = '-20 -20 -1';
	e.maxs = '20 20 20';

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP | DPCONTENTS_WATER, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, random() * 2048, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		remove(e);
		//dprint("^4SUCCESS: we found a suitable location for BUMPERSPHERE.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

vector SMI_Select_JPSpawn_Point(void)
{
	entity e = spawn();
	e.mins = '-20 -20 -1';
	e.maxs = '20 20 20';

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | DPCONTENTS_WATER, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, 0, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		
		traceline(e.origin + '0 0 100', e.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		remove(e);
		
		if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) {
			//Makesure it isn't skybox (say underwater or on side or edge of map like in some maps etc.)
			return '0 0 0';
		}
		
		//dprint("^4SUCCESS: we found a suitable location for JUMPPAD.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

vector SMI_Select_SPKSpawn_Point(float onceling)
{
	entity e = spawn();
	float vertamt;
	
	if (onceling == 2) {
		//X
		vertamt = 2048;
		e.mins = '-20 -20 -20';
		e.maxs = '0 20 20';
	} else if (onceling == 3) {
		//-X
		vertamt = 2048;
		e.mins = '0 -20 -20';
		e.maxs = '20 20 20';
	} else if (onceling == 4) {	
		vertamt = 2048;
		e.mins = '-20 -20 -20';
		e.maxs = '20 0 20';
	} else if (onceling == 5) {
		vertamt = 2048;
		e.mins = '-20 0 -20';
		e.maxs = '20 20 20';
	} else {
		//Regular
		vertamt = 0;
		e.mins = '-20 -20 -1';
		e.maxs = '20 20 20';
	}
	
	

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | DPCONTENTS_WATER, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, vertamt, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		
		if (onceling == 1) {
			traceline(e.origin + '0 0 2', e.origin + '0 0 100000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 2) {
			//X
			traceline(e.origin + '2 0 0', e.origin + '100000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 3) {
			//X
			traceline(e.origin + '2 0 0', e.origin - '100000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);	
		} else if (onceling == 4) {
			//Y
			traceline(e.origin + '0 2 0', e.origin + '0 100000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 5) {
			//Y
			traceline(e.origin + '0 2 0', e.origin - '0 100000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else {
			traceline(e.origin + '0 0 100', e.origin - '0 0 100000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		}
		remove(e);
		
		if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) {
			//Makesure it isn't skybox (say underwater or on side or edge of map like in some maps etc.)
			return '0 0 0';
		}
		
		//dprint("^4SUCCESS: we found a suitable location for JUMPPAD.\n");
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

vector SMI_Select_TNKSpawn_Point(float onceling, float allowliquid, float vfly)
{
	entity e = spawn();
	float vertamt;
	
	if not(vfly) {
	if (onceling == 2) {
		//X
		vertamt = 51248;
		e.mins = '-512 -512 -512';
		e.maxs = '0 512 512';
	} else if (onceling == 3) {
		//-X
		vertamt = 51248;
		e.mins = '0 -512 -512';
		e.maxs = '512 512 512';
	} else if (onceling == 4) {	
		vertamt = 51248;
		e.mins = '-512 -512 -512';
		e.maxs = '512 0 512';
	} else if (onceling == 5) {
		vertamt = 51248;
		e.mins = '-512 0 -512';
		e.maxs = '512 512 512';
	} else {
		//Regular
		vertamt = 0;
		e.mins = '-512 -512 -1';
		e.maxs = '512 512 512';
	}
	} else {
		vertamt = (random() * vfly);
	}
	
	float bitmask1, bitmask2;
	if(allowliquid) {
		bitmask1 = DPCONTENTS_WATER;
		bitmask2 = DPCONTENTS_SLIME;
	} else {
		bitmask1 = DPCONTENTS_PLAYERCLIP;
		bitmask2 = DPCONTENTS_WATER;
	}

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | bitmask1, bitmask2 | DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, vertamt, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		
		if not(vfly) {
		if (onceling == 1) {
			traceline(e.origin + '0 0 2', e.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 2) {
			//X
			traceline(e.origin + '2 0 0', e.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 3) {
			//X
			traceline(e.origin + '2 0 0', e.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);	
		} else if (onceling == 4) {
			//Y
			traceline(e.origin + '0 2 0', e.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 5) {
			//Y
			traceline(e.origin + '0 2 0', e.origin - '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else {
			traceline(e.origin + '0 0 100', e.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		}
		}
		
		if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) {
			//Makesure it isn't skybox (say underwater or on side or edge of map like in some maps etc.)
			remove(e);
			return '0 0 0';
		}
		
		if(allowliquid < 1) {
			if(pointcontents(e.origin) == CONTENT_WATER)
			{	
				remove(e);
				return '0 0 0';
			}
			if(allowliquid < 0) {
				//We don't even want to be above water
				traceline(e.origin + '0 0 2', e.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
				if(pointcontents(trace_endpos) == CONTENT_WATER)
				{
					remove(e);
					return '0 0 0';
				}
			}
		}
		
		if (spawnmiscitemsaround_overgrowth < 7) {
			float hitmaterial;
			hitmaterial = W_EvaluateMaterialHit();
		
			if ((hitmaterial == 1) || (hitmaterial == 2)) {
				//print("Metal\n");
				remove(e);
				g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
				return '0 0 0';
			} else if (hitmaterial == 5) {
				//print("Concrete\n");
				if (spawnmiscitemsaround_overgrowth < 5) {
					remove(e);
					g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
					return '0 0 0';
				}
			} else if ((hitmaterial == 3) || (hitmaterial == 4)) {
				//print("Stone and Brick\n");
				if (spawnmiscitemsaround_overgrowth < 4) {
					remove(e);
					g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 6) {
				//print("Glass or Window\n");
			} else if (hitmaterial == 8) {
				//print("Wood and Bark\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 9) {
				//print("Sheetrock or Cardboard or Vinyl\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "asphalt", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "asphault", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "road", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "filzkachel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "roof", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "cobble", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "paving", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "pavement", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "rubber", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "vtiles", 0) != -1 )
			)
			{
				//print("Asphalt or astroturf or roof\n");
				if (spawnmiscitemsaround_overgrowth < 2) {
					remove(e);
					g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "gravel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "sand", 0) != -1 )
			)
			{
				//print("Gravel or Sand\n");
				if (spawnmiscitemsaround_overgrowth < 1) {
					remove(e);
					g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 7) {
				//print("Dirt Etc\n");
				//Allow growth in all cases of dirt or grass not caught above
			} else if (
			( strstrofs(trace_dphittexturename, "caulk", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "common", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "base", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "door", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "tile", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "barrel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "detail", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "decal", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "wall", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "carpet", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plastic", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "panel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "floor", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "flr_", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plaster", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "trim", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "celing", 0) != -1 )
			)
			{
				//If the thing was any of the other "real" materials, we do not get here
				//If it isn't any of the rest, before allowing, check to see if 
				//it has some stated purpose that we should not grown things on
				//print("Stated Purpose\n");
				if (spawnmiscitemsaround_overgrowth < 6) {
					remove(e);
					g_spawnmiscitemsaround_tnkpyr_currentfail = g_spawnmiscitemsaround_tnkpyr_currentfail + 1;
					return '0 0 0';
				}
			} else {
				//print("NotMetal\n");
			}
		}
		remove(e);
		
		//dprint("^4SUCCESS: we found a suitable location for TANKTRAPS_PYRAMID.\n");
		g_spawnmiscitemsaround_tnkpyr_currentwin = g_spawnmiscitemsaround_tnkpyr_currentwin + 1;
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

void SMI_ABD_CityMeadowSpawn (vector myorigin, float myradius)
{
			entity previousself = self;
			entity e = spawn();
			e.origin = myorigin;
			e.solid = SOLID_NOT;
			
			e.mins = ('0 0 0');
			e.maxs = ('0 0 0');
			
			////Debug stuff
			//e.mins = ('-1 -1 -1');
			//e.maxs = ('1 1 1');	
			//e.model = "models/beechtree_lod2.iqm";
			//e.lodmodel1 = "models/beechtree_lod2.iqm";
			//e.lodmodel2 = "models/beechtree_lod2.iqm";
			//e.skin = 6;
			////////////////
			
			e.alpha = -1;
			
			e.cnt = myradius; //Search Radius
			
			if (autocvar_g_spawnmiscitemsaround_abdbld_citytype_meadows == 1) {
				//2 is no brush
				e.spawnflags = 1;
			}
			
			e.classname = "sfmdwr"; //Spawn Foliage MeaDoW Radius(type)
			
			self = e;
			setorigin(self, self.origin);
       			tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        		setorigin(self, trace_endpos);
			
			//spawnfunc_misc_gamemodel();
						
			self = previousself;
}

float SMI_ABD_CityMeadowNeedToPlaceNew (float myx, float myy, float mycity, float mycitytype)
{
	//See if this changed and we might need to place a new meadow
	//If moved, then returns true, otherwise false.
	if (mycitytype < 4)
	{
		if (mycity == 1) {
			if (myx != g_spawnmiscitemsaround_abdbld_city1_meadowset_lastorigin_x
			|| myy != g_spawnmiscitemsaround_abdbld_city1_meadowset_lastorigin_y)
			{
				g_spawnmiscitemsaround_abdbld_city1_meadowset = 0;
				g_spawnmiscitemsaround_abdbld_city1_meadowset_lastorigin_x = myx;
				g_spawnmiscitemsaround_abdbld_city1_meadowset_lastorigin_y = myy;
				return TRUE;
			} else if (!g_spawnmiscitemsaround_abdbld_city1_meadowset)
			{
				return TRUE;
			}
		} else if (mycity == 2) {
			if (myx != g_spawnmiscitemsaround_abdbld_city2_meadowset_lastorigin_x
			|| myy != g_spawnmiscitemsaround_abdbld_city2_meadowset_lastorigin_y)
			{
				g_spawnmiscitemsaround_abdbld_city2_meadowset = 0;
				g_spawnmiscitemsaround_abdbld_city2_meadowset_lastorigin_x = myx;
				g_spawnmiscitemsaround_abdbld_city2_meadowset_lastorigin_y = myy;
				return TRUE;
			} else if (!g_spawnmiscitemsaround_abdbld_city2_meadowset)
			{
				return TRUE;
			}
		} else if (mycity == 3) {
			if (myx != g_spawnmiscitemsaround_abdbld_city3_meadowset_lastorigin_x
			|| myy != g_spawnmiscitemsaround_abdbld_city3_meadowset_lastorigin_y)
			{
				g_spawnmiscitemsaround_abdbld_city3_meadowset = 0;
				g_spawnmiscitemsaround_abdbld_city3_meadowset_lastorigin_x = myx;
				g_spawnmiscitemsaround_abdbld_city3_meadowset_lastorigin_y = myy;
				return TRUE;
			} else if (!g_spawnmiscitemsaround_abdbld_city3_meadowset)
			{
				return TRUE;
			}
		} else if (mycity == 4) {
			if (myx != g_spawnmiscitemsaround_abdbld_city4_meadowset_lastorigin_x
			|| myy != g_spawnmiscitemsaround_abdbld_city4_meadowset_lastorigin_y)
			{
				g_spawnmiscitemsaround_abdbld_city4_meadowset = 0;
				g_spawnmiscitemsaround_abdbld_city4_meadowset_lastorigin_x = myx;
				g_spawnmiscitemsaround_abdbld_city4_meadowset_lastorigin_y = myy;
				return TRUE;
			} else if (!g_spawnmiscitemsaround_abdbld_city4_meadowset)
			{
				return TRUE;
			}
		}
	}
	return FALSE;
}

void SMI_ABD_MaybePlaceCityMeadow(float myposx, float myposy, float mycity, float mycitytype) 
{
	if (autocvar_g_spawnmiscitemsaround_abdbld_citytype_meadows) {
	//Normal cities only, no line cities
	if (mycitytype < 4)
	{
		//print (ftos(mycity),"Mcity\n",ftos(myposx), " ", ftos(myposy),"-----------------------\n\n\n\n\n\n\n\n\n\n\n\n");
		//print (ftos(mycity),"Mcity\n",ftos(myposx), " ", ftos(myposy),"-----------------------\n\n\n\n\n\n\n\n\n\n\n\n");

		if (SMI_ABD_CityMeadowNeedToPlaceNew(myposx, myposy, mycity, mycitytype))
		{
			local entity mye;
			local vector myevec;
					
			myevec = '0 0 0';
			myevec_z = (world.maxs_z - world.mins_z);
			mye = spawn();
			mye.origin_x = myposx;
			mye.origin_y = myposy;
			//((1024-(-512))/2)+(-512)
			//((world.maxs_z - world.mins_z)*0.5)+ world.mins_z
			mye.origin_z = (((world.maxs_z - world.mins_z)*0.5) + world.mins_z);
			traceline(mye.origin, mye.origin + myevec, G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), mye);
			mye.origin = trace_endpos;
			myevec_z = myevec_z * -1;
			traceline(mye.origin, mye.origin + myevec, G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), mye);
			remove (mye);
			myevec = trace_endpos;
			
				//print (ftos(mycity),"VMcity\n",vtos(myevec),"---MyVec-----------------------\n\n\n\n\n\n\n\n\n\n\n\n");

					
			SMI_ABD_CityMeadowSpawn(myevec, (autocvar_g_spawnmiscitemsaround_abdbld_citytype_size + autocvar_g_spawnmiscitemsaround_abdbld_citytype_meadows_extrad));
			
			if (mycity == 1) {
				g_spawnmiscitemsaround_abdbld_city1_meadowset = 1;
			} else if (mycity == 2) {
				g_spawnmiscitemsaround_abdbld_city2_meadowset = 1;
			} else if (mycity == 3) {
				g_spawnmiscitemsaround_abdbld_city3_meadowset = 1;
			} else if (mycity == 4) {
				g_spawnmiscitemsaround_abdbld_city4_meadowset = 1;
			}
		}
	}
	}
}

float SMI_ABD_MoveToRandomMapLocation(entity e, float bitmask1, float bitmask2, float vertamt)
{
	local vector citymins;
	local vector citymaxs;
	
	if (!autocvar_g_spawnmiscitemsaround_abdbld_citytype)
	{
		return (MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | bitmask1, bitmask2 | DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, vertamt, 1));
	} else {
		if (random() < autocvar_g_spawnmiscitemsaround_abdbld_citytype_rate) {
			//Perhaps in the future other shapes? (maybe make a MoveToRandom... that works with radius?)
			local float mposx;
			local float mposy;
			local float myx;
			local float myy;
			local float mposrandvar;
			local float mycity; //1,2,3,4?
			mycity = 1;
			
			if (autocvar_g_spawnmiscitemsaround_abdbld_citytype_relativeposition) {
				local float myor; //Orientation of current rectangle piece (x or y) for selection 6
				
				
				//These are mutipliers.
				if (autocvar_g_spawnmiscitemsaround_abdbld_citytype_position_mapedge_noprotect) {
					//Do nothing, you know what you're doing and want exact results
					mposx = bound(0, autocvar_g_spawnmiscitemsaround_abdbld_citytype_positionx, 1);
					mposy = bound(0, autocvar_g_spawnmiscitemsaround_abdbld_citytype_positiony, 1);
				} else {
					//0,0 causes a edict overrun
					//So we avoid this value
					//Better to be robust than to crash
					mposx = bound(0.05, autocvar_g_spawnmiscitemsaround_abdbld_citytype_positionx, 0.95);
					mposy = bound(0.05, autocvar_g_spawnmiscitemsaround_abdbld_citytype_positiony, 0.95);
				}
			
				//We want to change 0.75 to 0.25, and 1 to 0, and 0 to 1, and 0.25 to 0.75; 0.5 is out center pivot
				//(X-0.5)*2  = normalize the 0..1 to -1, 1
				//((X-0.5)*2)*-1 = B (normalized and inverted)
				//((B/2)+0.5) = Renormalized
				//Let's not use division when it can be avoided
				//((B*0.5)+0.5)
				//Thus:
				//([((X-0.5)*2)*-1]*0.5)+0.5 
				if (autocvar_g_spawnmiscitemsaround_abdbld_citytype == 2
				|| autocvar_g_spawnmiscitemsaround_abdbld_citytype == 4
				|| autocvar_g_spawnmiscitemsaround_abdbld_citytype == 5) {
					//2 Cities (mirrored)
					if (random() > 0.5) {
						//To place the algo here, or elsewhere and incur the overhead of a function call...
						mposx = (((((mposx-0.5)*2)*-1)*0.5)+0.5);
						mposy = (((((mposy-0.5)*2)*-1)*0.5)+0.5);
						mycity = 2;
					}
					//Selection4 and 5 are great divide
				} else if (autocvar_g_spawnmiscitemsaround_abdbld_citytype == 3
				|| autocvar_g_spawnmiscitemsaround_abdbld_citytype == 6) {
					//4 Cities ("great divide")
					myor = 0;
					mposrandvar = random();
					
					if (mposrandvar > 0.75) {
						mposx = (((((mposx-0.5)*2)*-1)*0.5)+0.5);
						mposy = (((((mposy-0.5)*2)*-1)*0.5)+0.5);
						mycity = 2;
					} else if (mposrandvar > 0.5) {
						mposy = (((((mposy-0.5)*2)*-1)*0.5)+0.5);
						myor = 1;
						mycity = 3;
					} else if (mposrandvar > 0.25) {
						mposx = (((((mposx-0.5)*2)*-1)*0.5)+0.5);
						myor = 1;
						mycity = 4;
					}
					//Selection 6 is box
				}
			
			
				//Example:
				//Max X = 1024, Min X = -512
				//Want to center vs actual map bounds if 0.5, (and if 0 or 1 be at edge etc)
				//((1024-(-512))*0.5)+(-512)
				//((max)-(min))*multip)+(min)
				//Z not used, 2d placement
				myx = ((world.maxs_x - world.mins_x) * mposx)+(world.mins_x);
				myy = ((world.maxs_y - world.mins_y) * mposy)+(world.mins_y);
			
				//print(ftos(myx), " X  ", ftos(myy)," Y\n\n\n\n\n\n\n\n\n\n\n\n");
				//print(ftos(myx), " X  ", ftos(myy)," Y\n\n\n\n\n\n\n\n\n\n\n\n");
			
				citymins_x = myx - autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				citymins_y = myy - autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				citymaxs_x = myx + autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				citymaxs_y = myy + autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_citytype == 4) {
					citymins_y = world.mins_y;
					citymaxs_y = world.maxs_y;
				} else if (autocvar_g_spawnmiscitemsaround_abdbld_citytype == 5) {
					citymins_x = world.mins_x;
					citymaxs_x = world.maxs_x;
				} else if (autocvar_g_spawnmiscitemsaround_abdbld_citytype == 6) {
					if (myor) {
					citymins_y = world.mins_y;
					citymaxs_y = world.maxs_y;
					} else {
					citymins_x = world.mins_x;
					citymaxs_x = world.maxs_x;
					}
				}
				
				SMI_ABD_MaybePlaceCityMeadow(myx, myy, mycity, autocvar_g_spawnmiscitemsaround_abdbld_citytype);
			} else {
				//Simple coords
				mposx = autocvar_g_spawnmiscitemsaround_abdbld_citytype_center_x;
				mposy = autocvar_g_spawnmiscitemsaround_abdbld_citytype_center_y;
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_citytype == 2) {
					//2 Cities (mirrored)
					if (random() > 0.5) {
						mposx = mposx * -1;
						mposy = mposy * -1;
						mycity = 2;
					}
				} else if (autocvar_g_spawnmiscitemsaround_abdbld_citytype == 3) {
					//4 Cities (mirrored)
					mposrandvar = random();
					
					if (mposrandvar > 0.75) {
						mposx = mposx * -1;
						mposy = mposy * -1;
						mycity = 2;
					} else if (mposrandvar > 0.5) {
						mposy = mposy * -1;
						mycity = 3;
					} else if (mposrandvar > 0.25) {
						mposx = mposx * -1;
						mycity = 4;
					}
				}
				
				citymins_x = mposx - autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				citymins_y = mposy - autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				citymaxs_x = mposx + autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				citymaxs_y = mposy + autocvar_g_spawnmiscitemsaround_abdbld_citytype_size;
				
				SMI_ABD_MaybePlaceCityMeadow(mposx, mposy, mycity, autocvar_g_spawnmiscitemsaround_abdbld_citytype);
			}
			citymins_z = world.mins_z;
			citymaxs_z = world.maxs_z;
			
			//Lets not go beyond the map bounds
			if (citymins_x < world.mins_x) {
				citymins_x = world.mins_x;
				
				//if (citymins_x + 512 >= citymaxs_x) {
				//	citymaxs_x = citymaxs_x + 2048;
				//}
			}
			
			if (citymins_y < world.mins_y) {
				citymins_y = world.mins_y;
				
				//if (citymins_y + 512 >= citymaxs_y) {
				//	citymaxs_y = citymaxs_y + 2048;
				//}
			}
			
			if (citymaxs_x > world.maxs_x) {
				citymaxs_x = world.maxs_x;
				
				//if (citymins_x + 512 >= citymaxs_x) {
				//	citymins_x = citymins_x - 2048;
				//}
			}
			
			if (citymaxs_y > world.maxs_y) {
				citymaxs_y = world.maxs_y;
				
				//if (citymins_y + 512 >= citymaxs_y) {
				//	citymins_y = citymins_y - 2048;
				//}
			}
			
			if ((autocvar_g_spawnmiscitemsaround_abdbld_citytype_shape == 1
			|| autocvar_g_spawnmiscitemsaround_abdbld_citytype_shape == 2)
			&& autocvar_g_spawnmiscitemsaround_abdbld_citytype < 4) {
				//Only applicable to non-line cities
				local vector myposvec;
				local float mycinvert;
				if (autocvar_g_spawnmiscitemsaround_abdbld_citytype_shape == 2) {
					mycinvert = 1;
				} else {
					mycinvert = 0;
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_citytype_relativeposition) {
					myposvec_x = myx;
					myposvec_y = myy;
				} else {
					myposvec_x = mposx;
					myposvec_y = mposy;
				}
				
				myposvec_z = 0; //Irrelevant, 2d radius.
				return (MoveToRandomMapLocationLimitsRadius(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | bitmask1, bitmask2 | DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, vertamt, 1, citymins, citymaxs, FALSE, myposvec, autocvar_g_spawnmiscitemsaround_abdbld_citytype_size, mycinvert));
			} else {
				return (MoveToRandomMapLocationLimits(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | bitmask1, bitmask2 | DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, vertamt, 1, citymins, citymaxs, FALSE));
			}
		} else {
			return (MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | bitmask1, bitmask2 | DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, vertamt, 1));
		}
	}
}

//Abandoned Building
vector SMI_Select_ABDSpawn_Point(float onceling, float allowliquid, float vfly)
{
	entity e = spawn();
	float vertamt;
	
	if not(vfly) {
	if (onceling == 2) {
		//X
		vertamt = 102448;
		e.mins = '-1024 -1024 -1024';
		e.maxs = '0 1024 1024';
	} else if (onceling == 3) {
		//-X
		vertamt = 102448;
		e.mins = '0 -1024 -1024';
		e.maxs = '1024 1024 1024';
	} else if (onceling == 4) {	
		vertamt = 102448;
		e.mins = '-1024 -1024 -1024';
		e.maxs = '1024 0 1024';
	} else if (onceling == 5) {
		vertamt = 102448;
		e.mins = '-1024 0 -1024';
		e.maxs = '1024 1024 1024';
	} else {
		//Regular
		vertamt = 0;
		e.mins = '-1024 -1024 -1';
		e.maxs = '1024 1024 1024';
	}
	} else {
		vertamt = (random() * vfly);
	}
	
	float bitmask1, bitmask2;
	if(allowliquid) {
		bitmask1 = DPCONTENTS_WATER;
		bitmask2 = DPCONTENTS_SLIME;
	} else {
		bitmask1 = DPCONTENTS_PLAYERCLIP;
		bitmask2 = DPCONTENTS_WATER;
	}

	// tries 10 times then gives up, that's what the number 10 stands for
	if(SMI_ABD_MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | bitmask1, bitmask2 | DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, vertamt))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		
		if not(vfly) {
		if (onceling == 1) {
			traceline(e.origin + '0 0 2', e.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 2) {
			//X
			traceline(e.origin + '2 0 0', e.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 3) {
			//X
			traceline(e.origin + '2 0 0', e.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);	
		} else if (onceling == 4) {
			//Y
			traceline(e.origin + '0 2 0', e.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 5) {
			//Y
			traceline(e.origin + '0 2 0', e.origin - '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else {
			traceline(e.origin + '0 0 100', e.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		}
		}
		
		if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) {
			//Makesure it isn't skybox (say underwater or on side or edge of map like in some maps etc.)
			remove(e);
			return '0 0 0';
		}
		
		if(allowliquid < 1) {
			if(pointcontents(e.origin) == CONTENT_WATER)
			{	
				remove(e);
				return '0 0 0';
			}
			if(allowliquid < 0) {
				//We don't even want to be above water
				traceline(e.origin + '0 0 2', e.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
				if(pointcontents(trace_endpos) == CONTENT_WATER)
				{
					remove(e);
					return '0 0 0';
				}
			}
		}

		///////////////////////////////
		if (!autocvar_g_spawnmiscitemsaround_abdbld_overgrowth_skipprecheck) //If snap is large, sometimes you want to skip this initial check
		{
		  if (spawnmiscitemsaround_overgrowth < 7) {
			float hitmaterial;
			hitmaterial = W_EvaluateMaterialHit();
		
			if ((hitmaterial == 1) || (hitmaterial == 2)) {
				//print("Metal\n");
				remove(e);
				g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
				return '0 0 0';
			} else if (hitmaterial == 5) {
				//print("Concrete\n");
				if (spawnmiscitemsaround_overgrowth < 5) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return '0 0 0';
				}
			} else if ((hitmaterial == 3) || (hitmaterial == 4)) {
				//print("Stone and Brick\n");
				if (spawnmiscitemsaround_overgrowth < 4) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 6) {
				//print("Glass or Window\n");
			} else if (hitmaterial == 8) {
				//print("Wood and Bark\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 9) {
				//print("Sheetrock or Cardboard or Vinyl\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "asphalt", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "asphault", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "road", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "filzkachel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "roof", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "cobble", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "paving", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "pavement", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "rubber", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "vtiles", 0) != -1 )
			)
			{
				//print("Asphalt or astroturf or roof\n");
				if (spawnmiscitemsaround_overgrowth < 2) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "gravel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "sand", 0) != -1 )
			)
			{
				//print("Gravel or Sand\n");
				if (spawnmiscitemsaround_overgrowth < 1) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 7) {
				//print("Dirt Etc\n");
				//Allow growth in all cases of dirt or grass not caught above
			} else if (
			( strstrofs(trace_dphittexturename, "caulk", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "common", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "base", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "door", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "tile", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "barrel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "detail", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "decal", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "wall", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "carpet", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plastic", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "panel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "floor", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "flr_", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plaster", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "trim", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "celing", 0) != -1 )
			)
			{
				//If the thing was any of the other "real" materials, we do not get here
				//If it isn't any of the rest, before allowing, check to see if 
				//it has some stated purpose that we should not grown things on
				//print("Stated Purpose\n");
				if (spawnmiscitemsaround_overgrowth < 6) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return '0 0 0';
				}
			} else {
				//print("NotMetal\n");
			}
		  }
		}
		///////////////////////////////
		
		remove(e);
		
		//dprint("^4SUCCESS: we found a suitable location for ABANDONED_BUILDING.\n");
		g_spawnmiscitemsaround_abdbld_currentwin = g_spawnmiscitemsaround_abdbld_currentwin + 1;
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

void SMI_baloon_think(void);

void SMI_baloon_touch()
{
		if(other != world) {
			// flash when activated
			//pointparticles(particleeffectnum("jumppad_activate"), other.origin, other.velocity, 1);
			sound (other, CH_TRIGGER, self.noise, VOL_BASE, ATTN_NORM);
			
			entity previousself;
			previousself = self;
			self = other;
			if (self.waterlevel == WATERLEVEL_SUBMERGED)
			{
				if(self.air_finished < time && !self.stoned) {
					PlayerSound(playersound_gasp, CH_PLAYER, VOICETYPE_PLAYERSOUND);
				}
			}
			self = 	previousself;
			other.air_finished = time + autocvar_g_spawnmiscitemsaround_baloon_airtime;
			other.velocity_z = 512;
			UpdateCSQCProjectile(other);
			
			//*Pop*
			self.alpha = -1;
			self.touch = func_null;
			self.think = SMI_baloon_think;
			self.nextthink = time + autocvar_g_spawnmiscitemsaround_baloon_respawn;
		}
}

void SMI_baloon_think()
{
		//Reappear
		self.think = func_null;
		self.alpha = 1;
		self.touch = SMI_baloon_touch;
}


void SMI_bumper_touch()
{
	if(self.pushltime < time)  // prevent "snorring" sound when a player hits the jumppad more than once
	{
		// flash when activated
		pointparticles(particleeffectnum("jumppad_activate"), other.origin, other.velocity, 1);
		sound (other, CH_TRIGGER, self.noise, VOL_BASE, ATTN_NORM);
		self.pushltime = time + 0.2;
		
		if(other != world) {
			other.velocity = other.velocity * -1;
			UpdateCSQCProjectile(other);
		}
	}
}

void SMI_jumppad_touch()
{
	if(self.pushltime < time)  // prevent "snorring" sound when a player hits the jumppad more than once
	{
		// flash when activated
		pointparticles(particleeffectnum("jumppad_activate"), other.origin, other.velocity, 1);
		sound (other, CH_TRIGGER, self.noise, VOL_BASE, ATTN_NORM);
		self.pushltime = time + 0.1;
		
		if(other != world) {
			if (self.skin == 0) {
				//Red
				other.velocity_z = 2048;
			} else if (self.skin == 2) {
				//Green
				other.velocity_z = 1512;	
			} else if (self.skin == 3 || self.skin == 5) {
				//Yellow or Purple
				other.velocity_z = 1024;
			} else {
				//Orange, Blue etc
				other.velocity_z = 1756;
			}
		}
	}
}

float SMI_select_color(float typeofcolor)
{
				local float scolormap;
				float wrandvar;
				if(((cvar("g_spawnfoliagearound"))
				|| ((cvar("g_suggested_spawnfoliagearound"))
				&& (cvar("g_suggested_spawnfoliagearound_min"))))
				&& !((typeofcolor == 1) && (cvar("g_spawnmiscitemsaround_baloon_rainbow") > 0)))
				{
					if (spawnfoliagearound_season == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 40) {
							//Green
							scolormap = (1024 + 7 + 7 * 16);
						}
					} else if (spawnfoliagearound_season == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//Oranges
							scolormap = (1024 + 1 + 14 * 16);
						} else if(wrandvar > 50) {
							//Green with yellow
							scolormap = (1024 + 7 + 12 * 16);
						} else if(wrandvar > 40) {
							//Green with Orange
							scolormap = (1024 + 7 + 1 * 16);
						} else if(wrandvar > 30) {
							//Green with Orange
							scolormap = (1024 + 7 + 14 * 16);
						} else if(wrandvar > 20) {
							//Yellow
							scolormap = (1024 + 12 + 12 * 16);
						} else {
							//Orange
							scolormap = (1024 + 14 + 14 * 16);
						}
					} else if (spawnfoliagearound_season == 3) {
						//"Winter"
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//WhiteMagenta
							scolormap = (1024 + 8 * 16);
						} else if(wrandvar > 40) {
							//White?
							scolormap = 1024;
						} else {
							//WhiteCyan
							scolormap = (1024 + 6 * 16);	
						}
					} else if (spawnfoliagearound_season == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 65) {
							//Purple mixed with magenta
							scolormap = (1024 + 8 + 9 * 16);
						} else if(wrandvar > 55) {
							//Blue
							scolormap = (1024 + 5 + 5 * 16);
						} else if(wrandvar > 45) {
							//Blueer
							scolormap = (1024 + 11 + 11 * 16);
						} else if(wrandvar > 35) {
							//Rose
							scolormap = (1024 + 10 + 10 * 16);	
						} else {
							//Cyan
							scolormap = (1024 + 6 + 6 * 16);
						}
					} else if (spawnfoliagearound_season == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 80) {
							//Oranges
							scolormap = (1024 + 1 + 1 * 16);
						} else if(wrandvar > 60) {
							//Yellow
							scolormap = (1024 + 12 + 12 * 16);
						} else if(wrandvar > 40) {
							//Orange
							scolormap = (1024 + 14 + 14 * 16);
						} else if(wrandvar > 20) {
							//Black	
						} else {
							//Red
							scolormap = (1024 + 4 + 4 * 16);
						}
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//Blue
							scolormap = (1024 + 11 + 11 * 16);
						} else if(wrandvar > 40) {	
							//Yellow
							scolormap = (1024 + 12 + 12 * 16);
						} else {
							//Red
							scolormap = (1024 + 4 + 4 * 16);	
						}
					}
				} else {
					if (typeofcolor == 1) {
						if (cvar("g_spawnmiscitemsaround_baloon_rainbow") == 2) {
							scolormap = (1024 + (floor(random() * 16)) + (floor(random() * 16)) * 16);
						} else {
							wrandvar = random() * 100;
							if(wrandvar > 87.5) {
								//Blue
								scolormap = (1024 + 11 + 11 * 16);
							} else if(wrandvar > 75) {	
								//Yellow
								scolormap = (1024 + 12 + 12 * 16);
							} else if(wrandvar > 62.5) {
								//Purple 
								scolormap = (1024 + 8 + 8 * 16);
							} else if(wrandvar > 50) {
								//Orange
								scolormap = (1024 + 1 + 1 * 16);
							} else if(wrandvar > 37.5) {
								//Cyan
								scolormap = (1024 + 6 + 6 * 16);
							} else if(wrandvar > 25) {
								//White
								scolormap = 1024;
							} else if(wrandvar > 12.5) {
								//Black
								scolormap = 1023;
							} else {
								//Red
								scolormap = (1024 + 4 + 4 * 16);	
							}
						}
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 50) {	
							//Yellow
							scolormap = (1024 + 12 + 12 * 16);
						} else {
							//Red
							scolormap = (1024 + 4 + 4 * 16);	
						}
					}
				}
				
				return(scolormap);
}

float SMI_select_skin()
{
				local float scolormap;
				float wrandvar;
				if((cvar("g_spawnfoliagearound"))
				|| ((cvar("g_suggested_spawnfoliagearound"))
				&& (cvar("g_suggested_spawnfoliagearound_min")))) {
					if (spawnfoliagearound_season == 1) {
						//Summer etc
						wrandvar = random() * 100;
						if(wrandvar > 60) {
							//Green
							scolormap = 2;
						} else {
							//Yellow
							scolormap = 3;
						}
					} else if (spawnfoliagearound_season == 2) {
						//Fall etc
						wrandvar = random() * 100;
						if(wrandvar > 60) {
							//Green
							scolormap = 2;
						} else if(wrandvar > 30) {
							//Yellow
							scolormap = 3;
						} else {
							//Orange
							scolormap = 4;
						}
					} else if (spawnfoliagearound_season == 3) {
						//"Winter"
						scolormap = 1;
					} else if (spawnfoliagearound_season == 4) {
						//"Spring" or rather "Strange"
						wrandvar = random() * 100;
						if(wrandvar > 50) {
							//Purple mixed with magenta
							scolormap = 5;
						} else {
							//Blue
							scolormap = 1;	
						}
					} else if (spawnfoliagearound_season == 5) {
						//Sunset Park
						wrandvar = random() * 100;
						if(wrandvar > 60) {
							//Yellow
							scolormap = 3;
						} else if(wrandvar > 30) {
							//Orange
							scolormap = 4;
						} else {
							//Red
							scolormap = 0;
						}
					} else {
						wrandvar = random() * 100;
						if(wrandvar > 70) {
							//Blue
							scolormap = 1;
						} else if(wrandvar > 40) {	
							//Yellow
							scolormap = 3;
						} else {
							//Red
							scolormap = 0;	
						}
					}
				} else {
						wrandvar = random() * 100;
						if(wrandvar > 50) {	
							//Yellow
							scolormap = 3;
						} else {
							//Red
							scolormap = 0;	
						}
				}
				
				return(scolormap);
}

entity SMI_spawn_spikeball(vector selected_origin, float ballsize)
{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			e.solid = SOLID_TRIGGER;

			if (ballsize == 1) {
				e.model = "models/sphere/spikeball.iqm";
				e.lodmodel1 = "models/sphere/spikeball_lod1.iqm";
				e.lodmodel2 = "models/sphere/spikeball_lod2.iqm";
				e.mins = '-32 -32 -64';
				e.maxs = '32 32 64';
				e.dmg = 130;
				if (spawnfoliagearound_season == 1) {
					//Summer etc
					e.skin = 2;
				} else if (spawnfoliagearound_season == 2) {
					//Fall
					e.skin = 3;
				} else if (spawnfoliagearound_season == 4) {
					//Winter
					e.skin = 0;
				} else if (spawnfoliagearound_season == 4) {
					//Strange
					e.skin = 1;	
				} else if (spawnfoliagearound_season == 5) {
					//Sunset Park
					e.skin = 5;
				} else {
					e.skin = 0;
				}
			} else if (ballsize == -1) {
				e.model = "models/sphere/smallsphere.iqm";
				e.lodmodel1 = "models/sphere/smallsphere_lod1.iqm";
				e.lodmodel2 = "models/sphere/smallsphere_lod2.iqm";
				e.mins = '-10 -10 -10';
				e.maxs = '10 10 10';
				e.solid = SOLID_SLIDEBOX;
			} else {
				e.model = "models/sphere/smallspikeball.iqm";
				e.lodmodel1 = "models/sphere/smallspikeball_lod1.iqm";
				e.lodmodel2 = "models/sphere/smallspikeball_lod2.iqm";
				e.mins = '-10 -10 -10';
				e.maxs = '10 10 10';
				e.dmg = 90;
				if (spawnfoliagearound_season == 1) {
					//Summer etc
					e.skin = 4;
				} else if (spawnfoliagearound_season == 2) {
					//Fall
					e.skin = 3;
				} else if (spawnfoliagearound_season == 4) {
					//Winter
					e.skin = 4;
				} else if (spawnfoliagearound_season == 4) {
					//Strange
					e.skin = 1;	
				} else if (spawnfoliagearound_season == 5) {
					//Sunset Park
					e.skin = 3;
				} else {
					e.skin = 3;
				}
			}
			
				
			self = e;
			setorigin(self, self.origin);
			
			spawnfunc_misc_gamemodel();
			
			if (ballsize >= 0) {
				self.message2 = "was spiked by";
				self.message = "was spiked";
			
				spawnfunc_trigger_hurt();
			}
								
			self = previousself;
			
			return(e);
}

void SMI_spawn_baloon(vector selected_origin, float selected_color)
{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			
			e.model = "models/sphere/baloon.iqm";
			e.lodmodel1 = "models/sphere/baloon_lod1.iqm";
			e.lodmodel2 = "models/sphere/baloon_lod2.iqm";
			e.lodmodel3 = "models/sphere/baloon_lod3.iqm";
			e.lodmodel4 = "models/sphere/baloon_lod4.iqm";
			//e.scale = random() + 0.4;
			//e.scale = 3;
			e.mins = '-24 -24 -32';
			e.maxs = '24 24 32';
			e.solid = SOLID_TRIGGER;
				
			e.colormap = selected_color;
						
			self = e;
			
			setorigin(self, self.origin);
			spawnfunc_misc_gamemodel();
			
			self.noise = "object/impact_wood_3.ogg";
			precache_sound (self.noise);
					
			self.think = func_null;
			self.alpha = 1;
			self.touch = SMI_baloon_touch;
			
			self = previousself;
}

void SMI_spawn_bumper(vector selected_origin, float selected_color)
{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			
			e.model = "models/sphere/bumpersphere.iqm";
			e.lodmodel1 = "models/sphere/bumpersphere_lod1.iqm";
			e.lodmodel2 = "models/sphere/bumpersphere_lod2.iqm";
			e.lodmodel3 = "models/sphere/bumpersphere_lod3.iqm";
			//e.scale = random() + 0.4;
			//e.scale = 3;
			e.mins = '-24 -24 -32';
			e.maxs = '24 24 32';
			e.solid = SOLID_TRIGGER;
				
			e.colormap = selected_color;
						
			self = e;
			
			setorigin(self, self.origin);
			spawnfunc_misc_gamemodel();
			
			self.noise = "misc/mouseclick.wav";
			precache_sound (self.noise);
					
			self.touch = SMI_bumper_touch;
			
			self = previousself;
}

void SMI_spawn_spikes(vector selected_origin, float onceling)
{
			entity previousself = self;
			entity e = spawn();
			entity sl;
			vector fixemins = '0 0 0';
			vector fixemaxs = '0 0 0';
			
			if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
				//The spikes_solid code is abit more complex
				//as we have to correct the mins and maxs at the end
				//after calling the spawnfunc for the trigger hurt
				//(it likes to set everything to the same number, except
				//seemingly when the spikes are on the ground with a
				//more "normal" mins/maxs)
				//and are dealing with 2 entities rather than just 1
				sl = spawn();
			}
			
			e.origin = selected_origin;
				if (onceling < 2)
				{
					e.angles_y = random() * 180;
				}
			e.fixangle = TRUE;
			
			e.model = "models/misc/spikes3x3.iqm";
			e.lodmodel1 = "models/misc/spikes3x3_lod1.iqm";
			e.lodmodel2 = "models/misc/spikes3x3_lod2.iqm";
			//e.scale = random() + 0.4;
			//e.scale = 3;
			if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
				//Here we set the spike (e) mins/maxs and the blocker (sl)
				//So you won't be damaged if you walk into it from the side
				//But will if you walk from above onto the top
				
				//20 thickness, 40 height
				e.mins = '-20 -20 0';
				e.maxs = '20 20 40';
				fixemins = e.mins; //This is the one case where this wasn't needed
				fixemaxs = e.maxs; //However we don't want the later code setting e.m**s to 0 0 0 :P
				
				//Below:
				//32 thickness so it blocks from sides. The height is more than 
				//default stepheight of 28, 38 height so doesn't block from top
				//since height of e is 40 (e is the spike and deals dmg)
				
				//28 thickness, 38 height, goes down an extra 8 so you don't get dmg from back of spike
				sl.mins = '-28 -28 -8'; //Back of spike is -8
				sl.maxs = '28 28 38';
				sl.solid = SOLID_NOT; //After the traces we will set to solid
				sl.origin = e.origin;
				setorigin(sl, sl.origin);
			} else {
				e.mins = '-20 -20 0';
				e.maxs = '20 20 20';
			}
			e.solid = SOLID_TRIGGER;
			e.dmg = 60;
				
			self = e;
			setorigin(self, self.origin);
			if (onceling == 1) {
				e.angles_z = 180;
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					e.mins = '-20 -20 -40';
					e.maxs = '20 20 0';
					fixemins = e.mins; //Need this because the hurt spawnfunc sets it to something else
					fixemaxs = e.maxs;
						//print(vtos(e.mins), "mnsA\n",vtos(e.maxs), "maxsA\n");
					sl.mins = '-28 -28 -38';
					sl.maxs = '28 28 8'; //Back of spike is 8
				} else {
					e.mins = '-20 -20 -20';
					e.maxs = '20 20 0';
				}
				
				//tracebox(self.origin + '0 0 2', self.mins, self.maxs, self.origin + '0 0 1000000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 2', self.origin + '0 0 1000000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					setorigin(sl, trace_endpos);
				}
			} else if (onceling == 2) {
				//X
				e.angles_x = -90;
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					e.mins = '-40 -20 -20';
					e.maxs = '0 20 20';
					fixemins = e.mins; //Need this because the hurt spawnfunc sets it to something else
					fixemaxs = e.maxs;
					sl.mins = '-38 -28 -28';
					sl.maxs = '8 28 28'; //Back of spike is 8
				} else {
					e.mins = '-16 -16 -16';
					e.maxs = '0 16 16';
				}
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin + '1000000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '2 0 0', self.origin + '1000000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					setorigin(sl, trace_endpos);
				}
			} else if (onceling == 3) {
				//-X
				e.angles_x = 90;
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					e.mins = '0 -20 -20';
					e.maxs = '40 20 20';
					fixemins = e.mins; //Need this because the hurt spawnfunc sets it to something else
					fixemaxs = e.maxs;
					sl.mins = '-8 -28 -28'; //back of spike "-8"
					sl.maxs = '38 28 28';
				} else {
					e.mins = '0 -16 -16';
					e.maxs = '16 16 16';
				}
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin - '1000000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '2 0 0', self.origin - '1000000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					setorigin(sl, trace_endpos);
				}
			} else if (onceling == 4) {
				//Y
				e.angles_z = 90;
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					e.mins = '-20 -40 -20';
					e.maxs = '20 0 20';
					fixemins = e.mins; //Need this because the hurt spawnfunc sets it to something else
					fixemaxs = e.maxs;
					sl.mins = '-28 -38 -28';
					sl.maxs = '28 8 28'; //Back of spike 8
				} else {
					e.mins = '-16 -16 -16';
					e.maxs = '16 0 16';
				}
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 1000000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        		       	traceline(self.origin + '0 2 0', self.origin + '0 1000000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					setorigin(sl, trace_endpos);
				}
			} else if (onceling == 5) {
				//-Y
				e.angles_z = -90;
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					e.mins = '-20 0 -20';
					e.maxs = '20 40 20';
					fixemins = e.mins; //Need this because the hurt spawnfunc sets it to something else
					fixemaxs = e.maxs;
					sl.mins = '-28 -8 -28'; //Back of spike -8
					sl.maxs = '28 38 28';
				} else {
					e.mins = '-16 0 -16';
					e.maxs = '16 16 16';
				}
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 1000000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '0 2 0', self.origin - '0 1000000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					setorigin(sl, trace_endpos);
				}
			} else {
       				//tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 1000000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 100', self.origin - '0 0 1000000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			setorigin(self, trace_endpos);
				
				if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					setorigin(sl, trace_endpos);
				}
			}
			
			if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
				sl.solid = SOLID_BBOX;		
			}
			
			if (autocvar_g_spawnmiscitemsaround_spikes_angles2norm) {
				if (autocvar_g_spawnmiscitemsaround_spikes_angles2norm > random()) {
				
					print (vtos(trace_plane_normal), "\n");
					
					if (trace_plane_normal_x || trace_plane_normal_y) 
					{
						//This code needs work, this was done through trial and error
						makevectors(e.angles);
						if (!onceling)
							e.angles = vectoangles(trace_plane_normal * 20);
						else if (onceling == 1) {
							//e.colormod = '255 0 0'; //For testing, they'll show up red
							e.angles_x = (-90*trace_plane_normal_x);
							e.angles_y = (-90*trace_plane_normal_y);
							//AngleZ is 180 allready, see above code.
						}
					}
				}
			}
			
			spawnfunc_misc_gamemodel();
			
			self.message2 = "was impaled by";
			self.message = "was impaled";
			
			spawnfunc_trigger_hurt();
			
			//self.noise = "misc/spikes.wav";
			//precache_sound (self.noise);
					
			//self.touch = SMI_spikes_touch;
			
			if (autocvar_g_spawnmiscitemsaround_spikes_solid) {
					//print(vtos(e.mins), "mns\n",vtos(e.maxs), "maxs\n");
				e.mins = fixemins;
				e.maxs = fixemaxs;
				setsize(e, e.mins, e.maxs);
				setsize(sl, sl.mins, sl.maxs);
					//print(vtos(e.mins), "mns2\n",vtos(e.maxs), "maxs2\n");
			}
								
			self = previousself;
}

void SMI_spawn_tnkpyr(vector selected_origin, float onceling, float randomangle, float allowliquid, float vfly)
{
			if (
			(selected_origin_x > world.maxs_x)
			|| (selected_origin_y > world.maxs_y)
			|| (selected_origin_z > world.maxs_z)
			|| (selected_origin_x < world.mins_x)
			|| (selected_origin_y < world.mins_y)
			|| (selected_origin_z < world.mins_z)
			) {
				//print("tnkpyr: selected origin out of world bounds, returning\n");
				return;
			}
			
			//Here we find out if we can build in that spot
			local float myteam;
			myteam = 0;
			myteam = autocvar_g_spawnmiscitemsaround_tnkpyr_spawnnearteam;
			
			if not(SMI_AbdBld_BuildNearBase(myteam, selected_origin))
			{
					//print("tnkpyr: selected Origin too close to wrong teambase, returning\n");
					return;
			}
			
			
			
			entity previousself = self;
			entity e;
			
			e = spawn();
			
			e.origin = selected_origin;
				if (onceling < 2)
				if (randomangle)
				{
					e.angles_y = random() * 180;
				}
			e.fixangle = TRUE;
			
			e.classname = "building"; //So crossbow bolts behave correctly when striking
			e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
			e.model = "models/misc/tanktraps_pyramid.bsp";
			e.mins = '-20 -20 0';
			e.maxs = '20 20 20';
			e.solid = SOLID_BSP;
				
			self = e;
			setorigin(self, self.origin);
			if not(vfly) {
			if (onceling == 1) {
				e.angles_z = 180;
				e.mins = '-20 -20 -20';
				e.maxs = '20 20 0';
				
				//tracebox(self.origin + '0 0 2', self.mins, self.maxs, self.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 2', self.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 2) {
				//X
				e.angles_x = -90;
				e.mins = '-16 -16 -16';
				e.maxs = '0 16 16';
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '2 0 0', self.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 3) {
				//-X
				e.angles_x = 90;
				e.mins = '0 -16 -16';
				e.maxs = '16 16 16';
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '2 0 0', self.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 4) {
				//Y
				e.angles_z = 90;
				e.mins = '-16 -16 -16';
				e.maxs = '16 0 16';
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        		       	traceline(self.origin + '0 2 0', self.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 5) {
				//-Y
				e.angles_z = -90;
				e.mins = '-16 0 -16';
				e.maxs = '16 16 16';
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '0 2 0', self.origin - '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else {
       				//tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 100', self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			setorigin(self, trace_endpos);
			}
			}
			
			if(allowliquid < 1) {
				if(pointcontents(self.origin) == CONTENT_WATER)
				{
					remove(self);
					self = previousself;
					return;
				}
				if(allowliquid < 0) {
					//We don't even want to be above water
					traceline(self.origin + '0 0 2', self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
					if(pointcontents(trace_endpos) == CONTENT_WATER)
					{
						remove(self);
						self = previousself;
						return;	
					}
				}
			}
			
			if (autocvar_g_spawnmiscitemsaround_tnkpyr_angles2norm) {
				if (autocvar_g_spawnmiscitemsaround_tnkpyr_angles2norm > random()) {
					//if (!onceling && !vfly) {
					//	tracebox(e.origin + '0 0 512', '-128 -128 0', '128 128 0',  e.origin - '0 0 1024', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
					//}
					
					// now set angles_x so that the bsp model points parallel to the surface
					// (Notice the negation on the third statement below)
					// (This is likely due to Quake's different handling of brush(bsp) vs model models
					// thanks Divverent, this code is from the bugrigs stuff in cl_physics.qc mostly
					e.angles = vectoangles(
						'1 0 0' * v_forward_x * trace_plane_normal_z
						+
						'0 1 0' * v_forward_y * trace_plane_normal_z
						+
						'0 0 1' * -(v_forward_x * trace_plane_normal_x + v_forward_y * trace_plane_normal_y)
						);
				}
			}
			
			//gamemodel doesn't work for this, just clientmodel
			if (autocvar_g_spawnmiscitemsaround_tnkpyr_noforcedlight) {
				//If you do prefer the lightmapped effect
				spawnfunc_misc_clientmodel();
			} else {
                        	spawnfunc_misc_clientmodel_dlight();
			}
                        self.solid = SOLID_BSP;
                        self.movetype = MOVETYPE_PUSH;
								
			self = previousself;
}

float SMI_abdbld_eval_damage(float mydamage, float deathtype, entity mybldg) 
{
	if(DEATH_ISWEAPON(deathtype, WEP_NUKE_LAYER)) {
		return mydamage;
	} else if (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage) {
		if (deathtype == DEATH_BATTERINGRAM) {
			if (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 1)
			{
				if (mybldg.abdbld_damagescale_bulldozer > 0)
				{
					mydamage = mydamage * mybldg.abdbld_damagescale_bulldozer;
					if (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale_enable) {
						mydamage = mydamage * autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale;
					}
					return mydamage;
				} else {
					return 0;
				}
			} else {
				return 0;
			}
		} else if (deathtype == DEATH_FIRE
		|| (DEATH_ISWEAPON(deathtype, WEP_FIREBALL))) {
			//Note: not all burning things will ignite these wooden sc_tile buildings
			//WEP_FIREBALL is used to denote burn dmg by many things (Oil Explosions etc)
			//Fireballs themselves do not, in the code, ignite these builldings
			//(too low lvl, high impulse, doesn't stick around, to ignite modern bld with fire suppresent clad materials)
			//(They may ignite other things such as trees, lesser buildings, etc)
			//What ignites these building are:
			//Intensely burning foliage nearby (and other spreading fire)
			//Oil Tank (etc) Explosions
			//Magical Explosion spell (a fire spell)
			//Magical LightningStrike spell at a certain spell lvl or higher (sometimes)
			//Magical Firebeam spell if at a certain spell lvl or higher
			//Magical Scepter of Flame spell
			if (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 3)
			{
				if (mybldg.abdbldcanburn)
				{
					mydamage = mydamage * autocvar_g_spawnmiscitemsaround_abdbld_damagescale_fire;
					if (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale_enable) {
						mydamage = mydamage * autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale;
					}
					return mydamage;
				} else {
					return 0;
				}
			} else {
				return 0;
			}
		} else if (multitool_evaldamage_isexplosive(deathtype)) {
			//Exposives that dmg a multitool building
			if (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 2)
			{
				if (mybldg.abdbld_damagescale_normalexplosive > 0)
				{
					mydamage = mydamage * mybldg.abdbld_damagescale_normalexplosive;
					if (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale_enable) {
						mydamage = mydamage * autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage_scale;
					}
					return mydamage;
				} else {
					return 0;
				}
			} else {
				return 0;
			}
		} else {
			return 0;
		}
	} else {
		return 0;
	}
}


//This is used when a nuclear blast occurs,
//otherwise we hit the loopcounter jump limit
//when sending all the model info at once
void SMI_abdbld_damage_spawnmodelovertime_think (void)
{	
				//print(etos(self),"think\n");
				self.nextthink = 0;
				spawnfunc_misc_clientmodel();
    				self.think              = func_null;
                      		self.solid = SOLID_BSP;
                        	self.movetype = MOVETYPE_PUSH;
}

void SMI_abdbld_damage(entity inflictor, entity attacker, float damage, float deathtype, vector hitloc, vector force)
{
	local float evaldamage;
	local float isnuclearexplosion;
	if (DEATH_ISWEAPON(deathtype, WEP_NUKE_LAYER)) {
		isnuclearexplosion = 1;
	} else {
		isnuclearexplosion = 0;
	}
	evaldamage = 0;
	evaldamage = SMI_abdbld_eval_damage(damage, deathtype, self);
	
	if(evaldamage)
	{
		damage = evaldamage;
			//print(ftos(damage),"DMG\n");
			//print(ftos(self.vehicle_health),"PrevHealth\n");
		self.vehicle_health -= damage;
			
		if(self.pushltime < time)  // prevent "snorring" sound lots of hits
		{
				spamsound (self, CH_PAIN, "object/impact_stone_3.ogg", VOL_BASE, ATTN_NORM);
				self.pushltime = time + 0.1;
		}
		
		if (self.count == 2)
		{
			//Glass building
			if (self.vehicle_health < 75000 && self.cnt == 0)
			{
				self.abdbldcanburn	= 0;
				self.event_damage       = func_null;
   				self.takedamage         = DAMAGE_NO;
    				self.touch              = func_null;
    				self.think              = func_null;
    				self.deadflag           = DEAD_DEAD;
    				self.solid      = SOLID_NOT;
		
				if(sound_allowed(MSG_BROADCAST, attacker))
            			spamsound (self, CH_PAIN, "object/impact_stone_3.ogg", VOL_BASE, ATTN_NORM);
			
				local float nrandvar;
				local entity newruin;
				entity oldself;
			
				newruin = spawn();
				oldself = self;
				self = newruin;
				self.origin = oldself.origin;
				self.angles = oldself.angles;
				self.count = oldself.count;
			
				if (isnuclearexplosion) {
					//print("Nuke\n");
					nrandvar = random();
					
					if (nrandvar > 0.75)
						self.angles_y = self.angles_y + 90;
					else if (nrandvar > 0.45)
						self.angles_y = self.angles_y - 90;
				}
			
				self.fixangle = TRUE;
			
				self.classname = "building"; //So crossbow bolts behave correctly when striking
				self.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
				//print("ruin0\n");
				self.model = "models/misc/abandoned_gtower1_ruin0.bsp";
				self.cnt = 1;
				
				//Set extended damagescale;
				self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
				self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
				
				self.mins = '-20 -20 0';
				self.maxs = '20 20 20';
				self.solid = SOLID_BSP;
				
				spawnfunc_misc_clientmodel();
                        	self.solid = SOLID_BSP;
                        	self.movetype = MOVETYPE_PUSH;
				
				self.event_damage       = SMI_abdbld_damage;
				self.isabdbld = 1;
    				self.takedamage         = DAMAGE_YES;
    				//self.deadflag           = DEAD_NO;
    				self.think              = func_null;
    				self.vehicle_health = oldself.vehicle_health;
				self = oldself;
		
				remove_safely(self);
				self = newruin;
			}
		}
	}
	
	if(self.vehicle_health <= 0)
	{
		//print(ftos(self.vehicle_health),"\n");
		//print("no health\n");
		self.abdbldcanburn	= 0;
		self.event_damage       = func_null;
   		self.takedamage         = DAMAGE_NO;
    		self.touch              = func_null;
    		self.think              = func_null;
    		self.deadflag           = DEAD_DEAD;
    		self.solid      = SOLID_NOT;
		remove_deletesubordinatewithme_ents(self); //Used for items added to sc_tile buildings etc
		
		if(sound_allowed(MSG_BROADCAST, attacker))
            		spamsound (self, CH_PAIN, "object/impact_stone_3.ogg", VOL_BASE, ATTN_NORM);
		
		//nukesmoke_spawn(self.origin, 2400, 0, 2048);
		if (self.vehicle_health > -190000)
		{	
			local float nrandvar;
			local entity newruin;
			entity oldself;
			
			newruin = spawn();
			oldself = self;
			self = newruin;
			self.origin = oldself.origin;
			self.angles = oldself.angles;
			self.count = oldself.count;
			
			if (isnuclearexplosion || (self.count > 2))
			{
				//print("Nuke or nondescript rubble\n");
				
				nrandvar = random();
				
				//GTower and Default Abandoned have specific ruins, so unless nuke, keep angles
				//Others have non specific ruins so can change angles for variety
				//Nukes also mess everything up too :) (For variety, the original reason this code was in: for the nuke)
				if (nrandvar > 0.75)
					self.angles_y = self.angles_y + 90;
				else if (nrandvar > 0.45)
					self.angles_y = self.angles_y - 90;
			}
			
			self.fixangle = TRUE;
			
			self.classname = "building"; //So crossbow bolts behave correctly when striking
			self.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
			if (self.count == 2)
			{
				//print("Glass_Ruin\n");
				//Glass building
				//print(ftos(oldself.cnt), "-oldself.cnt\n");
				if (oldself.cnt >= 3) {
					//Sit tight
				} else if (oldself.vehicle_health > -10000 && oldself.cnt < 1)
				{
					//Glass blown out
					//print("Glass blown out - ruin0\n");
					self.model = "models/misc/abandoned_gtower1_ruin0.bsp";
					self.cnt = 1;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
				
					self.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass; //Want to block so people can build on automatically
				}
				else if (oldself.vehicle_health > -50000 && oldself.cnt < 2)
				{
					//Structual Damage
					//print("Structual Damage - ruin1\n");
					self.model = "models/misc/abandoned_gtower1_ruin1.bsp";
					self.cnt = 2;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
					
					self.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass_ruin; //Want to block so people can build on automatically
				}
				else
				{
					//Destroyed
					//print("Destroyed - ruin2\n");
					self.model = "models/misc/abandoned_gtower1_ruin2.bsp";
					self.cnt = 3;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
					
					self.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass_destroyed; //Want to block so people can build on automatically
				}
			} else if (self.count == 5)
			{
				//print("SC_Ruin\n");
				if (!self.cnt) {
					if not(isnuclearexplosion) {
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '0 0 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '0 896 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '0 -896 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '896 0 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '-896 0 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '896 896 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '896 -896 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '896 -896 2', '0 0 0', 2);
						pointparticles(particleeffectnum("smoke_big"), oldself.origin + '-896 -896 2', '0 0 0', 2);
						
						multitool_buildingfall(oldself); //Creates a falling building model
					}
				}
				
				if (oldself.vehicle_health > -20000 && self.cnt < 2)
				{
					//print("ruin1\n");
					self.model = "models/misc/abandoned_sc_ruin1.bsp";
					self.cnt = 1;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
				
					self.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc_destroyed; //Want to block so people can build on automatically
				}
				else
				{
					//print("ruin2\n");
					self.model = "models/misc/abandoned_sc_ruin2.bsp";
					self.cnt = 2;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
					
					self.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc_destroyed; //Want to block so people can build on automatically
				}
			} else if (self.count == 10)
			{
				//print("SC_Base_Ruin\n");
				if (oldself.vehicle_health > -50000 && self.cnt < 2)
				{
					//print("ruin1\n");
					//self.model = "null";
					//Do nothing
					self.cnt = 1;
				}
				else
				{
					//print("ruin2\n");
					self.model = "null";
					self.cnt = 2;
				}
			} else if (self.count == 11)
			{
				//print("SC_Retaining Wall Ruin\n");
				if (oldself.vehicle_health > -50000 && self.cnt < 2)
				{
					//print("ruin1\n");
					//self.model = "null";
					//Do nothing
					self.cnt = 1;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
				}
				else
				{
					//print("ruin2\n");
					self.model = "null";
					self.cnt = 2;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
				}
			} else if (self.count == 11)
			{
				//print("Foliage, etc\n");
				if (oldself.vehicle_health > -1000 && self.cnt < 2)
				{
					//print("ruin1\n");
					//self.model = "null";
					//Do nothing
					self.cnt = 1;
				}
				else
				{
					//print("ruin2\n");
					self.model = "null";
					self.cnt = 2;
				}
			} else {
				//print("Default Ruin\n");
				//print(ftos(oldself.cnt), "-oldself.cnt\n");
				if (oldself.cnt >= 2) {
					//Sit tight
				} else if (oldself.vehicle_health > -50000 && oldself.cnt < 1)
				{
					//print("ruin1\n");
					self.model = "models/misc/abandoned_tower1_ruin1.bsp";
					self.cnt = 1;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
				
					self.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_concrete_ruin; //Want to block so people can build on automatically
				}
				else
				{
					//print("ruin2\n");
					self.model = "models/misc/abandoned_tower1_ruin2.bsp";
					self.cnt = 2;
					//Set extended damagescale;
					self.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
					self.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
				
					self.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_concrete_destroyed; //Want to block so people can build on automatically
				}
			}
				
			self.mins = '-20 -20 0';
			self.maxs = '20 20 20';
			self.solid = SOLID_BSP;
			
			if (isnuclearexplosion) {
				self.think = SMI_abdbld_damage_spawnmodelovertime_think;
				self.nextthink = time;
			} else {
				spawnfunc_misc_clientmodel();
    				self.think              = func_null;
                      		self.solid = SOLID_BSP;
                        	self.movetype = MOVETYPE_PUSH;
			}
			
			self.event_damage       = SMI_abdbld_damage;
			self.isabdbld = 1;
    			self.takedamage         = DAMAGE_YES;
    			//self.deadflag           = DEAD_NO;
    			self.vehicle_health = 80000;
			self = oldself;
		} else {
			//print("noruin - nothing\n");
		}
		
		remove_safely(self);
	}
}

float autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_church;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_field;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_house;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_forge1;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_forge2;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_forge3;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_belltower;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_crsdrstrnghld;

float autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_apcpad;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_cgarage;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_obvstower;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_hmmfrg;

//For buildings only spawned in milbases, not in total random areas
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_fencetwr;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr2;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr3;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_sentryraised;

float autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_police1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallcondos1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall6;

float autocvar_g_spawnmiscitemsaround_abdbld_sc_airportonly_runway_pad;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube2;

float autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_home1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec2;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec3;

float autocvar_g_spawnmiscitemsaround_abdbld_sc_residentallconly_homej1;

float autocvar_g_spawnmiscitemsaround_abdbld_sc_lightcommercialonly_shrine1;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_lightcommercialonly_dojo1;

float autocvar_g_spawnmiscitemsaround_abdbld_sc_typeairport;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typemilitary;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typeruralfarm;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typelightindustrial;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typeindustrial;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typecommercial;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typemediumcommercial;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typelightcommercial;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentialdense;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentiallc;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentialmc;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentialuc;

float autocvar_g_spawnmiscitemsaround_abdbld_keeptypesearchradius; //How far to seardh
float autocvar_g_spawnmiscitemsaround_abdbld_keeptyperate; //How often to keep type.
float autocvar_g_spawnmiscitemsaround_abdbld_keeptypeblendrate; //How often to blend with similar
float autocvar_g_spawnmiscitemsaround_abdbld_keeptypeignorerate; //How often to skip over a find

float autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc; //For selecting/changing scbasecup type to something nicer for lightcommercial etc
float autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_mc;

float autocvar_g_spawnmiscitemsaround_abdbld_useretainingwall_sc;

float autocvar_g_spawnmiscitemsaround_abdbld_baseheight_sc;
float autocvar_g_spawnmiscitemsaround_abdbld_baseheightrand_sc;
float autocvar_g_spawnmiscitemsaround_abdbld_baseheightrandmax_sc;

float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;

float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc;
float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc_radius;

float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense;
float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense_radius;

float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry;
float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry_radius;

float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry;
float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry_radius;

float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom;
float autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom_radius;

float autocvar_g_spawnmiscitemsaround_abdbld_concrete_spawnnearteam; //0, 1, 2, 3, 4 etc (/what team side of map to spawn by)
float autocvar_g_spawnmiscitemsaround_abdbld_glass_spawnnearteam;
float autocvar_g_spawnmiscitemsaround_abdbld_misc_spawnnearteam;
float autocvar_g_spawnmiscitemsaround_abdbld_fisc_spawnnearteam;
float autocvar_g_spawnmiscitemsaround_abdbld_sc_spawnnearteam;

float autocvar_g_spawnmiscitemsaround_abdbldmunitions; //Spawn Munitions in mil ammo bunkers? (nades, landmines, etc)
float autocvar_g_spawnmiscitemsaround_abdbldmunitions_rate;
float autocvar_g_spawnmiscitemsaround_abdbldmunitions_maxnukes;
float autocvar_g_spawnmiscitemsaround_abdbldmunitions_nukes_rate; //If allowed how often?

float g_spawnmiscitemsaround_abdbld_currentnukes; //Keep Track of how many
.float smi_abdbld_spawnitems; //Spawn some items? What set?
//
void SMI_SetOriginVsBldAngles (entity myitem, vector myoffset, entity mybuilding)
{
	local vector myvec;
	myvec = '0 0 0';
	myvec_x = mybuilding.angles_x*-1;
	myvec_y = mybuilding.angles_y;
	myvec_z = mybuilding.angles_z;
	makevectors(myvec);
	setorigin(myitem, mybuilding.origin + v_forward * myoffset_x + v_right * myoffset_y + v_up * myoffset_z);
}
	
void SMI_AbdBld_SpawnItems(entity mybld) {
	if not (mybld.smi_abdbld_spawnitems) {
		return;
	}
	
	local entity myoldself;
	local entity mun1;
	local entity mun2;
	local entity mun3;
	local entity mun4;
	
	
	local entity mun5;
	local entity mun6;
	local entity mun7;
	local entity mun8;
	myoldself = self;
	
	if (mybld.smi_abdbld_spawnitems == 101 || mybld.smi_abdbld_spawnitems == 102)
	{
		//Ladder ents for apartments
		mun1 = spawn();
		mun2 = spawn();
		
		//ladder number one
		self = mun1;
		mybld.deletesubordinatewithme = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		self.mins = '-32 -32 0';
		self.maxs = '32 32 160';
		if (mybld.smi_abdbld_spawnitems == 101) {
			//smallapartment1
			SMI_SetOriginVsBldAngles(self, '528 -768 384', mybld);
		} else {
			//smallapartment2: taller small apartments, more floors
			SMI_SetOriginVsBldAngles(self, '528 -768 704', mybld);
		}
		spawnfunc_func_ladder();
		
		//ladder number two
		self = mun2;
		mybld.deletesubordinatewithme2 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		self.mins = '-32 -32 0';
		self.maxs = '32 32 160';
		if (mybld.smi_abdbld_spawnitems == 101) {
			//smallapartment1
			SMI_SetOriginVsBldAngles(self, '-512 768 384', mybld);
		} else {
			//smallapartment2: taller small apartments, more floors
			SMI_SetOriginVsBldAngles(self, '-512 768 704', mybld);
		}
		spawnfunc_func_ladder();
	} else if (mybld.smi_abdbld_spawnitems == 201) {
		//Ladder ent for small industrial 1
		mun1 = spawn();
		
		//ladder number one
		self = mun1;
		mybld.deletesubordinatewithme = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		self.mins = '-32 -32 0';
		self.maxs = '32 32 96';
		
		SMI_SetOriginVsBldAngles(self, '-600 -128 528', mybld); //X and Y inverted from netradiant placement
		
		spawnfunc_func_ladder();
	} else if (mybld.smi_abdbld_spawnitems == 301) {
		//Ladder ent for chemical storage 1
		mun1 = spawn();
		
			mun1 = spawn();
			mun1.solid = SOLID_TRIGGER;
			mun1.mins = '-16 -16 0';
			mun1.maxs = '16 16 1472';
			
		//ladder number one
		self = mun1;
		mybld.deletesubordinatewithme = self; //So will delete if bld destroyed
		SMI_SetOriginVsBldAngles(self, '-192 272 128', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
	} else if (mybld.smi_abdbld_spawnitems == 302) {
		//Ladder ent for chemical storage 2
		mun1 = spawn();
		mun2 = spawn();
		
			mun1 = spawn();
			mun2 = spawn();
			mun1.solid = mun2.solid = SOLID_TRIGGER;
			mun1.mins = mun2.mins = '-16 -16 0';
			mun1.maxs = '16 16 1216';
			mun2.maxs = '16 16 976';
			
		//ladder number one
		self = mun1;
		mybld.deletesubordinatewithme = self; //So will delete if bld destroyed
		SMI_SetOriginVsBldAngles(self, '0 80 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		//Outside ladder
		self = mun2;
		mybld.deletesubordinatewithme2 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '984 0 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
	} else if (mybld.smi_abdbld_spawnitems == 303) {
		//Ladder ent for chemical storage 3
		mun1 = spawn();
		mun2 = spawn();
		mun3 = spawn();
		mun4 = spawn();
		mun5 = spawn();
		mun6 = spawn();
		mun7 = spawn();
		mun8 = spawn();
		
			mun1.solid = mun2.solid = mun3.solid = mun4.solid = SOLID_TRIGGER;
			mun1.mins = mun2.mins = mun3.mins = mun4.mins = '-16 -16 0';
			mun1.maxs = mun2.maxs = mun3.maxs = mun4.maxs = '16 16 1488';
			
			mun5.solid = mun6.solid = mun7.solid = mun8.solid = SOLID_TRIGGER;
			mun5.mins = mun6.mins = mun7.mins = mun8.mins = '-16 -16 0';
			mun5.maxs = mun6.maxs = mun7.maxs = mun8.maxs = '16 16 1522';
		
		//ladder number one
		self = mun1;
		mybld.deletesubordinatewithme = self; //So will delete if bld destroyed
		SMI_SetOriginVsBldAngles(self, '36 512 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		self = mun2;
		mybld.deletesubordinatewithme2 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '-512 36 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		self = mun3;
		mybld.deletesubordinatewithme3 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '-36 -512 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		self = mun4;
		mybld.deletesubordinatewithme4 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '512 -36 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		//Inside tanks
		self = mun5;
		mybld.deletesubordinatewithme5 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '512 432 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		self = mun6;
		mybld.deletesubordinatewithme6 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '-436 512 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		self = mun7;
		mybld.deletesubordinatewithme7 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '-512 -432 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
		
		self = mun8;
		mybld.deletesubordinatewithme8 = self; //So will delete if bld destroyed
		self.solid = SOLID_TRIGGER;
		SMI_SetOriginVsBldAngles(self, '432 -512 0', mybld); //_ ___ Y inverted from netradiant placement
		spawnfunc_func_ladder();
			
	} else if (autocvar_g_spawnmiscitemsaround_abdbldmunitions) {
		local float myselection;
		local float myranditems;
		myselection = mybld.smi_abdbld_spawnitems;
		
		if (autocvar_g_spawnmiscitemsaround_abdbldmunitions_rate >= 1) {
			//We're good!
		} else if (random() < autocvar_g_spawnmiscitemsaround_abdbldmunitions_rate) {
			//We're good!
		} else {
			myselection = 0; //Spawn Nothing	
		}
		
		if (myselection == 2) {
			if (!autocvar_g_spawnmiscitemsaround_abdbldmunitions_maxnukes
			|| (g_spawnmiscitemsaround_abdbld_currentnukes >= autocvar_g_spawnmiscitemsaround_abdbldmunitions_maxnukes)
			) {
				myselection = 3; //No nuke
			}
		}
		
		if (myselection == 2) {
			if (autocvar_g_spawnmiscitemsaround_abdbldmunitions_nukes_rate >= 1) {
				//We're good!
			} else if (random() < autocvar_g_spawnmiscitemsaround_abdbldmunitions_nukes_rate) {
				//We're good!
			} else {
				myselection = 3; //No nuke	
			}
		}
		
		if (myselection == 1 || myselection == 3)
		{
			if (!g_nades) {
				myranditems = 100;
			} else {
				myranditems = random();
			
				if (myranditems > 0.75) {
					myranditems = 1;
				} else if (myranditems > 0.5) {
					myranditems = 2;
				} else if (myranditems > 0.25) {
					myranditems = 3;
				} else {
					myranditems = 4;
				}
			}	
				
			mun1 = spawn();
			mun2 = spawn();
			mun3 = spawn();
			mun4 = spawn();
			
			self = mun1;
			mybld.deletesubordinatewithme = self; //So will delete if bld destroyed
			
			if (myselection == 3)
				SMI_SetOriginVsBldAngles(self, '64 64 16', mybld);
			else
				SMI_SetOriginVsBldAngles(self, '-576 -64 16', mybld);
			
			//self.spawnflags = 1; //Floating (as we're not WORLD)
			if (myranditems == 1) {
				spawnfunc_item_atmines();
			} else if (myranditems == 2) {
				spawnfunc_item_landmines();
			} else if (myranditems == 3) {
				spawnfunc_item_fragnades();
			} else if (myranditems == 4) {
				spawnfunc_item_grenades();
			} else {
				spawnfunc_item_rockets();
			}
			
			self = mun2;
			mybld.deletesubordinatewithme2 = self; //So will delete if bld destroyed
			
			if (myselection == 3)
				SMI_SetOriginVsBldAngles(self, '64 -64 16', mybld);
			else
				SMI_SetOriginVsBldAngles(self, '-576 64 16', mybld);
			
			//self.spawnflags = 1; //Floating
			if (myranditems == 1) {
				spawnfunc_item_atmines();
			} else if (myranditems == 2) {
				spawnfunc_item_landmines();
			} else if (myranditems == 3) {
				spawnfunc_item_fragnades();
			} else if (myranditems == 4) {
				spawnfunc_item_grenades();
			} else {
				spawnfunc_item_rockets();
			}
			
			self = mun3;
			mybld.deletesubordinatewithme3 = self; //So will delete if bld destroyed
			
			if (myselection == 3)
				SMI_SetOriginVsBldAngles(self, '-64 64 16', mybld);
			else
				SMI_SetOriginVsBldAngles(self, '-448 64 16', mybld);
			
			//self.spawnflags = 1; //Floating
			if (myranditems == 1) {
				spawnfunc_item_atmines();
			} else if (myranditems == 2) {
				spawnfunc_item_landmines();
			} else if (myranditems == 3) {
				spawnfunc_item_fragnades();
			} else if (myranditems == 4) {
				spawnfunc_item_grenades();
			} else {
				spawnfunc_item_rockets();
			}
			
			self = mun4;
			mybld.deletesubordinatewithme4 = self; //So will delete if bld destroyed
			
			if (myselection == 3)
				SMI_SetOriginVsBldAngles(self, '-64 -64 16', mybld);
			else
				SMI_SetOriginVsBldAngles(self, '-448 -64 16', mybld);
			
			//self.spawnflags = 1; //Floating
			if (myranditems == 1) {
				spawnfunc_item_atmines();
			} else if (myranditems == 2) {
				spawnfunc_item_landmines();
			} else if (myranditems == 3) {
				spawnfunc_item_fragnades();
			} else if (myranditems == 4) {
				spawnfunc_item_grenades();
			} else {
				spawnfunc_item_rockets();
			}
		} else if (myselection == 2) {
				mun1 = spawn();
				self = mun1;
				self.origin = mybld.origin + '0 0 16';
				mybld.deletesubordinatewithme = self; //So will delete if bld destroyed
				//self.spawnflags = 1; //Floating
				setorigin(self, self.origin);
				spawnfunc_weapon_nukelayer();
				self.respawntime = -1; //No respawn
				
				g_spawnmiscitemsaround_abdbld_currentnukes = g_spawnmiscitemsaround_abdbld_currentnukes + 1;
		} else {
			//Zero
		}
	}
	self = myoldself;
}

float SMI_AbdBld_SelectSC_Model_AIRPORT (entity e);
float SMI_AbdBld_SelectSC_Model_MILITARY (entity e);
float SMI_AbdBld_SelectSC_Model_RURALFARM (entity e);
float SMI_AbdBld_SelectSC_Model_LIGHTINDUSTRIAL (entity e);
float SMI_AbdBld_SelectSC_Model_INDUSTRIAL (entity e);
float SMI_AbdBld_SelectSC_Model_COMMERCIAL (entity e);
float SMI_AbdBld_SelectSC_Model_MEDIUMCOMMERCIAL (entity e);
float SMI_AbdBld_SelectSC_Model_LIGHTCOMMERCIAL (entity e);
float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_DENSE (entity e);
float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_LC (entity e);
float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_MC (entity e);
float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_UC (entity e);
//Specific
float SMI_AbdBld_SelectSC_Model_ROAD_NARROWROAD_STRAIGHT_QUADRICE (entity e);
float SMI_AbdBld_SelectSC_Model_ROAD_NARROWROAD_CROSS (entity e);

float SMI_AbdBld_BuildNearBase(float myteam, vector myorigin)
{
	local float t1l, t2l;
	
	if (!myteam) {
		return TRUE;
	}
	
	if not(g_spawn_around_foundbases)
	{
		if (teamplay || autocvar_g_spawn_around_findbases_nonteamplay)
		{
			Mg_Find_Bases();
			
			g_spawn_around_foundbases = 1;
		}
	}
	
	if ( (teamplay || autocvar_g_spawn_around_findbases_nonteamplay)
	//&& (g_ctf || g_onslaught || g_assault)
	//&& !(g_domination || g_freezetag || g_tdm || g_keyhunt)
	&& (g_spawnmountedgunsaround_found1
	+ g_spawnmountedgunsaround_found2
	+ g_spawnmountedgunsaround_found3
	+ g_spawnmountedgunsaround_found4 > 1)
	){
		
		if (myteam == 1 && g_spawnmountedgunsaround_found1) {
			t1l = vlen(myorigin - g_spawnmountedgunsaround_base1);
			
			if (g_spawnmountedgunsaround_found2)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base2);
			else if (g_spawnmountedgunsaround_found3)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base3);
			else
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base4);
				
		} else if (myteam == 2 && g_spawnmountedgunsaround_found2) {
			t1l = vlen(myorigin - g_spawnmountedgunsaround_base2);
			
			if (g_spawnmountedgunsaround_found1)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base1);
			else if (g_spawnmountedgunsaround_found3)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base3);
			else
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base4);
				
		} else if (myteam == 3 && g_spawnmountedgunsaround_found3) {
			t1l = vlen(myorigin - g_spawnmountedgunsaround_base3);
			
			if (g_spawnmountedgunsaround_found4)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base4);
			else if (g_spawnmountedgunsaround_found2)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base2);
			else
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base1);
		} else if (myteam == 4 && g_spawnmountedgunsaround_found4) {
			t1l = vlen(myorigin - g_spawnmountedgunsaround_base4);
			
			if (g_spawnmountedgunsaround_found3)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base3);
			else if (g_spawnmountedgunsaround_found2)
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base2);
			else
				t2l = vlen(myorigin - g_spawnmountedgunsaround_base1);
		} else {
			return TRUE;
		}
		
		//Shortest wins
		if (t1l < t2l)
			return TRUE;
		else
			return FALSE;
	} else {
		return TRUE;
	}
}


float SMI_AbdBld_ChooseBaseTerrainType()
{
	float myabdbldseason;
	if (!autocvar_g_spawnmiscitemsaround_abdbld_suggested_season_use) {
		//This is most likely so we'll hit it first
		myabdbldseason = spawnfoliagearound_season;
	} else if (autocvar_g_spawnmiscitemsaround_abdbld_suggested_season_use >= 3) {
		//Force use of this always
		myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
	} else if (autocvar_g_spawnmiscitemsaround_abdbld_suggested_season_use >= 2) {
		//Only override if the mutator in the menu is enabled 
		if (cvar("g_spawnfoliagearound")) {
			myabdbldseason = autocvar_g_spawnfoliagearound_season;
		} else {
			myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
		}
	} else if (autocvar_g_spawnmiscitemsaround_abdbld_suggested_season_use >= 1.5) {
		//Change if the mutator season in the menu is set to anything other than 0
		//(note: 1 is the default tho)
		if (autocvar_g_spawnfoliagearound_season) {
			myabdbldseason = autocvar_g_spawnfoliagearound_season;
		} else {
			myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
		}
	} else if (autocvar_g_spawnmiscitemsaround_abdbld_suggested_season_use >= 1) {
		//Change if the mutator season in the menu is set to anything other than 1
		//1 is default, if set to other than 1, use that,
		//this way player can use the season slider easily to change the look, convienent
		if (autocvar_g_spawnfoliagearound_season != 1) {
			myabdbldseason = autocvar_g_spawnfoliagearound_season;
		} else {
			myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
		}
	} else {
		//Useless fallback but ohwell, better safe than...
		myabdbldseason = spawnfoliagearound_season;
	}
	
	self.rtnvl5 = myabdbldseason; //Whomever self happens to be
	
	//Might do something more complex later
	if (myabdbldseason == 3)
	{
		//Winter
		return BUILDING_SC_TERRAIN_SNOW; //Winter
	}
	else if (myabdbldseason == 5)
	{
		local float trandvar;
		trandvar = random();
		if (trandvar > 85) {
			return BUILDING_SC_TERRAIN_BLACKSTONE;
		} else if (trandvar > 70) {
			return BUILDING_SC_TERRAIN_GREYSTONE;
		} else {
			return BUILDING_SC_TERRAIN_DUST;
		}
	}
		
	return 0;
}

float SMI_abdbld_findtype_ent(entity mysrchent, float myrad)
{
			if (autocvar_sv_spawnarraysctilesrectify_noprint < 4) print("SEARCHING FOR NEARBY BUILDINGS WITH BUILDING_CLASS\n");
	entity f;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		if (f != mysrchent)
		if (f.classname == "building" && f.building_class)
		{	
			if (autocvar_g_spawnmiscitemsaround_abdbld_keeptypeignorerate < random())
			{
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_ignoretanktrapsetc) {
					if (f.model == "models/misc/tanktraps_pyramid.bsp") {
						//Do nothing, ignoring the tank trap
					} else {
						print("Found building with class", ftos(f.building_class), "\n");
						return f.building_class;
					}
				} else {
					print("Found building with class", ftos(f.building_class), "\n");
					return f.building_class;
				}
			}
		} 
    		f = f.chain;
  	}
	return FALSE;
}

float SMI_abdbld_findtype_ent_bestnearby(entity mysrchent, float myrad, float mybldclassgood, float mybldclassbest)
{
			if (autocvar_sv_spawnarraysctilesrectify_noprint < 4) print("Searching FOR Nearby BUILDINGS With BUILDING_CLASS MC or UC\n");
	float mybestclass;
	mybestclass = 0;
	entity f;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		if (f != mysrchent)
		if (f.classname == "building")
		{
			if (f.building_class == mybldclassgood) {
				mybestclass = mybldclassgood;
			} else if (f.building_class == mybldclassbest) {
				return mybldclassbest;
			}
		} 
    		f = f.chain;
  	}
	return mybestclass;
}

//for building_sctiles
float SMI_abdbld_findtype_forbuildingsctiles_ent(entity mysrchent, float myrad, float myclass, float sckeeptypeignorerate, float ignoretanktrapsetc)
{
			if (autocvar_sv_spawnarraysctilesrectify_noprint < 3) print("building_sctiles SEARCHING FOR NEARBY BUILDINGS WITH BUILDING_CLASS\n");
	entity f;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		if (f != mysrchent)
		if (f.classname == "building" && f.building_class)
		{	
			if (f.building_class == BUILDINGCLASS_INDUSTRIAL
			|| f.building_class == BUILDINGCLASS_LIGHTINDUSTRIAL
			|| f.building_class == BUILDINGCLASS_COMMERCIAL
			|| f.building_class == BUILDINGCLASS_MEDIUMCOMMERCIAL
			|| f.building_class == BUILDINGCLASS_LIGHTCOMMERCIAL
			|| f.building_class == BUILDINGCLASS_AIRPORT
			|| f.building_class == BUILDINGCLASS_MILITARY
			|| f.building_class == BUILDINGCLASS_RESIDENTIAL_DENSE
			|| f.building_class == BUILDINGCLASS_RESIDENTIAL_LC
			|| f.building_class == BUILDINGCLASS_RESIDENTIAL_MC
			|| f.building_class == BUILDINGCLASS_RESIDENTIAL_UC
			|| f.building_class == BUILDINGCLASS_RURALFARM
			)
			{
			if (sckeeptypeignorerate < random())
			{
				if (ignoretanktrapsetc) {
					if (f.model == "models/misc/tanktraps_pyramid.bsp") {
						//Do nothing, ignoring the tank trap
					} else {
								if (autocvar_sv_spawnarraysctilesrectify_noprint < 3) print("building_sctiles Found building with class", ftos(f.building_class), "\n");
						return f.building_class;
					}
				} else {
							if (autocvar_sv_spawnarraysctilesrectify_noprint < 3) print("building_sctiles Found building with class", ftos(f.building_class), "\n");
					return f.building_class;
				}
			}
			}
		} 
    		f = f.chain;
  	}
	return myclass;
}
//
void SMI_spawn_abdbld_scbase(vector selected_origin, float scbasetype, vector parent_angles, float scupdatebase, float scupdatebaserank);
void SMI_abdbld_scupdatebase(float mysearchclass, entity mysrchent, float myrad, float mybldclassgood, float mysctype, float mybldclassbest)
{
	print("Searching for SC Cup bases to replace\n");
	local float mybestclass;
	local float doremovescbase;
	doremovescbase = 0;
	mybestclass = 0;
	entity f;
	entity oldf;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		oldf = f;
		doremovescbase = 0;
		if (f != mysrchent)
		if (f.classname == "building")
		{
			if (mybldclassbest == mybldclassgood) {
				if (f.building_updatebase == mysearchclass) {
					SMI_spawn_abdbld_scbase(f.origin, mysctype, f.angles, mybldclassgood, mybldclassgood);
					doremovescbase = 1;
					print("********REPLACING SC BASE\n");
				}
			} else {
				if (f.building_updatebase == mysearchclass && (f.building_updatebaserank != mybldclassbest)) {
					//Don't want to downgrade
					SMI_spawn_abdbld_scbase(f.origin, mysctype, f.angles, mybldclassgood, mybldclassgood);
					doremovescbase = 1;
					print("********REPLACING SC BASE\n");
				}
			}
		}
    		f = f.chain;
		if (doremovescbase) {
			remove(oldf);
		}
  	}
}

float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_MC (entity e);
void SMI_abdbld_replace_lc_with_mc(entity mysrchent, float myrad, float mybuildingclass)
{
	local float doremovescbase;
	doremovescbase = 0;
	local entity f;
	local entity e;
	local entity previousself;
	local entity oldf;
	
	if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > myrad)
	{
		myrad = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
	}
	
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{	oldf = f;
		doremovescbase = 0;
		if (f != mysrchent)
		if (f.classname == "building")
		{
			if (f.building_class == mybuildingclass) {
				//print("HEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\nHEEEEEEERE\n");
				print("Replacing nearby LC with MC\n");
				doremovescbase = 1;
				
				e = spawn();
				e.fixangle = TRUE;
				e.origin = f.origin;
				e.angles = f.angles;
				e.classname = "building"; //So crossbow bolts behave correctly when striking
				e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
				e.count = f.count;
				SMI_AbdBld_SelectSC_Model_RESIDENTIAL_MC(e);
				
				previousself = self;
				self = e;
				setorigin(self, self.origin);
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight) {
					//If you do prefer the lightmapped effect
					spawnfunc_func_clientwall();
				} else {
					spawnfunc_func_clientwall_dlight(); //Sets solid right away, otherwise similar to clientmodel
                     		}
				self.solid = SOLID_BSP;
                        	self.movetype = MOVETYPE_PUSH;
			
				self.event_damage       = SMI_abdbld_damage;
				self.isabdbld = 1;
    				self.takedamage         = DAMAGE_YES;
    				//self.deadflag           = DEAD_NO;
    				self.think              = func_null;
				self.vehicle_health =  f.vehicle_health;
				self = previousself;	
			}
		} 
    		f = f.chain;
		if (doremovescbase) {
			remove(oldf);
		}
  	}
}

void SMI_abdbld_createmodel_at(entity e, entity f, float myvehichealth, float mycount)
{
	entity previousself;
	if (e && e != world) {
				e.fixangle = TRUE;
				e.origin = f.origin;
				e.angles = f.angles;
				e.classname = "building"; //So crossbow bolts behave correctly when striking
				e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
				e.count = mycount;
				
				previousself = self;
				self = e;
				setorigin(self, self.origin);
				setmodel(self, self.model); //Added so lodmodels would "work"
				//spawnfunc_func_clientwall(); //Sets solid right away, otherwise similar to clientmodel
                     		if (autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight) {
					//If you do prefer the lightmapped effect
					spawnfunc_func_clientwallnodroptofloor();
				} else {
					spawnfunc_func_clientwallnodroptofloor_dlight(); //Exact origin for the extra things
				}
				self.solid = SOLID_BSP;
                        	self.movetype = MOVETYPE_PUSH;
			
				self.event_damage       = SMI_abdbld_damage;
				self.isabdbld = 1;
    				self.takedamage         = DAMAGE_YES;
    				//self.deadflag           = DEAD_NO;
    				self.think              = func_null;
				self.vehicle_health =  myvehichealth;
				self = previousself;
				precache_model (e.model);
	}
}

void SMI_abdbld_addfoliage_to(float myselection, entity f)
{
	//This is for spawning decorations, etc
	local entity myfoliage;
	local entity myfoliage2;
	local entity myfoliage3;
	local entity myfoliage4;
	local entity myfoliage5;
	local entity myfoliage6;
	local float mychangeterrtype = 0;
	mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
	
	if (myselection == 1) {
		//Light commercial near UC
		if (0.5 > random()) {
			local float flrandvar;
			flrandvar = random();
			myfoliage = spawn();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub_snow1.bsp";
			else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE))
			   	myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub_dust1.bsp";
			else if (0.66 < flrandvar)
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub1.bsp";
			else if (0.33 < flrandvar)
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub2.bsp";
			else
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub3.bsp";
				
			SMI_abdbld_createmodel_at(myfoliage, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage.abdbldcanburn = 1;
			myfoliage.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
		
		if (0.5 > random()) {
			myfoliage2 = spawn();
			
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				myfoliage2.model = "models/misc/abandoned_sc_foliage_com_tree1_snow1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "models/misc/abandoned_sc_foliage_com_tree1_snow1_lod1.bsp";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage2.lodmodel2 = "models/misc/abandoned_sc_foliage_com_tree1_snow1_lod2.bsp";
						myfoliage2.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)) {
			   	myfoliage2.model = "models/misc/abandoned_sc_foliage_com_tree1_dust1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "models/misc/abandoned_sc_foliage_com_tree1_dust1_lod1.bsp";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage2.lodmodel2 = "models/misc/abandoned_sc_foliage_com_tree1_dust1_lod2.bsp";
						myfoliage2.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else {
				myfoliage2.model = "models/misc/abandoned_sc_foliage_com_tree1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "models/misc/abandoned_sc_foliage_com_tree1_lod1.bsp";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage2.lodmodel2 = "models/misc/abandoned_sc_foliage_com_tree1_lod2.bsp";
						myfoliage2.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			}
				
			SMI_abdbld_createmodel_at(myfoliage2, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage2.abdbldcanburn = 1;
			myfoliage2.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage2.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
		
		if (0.5 > random()) {
			local float flrandvar;
			flrandvar = random();
			myfoliage3 = spawn();
			if (0.66 < flrandvar) {
				myfoliage3.model = "models/misc/abandoned_sc_foliage_com_flowers1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage3.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers1_lod1.bsp";
					myfoliage3.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage3.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers1_lod2.bsp";
						myfoliage3.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else if (0.33 < flrandvar) {
				myfoliage3.model = "models/misc/abandoned_sc_foliage_com_flowers2.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage3.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers2_lod1.bsp";
					myfoliage3.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage3.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers2_lod2.bsp";
						myfoliage3.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else {
				myfoliage3.model = "models/misc/abandoned_sc_foliage_com_flowers3.bsp";
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage3.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers3_lod1.bsp";
					myfoliage3.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage3.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers3_lod2.bsp";
						myfoliage3.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			}
				
			SMI_abdbld_createmodel_at(myfoliage3, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage3.abdbldcanburn = 1;
			myfoliage3.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage3.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
	} else if (myselection == 2) {
		//Light commercial near MC
		if (0.35 > random()) {
			myfoliage = spawn(); //changed from myfoliage3, which was probably a typo
			myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub1.bsp";
			SMI_abdbld_createmodel_at(myfoliage, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
	} else if (myselection == 3) {
		//MC near UC
		if (0.25 > random()) {
			myfoliage = spawn();
			
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub_snow1.bsp";
			else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE))
			   	myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub_dust1.bsp";
			else 
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub1.bsp";
				
			SMI_abdbld_createmodel_at(myfoliage, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage.abdbldcanburn = 1;
			myfoliage.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
		
		if (0.3 > random()) {
			myfoliage2 = spawn();
			
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				myfoliage2.model = "models/misc/abandoned_sc_foliage_com_tree1_snow1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "models/misc/abandoned_sc_foliage_com_tree1_snow1_lod1.bsp";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage2.lodmodel2 = "models/misc/abandoned_sc_foliage_com_tree1_snow1_lod2.bsp";
						myfoliage2.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)) {
			   	myfoliage2.model = "models/misc/abandoned_sc_foliage_com_tree1_dust1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "models/misc/abandoned_sc_foliage_com_tree1_dust1_lod1.bsp";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage2.lodmodel2 = "models/misc/abandoned_sc_foliage_com_tree1_dust1_lod2.bsp";
						myfoliage2.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else {
				myfoliage2.model = "models/misc/abandoned_sc_foliage_com_tree1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "models/misc/abandoned_sc_foliage_com_tree1_lod1.bsp";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage2.lodmodel2 = "models/misc/abandoned_sc_foliage_com_tree1_lod2.bsp";
						myfoliage2.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			}
			
			SMI_abdbld_createmodel_at(myfoliage2, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage2.abdbldcanburn = 1;
			myfoliage2.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage2.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
	
		if (0.3 > random()) {
			myfoliage3 = spawn();
			
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				myfoliage3.model = "models/misc/abandoned_sc_foliage_mc_hedge_snow1.bsp";
			else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE))
			   	myfoliage3.model = "models/misc/abandoned_sc_foliage_mc_hedge_dust1.bsp";
			else 
				myfoliage3.model = "models/misc/abandoned_sc_foliage_mc_hedge.bsp";
				
			SMI_abdbld_createmodel_at(myfoliage3, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage3.abdbldcanburn = 1;
			myfoliage3.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage3.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		} else if (0.4 > random()) {
				myfoliage6 = spawn();
				myfoliage6.abdbldcanburn = 0;
				myfoliage6.model = "models/misc/abandoned_sc_fence_mc_vinyl1.bsp";
				SMI_abdbld_createmodel_at(myfoliage6, self, 10000, 11);
				
				//Set extended damagescale;
				myfoliage6.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_vinyl;
				myfoliage6.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_vinyl;
				
				if (0.8 > random()) {
					myfoliage5 = spawn();
					myfoliage5.abdbldcanburn = 0;
					myfoliage5.model = "models/misc/abandoned_sc_fence_mc_vinyl1a.bsp";
					SMI_abdbld_createmodel_at(myfoliage5, self, 10000, 11);
					
					//Set extended damagescale;
					myfoliage5.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_vinyl;
					myfoliage5.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_vinyl;
				}
		} else if (0.6 > random()) {
				myfoliage6 = spawn();
				myfoliage6.abdbldcanburn = 0;
				myfoliage6.model = "models/misc/abandoned_sc_fence_mc_estate1.bsp";
				SMI_abdbld_createmodel_at(myfoliage6, self, 40000, 11);
				
				//Set extended damagescale;
				myfoliage6.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
				myfoliage6.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
				
				if (0.8 > random()) {
					myfoliage5 = spawn();
					myfoliage5.abdbldcanburn = 0;
					myfoliage5.model = "models/misc/abandoned_sc_fence_mc_estate1a.bsp";
					SMI_abdbld_createmodel_at(myfoliage5, self, 40000, 11);
					
					//Set extended damagescale;
					myfoliage5.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
					myfoliage5.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
				}
		}
	
		if (0.5 > random()) {
			myfoliage4 = spawn();
			local float flrandvar;
			flrandvar = random();
			if (0.66 < flrandvar) {
				myfoliage4.model = "models/misc/abandoned_sc_foliage_com_flowers1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage4.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers1_lod1.bsp";
					myfoliage4.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage4.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers1_lod2.bsp";
						myfoliage4.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else if (0.33 < flrandvar) {
				myfoliage4.model = "models/misc/abandoned_sc_foliage_com_flowers2.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage4.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers2_lod1.bsp";
					myfoliage4.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage4.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers2_lod2.bsp";
						myfoliage4.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else {
				myfoliage4.model = "models/misc/abandoned_sc_foliage_com_flowers3.bsp";
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage4.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers3_lod1.bsp";
					myfoliage4.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage4.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers3_lod2.bsp";
						myfoliage4.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			}
			SMI_abdbld_createmodel_at(myfoliage4, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage4.abdbldcanburn = 1;
			myfoliage4.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage4.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
	} else if (myselection == 4) {
		//MC Alone
		if (0.1 > random()) {
			myfoliage = spawn();
			
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub_snow1.bsp";
			else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE))
			   	myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub_dust1.bsp";
			else 
				myfoliage.model = "models/misc/abandoned_sc_foliage_com_shrub1.bsp";
			
			SMI_abdbld_createmodel_at(myfoliage, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage.abdbldcanburn = 1;
			myfoliage.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
	
		if (0.1 > random()) {
			myfoliage2 = spawn();
			local float flrandvar;
			flrandvar = random();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				myfoliage2.model = "models/misc/abandoned_sc_foliage_com_shrub_snow1.bsp";
			else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE))
			   	myfoliage2.model = "models/misc/abandoned_sc_foliage_com_shrub_dust1.bsp";
			else if (0.45 < flrandvar)
				myfoliage2.model = "models/misc/abandoned_sc_foliage_com_shrub1.bsp";
			else
				myfoliage2.model = "models/misc/abandoned_sc_foliage_com_shrub2.bsp";
			
			SMI_abdbld_createmodel_at(myfoliage2, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage2.abdbldcanburn = 1;
			myfoliage2.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage2.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
	
		if (0.1 > random()) {
			myfoliage3 = spawn();
			
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				myfoliage.model = "models/misc/abandoned_sc_foliage_mc_hedge_snow1.bsp";
			else if ((mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
			   || (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE))
			   	myfoliage.model = "models/misc/abandoned_sc_foliage_mc_hedge_dust1.bsp";
			else 
				myfoliage3.model = "models/misc/abandoned_sc_foliage_mc_hedge.bsp";
				
			SMI_abdbld_createmodel_at(myfoliage3, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage3.abdbldcanburn = 1;
			myfoliage3.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage3.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		} else if (0.2 > random()) {
				myfoliage6 = spawn();
				myfoliage6.abdbldcanburn = 0;
				myfoliage6.model = "models/misc/abandoned_sc_fence_mc_vinyl1.bsp";
				SMI_abdbld_createmodel_at(myfoliage6, self, 10000, 11);
				
				//Set extended damagescale;
				myfoliage6.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_vinyl;
				myfoliage6.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_vinyl;
				
				if (0.5 > random()) {
					myfoliage5 = spawn();
					myfoliage5.abdbldcanburn = 0;
					myfoliage5.model = "models/misc/abandoned_sc_fence_mc_vinyl1a.bsp";
					SMI_abdbld_createmodel_at(myfoliage5, self, 10000, 11);
					
					//Set extended damagescale;
					myfoliage5.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_vinyl;
					myfoliage5.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_vinyl;
				}
		} else if (0.2 > random()) {
				myfoliage6 = spawn();
				myfoliage6.model = "models/misc/abandoned_sc_fence_mc_woodestate1.bsp";
				SMI_abdbld_createmodel_at(myfoliage6, self, 40000, 11);
				
				//Set extended damagescale;
				myfoliage6.abdbldcanburn = 1;
				myfoliage6.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
				myfoliage6.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
					
				if (0.5 > random()) {
					myfoliage5 = spawn();
					myfoliage5.model = "models/misc/abandoned_sc_fence_mc_woodestate1a.bsp";
					SMI_abdbld_createmodel_at(myfoliage5, self, 40000, 11);
				
					//Set extended damagescale;
					myfoliage5.abdbldcanburn = 1;
					myfoliage5.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
					myfoliage5.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
				}
		}
	
		if (0.1 > random()) {
			myfoliage4 = spawn();
			local float flrandvar;
			flrandvar = random();
			if (0.66 < flrandvar) {
				myfoliage4.model = "models/misc/abandoned_sc_foliage_com_flowers1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage4.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers1_lod1.bsp";
					myfoliage4.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage4.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers1_lod2.bsp";
						myfoliage4.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else if (0.33 < flrandvar) {
				myfoliage4.model = "models/misc/abandoned_sc_foliage_com_flowers2.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage4.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers2_lod1.bsp";
					myfoliage4.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage4.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers2_lod2.bsp";
						myfoliage4.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			} else {
				myfoliage4.model = "models/misc/abandoned_sc_foliage_com_flowers3.bsp";
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage4.lodmodel1 = "models/misc/abandoned_sc_foliage_com_flowers3_lod1.bsp";
					myfoliage4.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
							
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
						myfoliage4.lodmodel2 = "models/misc/abandoned_sc_foliage_com_flowers3_lod2.bsp";
						myfoliage4.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com;
					}
					}
				}
			}
			
			SMI_abdbld_createmodel_at(myfoliage4, self, 1000, 11);
			
			//Set extended damagescale;
			myfoliage4.abdbldcanburn = 1;
			myfoliage4.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_shrubs;
			myfoliage4.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_shrubs;
		}
	} else if (myselection == 5) {
		//MC Near LC
		if (0.45 > random()) {
				myfoliage2 = spawn();
				myfoliage2.abdbldcanburn = 0; //Deco
				myfoliage2.model = "models/misc/abandoned_sc_foliage_mc_grassovergrown1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "null";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com; //Note: unorthodox distance set
				}
				SMI_abdbld_createmodel_at(myfoliage2, self, 400, 11);
		}
		
		if (0.4 > random()) {
				myfoliage6 = spawn();
				myfoliage6.abdbldcanburn = 0;
				myfoliage6.model = "models/misc/abandoned_sc_fence_lc_chainlink1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage6.lodmodel1 = "models/misc/abandoned_sc_fence_lc_chainlink1_lod1.bsp";
					myfoliage6.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
				}
				SMI_abdbld_createmodel_at(myfoliage6, self, 20000, 11);
				
				//Set extended damagescale;
				myfoliage6.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
				myfoliage6.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
				
				if (0.75 > random()) {
					myfoliage5 = spawn();
					myfoliage5.abdbldcanburn = 0;
					myfoliage5.model = "models/misc/abandoned_sc_fence_lc_chainlink1a.bsp";
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
						myfoliage5.lodmodel1 = "models/misc/abandoned_sc_fence_lc_chainlink1a_lod1.bsp";
						myfoliage5.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
					}
					SMI_abdbld_createmodel_at(myfoliage5, self, 20000, 11);
					
					//Set extended damagescale;
					myfoliage5.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
					myfoliage5.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
				
				}
		}
	} else if (myselection == 6) {
		//LC
		
		if (0.5 > random()) {
				myfoliage2 = spawn();
				myfoliage2.abdbldcanburn = 0; //Deco
				myfoliage2.model = "models/misc/abandoned_sc_foliage_lc_grassovergrown1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "null";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com; //Note: unorthodox distance set
				}
				SMI_abdbld_createmodel_at(myfoliage2, self, 400, 11);
		}
		
		if (0.35 > random()) {
				myfoliage6 = spawn();
				myfoliage6.abdbldcanburn = 0;
				myfoliage6.model = "models/misc/abandoned_sc_fence_lc_chainlink1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage6.lodmodel1 = "models/misc/abandoned_sc_fence_lc_chainlink1_lod1.bsp";
					myfoliage6.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
				}
				SMI_abdbld_createmodel_at(myfoliage6, self, 20000, 11);
				
				//Set extended damagescale;
				myfoliage6.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
				myfoliage6.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
				
				if (0.75 > random()) {
					myfoliage5 = spawn();
					myfoliage5.abdbldcanburn = 0;
					myfoliage5.model = "models/misc/abandoned_sc_fence_lc_chainlink1a.bsp";
					if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
						myfoliage5.lodmodel1 = "models/misc/abandoned_sc_fence_lc_chainlink1a_lod1.bsp";
						myfoliage5.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com;
					}
					SMI_abdbld_createmodel_at(myfoliage5, self, 20000, 11);
					
					//Set extended damagescale;
					myfoliage5.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
					myfoliage5.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
				
				}
		} else if (0.35 > random()) {
				myfoliage6 = spawn();
				myfoliage6.abdbldcanburn = 0;
				myfoliage6.model = "models/misc/abandoned_sc_fence_lc_cinderblock.bsp";
				SMI_abdbld_createmodel_at(myfoliage6, self, 55000, 11);
				
				//Set extended damagescale;
				myfoliage6.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
				myfoliage6.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
				
				if (0.5 > random()) {
					myfoliage5 = spawn();
					myfoliage5.abdbldcanburn = 0;
					myfoliage5.model = "models/misc/abandoned_sc_fence_lc_cinderblocka.bsp";
					SMI_abdbld_createmodel_at(myfoliage5, self, 55000, 11);
					
					//Set extended damagescale;
					myfoliage5.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
					myfoliage5.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
				}
		}
	} else if (myselection == 7) {
		//Rural Farm
		
		if (0.65 > random()) {
				myfoliage2 = spawn();
				myfoliage2.abdbldcanburn = 0; //Deco
				myfoliage2.model = "models/misc/abandoned_sc_foliage_lc_grassovergrown1.bsp";
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					myfoliage2.lodmodel1 = "null";
					myfoliage2.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_foliage_com + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_foliage_com; //Note: unorthodox distance set
				}
				SMI_abdbld_createmodel_at(myfoliage2, self, 400, 11);
		}
	}
}

float SMI_abdbld_blendbuildingclass(float buildingclass)
{
	//This is for blending building types
	if (autocvar_g_spawnmiscitemsaround_abdbld_keeptypeblendrate > random())
	{
		print("Blending from ", ftos(buildingclass), " to:\n");
		float blendrandom;
		blendrandom = random();
		if (buildingclass == BUILDINGCLASS_INDUSTRIAL) {
			buildingclass = BUILDINGCLASS_LIGHTINDUSTRIAL;
		} else if (buildingclass == BUILDINGCLASS_LIGHTINDUSTRIAL) {
			buildingclass = BUILDINGCLASS_INDUSTRIAL;		
		} else if (buildingclass == BUILDINGCLASS_COMMERCIAL) {
			if (blendrandom > 0.15)
				buildingclass = BUILDINGCLASS_LIGHTCOMMERCIAL;
			else
				buildingclass = BUILDINGCLASS_RESIDENTIAL_UC;
		} else if (buildingclass == BUILDINGCLASS_MEDIUMCOMMERCIAL) {
			if (blendrandom > 0.66)
				buildingclass = BUILDINGCLASS_LIGHTCOMMERCIAL;
			else if (blendrandom > 0.33)
				buildingclass = BUILDINGCLASS_COMMERCIAL;
			else
				buildingclass = BUILDINGCLASS_LIGHTINDUSTRIAL;
		} else if (buildingclass == BUILDINGCLASS_LIGHTCOMMERCIAL) {
			if (blendrandom > 0.9)
				buildingclass = BUILDINGCLASS_MEDIUMCOMMERCIAL;
			else if (blendrandom > 0.75)
				buildingclass = BUILDINGCLASS_COMMERCIAL;
			else if (blendrandom > 0.6)
				buildingclass = BUILDINGCLASS_RESIDENTIAL_LC;
			else if (blendrandom > 0.5)
				buildingclass = BUILDINGCLASS_RESIDENTIAL_DENSE;
			else
				buildingclass = BUILDINGCLASS_RESIDENTIAL_MC;
		} else if (buildingclass == BUILDINGCLASS_AIRPORT) {
			if (blendrandom > 0.66)
				buildingclass = BUILDINGCLASS_LIGHTCOMMERCIAL;
			else if (blendrandom > 0.33)
				buildingclass = BUILDINGCLASS_MILITARY;
			else
				buildingclass = BUILDINGCLASS_LIGHTINDUSTRIAL;	
		} else if (buildingclass == BUILDINGCLASS_MILITARY) {
					
		} else if (buildingclass == BUILDINGCLASS_RESIDENTIAL_DENSE) { 
			if (blendrandom > 0.66)
				buildingclass = BUILDINGCLASS_LIGHTCOMMERCIAL;
			else if (blendrandom > 0.33)
				buildingclass = BUILDINGCLASS_AIRPORT;
			else
				buildingclass = BUILDINGCLASS_LIGHTINDUSTRIAL;	
		} else if (buildingclass == BUILDINGCLASS_RESIDENTIAL_LC) {
			buildingclass = BUILDINGCLASS_LIGHTINDUSTRIAL;	
		} else if (buildingclass == BUILDINGCLASS_RESIDENTIAL_MC) {
			buildingclass = BUILDINGCLASS_LIGHTCOMMERCIAL; 
		} else if (buildingclass == BUILDINGCLASS_RESIDENTIAL_UC) {
			buildingclass = BUILDINGCLASS_RESIDENTIAL_MC;		
		} else if (buildingclass == BUILDINGCLASS_RURALFARM) {
			if (blendrandom > 0.66)
				buildingclass = BUILDINGCLASS_RESIDENTIAL_LC;
			else if (blendrandom > 0.33)
				buildingclass = BUILDINGCLASS_AIRPORT;
			else
				buildingclass = BUILDINGCLASS_MILITARY;		
		} else {
			//Do nothing			
		}
		print("Blending TO   ", ftos(buildingclass), "\n");
	}
	return buildingclass;
}

.float sc_typeairport;
.float sc_typemilitary;
.float sc_typeruralfarm;
.float sc_typelightindustrial;
.float sc_typeindustrial;
.float sc_typecommercial;
.float sc_typemediumcommercial;
.float sc_typelightcommercial;
.float sc_typeresidentialdense;
.float sc_typeresidentiallc;
.float sc_typeresidentialmc;
.float sc_typeresidentialuc;

float SMI_AbdBld_SelectSC_Model (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float mysctypeairport;
	float mysctypemilitary;
	float mysctyperuralfarm;
	float mysctypelightindustrial;
	float mysctypeindustrial;
	float mysctypecommercial;
	float mysctypemediumcommercial;
	float mysctypelightcommercial;
	float mysctyperesidentialdense;
	float mysctyperesidentiallc;
	float mysctyperesidentialmc;
	float mysctyperesidentialuc;
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
		//Set defaults.
		mysctypeairport = autocvar_g_spawnmiscitemsaround_abdbld_sc_typeairport;
		mysctypemilitary = autocvar_g_spawnmiscitemsaround_abdbld_sc_typemilitary;
		mysctyperuralfarm = autocvar_g_spawnmiscitemsaround_abdbld_sc_typeruralfarm;
		mysctypelightindustrial = autocvar_g_spawnmiscitemsaround_abdbld_sc_typelightindustrial;
		mysctypeindustrial = autocvar_g_spawnmiscitemsaround_abdbld_sc_typeindustrial;
		mysctypecommercial = autocvar_g_spawnmiscitemsaround_abdbld_sc_typecommercial;
		mysctypemediumcommercial = autocvar_g_spawnmiscitemsaround_abdbld_sc_typemediumcommercial;
		mysctypelightcommercial = autocvar_g_spawnmiscitemsaround_abdbld_sc_typelightcommercial;
		mysctyperesidentialdense = autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentialdense;
		mysctyperesidentiallc = autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentiallc;
		mysctyperesidentialmc = autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentialmc;
		mysctyperesidentialuc = autocvar_g_spawnmiscitemsaround_abdbld_sc_typeresidentialuc;
		
		//Set per-entity overrides
		if (e.sc_typeairport) mysctypeairport = e.sc_typeairport;
		if (e.sc_typemilitary) mysctypemilitary = e.sc_typemilitary;
		if (e.sc_typeruralfarm) mysctyperuralfarm = e.sc_typeruralfarm;
		if (e.sc_typelightindustrial) mysctypelightindustrial = e.sc_typelightindustrial;
		if (e.sc_typeindustrial) mysctypeindustrial = e.sc_typeindustrial;
		if (e.sc_typecommercial) mysctypecommercial = e.sc_typecommercial;
		if (e.sc_typemediumcommercial) mysctypemediumcommercial = e.sc_typemediumcommercial;
		if (e.sc_typelightcommercial) mysctypelightcommercial = e.sc_typelightcommercial;
		if (e.sc_typeresidentialdense) mysctyperesidentialdense = e.sc_typeresidentialdense;
		if (e.sc_typeresidentiallc) mysctyperesidentiallc = e.sc_typeresidentiallc;
		if (e.sc_typeresidentialmc) mysctyperesidentialmc = e.sc_typeresidentialmc;
		if (e.sc_typeresidentialuc) mysctyperesidentialuc = e.sc_typeresidentialuc;
	
					///////////////////Start////////////////////////
					brandvar = random() *
					(autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallcondos1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall6
					);
					
					e.abdbldextendedsearchclass = 0; //If we are, from edge to center, (radius)
									 //1024 _more_ than a a normal tile
									 //We set this to 1.
									 //If 2048 _more_ from edge to center (radius)
									 //than a a normal tile
									 //We set this to 2.
									 //There is code below that handles these cases
									 //To reduce the likelyhood of buildings overlapping
									 //[if even bigger buildings are added the code will have to be]
									 //[revised to fully support, ofcourse keep to the +1024 radius]
									 //[way if making even bigger building tiles]
									 //(sometimes still happens if they are at different elevations)
									 //(as then the radius is furthur away in 3d space)
									 //(and the code doesn't trip thusly)
									 //by default we're normal sized tile.
									 //Thus we set to 0 to start 
					e.abdbldcanburn = 0; //Start with default burn perms before changing model
					e.smi_abdbld_spawnitems = 0; //No items to spawn by default
					
					if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_airportbuilding1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_airportbuilding1.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
						e.building_class = BUILDINGCLASS_AIRPORT;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
	
						e.model = "maps/sctilescompiled/compiles/sc_airportcontower1.bsp";
						e.building_class = BUILDINGCLASS_AIRPORT;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_airporthangar1.bsp";
						e.building_class = BUILDINGCLASS_AIRPORT;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;

						e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
						e.model = "maps/sctilescompiled/compiles/sc_airporthangar2.bsp";
						e.building_class = BUILDINGCLASS_AIRPORT;
						scbasetype = 10; //Medium
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_airportterminal1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_airportterminal1.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
						e.building_class = BUILDINGCLASS_AIRPORT;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_airportterminal2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_airportterminal2.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
						e.building_class = BUILDINGCLASS_AIRPORT;	
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
	
						e.model = "maps/sctilescompiled/compiles/sc_chemprocessingsmall1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemprocessingsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemprocessingsmall1.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
	
						e.model = "maps/sctilescompiled/compiles/sc_chemprocessingsmall2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemprocessingsmall2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemprocessingsmall2.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_conveniencestore1.bsp";
						e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_conveniencestore2.bsp";
						e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
						e.model = "maps/sctilescompiled/compiles/sc_favela1.bsp";
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
						e.model = "maps/sctilescompiled/compiles/sc_firedeptsmall1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_firedeptsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + LODADD_BUILDING_FIREDEPTSMALL;
						}
						scbasetype = 101;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_garage1.bsp";
						e.building_class = BUILDINGCLASS_MEDIUMCOMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_gas1.bsp";
						e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_gas2.bsp";
						e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_gas3.bsp";
						e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
	
						e.model = "maps/sctilescompiled/compiles/sc_hospitalsmall1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_hospitalsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_hospitalsmall1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2;
								}
							}
						}
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
						
						e.smi_abdbld_spawnitems = 201; //small industrial 1 ladder
						e.model = "maps/sctilescompiled/compiles/sc_industrialsmall1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_industrialsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
						}
						e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_industrialsmall2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_industrialsmall2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
						}
						e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_industrialsmall3.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_industrialsmall3.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
						}
						e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
						//Unused //Redundant with factory in utilitool
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes1.bsp";
						scbasetype = 3;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes2.bsp";
						scbasetype = 3;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes3.bsp";
						scbasetype = 3;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
						e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes4.bsp";
						scbasetype = 3;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
						e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
						e.model = "maps/sctilescompiled/compiles/sc_mediumapartments1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_mediumapartments1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 10;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
						e.building_subclass = BUILDINGSUBCLASS_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
						e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
						e.model = "maps/sctilescompiled/compiles/sc_mediumapartments2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_mediumapartments2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 12;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
						e.building_subclass = BUILDINGSUBCLASS_MC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
						
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes1.bsp";
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
						
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes2.bsp";
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
						
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes3.bsp";
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
						
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes4.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes4.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
						}
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
						
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes5.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes5.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
						}
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concretemil;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concretemil;
						
						e.model = "maps/sctilescompiled/compiles/sc_militarycontower1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_militarycontower1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						e.building_class = BUILDINGCLASS_MILITARY;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concretemil;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concretemil;
						
						e.model = "maps/sctilescompiled/compiles/sc_militarycontower2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_militarycontower2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						e.building_class = BUILDINGCLASS_MILITARY;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_smallglassoffice;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_smallglassoffice;
						
						e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officebuildingsmall1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
						e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officebuildingsmall2.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_smallglassoffice;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_smallglassoffice;
						
						e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall3.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall3.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officebuildingsmall3.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
						
						e.abdbldextendedsearchclass = 2; //We are 2*1024 _MORE_ to center than normal bldg
						e.model = "maps/sctilescompiled/compiles/sc_officetower1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetower1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 20;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
						
						e.abdbldextendedsearchclass = 2; //We are 2*1024 _MORE_ to center than normal bldg
						e.model = "maps/sctilescompiled/compiles/sc_officetower2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetower2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 20;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
						e.model = "maps/sctilescompiled/compiles/sc_policesmall1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_policesmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_radar1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_radar1.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
						e.building_class = BUILDINGCLASS_AIRPORT;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
						
						e.smi_abdbld_spawnitems = 101; //small apartments 1 ladders
						e.model = "maps/sctilescompiled/compiles/sc_smallapartments1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;	
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
						
						e.smi_abdbld_spawnitems = 102; //small apartments 2 ladders
						e.model = "maps/sctilescompiled/compiles/sc_smallapartments2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallapartments_modjapanese1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments_modjapanese1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 3;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallapartments_oldnyc1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments_oldnyc1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 5;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc.bsp";
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
						
						local float mychangeterrtype;
						self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
						mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
						if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
							e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_snow1.bsp";
						} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
						|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
						|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
						{
							e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_dust1.bsp";
						} else if (self.rtnvl5 == 2) {
							if (random() > 0.5)
								e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_fall1.bsp";
							else
								e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_fall2.bsp";
						}
						self.rtnvl5 = 0; //reset additional return value
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallpark1.bsp";
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
						e.isautoblocktypemultitool = 1; //We're (big) terrain
						
						local float mychangeterrtype;
						self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
						mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
						if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
							e.model = "maps/sctilescompiled/compiles/sc_smallpark1_snow1.bsp";
						} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
						|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
						|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
						{
							e.model = "maps/sctilescompiled/compiles/sc_smallpark1_dust1.bsp";
						} else if (self.rtnvl5 == 2) {
							if (random() > 0.5)
								e.model = "maps/sctilescompiled/compiles/sc_smallpark1_fall1.bsp";
							else
								e.model = "maps/sctilescompiled/compiles/sc_smallpark1_fall2.bsp";
						}
						self.rtnvl5 = 0; //reset additional return value
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallpark2.bsp";
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
						e.isautoblocktypemultitool = 1; //We're (big) terrain
						
						local float mychangeterrtype;
						self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
						mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
						if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
							e.model = "maps/sctilescompiled/compiles/sc_smallpark2_snow1.bsp";
						} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
						|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
						|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
						{
							e.model = "maps/sctilescompiled/compiles/sc_smallpark2_dust1.bsp";
						} else if (self.rtnvl5 == 2) {
							if (random() > 0.5)
								e.model = "maps/sctilescompiled/compiles/sc_smallpark2_fall1.bsp";
							else
								e.model = "maps/sctilescompiled/compiles/sc_smallpark2_fall2.bsp";
						}
						self.rtnvl5 = 0; //reset additional return value
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallpark3.bsp";
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
						e.isautoblocktypemultitool = 1; //We're (big) terrain
						
						local float mychangeterrtype;
						self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
						mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
						if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
							e.model = "maps/sctilescompiled/compiles/sc_smallpark3_snow1.bsp";
						} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
						|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
						|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
						{
							e.model = "maps/sctilescompiled/compiles/sc_smallpark3_dust1.bsp";
						} else if (self.rtnvl5 == 2) {
							if (random() > 0.5)
								e.model = "maps/sctilescompiled/compiles/sc_smallpark3_fall1.bsp";
							else
								e.model = "maps/sctilescompiled/compiles/sc_smallpark3_fall2.bsp";
						}
						self.rtnvl5 = 0; //reset additional return value
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
						e.isautoblocktypemultitool = 1; //We're (big) terrain
						
						local float mychangeterrtype;
						self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
						mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
						if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
							e.model = "maps/sctilescompiled/compiles/sc_smallpark4_snow1.bsp";
						} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
						|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
						|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
						{
							e.model = "maps/sctilescompiled/compiles/sc_smallpark4_dust1.bsp";
						} else if (self.rtnvl5 == 2) {
							if (random() > 0.5)
								e.model = "maps/sctilescompiled/compiles/sc_smallpark4_fall1.bsp";
							else
								e.model = "maps/sctilescompiled/compiles/sc_smallpark4_fall2.bsp";
						}
						self.rtnvl5 = 0; //reset additional return value
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
						
						e.model = "maps/sctilescompiled/compiles/sc_warehouse1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
						}
						e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
						
						e.model = "maps/sctilescompiled/compiles/sc_warehouse2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
						}
						e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
						
						e.model = "maps/sctilescompiled/compiles/sc_warehouse3.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse3.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
						}
						e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
						
						e.model = "maps/sctilescompiled/compiles/sc_warehouse4.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse4.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
						}
						e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_watertower1.bsp";
						scbasetype = 10;
						//Not used
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
						
						e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes5.bsp";
						scbasetype = 3;
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_lowerclasshomes5.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_lowerclasshomes5.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
						
						e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes6.bsp";
						scbasetype = 3;
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_lowerclasshomes6.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_lowerclasshomes6.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
						
						e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes7.bsp";
						scbasetype = 3;
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_lowerclasshomes7.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_lowerclasshomes7.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
						
						e.model = "maps/sctilescompiled/compiles/sc_officetowersmall1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						e.colormap = SMI_Select_Building_ColorMap_OfficeBuildingSmall1and2();
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
						
						e.model = "maps/sctilescompiled/compiles/sc_officetowersmall2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall2.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						e.colormap = SMI_Select_Building_ColorMap_OfficeBuildingSmall1and2();
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_chemsmall1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_chemsmall2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall2.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemsmall2.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_chemsmall3.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall3.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall3.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_chemsmall4.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall4.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall4.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_chemlng1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemlng1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemlng1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemlng1.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
						e.model = "maps/sctilescompiled/compiles/sc_chemoil1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemoil1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemoil1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemoil1.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
	
						e.model = "maps/sctilescompiled/compiles/sc_chemoil2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemoil2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemoil2.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									//
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemoil2.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
						e.building_class = BUILDINGCLASS_INDUSTRIAL;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.model = "maps/sctilescompiled/compiles/sc_officetowersmall3.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall3.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall3.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						e.colormap = SMI_Select_Building_ColorMap(0.33);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
						e.model = "maps/sctilescompiled/compiles/sc_farm1.bsp";
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RURALFARM;
						e.isautoblocktypemultitool = 1; //We're (big) terrain
						
						local float mychangeterrtype;
						self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
						mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
						if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
							e.model = "maps/sctilescompiled/compiles/sc_farm1_snow1.bsp";
						} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
						|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
						|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
						{
							e.model = "maps/sctilescompiled/compiles/sc_farm1_dust1.bsp";
						} else if (self.rtnvl5 == 2) {
							if (random() > 0.5)
								e.model = "maps/sctilescompiled/compiles/sc_farm1_fall1.bsp";
							else
								e.model = "maps/sctilescompiled/compiles/sc_farm1_fall2.bsp";
					
						}
						self.rtnvl5 = 0; //reset additional return value
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
	
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes6.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes6.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
						}
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
						if (random() > 0.25) {
							e.colormap = SMI_Select_Building_ColorMap(0.9);
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
	
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes7.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes7.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
						}
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
						if (random() > 0.1) {
							e.colormap = SMI_Select_Building_ColorMap(0.8);
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concretemil;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concretemil;
	
						e.model = "maps/sctilescompiled/compiles/sc_militaryammobunker1.bsp";
						e.building_class = BUILDINGCLASS_MILITARY;
						e.smi_abdbld_spawnitems = 1; //Ammobunker1
						scbasetype = 6002;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					)) {
						//Set extended damagescale;
						e.abdbldcanburn = 1;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
	
						e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes8.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes8.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
						}
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
						if (random() > 0.08) {
							e.colormap = SMI_Select_Building_ColorMap(1);
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concretemil;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concretemil;
	
						e.model = "maps/sctilescompiled/compiles/sc_militarydeepbuilding1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_militarydeepbuilding1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						e.building_class = BUILDINGCLASS_MILITARY;
						scbasetype = 6;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_AIRPORT(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_MILITARY(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RURALFARM(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_LIGHTINDUSTRIAL(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_INDUSTRIAL(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_COMMERCIAL(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_MEDIUMCOMMERCIAL(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_LIGHTCOMMERCIAL(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_DENSE(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_LC(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_MC(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					)) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_UC(e);
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concretemil;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concretemil;
	
						e.model = "maps/sctilescompiled/compiles/sc_militaryammobunker2.bsp";
						e.building_class = BUILDINGCLASS_MILITARY;
						e.smi_abdbld_spawnitems = 2; //Ammobunker2
						scbasetype = 6002;
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.model = "maps/sctilescompiled/compiles/sc_officetowersmall4.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall4.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall4.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						if (random() > 0.1) {
							e.colormap = SMI_Select_Building_ColorMap(0.33);
						} else if (random() > 0.35) {
							//If we're colorless, more than half the time we'll do black
							e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
						
						e.model = "maps/sctilescompiled/compiles/sc_officetowermedium1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowermedium1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 14001; //Medium
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						if (random() > 0.1) {
							e.colormap = SMI_Select_Building_ColorMap(0.55);
						} else if (random() > 0.35) {
							//If we're colorless, more than half the time we'll do black
							e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall4.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall4.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						if (random() > 0.3) {
							e.colormap = SMI_Select_Building_ColorMap(0.8);
						} else if (random() > 0.5) {
							//If we're colorless, half the time we'll do black
							e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall5.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall5.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						if (random() > 0.2) {
							e.colormap = SMI_Select_Building_ColorMap(0.6);
						} else if (random() > 0.5) {
							//If we're colorless, half the time we'll do black
							e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.model = "maps/sctilescompiled/compiles/sc_officetowersmall5.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall5.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
								&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall5.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
								}
							}
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						if (random() > 0.2) {
							e.colormap = SMI_Select_Building_ColorMap(0.4);
						} else if (random() > 0.5) {
							//If we're colorless, half the time we'll do black
							e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
						
						e.model = "maps/sctilescompiled/compiles/sc_officetowermedium2.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowermedium2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 14002; //Medium
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						if (random() > 0.1) {
							e.colormap = SMI_Select_Building_ColorMap(0.6);
						} else if (random() > 0.40) {
							//If we're colorless, more than half the time we'll do black
							e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
						}
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallcondos1
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
						e.model = "maps/sctilescompiled/compiles/sc_smallcondos1.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallcondos1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 2;
						e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;	
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_watertower1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
					+ mysctypeairport
					+ mysctypemilitary
					+ mysctyperuralfarm
					+ mysctypelightindustrial
					+ mysctypeindustrial
					+ mysctypecommercial
					+ mysctypemediumcommercial
					+ mysctypelightcommercial
					+ mysctyperesidentialdense
					+ mysctyperesidentiallc
					+ mysctyperesidentialmc
					+ mysctyperesidentialuc
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallcondos1
					+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall6
					)) {
						//Set extended damagescale;
						e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
						e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
						e.model = "maps/sctilescompiled/compiles/sc_officetowersmall6.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall6.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
						}
						scbasetype = 4;
						e.building_class = BUILDINGCLASS_COMMERCIAL;
						if (random() > 0.2) {
							e.colormap = SMI_Select_Building_ColorMap(0.4);
						} else if (random() > 0.5) {
							//If we're colorless, half the time we'll do black
							e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
						}
					} else {
						print("F Shouldn't reach here SC-----SC\n");
						e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
						scbasetype = 0;
					}
					return scbasetype;
					///////////////////End//////////////////////////
}

float SMI_abdbld_samemodel_tooclose_ent(entity mysrchent, float myrad);
///////////////////////////////////////////////////
///////////////////////////////////////////////////
//// building classes for sc_tiles START
//// These are seperate listings for different types of buildings
///////////////////////////////////////////////////
///////////////////////////////////////////////////
float SMI_AbdBld_SelectSC_Model_AIRPORT (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportonly_runway_pad
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1) {
		e.model = "maps/sctilescompiled/compiles/sc_airportbuilding1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_airportbuilding1.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
		e.building_class = BUILDINGCLASS_AIRPORT;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	)) {
		//Set extended damagescale;
		e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
		e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
	
		e.model = "maps/sctilescompiled/compiles/sc_airportcontower1.bsp";
		e.building_class = BUILDINGCLASS_AIRPORT;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
	)) {
		e.model = "maps/sctilescompiled/compiles/sc_airporthangar1.bsp";
		e.building_class = BUILDINGCLASS_AIRPORT;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
	)) {
		e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
		e.model = "maps/sctilescompiled/compiles/sc_airporthangar2.bsp";
		e.building_class = BUILDINGCLASS_AIRPORT;
		scbasetype = 10; //Medium
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
	)) {
		e.model = "maps/sctilescompiled/compiles/sc_airportterminal1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_airportterminal1.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
		e.building_class = BUILDINGCLASS_AIRPORT;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
	)) {
		e.model = "maps/sctilescompiled/compiles/sc_airportterminal2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_airportterminal2.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
		e.building_class = BUILDINGCLASS_AIRPORT;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
	)) {
		//Set extended damagescale;
		e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
		e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
						
		e.model = "maps/sctilescompiled/compiles/sc_radar1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_radar1.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_AIRPORT) + LODADD_BUILDINGCLASS_AIRPORT;
						}
						////////////
		e.building_class = BUILDINGCLASS_AIRPORT;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_sc_airportbuilding1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportcontower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airporthangar2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportterminal2
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_radar1
	+ autocvar_g_spawnmiscitemsaround_abdbld_sc_airportonly_runway_pad
	)) {
		//Set extended damagescale;
		e.abdbld_damagescale_bulldozer = 0;
		e.abdbld_damagescale_normalexplosive = 0;
	
		e.model = "maps/sctilescompiled/compiles/sc_airportrunway_pad.bsp";
		e.building_class = BUILDINGCLASS_AIRPORT;
		e.isautoblocktypemultitool = 1; //We're (big) flat terrain
	} else {
		print("F Shouldn't reach here SC-----SC AIRPORT\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_MILITARY (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concretemil;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concretemil;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1) {
			e.model = "maps/sctilescompiled/compiles/sc_militarycontower1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_militarycontower1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_MILITARY;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_militarycontower2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_militarycontower2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_MILITARY;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = 0;
			e.abdbld_damagescale_normalexplosive = 0;
	
			e.model = "maps/sctilescompiled/compiles/sc_milrunway_pad.bsp";
			e.building_class = BUILDINGCLASS_MILITARY;
			e.isautoblocktypemultitool = 1; //We're (big) flat terrain
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_missiletube1.bsp";
			e.building_class = BUILDINGCLASS_MILITARY;
			scbasetype = 6001;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_missiletube2.bsp";
			e.building_class = BUILDINGCLASS_MILITARY;
			scbasetype = 6;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_militaryammobunker1.bsp";
			e.building_class = BUILDINGCLASS_MILITARY;
			e.smi_abdbld_spawnitems = 1; //Ammobunker1
			scbasetype = 6002;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_militarydeepbuilding1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_militarydeepbuilding1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_MILITARY;
			scbasetype = 6;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarycontower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_runway_pad
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryonly_missiletube2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militarydeepbuilding1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_militaryammobunker2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_militaryammobunker2.bsp";
			e.building_class = BUILDINGCLASS_MILITARY;
			e.smi_abdbld_spawnitems = 2; //Ammobunker2
			scbasetype = 6002;
	} else {
		print("F Shouldn't reach here SC-----SC MILITARY\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_RURALFARM (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_farm1) {
			e.model = "maps/sctilescompiled/compiles/sc_farm1.bsp";
			e.building_class = BUILDINGCLASS_RURALFARM;
			scbasetype = 2;
			e.isautoblocktypemultitool = 1; //We're (big) terrain
			
			local float mychangeterrtype;
			self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
			mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				e.model = "maps/sctilescompiled/compiles/sc_farm1_snow1.bsp";
			} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
			|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
			|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
			{
				e.model = "maps/sctilescompiled/compiles/sc_farm1_dust1.bsp";
			} else if (self.rtnvl5 == 2) {
				if (random() > 0.5)
					e.model = "maps/sctilescompiled/compiles/sc_farm1_fall1.bsp";
				else
					e.model = "maps/sctilescompiled/compiles/sc_farm1_fall2.bsp";
					
			}
			self.rtnvl5 = 0; //reset additional return value
	} else {
		print("F Shouldn't reach here SC-----SC MILITARY\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_LIGHTINDUSTRIAL (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1) {
		e.smi_abdbld_spawnitems = 201; //small industrial 1 ladder
		e.model = "maps/sctilescompiled/compiles/sc_industrialsmall1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_industrialsmall1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
			}
		e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
		)) {
		e.model = "maps/sctilescompiled/compiles/sc_industrialsmall2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_industrialsmall2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
			}
		e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
		)) {
		e.model = "maps/sctilescompiled/compiles/sc_industrialsmall3.bsp";
		if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
			e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_industrialsmall3.bsp";
			e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
		}
		e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_warehouse1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
			}
			e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_warehouse2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
			}
			e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_warehouse3.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse3.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
			}
			e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_warehouse4
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_warehouse4.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_warehouse4.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_lightindustrial;
			}
			e.building_class = BUILDINGCLASS_LIGHTINDUSTRIAL;
	} else {
		print("F Shouldn't reach here SC-----SC LIGHTINDUSTRIAL\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_INDUSTRIAL (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage3
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_metaltank;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_metaltank;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1) {
			e.model = "maps/sctilescompiled/compiles/sc_chemprocessingsmall1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemprocessingsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemprocessingsmall1.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemprocessingsmall2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemprocessingsmall2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemprocessingsmall2.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemsmall1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemsmall2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall2.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemsmall2.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemsmall3.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall3.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall3.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemsmall4.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemsmall4.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemsmall4.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemlng1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemlng1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemlng1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemlng1.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemoil1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemoil1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemoil1.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemoil1.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemoil2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemoil2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemoil2.bsp";
								e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
									
									if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance3) {
										if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod3) {
										e.lodmodel3 = "maps/sctilescompiled/compiles/lod3_sc_chemoil2.bsp";
										e.loddistance3 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance3 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
										}
									}
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemstorage1.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemstorage1.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemstorage1.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
						////////////
			e.smi_abdbld_spawnitems = 301; //chem storage 1 ladders
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemstorage2.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemstorage2.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemstorage2.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
						////////////
			e.smi_abdbld_spawnitems = 302; //chem storage 2 ladders
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemprocessing2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemlng1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_chemoil2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_industrialonly_chemstorage3
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_chemstorage3.bsp";
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_chemstorage3.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_chemstorage3.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
						////////////
			e.smi_abdbld_spawnitems = 303; //chem storage 3 ladders
			e.building_class = BUILDINGCLASS_INDUSTRIAL;
	} else {
		print("F Shouldn't reach here SC-----SC INDUSTRIAL\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}
				
float SMI_AbdBld_SelectSC_Model_COMMERCIAL (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall6
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_glasshighrise;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_glasshighrise;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_smallglassoffice;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_smallglassoffice;
			
			e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officebuildingsmall1.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
			e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officebuildingsmall2.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_smallglassoffice;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_smallglassoffice;
			
			e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall3.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall3.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officebuildingsmall3.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		)) {
			e.abdbldextendedsearchclass = 2; //We are 2*1024 _MORE_ to center than normal bldg
			e.model = "maps/sctilescompiled/compiles/sc_officetower1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetower1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 20;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		)) {
			e.abdbldextendedsearchclass = 2; //We are 2*1024 _MORE_ to center than normal bldg
			e.model = "maps/sctilescompiled/compiles/sc_officetower2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetower2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 20;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officetowersmall1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall1.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			e.colormap = SMI_Select_Building_ColorMap_OfficeBuildingSmall1and2();
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officetowersmall2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall2.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			e.colormap = SMI_Select_Building_ColorMap_OfficeBuildingSmall1and2();
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officetowersmall3.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall3.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall3.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			e.colormap = SMI_Select_Building_ColorMap(0.33);
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officetowersmall4.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall4.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall4.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			if (random() > 0.1) {
				e.colormap = SMI_Select_Building_ColorMap(0.33);
			} else if (random() > 0.35) {
				//If we're colorless, more than half the time we'll do black
				e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
		)) {
			e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
						
			e.model = "maps/sctilescompiled/compiles/sc_officetowermedium1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowermedium1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 14001; //Medium
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			if (random() > 0.1) {
				e.colormap = SMI_Select_Building_ColorMap(0.55);
			} else if (random() > 0.35) {
				//If we're colorless, more than half the time we'll do black
				e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall4.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall4.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			if (random() > 0.3) {
				e.colormap = SMI_Select_Building_ColorMap(0.8);
			} else if (random() > 0.5) {
				//If we're colorless, half the time we'll do black
				e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officebuildingsmall5.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officebuildingsmall5.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			if (random() > 0.2) {
				e.colormap = SMI_Select_Building_ColorMap(0.6);
			} else if (random() > 0.5) {
				//If we're colorless, half the time we'll do black
				e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officetowersmall5.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall5.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2
					&& !autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2_commercial) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_officetowersmall5.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd2_commercial;
					}
				}
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			if (random() > 0.2) {
				e.colormap = SMI_Select_Building_ColorMap(0.4);
			} else if (random() > 0.5) {
				//If we're colorless, half the time we'll do black
				e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2
		)) {	
			e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
						
			e.model = "maps/sctilescompiled/compiles/sc_officetowermedium2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowermedium2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 14002; //Medium
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			if (random() > 0.1) {
				e.colormap = SMI_Select_Building_ColorMap(0.6);
			} else if (random() > 0.4) {
				//If we're colorless, more than half the time we'll do black
				e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetower2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall2	
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officebuildingsmall5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowermedium2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_officetowersmall6
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_officetowersmall6.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_officetowersmall6.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_COMMERCIAL;
			if (random() > 0.2) {
				e.colormap = SMI_Select_Building_ColorMap(0.4);
			} else if (random() > 0.5) {
				//If we're colorless, half the time we'll do black
				e.colormap = 1023; //Hack for nothing. Works untill 254th player connects
			}
	} else {
		print("F Shouldn't reach here SC-----SC COMMERCIAL\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_MEDIUMCOMMERCIAL (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_garage1) {
			e.model = "maps/sctilescompiled/compiles/sc_garage1.bsp";
			e.building_class = BUILDINGCLASS_MEDIUMCOMMERCIAL;
	} else {
		print("F Shouldn't reach here SC-----SC MEDIUMCOMMERCIAL\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_LIGHTCOMMERCIAL (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lightcommercialonly_shrine1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lightcommercialonly_dojo1
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1) {
			e.model = "maps/sctilescompiled/compiles/sc_conveniencestore1.bsp";
			e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_conveniencestore2.bsp";
			e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_gas1.bsp";
			e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_gas2.bsp";
			e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_gas3.bsp";
			e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lightcommercialonly_shrine1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_shrine_japanese1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_shrine_japanese1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_conveniencestore2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_gas3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lightcommercialonly_shrine1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lightcommercialonly_dojo1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_dojo_japanese1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_dojo_japanese1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
	} else {
		print("F Shouldn't reach here SC-----SC LIGHTCOMMERCIAL\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_DENSE (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallcondos1
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1) {
			//e.model = "maps/sctilescompiled/compiles/sc_conveniencestore1.bsp";
			//e.building_class = BUILDINGCLASS_LIGHTCOMMERCIAL;
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
	
			e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
			e.model = "maps/sctilescompiled/compiles/sc_mediumapartments1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_mediumapartments1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 10;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
			e.building_subclass = BUILDINGSUBCLASS_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
						
			e.abdbldextendedsearchclass = 1; //We are 1*1024 _MORE_ to center than normal bldg
			e.model = "maps/sctilescompiled/compiles/sc_mediumapartments2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_mediumapartments2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 12;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
			e.building_subclass = BUILDINGSUBCLASS_MC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		)) {
			e.smi_abdbld_spawnitems = 101; //small apartments 1 ladders
			e.model = "maps/sctilescompiled/compiles/sc_smallapartments1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		)) {
			e.smi_abdbld_spawnitems = 102; //small apartments 2 ladders
			e.model = "maps/sctilescompiled/compiles/sc_smallapartments2.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments2.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
			e.model = "maps/sctilescompiled/compiles/sc_smallapartments_modjapanese1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments_modjapanese1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 3;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
			e.model = "maps/sctilescompiled/compiles/sc_smallapartments_oldnyc1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallapartments_oldnyc1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 5;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
			e.model = "maps/sctilescompiled/compiles/sc_firedeptsmall1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_firedeptsmall1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + LODADD_BUILDING_FIREDEPTSMALL;
			}
			scbasetype = 101;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
	
			e.model = "maps/sctilescompiled/compiles/sc_hospitalsmall1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_hospitalsmall1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
					if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
					e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_hospitalsmall1.bsp";
					e.loddistance2 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance2;
					}
				}
			}
			scbasetype = 101;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
	
			e.model = "maps/sctilescompiled/compiles/sc_policesmall1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_policesmall1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_mediumapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_modjapanese1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallapartments_oldnyc1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_firedept1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_hospital1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_police1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallcondos1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
						
			e.model = "maps/sctilescompiled/compiles/sc_smallcondos1.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_smallcondos1.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1;
			}
			scbasetype = 2;			
			e.building_class = BUILDINGCLASS_RESIDENTIAL_DENSE;	
	} else {
		print("F Shouldn't reach here SC-----SC RESIDENTIAL_DENSE\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_LC (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentallconly_homej1
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
	
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
			e.model = "maps/sctilescompiled/compiles/sc_favela1.bsp";
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes1.bsp";
			scbasetype = 3;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes2.bsp";
			scbasetype = 3;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes3.bsp";
			scbasetype = 3;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concreteblock;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concreteblock;
	
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes4.bsp";
			scbasetype = 3;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes5.bsp";
			scbasetype = 3;
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_lowerclasshomes5.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_lowerclasshomes5.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes6.bsp";
			scbasetype = 3;
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_lowerclasshomes6.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_lowerclasshomes6.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes7.bsp";
			scbasetype = 3;
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_lowerclasshomes7.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "maps/sctilescompiled/compiles/lod2_sc_lowerclasshomes7.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
								}
							}
						}
						////////////
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_favela1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes6
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_lowerclasshomes7
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentallconly_homej1
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_lowerclasshomes_japanese1.bsp";
			scbasetype = 3;
						////////////
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_lowerclasshomes_japanese1.bsp";
							e.loddistance1 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_RESIDENTIAL_LC) + LODADD_BUILDINGCLASS_RESIDENTIAL_LC;
						}
						////////////
			e.building_class = BUILDINGCLASS_RESIDENTIAL_LC;
	
	} else {
		print("F Shouldn't reach here SC-----SC RESIDENTIAL_LC\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_MC (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_wood;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_wood;
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes1.bsp";
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes2.bsp";
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes3.bsp";
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes4.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes4.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
			}
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes5.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes5.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
			}
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes6.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes6.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
			}
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
			if (random() > 0.25) {
				e.colormap = SMI_Select_Building_ColorMap(0.9);
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes7.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes7.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
			}
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
			if (random() > 0.1) {
				e.colormap = SMI_Select_Building_ColorMap(0.8);
			}
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes5
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes6
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes7
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_middleclasshomes8
		)) {
			e.abdbldcanburn = 1;
			e.model = "maps/sctilescompiled/compiles/sc_middleclasshomes8.bsp";
			if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
				e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_middleclasshomes8.bsp";
				e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialmc;
			}
			scbasetype = 2;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_MC;
			if (random() > 0.08) {
				e.colormap = SMI_Select_Building_ColorMap(1);
			}
	} else {
		print("F Shouldn't reach here SC-----SC RESIDENTIAL_MC\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}


float SMI_AbdBld_SelectSC_Model_RESIDENTIAL_UC (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float brandvar;
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_home1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec3
	);
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_stone;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_stone;
	
	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
			e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc.bsp";
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
			
			local float mychangeterrtype;
			self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
			mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_snow1.bsp";
			} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
			|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
			|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
			{
				e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_dust1.bsp";
			} else if (self.rtnvl5 == 2) {
				if (random() > 0.5)
					e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_fall1.bsp";
				else
					e.model = "maps/sctilescompiled/compiles/sc_smallhedgemaze_uc_fall2.bsp";
					
			}
			self.rtnvl5 = 0; //reset additional return value
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
			e.model = "maps/sctilescompiled/compiles/sc_smallpark1.bsp";
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
			e.isautoblocktypemultitool = 1; //We're (big) terrain
			
			local float mychangeterrtype;
			self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
			mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				e.model = "maps/sctilescompiled/compiles/sc_smallpark1_snow1.bsp";
			} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
			|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
			|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
			{
				e.model = "maps/sctilescompiled/compiles/sc_smallpark1_dust1.bsp";
			} else if (self.rtnvl5 == 2) {
				if (random() > 0.5)
					e.model = "maps/sctilescompiled/compiles/sc_smallpark1_fall1.bsp";
				else
					e.model = "maps/sctilescompiled/compiles/sc_smallpark1_fall2.bsp";
			}
			self.rtnvl5 = 0; //reset additional return value
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
			e.model = "maps/sctilescompiled/compiles/sc_smallpark2.bsp";
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
			e.isautoblocktypemultitool = 1; //We're (big) terrain
			
			local float mychangeterrtype;
			self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
			mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				e.model = "maps/sctilescompiled/compiles/sc_smallpark2_snow1.bsp";
			} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
			|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
			|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
			{
				e.model = "maps/sctilescompiled/compiles/sc_smallpark2_dust1.bsp";
			} else if (self.rtnvl5 == 2) {
				if (random() > 0.5)
					e.model = "maps/sctilescompiled/compiles/sc_smallpark2_fall1.bsp";
				else
					e.model = "maps/sctilescompiled/compiles/sc_smallpark2_fall2.bsp";
			}
			self.rtnvl5 = 0; //reset additional return value
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
			e.model = "maps/sctilescompiled/compiles/sc_smallpark3.bsp";
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
			e.isautoblocktypemultitool = 1; //We're (big) terrain
			
			local float mychangeterrtype;
			self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
			mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				e.model = "maps/sctilescompiled/compiles/sc_smallpark3_snow1.bsp";
			} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
			|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
			|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
			{
				e.model = "maps/sctilescompiled/compiles/sc_smallpark3_dust1.bsp";
			} else if (self.rtnvl5 == 2) {
				if (random() > 0.5)
					e.model = "maps/sctilescompiled/compiles/sc_smallpark3_fall1.bsp";
				else
					e.model = "maps/sctilescompiled/compiles/sc_smallpark3_fall2.bsp";
			}
			self.rtnvl5 = 0; //reset additional return value
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
			e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
			e.isautoblocktypemultitool = 1; //We're (big) terrain
			
			local float mychangeterrtype;
			self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
			mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
			if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
				e.model = "maps/sctilescompiled/compiles/sc_smallpark4_snow1.bsp";
			} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
			|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
			|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
			{
				e.model = "maps/sctilescompiled/compiles/sc_smallpark4_dust1.bsp";
			} else if (self.rtnvl5 == 2) {
				if (random() > 0.5)
					e.model = "maps/sctilescompiled/compiles/sc_smallpark4_fall1.bsp";
				else
					e.model = "maps/sctilescompiled/compiles/sc_smallpark4_fall2.bsp";
			}
			self.rtnvl5 = 0; //reset additional return value
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_home1
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_upperclasshomes1.bsp";
			if (SMI_abdbld_samemodel_tooclose_ent(e, 20480)) {
				//Set extended damagescale;
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
				e.model = "maps/sctilescompiled/compiles/sc_smallpark1.bsp";
				e.isautoblocktypemultitool = 1; //We're (big) terrain
				
				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "maps/sctilescompiled/compiles/sc_smallpark1_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "maps/sctilescompiled/compiles/sc_smallpark1_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "maps/sctilescompiled/compiles/sc_smallpark1_fall1.bsp";
					else
						e.model = "maps/sctilescompiled/compiles/sc_smallpark1_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value	
			} else if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_upperclasshomes1.bsp";
					e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialuc;
			}
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_home1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec1
		)) {
			//Set extended damagescale;
			e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_brick;
			e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_brick;
	
			e.model = "maps/sctilescompiled/compiles/sc_upperclasshomes3.bsp";
			//e.model = "maps/buildables/building_gmanse.bsp";
			if (SMI_abdbld_samemodel_tooclose_ent(e, 20480)) {
				//Set extended damagescale;
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
				e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
				e.isautoblocktypemultitool = 1; //We're (big) terrain
				
				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "maps/sctilescompiled/compiles/sc_smallpark4_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "maps/sctilescompiled/compiles/sc_smallpark4_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "maps/sctilescompiled/compiles/sc_smallpark4_fall1.bsp";
					else
						e.model = "maps/sctilescompiled/compiles/sc_smallpark4_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value	
			} else if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_upperclasshomes3.bsp";
					e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialuc;
			}
			//scbasetype = 4002;
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
			//These _homec* ones were originally made for sc_tiles.zip, but then
			//modified to be used for medeval buildings. So using them here too.
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_home1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec2
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_upperclasshomes4.bsp";
			//e.model = "maps/buildables/building_chataeu.bsp";
			if (SMI_abdbld_samemodel_tooclose_ent(e, 20480)) {
				//Set extended damagescale;
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
				e.model = "maps/sctilescompiled/compiles/sc_smallpark2.bsp";
				e.isautoblocktypemultitool = 1; //We're (big) terrain
				
				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "maps/sctilescompiled/compiles/sc_smallpark2_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "maps/sctilescompiled/compiles/sc_smallpark2_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "maps/sctilescompiled/compiles/sc_smallpark2_fall1.bsp";
					else
						e.model = "maps/sctilescompiled/compiles/sc_smallpark2_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value	
			} else if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_upperclasshomes4.bsp";
					e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialuc;
			}
			//scbasetype = 4002;
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
	} else if (brandvar < (
		autocvar_g_spawnmiscitemsaround_abdbld_sc_smallhedgemaze_uc
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark3
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_smallpark4
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_home1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec1
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec2
		+ autocvar_g_spawnmiscitemsaround_abdbld_sc_residentaluconly_homec3
		)) {
			e.model = "maps/sctilescompiled/compiles/sc_upperclasshomes2.bsp";
			//e.model = "maps/buildables/building_palladianmanor.bsp";
			if (SMI_abdbld_samemodel_tooclose_ent(e, 20480)) {
				//Set extended damagescale;
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_other;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_other;
	
				e.model = "maps/sctilescompiled/compiles/sc_smallpark3.bsp";
				e.isautoblocktypemultitool = 1; //We're (big) terrain
				
				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "maps/sctilescompiled/compiles/sc_smallpark3_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "maps/sctilescompiled/compiles/sc_smallpark3_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "maps/sctilescompiled/compiles/sc_smallpark3_fall1.bsp";
					else
						e.model = "maps/sctilescompiled/compiles/sc_smallpark3_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value	
			} else if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
					e.lodmodel1 = "maps/sctilescompiled/compiles/lod1_sc_upperclasshomes2.bsp";
					e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 + autocvar_g_spawnmiscitemsaround_abdbld_loddistanceadd_residentialuc;
			}
			//scbasetype = 4002;
			scbasetype = 4;
			e.building_class = BUILDINGCLASS_RESIDENTIAL_UC;
	} else {
		print("F Shouldn't reach here SC-----SC RESIDENTIAL_UC\n");
		e.model = "maps/sctilescompiled/compiles/sc_smallpark4.bsp";
		scbasetype = 0;
	}
	return scbasetype;
	///////////////////End//////////////////////////
}




//specific models
float SMI_AbdBld_SelectSC_Model_ROAD_NARROWROAD_STRAIGHT_QUADRICE (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_narrowroad_straight_quadrice.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_ROAD_NARROWROAD_CROSS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_narrowroad_cross.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_THINROAD_STRAIGHT_TWICE (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_thinroad_straight_twice.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}

float SMI_AbdBld_SelectSC_Model_ROAD_THINROAD_CROSS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_thinroad_cross.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_THINROAD_NARROWROAD_CROSS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_thinroad_half_to_narrowroad_crossing.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}
//

///////////////
float SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_STRAIGHT (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_roadwide_straight.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_NARROWROAD_CROSS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_roadwide_qrtr_to_narrowroad_crossing.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_THINROAD_CROSS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_roadwide_half_to_thinroad_crossing.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
	
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_CROSS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_roadwide_cross.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
	e.isroad = 1;
	return scbasetype;
	///////////////////End//////////////////////////
}
//
//
void Model_FILLBLOCK_1X1_CONCRETE_extended_options (entity myent, entity mycompareent) {
		local float mychangeterrtype;
		self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to bmyent...
		mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
		if (mycompareent.building_class == BUILDINGCLASS_INDUSTRIAL) {
			//Do Nothing
		} else if (mycompareent.building_class == BUILDINGCLASS_AIRPORT) {
					myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_asphalt.bsp";
					if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_asphalt.bsp";
					if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_asphalt.bsp";
		} else if (mycompareent.building_class == BUILDINGCLASS_MILITARY) {
					myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_strong.bsp";
					if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_strong.bsp";
					if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_strong.bsp";
		} else if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_snow.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_snow.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_snow.bsp";
		} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_dust.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_dust.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_dust.bsp";
		} else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_greystonmyent.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_greystonmyent.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_greystonmyent.bsp";
		} else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_blackstonmyent.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_blackstonmyent.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_blackstonmyent.bsp";
		} else if (self.rtnvl5 == 2) {
			if (random() > 0.5) {
				myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_fall1.bsp";
				if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_fall1.bsp";
				if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_fall1.bsp";
			} else {
				myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_fall2.bsp";
				if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_fall2.bsp";
				if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_fall2.bsp";
			}
		} else if (self.rtnvl5 == 4) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_strangegrass.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_strangegrass.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_strangegrass.bsp";
		} else if (mycompareent.building_class == BUILDINGCLASS_COMMERCIAL
		|| mycompareent.building_class == BUILDINGCLASS_RESIDENTIAL_UC) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_grassuc.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_grassuc.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_grassuc.bsp";
		} else if ((mycompareent.building_class == BUILDINGCLASS_RESIDENTIAL_MC)
		|| (mycompareent.building_class == BUILDINGCLASS_RESIDENTIAL_DENSE && mycompareent.building_subclass == BUILDINGSUBCLASS_MC)) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_grassmc.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_grassmc.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_grassmc.bsp";
		} else if ((mycompareent.building_class == BUILDINGCLASS_RESIDENTIAL_LC)
		|| (mycompareent.building_class == BUILDINGCLASS_RESIDENTIAL_DENSE && mycompareent.building_subclass == BUILDINGSUBCLASS_LC)) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_grasslc.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_grasslc.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_grasslc.bsp";
		} else if (mycompareent.building_class == BUILDINGCLASS_LIGHTCOMMERCIAL) {
			myent.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete_asphalt.bsp";
			if (myent.lodmodel1) myent.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete_asphalt.bsp";
			if (myent.lodmodel2) myent.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete_asphalt.bsp";
		}
		self.rtnvl5 = 0; //reset additional return value
}
//
float SMI_AbdBld_SelectSC_Model_FILLBLOCK_1X1_CONCRETE (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/fillblocks/a3bsp_fillblock1x1concrete.bsp";
						if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance1) {
							e.lodmodel1 = "models/misc/fillblocks/lod1_a3bsp_fillblock1x1concrete.bsp";
							e.loddistance1 = autocvar_g_spawnmiscitemsaround_abdbld_loddistance1 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL;
							
							if (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2) {
								if (!autocvar_g_spawnmiscitemsaround_abdbld_disable_lod2) {
								e.lodmodel2 = "models/misc/fillblocks/lod2_a3bsp_fillblock1x1concrete.bsp";
								e.loddistance2 = (autocvar_g_spawnmiscitemsaround_abdbld_loddistance2 * LODMULTIPLIER_BUILDINGCLASS_INDUSTRIAL) + LODADD_BUILDINGCLASS_INDUSTRIAL_BSPLOD2;
								}
							}
						}
			e.building_class = 0;
	return scbasetype;
	///////////////////End//////////////////////////
}
//
///////////////
float SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_STRAIGHT_HALF (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_parkway_half_straight_3xwdth.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;
			
				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_straight_3xwdth_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_straight_3xwdth_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_straight_3xwdth_fall1.bsp";
					else
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_straight_3xwdth_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value
	
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_NARROWROAD_VS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_narrowroad_3xwdth.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;

				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_narrowroad_3xwdth_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_narrowroad_3xwdth_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_narrowroad_3xwdth_fall1.bsp";
					else
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_narrowroad_3xwdth_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value
					
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_THINROAD_VS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_thinroad_3xwdth.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;

				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_thinroad_3xwdth_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_thinroad_3xwdth_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_thinroad_3xwdth_fall1.bsp";
					else
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_thinroad_3xwdth_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value
					
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_ROADWIDE_VS (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_wideroad_3xwdth.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;

				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_wideroad_3xwdth_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_wideroad_3xwdth_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_wideroad_3xwdth_fall1.bsp";
					else
						e.model = "models/misc/roads/a4bsp__sc_parkway_half_vs_wideroad_3xwdth_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value
					
	return scbasetype;
	///////////////////End//////////////////////////
}
//
float SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_INTERCHANGE (entity e)
{
	//Here we select a model in much the same way we do for misc and fisc buildings, and 
	//vehicles, etc.
	float scbasetype; //What type of base to surround the model with
	scbasetype = 1;
	e.isautoblocktypemultitool = 1; //We're (big) terrain
	
	e.abdbldcanburn = 0; //Start with default burn perms before changing model
	e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
	e.smi_abdbld_spawnitems = 0; //No items to spawn by default
	//Set extended damagescale;
	e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
	e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;

			e.model = "models/misc/roads/a4bsp__sc_parkway_cross_interchange1.bsp";
			e.building_class = 0; //Not sure, maybe add a road class sometime
			e.isroad = 1;

				local float mychangeterrtype;
				self.rtnvl5 = 0; //Real Season decision is written here, whatever self happens to be...
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW) {
					e.model = "models/misc/roads/a4bsp__sc_parkway_cross_interchange1_snow1.bsp";
				} else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
				|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
				|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/roads/a4bsp__sc_parkway_cross_interchange1_dust1.bsp";
				} else if (self.rtnvl5 == 2) {
					if (random() > 0.5)
						e.model = "models/misc/roads/a4bsp__sc_parkway_cross_interchange1_fall1.bsp";
					else
						e.model = "models/misc/roads/a4bsp__sc_parkway_cross_interchange1_fall2.bsp";
				}
				self.rtnvl5 = 0; //reset additional return value	
	return scbasetype;
	///////////////////End//////////////////////////
}
//



///////////End Building classes for sc_tiles
/////////////////////////////////////////////


void SMI_spawn_abdbld_scbase(vector selected_origin, float scbasetype, vector parent_angles, float scupdatebase, float scupdatebaserank)
{
	//Make a base/cup for SC_Tiles

			entity mypreviousself;
			mypreviousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.fixangle = TRUE;
			
			//Start Regular Building
			e.abdbldcanburn = 0; //Initalize to 0, (tho 0 is default) We don't want these to burn
			e.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc_cupbase; //Want to block so people can build on automatically
			e.abdbldextendedsearchclass = 0; //by default we're normal sized tile.
			
			e.classname = "building"; //So crossbow bolts behave correctly when striking
			e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
			e.building_updatebase = scupdatebase; //If we want it updateable
			e.building_updatebaserank = scupdatebaserank; //New rank, so we can avoid downgrading 
			
			local float mychangeterrtype = 0;
			
			if (scbasetype == 10) {
				//Concrete
				e.model = "models/misc/abandoned_sc_basemedium1.bsp";
			} else if (scbasetype == 12) {
				//MC type grass
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basemedium_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
					|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
					|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basemedium_dust1_fill.bsp";
				} else {
					e.model = "models/misc/abandoned_sc_basemedium2.bsp";
				}
			} else if (scbasetype == 13) {
				//LC type grass
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basemedium_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
					|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
					|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basemedium_dust1_fill.bsp";
				} else {
					e.model = "models/misc/abandoned_sc_basemedium3.bsp";
				}
			} else if (scbasetype == 14) {
				//UC type grass
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basemedium_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
					|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
					|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basemedium_dust1_fill.bsp";
				} else {
					e.model = "models/misc/abandoned_sc_basemedium4.bsp";
				}
			} else if (scbasetype == 14001) {
				//UC_commercial type grass
				//MediumOfficeTower1 specific (for the weather ones)
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basemedium_officetower1_snow1.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
					|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
					|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basemedium_officetower1_dust1.bsp";
				} else {
					e.model = "models/misc/abandoned_sc_basemedium4_com.bsp";
				}
			} else if (scbasetype == 14002) {
				//UC_commercial type grass
				//MediumOfficeTower1 specific (for the weather ones)
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basemedium_officetower2_snow1.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
					|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
					|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basemedium_officetower2_dust1.bsp";
				} else {
					e.model = "models/misc/abandoned_sc_basemedium4_com.bsp";
				}
			} else if (scbasetype == 20) {
				//Concrete
				e.model = "models/misc/abandoned_sc_baselarge1.bsp";
			} else if (scbasetype == 101) {
				//Concrete for firedpt, Cover up MC grass
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					e.model = "models/misc/abandoned_sc_basesmall1.bsp";
				}
			} else if (scbasetype == 2) {
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					//Grass MC
					e.model = "models/misc/abandoned_sc_basesmall2.bsp";
				}
			} else if (scbasetype == 201) {
				//Grass MC Commercial
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					e.model = "models/misc/abandoned_sc_basesmall2_com.bsp";
				}
			} else if (scbasetype == 3) {
				//Grass LC
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					e.model = "models/misc/abandoned_sc_basesmall3.bsp";
				}
			} else if (scbasetype == 4) {
				//Grass UC
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					e.model = "models/misc/abandoned_sc_basesmall4.bsp";
				}
			} else if (scbasetype == 401) {
				//Grass UC Commercial
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					e.model = "models/misc/abandoned_sc_basesmall4_com.bsp";
				}	
			} else if (scbasetype == 4002) {
				//Grass UC type 2 (has some foliage, no basement allowed, etc, for the _homec* models so there's no gap)
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					e.model = "models/misc/abandoned_sc_basesmall4_2.bsp";
				}
			} else if (scbasetype == 5) {
				//RedBrick
				e.model = "models/misc/abandoned_sc_basesmall5.bsp";
			} else if (scbasetype == 6) {
				//Mil Silo
				e.model = "models/misc/abandoned_sc_basesmall_mil1.bsp";
			} else if (scbasetype == 6001) {
				//Missile Silo Type
				//MissileTube1 specific (for the weather ones)
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_mil1_snow1.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST
					|| mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE
					|| mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_mil1_dust1.bsp";
				} else {
					e.model = "models/misc/abandoned_sc_basesmall_mil1.bsp";
				}
			} else if (scbasetype == 6002) {
				//Military ammo bunker
				mychangeterrtype = SMI_AbdBld_ChooseBaseTerrainType();
				if (mychangeterrtype == BUILDING_SC_TERRAIN_SNOW)
				{
					e.model = "models/misc/abandoned_sc_basesmall_snow1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_DUST)
				{
					e.model = "models/misc/abandoned_sc_basesmall_dust1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_GREYSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_greyrock1_fill.bsp";
				}
				else if (mychangeterrtype == BUILDING_SC_TERRAIN_BLACKSTONE)
				{
					e.model = "models/misc/abandoned_sc_basesmall_blackrock1_fill.bsp";
				}
				else
				{
					e.model = "models/misc/abandoned_sc_basesmall1.bsp";
					//Concrete
				}
			} else if (scbasetype == -10000) {
				//Retaining wall, in addition to the sc_base
				e.model = "models/misc/abandoned_sc_retainingwallsmall1.bsp";
			} else if (scbasetype == -10001) {
				//Retaining wall, in addition to the sc_base
				e.model = "models/misc/abandoned_sc_retainingwallsmall1_middle.bsp";
			} else if (scbasetype == -10002) {
				//Retaining wall, in addition to the sc_base
				e.model = "models/misc/abandoned_sc_retainingwallsmall1_short.bsp";
			} else {
				//Concrete
				e.model = "models/misc/abandoned_sc_basesmall1.bsp";
			}
			precache_model (e.model);
			
			e.mins = '-20 -20 0';
			e.maxs = '20 20 20';
			e.solid = SOLID_BSP;
				
			self = e;
			setorigin(self, self.origin);
			self.angles = parent_angles;
			
			setmodel(self, self.model); //Had to add so lodmodels would "work"

			//gamemodel doesn't work for this, just clientmodel
                        //spawnfunc_misc_clientmodel();
			if (autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight) {
				//If you do prefer the lightmapped effect
				spawnfunc_func_clientwall();
			} else {
				spawnfunc_func_clientwall_dlight(); //Sets solid right away, otherwise similar to clientmodel
                        }
			self.solid = SOLID_BSP;
                        self.movetype = MOVETYPE_PUSH;
			
			self.event_damage       = SMI_abdbld_damage;
			self.isabdbld = 1;
    			self.takedamage         = DAMAGE_YES;
    			//self.deadflag           = DEAD_NO;
    			self.think              = func_null;
			if (scbasetype == -10000
			 || scbasetype == -10001
			 || scbasetype == -10002) {
				self.count = 11; //SC Retaining wall
				self.vehicle_health =  155000;
			} else {
				self.count = 10; //SC Base Cup
				self.vehicle_health =  55000;
			}
			
			
			//End Regular Building		
			self = mypreviousself;
}

//Similar to below but ignores buildings, only deals with spawnpoints ets
float SMI_rocks_tooclose_ent(entity mysrchent, float myrad)
{
	entity f;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		if (f != mysrchent)
		{
			if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_spawnpoints) {
				if (!f.spawnpointisofbuildable) {
					if (f.classname == "info_player_deathmatch") {
						print("SPAWNPOINTtooCLOSE\n");
			 			return TRUE;
					}
				}
			}
			
			if (g_ctf) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_flagbase) {
					if (f.classname == "item_flag_team_base") {
						print("FLAGBASEtooCLOSE\n");
			 			return TRUE;
					}
				}
			} else if (g_onslaught) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_onslaught) {
					if (f.classname == "onslaught_generator"
					|| f.classname == "onslaught_controlpoint") {
						print("ONSBASEtooCLOSE\n");
			 			return TRUE;
					}
				}
			}
		}
    		f = f.chain;
  	}
	return FALSE;
}


//To see if a building is in the vicinity, too close to build near (don't want to build ontop of)
float SMI_abdbld_boxesoverlap_ent(entity mysrchent, float mybasesize, float myexaustive)
{
	//print(vtos(self.absmin), " min ", vtos(self.absmax), " max \n");
	//print(vtos(mysrchent.absmin), " min ", vtos(mysrchent.absmax), " max \n");
	vector myabsmin;
	vector myabsmax;
	vector fabsmin;
	vector fabsmax;
	
	//myabsmin = mysrchent.absmin;
	//myabsmax = mysrchent.absmax;
	
	myabsmin_z = mysrchent.origin_z - (mybasesize*5);
	myabsmax_z = mysrchent.origin_z + (mybasesize*5);
	
	myabsmin_x = mysrchent.origin_x - ((mybasesize) + (mysrchent.abdbldextendedsearchclass*mybasesize));
	myabsmin_y = mysrchent.origin_y - ((mybasesize) + (mysrchent.abdbldextendedsearchclass*mybasesize));
	myabsmax_x = mysrchent.origin_x + ((mybasesize) + (mysrchent.abdbldextendedsearchclass*mybasesize));
	myabsmax_y = mysrchent.origin_y + ((mybasesize) + (mysrchent.abdbldextendedsearchclass*mybasesize));
	
	//print(vtos(myabsmin), " min ", vtos(myabsmax), " max \n");
	
	entity f;
	f = find(world, classname, "building");
  	while(f)
  	{
		if (f != mysrchent)
		{
			local float myignore;
			myignore = 0;
			//print(vtos(f.absmin), " min ***!!!!!****", vtos(f.absmax), " max **!!!!!*****\n***!!!!\n");
			
			fabsmin_z = f.origin_z - (mybasesize*5);
			fabsmax_z = f.origin_z + (mybasesize*5);
	
			fabsmin_x = f.origin_x - ((mybasesize) + (f.abdbldextendedsearchclass*mybasesize));
			fabsmin_y = f.origin_y - ((mybasesize) + (f.abdbldextendedsearchclass*mybasesize));
			fabsmax_x = f.origin_x + ((mybasesize) + (f.abdbldextendedsearchclass*mybasesize));
			fabsmax_y = f.origin_y + ((mybasesize) + (f.abdbldextendedsearchclass*mybasesize));
	
			
			if(boxesoverlap(myabsmin, myabsmax, fabsmin, fabsmax))
			{
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_ignoretanktrapsetc) {
					if (f.model == "models/misc/tanktraps_pyramid.bsp") {
						//Do nothing, ignoring the tank trap
						myignore = 1;
					} else {
						return TRUE;
					}
				} else {
					return TRUE;
				}
			}
			
			//Do real
			if (myignore) {
				//Do nothing, we have chosen to ignore the tank traps
			} else if (myexaustive) {
			  if(boxesoverlap(myabsmin, myabsmax, f.absmin, f.absmax))
			  {
				return TRUE;
			  }
			
			  if(boxesoverlap(mysrchent.absmin, mysrchent.absmax, f.absmin, f.absmax))
			  {
				return TRUE;
			  }
			}
			//
		}
    		f = f.chain;
  	}
	return FALSE;
}


//To see if a building is in the vicinity, too close to build near (don't want to build ontop of)
float SMI_abdbld_tooclose_ent(entity mysrchent, float myrad)
{
	entity f;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		if (f != mysrchent)
		if (f.classname == "bldhitbx" || f.classname == "building")
		{
			if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_ignoretanktrapsetc) {
				if (f.model == "models/misc/tanktraps_pyramid.bsp") {
					//Do nothing, ignoring the tank trap
				} else {
					return TRUE;
				}
			} else {
				return TRUE;
			}
		} else {
			if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_spawnpoints) {
				if (!f.spawnpointisofbuildable) {
					if (f.classname == "info_player_deathmatch") {
						print("SPAWNPOINTTOOCLOSE\n");
			 			return TRUE;
					}
				}
			}
			
			if (g_ctf) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_flagbase) {
					if (f.classname == "item_flag_team_base") {
						print("FLAGBASETOOCLOSE\n");
			 			return TRUE;
					}
				}
			} else if (g_onslaught) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_onslaught) {
					if (f.classname == "onslaught_generator"
					|| f.classname == "onslaught_controlpoint") {
						print("ONSBASETOOCLOSE\n");
			 			return TRUE;
					}
				}
			}
		}
    		f = f.chain;
  	}
	return FALSE;
}

float SMI_abdbld_toocloseextended_ent(entity mysrchent, float myrad, float mysearchclass)
{
	entity f;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		if (f != mysrchent)
		if (f.classname == "bldhitbx" || f.classname == "building")
		if (f.abdbldextendedsearchclass) //Are we big
		if (f.abdbldextendedsearchclass >= mysearchclass) //as big or bigger than looking for
		{
			//This part not needed becaus tanktraps won't be enormous;
			//if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_ignoretanktrapsetc) {
			//	if (f.model == "models/misc/tanktraps_pyramid.bsp") {
			//		//Do nothing, ignoring the tank trap
			//	} else {
			//		return TRUE;
			//	}
			//} else {
			
			
				return TRUE;
			
			
			//}
		} 
    		f = f.chain;
  	}
	return FALSE;
}


//To see if same model too close
float SMI_abdbld_samemodel_tooclose_ent(entity mysrchent, float myrad)
{
	entity f;
	f = findradius(mysrchent.origin, myrad);
  	while(f)
  	{
		if (f != mysrchent)
		if (f.classname == "building")
		{
			if (f.model == mysrchent.model) {
				if (autocvar_sv_spawnarraysctilesrectify_noprint < 5) print("ABDBLD: Found same model in search area when asked to look for this\n");
				return TRUE;
			}
		} 
    		f = f.chain;
  	}
	return FALSE;
}


float SMI_AbdBld_Select_Fisc_Model()
{
	local float mxcount;
	local float brandvar;
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apcpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cgarage
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_obvstower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hmmfrg
	);

	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld) {
		mxcount = 1006; //SecBldg
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	)) {
		mxcount = 1002; //Shield
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	)) {
		mxcount = 1015; //OilPump
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	)) {
		mxcount = 1005; //Hangar
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	)) {
		mxcount = 1001; //FGarrison
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	)) {
		mxcount = 1004; //Glassbase
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	)) {
		mxcount = 1007; //Tankpad
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	)) {
		mxcount = 1008; //Stockpile
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	)) {
		mxcount = 1009; //AmmoDepot
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	)) {
		mxcount = 1019; //Factory
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	)) {
		mxcount = 1021; //Furnace
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	)) {
		mxcount = 1011; //EnergyTank
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	)) {
		mxcount = 1010; //OilTank
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	)) {
		mxcount = 1016; //Chemplant1
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	)) {
		mxcount = 1017; //Chemplant1
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	)) {
		mxcount = 1018; //Chemplant1
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	)) {
		mxcount = 1510; //SolarPanel
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	)) {
		mxcount = 1012; //Apartments
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	)) {
		mxcount = 1003; //Shelter
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	)) {
		mxcount = 1501; //Greenhouse
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	)) {
		mxcount = 1022; //OfficeTower1
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	)) {
		mxcount = 1023; //FireSupression	
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	)) {
		mxcount = 1024; //OfficeTower2
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower
	)) {
		mxcount = 1025; //TensionWireTower
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	)) {
		mxcount = 1026; //OfficeTower3
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apcpad
	)) {
		mxcount = 1027; //APCPad
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apcpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cgarage
	)) {
		mxcount = 1028; //Covered Garage
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apcpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cgarage
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_obvstower
	)) {
		mxcount = 1037; //Observation Tower
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shield
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hangar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_twtower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apcpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cgarage
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_obvstower
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_hmmfrg
	)) {
		mxcount = 1036; //Hammer Forge
	} else {
		print("F Shouldn't reach here FISC-----FISC\n");
		mxcount = 1003; //Shelter //Shouldn't get here
	}
	///////////////////End//////////////////////////
	
	return mxcount;
}


////////////////////////////////////////////////////
///// building_class type selections for FISC start
////////////////////////////////////////////////////

float SMI_AbdBld_Select_Fisc_Model_INDUSTRIAL()
{
	local float mxcount;
	local float brandvar;
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	);

	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump) {
		mxcount = 1015;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	)) {
		mxcount = 1021;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	)) {
		mxcount = 1011;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	)) {
		mxcount = 1010;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	)) {
		mxcount = 1016;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	)) {
		mxcount = 1017;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oilpump
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_furnace
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_etank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oiltank
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chema
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemb
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_chemc
	)) {
		mxcount = 1018;
	} else {
		print("F Shouldn't reach here FISC-----FISC\n");
		mxcount = 1003; //Shelter //Shouldn't get here
	}
	///////////////////End//////////////////////////
	
	return mxcount;
}


float SMI_AbdBld_Select_Fisc_Model_LIGHTINDUSTRIAL()
{
	local float mxcount;
	local float brandvar;
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cgarage
	);

	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory) {
		mxcount = 1019;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	)) {
		mxcount = 1510;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	)) {
		mxcount = 1501;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_factory
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_solar
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gnhouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cgarage
	)) {
		mxcount = 1028;
	} else {
		print("F Shouldn't reach here FISC-----FISC\n");
		mxcount = 1003; //Shelter //Shouldn't get here
	}
	///////////////////End//////////////////////////
	
	return mxcount;
}

float SMI_AbdBld_Select_Fisc_Model_COMMERCIAL()
{
	local float mxcount;
	local float brandvar;
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	);

	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1) {
		mxcount = 1022;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	)) {
		mxcount = 1023;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	)) {
		mxcount = 1024;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower1
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_firehouse
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_oftower3
	)) {
		mxcount = 1026;
	
	} else {
		print("F Shouldn't reach here FISC-----FISC\n");
		mxcount = 1003; //Shelter //Shouldn't get here
	}
	///////////////////End//////////////////////////
	
	return mxcount;
}

float SMI_AbdBld_Select_Fisc_Model_RESIDENTIAL_LC()
{
	local float mxcount;
	local float brandvar;
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter
	);

	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_fisc_shelter) {
		mxcount = 1003;
	} else {
		print("F Shouldn't reach here FISC-----FISC\n");
		mxcount = 1003; //Shelter //Shouldn't get here
	}
	///////////////////End//////////////////////////
	
	return mxcount;
}

float SMI_AbdBld_Select_Fisc_Model_RESIDENTIAL_DENSE()
{
	local float mxcount;
	local float brandvar;
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart
	);

	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_fisc_apart) {
		mxcount = 1012;
	} else {
		print("F Shouldn't reach here FISC-----FISC\n");
		mxcount = 1003; //Shelter //Shouldn't get here
	}
	///////////////////End//////////////////////////
	
	return mxcount;
}

float SMI_AbdBld_Select_Fisc_Model_AIRPORT()
{
	//Some fencing, and bridges on floor
	local float mxcount;
	local float xrandvar;
	xrandvar = random();
	
		if (xrandvar > 0.9) {
			mxcount = 1520;
		} else if (xrandvar > 0.5) {
			mxcount = 1651;
		} else {
			mxcount = 1650;
		}
		
	return mxcount;
}

float SMI_AbdBld_Select_Fisc_Model_MILITARY()
{
	local float mxcount;
	local float brandvar;
	local float xrandvar;
	xrandvar = random();
	///////////////////Start////////////////////////
	brandvar = random() *
	(autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_fencetwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr3
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_sentryraised
	);

	if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld) {
		mxcount = 1006;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	)) {
		mxcount = 1001; //This one not tagged as military as you need to build them to build anything often
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	)) {
		mxcount = 1004; 
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	)) {
		mxcount = 1007;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	)) {
		mxcount = 1008;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	)) {
		mxcount = 1009;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_apcpad
	)) {
		mxcount = 1027;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_sentryraised
	)) {
		mxcount = 1020;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_sentryraised
	)) {
		mxcount = 1020;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	)) {
		if (xrandvar > 0.9) {
			mxcount = 1127;
		} else if (xrandvar > 0.8) {
			mxcount = 1124;
		} else if (xrandvar > 0.7) {
			mxcount = 1125;
		} else if (xrandvar > 0.6) {
			mxcount = 1126;
		} else if (xrandvar > 0.5) {
			mxcount = 1123;
		} else if (xrandvar > 0.35) {
			mxcount = 1122;
		} else if (xrandvar > 0.15) {
			mxcount = 1121;
		} else {
			mxcount = 1120;
		}
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	)) {
		mxcount = 1013;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	)) {
		mxcount = 1014;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised
	)) {
		if (xrandvar > 0.75) {
			mxcount = 1131;
		} else {
			mxcount = 1130;
		}
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_fencetwr
	)) {
		mxcount = 1521;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_fencetwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr
	)) {
		mxcount = 1531;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_fencetwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr2
	)) {
		mxcount = 1536;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_fencetwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr3
	)) {
		mxcount = 1537;
	} else if (brandvar < (
	autocvar_g_spawnmiscitemsaround_abdbld_fisc_secbld
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_cmdpst
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_gbase
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_tankpad
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_stockpile
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_ammodepot
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mantur
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_flac
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_mlrs
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_manturraised
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_fencetwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr2
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_walltwr3
	+ autocvar_g_spawnmiscitemsaround_abdbld_fisc_milonly_sentryraised
	)) {
		mxcount = 1020;
	} else {
		print("F Shouldn't reach here FISC-----FISC\n");
		mxcount = 1003; //Shelter //Shouldn't get here
	}
	///////////////////End//////////////////////////
	
	return mxcount;
}

///// building_class type selections for FISC end

float SMI_abdbld_checkfourpointstoolow (entity myself, vector myorigin, float mypoint, float mymax) {
	//This is to check if the building needs a retaining wall
	//Returns Height Change (of Z) if ground is below mymax (distance)
	//We test some points first to see if we're in a solid, if we are, we skip as otherwise the traceline will trace forever inside the solid
	//We have to test a couple points the (parent) building itself is solid too and will trip it
	//If any of our points is not in a solid, we do the traceline
	local vector myspot;
	local vector myaddvec;
	myaddvec = '0 0 2';
	myspot = myorigin;
	myspot_x = myspot_x + mypoint;
	myspot_y = myspot_y + mypoint;
	if (
	(myspot_x > world.maxs_x)
	|| (myspot_y > world.maxs_y)
	|| (myspot_z > world.maxs_z)
	|| (myspot_x < world.mins_x)
	|| (myspot_y < world.mins_y)
	|| (myspot_z < world.mins_z)
	) {
		//Do nothing, trace will go in forever otherwise since we're outside of the map
	} else if ((pointcontents (myspot + myaddvec) != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '2 2 0') != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '-32 -32 0') != CONTENT_SOLID)) {
		traceline(myspot, myspot - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), myself);	
		if (trace_endpos_z < (myorigin_z - mymax)) {
			return (myorigin_z - trace_endpos_z);
		}
	}
	
	myspot = myorigin;
	myspot_x = myspot_x - mypoint;
	myspot_y = myspot_y - mypoint;
	if (
	(myspot_x > world.maxs_x)
	|| (myspot_y > world.maxs_y)
	|| (myspot_z > world.maxs_z)
	|| (myspot_x < world.mins_x)
	|| (myspot_y < world.mins_y)
	|| (myspot_z < world.mins_z)
	) {
		//Do nothing, trace will go in forever otherwise since we're outside of the map
	} else if ((pointcontents (myspot + myaddvec) != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '-2 -2 0') != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '32 32 0') != CONTENT_SOLID)) {
		traceline(myspot + '0 0 2', myspot - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), myself);	
		if (trace_endpos_z < (myorigin_z - mymax)) {
			return (myorigin_z - trace_endpos_z);
		}
	}
	
	myspot = myorigin;
	myspot_x = myspot_x - mypoint;
	myspot_y = myspot_y + mypoint;
	if (
	(myspot_x > world.maxs_x)
	|| (myspot_y > world.maxs_y)
	|| (myspot_z > world.maxs_z)
	|| (myspot_x < world.mins_x)
	|| (myspot_y < world.mins_y)
	|| (myspot_z < world.mins_z)
	) {
		//Do nothing, trace will go in forever otherwise since we're outside of the map
	} else if ((pointcontents (myspot + myaddvec) != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '-2 2 0') != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '32 -32 0') != CONTENT_SOLID)) {
		traceline(myspot, myspot - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), myself);	
		if (trace_endpos_z < (myorigin_z - mymax)) {
			return (myorigin_z - trace_endpos_z);
		}
	}
	
	myspot = myorigin;
	myspot_x = myspot_x + mypoint;
	myspot_y = myspot_y - mypoint;
	if (
	(myspot_x > world.maxs_x)
	|| (myspot_y > world.maxs_y)
	|| (myspot_z > world.maxs_z)
	|| (myspot_x < world.mins_x)
	|| (myspot_y < world.mins_y)
	|| (myspot_z < world.mins_z)
	) {
		//Do nothing, trace will go in forever otherwise since we're outside of the map
	} else if ((pointcontents (myspot + myaddvec) != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '2 -2 0') != CONTENT_SOLID)
	|| (pointcontents (myspot + myaddvec + '-32 32 0') != CONTENT_SOLID)) {
		traceline(myspot, myspot - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), myself);	
		if (trace_endpos_z < (myorigin_z - mymax)) {
			return (myorigin_z - trace_endpos_z);
		}
	}
	
	return FALSE;
}


float SMI_spawn_abdbld_sc_checkovergrowthmore(entity e, vector selected_origin, float onceling, float vfly, float rigorlvl) {
		//Returns true if overgrown
		
		if (vfly)
			return FALSE; //Don't deal with this. Say it's ok, not overgrown
			
		if (onceling)
			return FALSE; //Don't deal with this. Say it's ok, not overgrown
		
		local float loopcontrol;
		local vector myoriginedit;
		loopcontrol = 0;

		traceline(selected_origin + '0 0 100', selected_origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);				

		while (loopcontrol < 29) {
		///////////////////////////////
		  if (spawnmiscitemsaround_overgrowth < 7) {
			float hitmaterial;
			hitmaterial = W_EvaluateMaterialHit();
		
			if ((hitmaterial == 1) || (hitmaterial == 2)) {
				//print("Metal\n");
				remove(e);
				g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
				return TRUE;
			} else if (hitmaterial == 5) {
				//print("Concrete\n");
				if (spawnmiscitemsaround_overgrowth < 5) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return TRUE;
				}
			} else if ((hitmaterial == 3) || (hitmaterial == 4)) {
				//print("Stone and Brick\n");
				if (spawnmiscitemsaround_overgrowth < 4) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return TRUE;
				}
			} else if (hitmaterial == 6) {
				//print("Glass or Window\n");
			} else if (hitmaterial == 8) {
				//print("Wood and Bark\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return TRUE;
				}
			} else if (hitmaterial == 9) {
				//print("Sheetrock or Cardboard or Vinyl\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return TRUE;
				}
			} else if (
			( strstrofs(trace_dphittexturename, "asphalt", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "asphault", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "road", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "filzkachel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "roof", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "cobble", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "paving", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "pavement", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "rubber", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "vtiles", 0) != -1 )
			)
			{
				//print("Asphalt or astroturf or roof\n");
				if (spawnmiscitemsaround_overgrowth < 2) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return TRUE;
				}
			} else if (
			( strstrofs(trace_dphittexturename, "gravel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "sand", 0) != -1 )
			)
			{
				//print("Gravel or Sand\n");
				if (spawnmiscitemsaround_overgrowth < 1) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return TRUE;
				}
			} else if (hitmaterial == 7) {
				//print("Dirt Etc\n");
				//Allow growth in all cases of dirt or grass not caught above
			} else if (
			( strstrofs(trace_dphittexturename, "caulk", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "common", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "base", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "door", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "tile", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "barrel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "detail", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "decal", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "wall", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "carpet", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plastic", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "panel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "floor", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "flr_", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plaster", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "trim", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "celing", 0) != -1 )
			)
			{
				//If the thing was any of the other "real" materials, we do not get here
				//If it isn't any of the rest, before allowing, check to see if 
				//it has some stated purpose that we should not grown things on
				//print("Stated Purpose\n");
				if (spawnmiscitemsaround_overgrowth < 6) {
					remove(e);
					g_spawnmiscitemsaround_abdbld_currentfail = g_spawnmiscitemsaround_abdbld_currentfail + 1;
					return TRUE;
				}
			} else {
				//print("NotMetal\n");
			}
		  }
		  
		  if not(vfly) {
		  	if (onceling) {
		  		loopcontrol = 9999; //Escape
		  	} else if (loopcontrol < 28) {
				//Here we'll test other spots near the origin of the model, whos extends usually are +1024 and -1024, X and Y.
		  		
				if (loopcontrol < 1) {
		  			myoriginedit = selected_origin + '128 0 0';
					print("111111111111111111111111111111loooooop\n");
				} else if (loopcontrol < 2) {
		  			myoriginedit = selected_origin + '0 128 0';
				} else if (loopcontrol < 3) {
		  			myoriginedit = selected_origin + '-128 0 0';
				} else if (loopcontrol < 4) {
		  			myoriginedit = selected_origin + '0 -128 0';
					
					
				} else if (loopcontrol < 5 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '256 256 0';
				} else if (loopcontrol < 6 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '256 -256 0';
				} else if (loopcontrol < 7 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '-256 256 0';
				} else if (loopcontrol < 8 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '-256 -256 0';
					
				} else if (loopcontrol < 9 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '0 256 0';
				} else if (loopcontrol < 10 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '0 -256 0';
				} else if (loopcontrol < 11 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '-256 0 0';
				} else if (loopcontrol < 12 && (rigorlvl)) {
		  			myoriginedit = selected_origin + '256 0 0';
					
					
				} else if (loopcontrol < 13 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '384 384 0';
				} else if (loopcontrol < 14 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '384 -384 0';
				} else if (loopcontrol < 15 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '-384 384 0';
				} else if (loopcontrol < 16 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '-384 -384 0';
					
				} else if (loopcontrol < 17 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '0 384 0';
				} else if (loopcontrol < 18 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '0 -384 0';
				} else if (loopcontrol < 19 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '-384 0 0';
				} else if (loopcontrol < 20 && (rigorlvl > 1)) {
		  			myoriginedit = selected_origin + '-384 0 0';
					
					
				} else if (loopcontrol < 21 && (rigorlvl > 2)) {
		  			myoriginedit = selected_origin + '640 640 0';
				} else if (loopcontrol < 22 && (rigorlvl > 2)) {
		  			myoriginedit = selected_origin + '640 -640 0';
					print("1--00000000011111111111111111111111111111loooooop\n");
				} else if (loopcontrol < 23 && (rigorlvl > 2)) {
		  			myoriginedit = selected_origin + '-640 640 0';
				} else if (loopcontrol < 24 && (rigorlvl > 2)) {
		  			myoriginedit = selected_origin + '-640 -640 0';
					
				} else if (loopcontrol < 25 && (rigorlvl > 3)) {
		  			myoriginedit = selected_origin + '896 896 0';
				} else if (loopcontrol < 26 && (rigorlvl > 3)) {
		  			myoriginedit = selected_origin + '896 -896 0';
				} else if (loopcontrol < 27 && (rigorlvl > 3)) {
		  			myoriginedit = selected_origin + '-896 896 0';
				} else if (loopcontrol < 28 && (rigorlvl > 3)) {
		  			myoriginedit = selected_origin + '-896 -896 0';
					print("1666666666611111111111111111111111111111loooooop\n");
				} else {
					loopcontrol = 9999; //Escape
				}
				
				//We don't want to do this last traceline if we don't need to, because tracelines cost, thus all the control code
				traceline(myoriginedit + '0 0 100', myoriginedit - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
				loopcontrol = loopcontrol + 1;
		  	} else {
				loopcontrol = 9999; //Escape
			}
		  } else {
		  	loopcontrol = 9999; //Escape
		  }
		///////////////////////////////
		}
		
		return FALSE;	
}

float SMI_AbdBld_SelectType();
//Abandoned Building
void SMI_spawn_abdbld(vector selected_origin, float onceling, float randomangle, float allowliquid, float vfly, float bldtype)
{
			if (
			(selected_origin_x > world.maxs_x)
			|| (selected_origin_y > world.maxs_y)
			|| (selected_origin_z > world.maxs_z)
			|| (selected_origin_x < world.mins_x)
			|| (selected_origin_y < world.mins_y)
			|| (selected_origin_z < world.mins_z)
			) {
				//print("abdbld: selected origin out of world bounds, returning\n");
				return;
			}
			
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
				if (onceling < 2) {
				if (randomangle)
				{
					if (randomangle > random())
					{
						e.angles_y = random() * 180;
					}
					else 
					{
						//No rand? Then 90 degree turns.
						local float rarnd;
						rarnd = random();
						if (rarnd > 0.75)
							e.angles_y = 90;
						else if (rarnd > 0.55)
							e.angles_y = -90;
						else if (rarnd > 0.25)
							e.angles_y = 180;
						else
							e.angles_y = 0;
							//Otherwise we keep at 0;
					}
				} else {
					//No rand ever? Then 90 degree turns.
					local float rarnd;
					rarnd = random();
					if (rarnd > 0.75)
						e.angles_y = 90;
					else if (rarnd > 0.55)
						e.angles_y = -90;
					else if (rarnd > 0.25)
						e.angles_y = 180;
					else
						e.angles_y = 0;
						//Otherwise we keep at 0;
				}
				}
			e.fixangle = TRUE;
			
			if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose) {
				//If we are too close, return
				if (SMI_abdbld_tooclose_ent(e, autocvar_g_spawnmiscitemsaround_abdbld_tooclose))
				{
					remove(e);
					//print("abdbld: selected Origin too close to other blding, returning\n");
					return;
				}
			}
			
			if (bldtype == 0)
			{
				bldtype = SMI_AbdBld_SelectType(); //If 0, choose individually
			}
			
			//Here we find out if we can build in that spot
			local float myteam;
			myteam = 0;
			
			if (bldtype == 1)
				myteam = autocvar_g_spawnmiscitemsaround_abdbld_concrete_spawnnearteam;
			else if (bldtype == 2)
				myteam = autocvar_g_spawnmiscitemsaround_abdbld_glass_spawnnearteam;
			else if (bldtype == 3)
				myteam = autocvar_g_spawnmiscitemsaround_abdbld_misc_spawnnearteam;
			else if (bldtype == 4)
				myteam = autocvar_g_spawnmiscitemsaround_abdbld_fisc_spawnnearteam;
			else if (bldtype == 5)
				myteam = autocvar_g_spawnmiscitemsaround_abdbld_sc_spawnnearteam;
			
			if not(SMI_AbdBld_BuildNearBase(myteam, e.origin))
			{
					remove(e);
					//print("abdbld: selected Origin too close to wrong teambase, returning\n");
					return;
			}
			
			//Per type building snap, if greater than all-type snap amount
			if (bldtype == 1) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_concrete > autocvar_g_spawnmiscitemsaround_abdbld_snapamnt)
				{
					local float myzorig;
					myzorig = selected_origin_z;
					selected_origin = vsnap(selected_origin, autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_concrete);
					selected_origin_z = myzorig; //We only want x and y to snap
					e.origin = selected_origin;
				}
			} else if (bldtype == 2) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_glass > autocvar_g_spawnmiscitemsaround_abdbld_snapamnt)
				{
					local float myzorig;
					myzorig = selected_origin_z;
					selected_origin = vsnap(selected_origin, autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_glass);
					selected_origin_z = myzorig; //We only want x and y to snap
					e.origin = selected_origin;
				}
			} else if (bldtype == 3) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_misc > autocvar_g_spawnmiscitemsaround_abdbld_snapamnt)
				{
					local float myzorig;
					myzorig = selected_origin_z;
					selected_origin = vsnap(selected_origin, autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_misc);
					selected_origin_z = myzorig; //We only want x and y to snap
					e.origin = selected_origin;
				}
			} else if (bldtype == 4) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_fisc > autocvar_g_spawnmiscitemsaround_abdbld_snapamnt)
				{
					local float myzorig;
					myzorig = selected_origin_z;
					selected_origin = vsnap(selected_origin, autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_fisc);
					selected_origin_z = myzorig; //We only want x and y to snap
					e.origin = selected_origin;
				}
			} else if (bldtype == 5) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc > autocvar_g_spawnmiscitemsaround_abdbld_snapamnt)
				{
					local float myzorig;
					myzorig = selected_origin_z;
					selected_origin = vsnap(selected_origin, autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc);
					selected_origin_z = myzorig; //We only want x and y to snap
					e.origin = selected_origin;
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc_shiftx) {
					selected_origin_x = selected_origin_x + autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc_shiftx;
					e.origin = selected_origin;
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc_shifty) {
					selected_origin_y = selected_origin_y + autocvar_g_spawnmiscitemsaround_abdbld_snapamnt_sc_shifty;
					e.origin = selected_origin;
				}
			}
			
			if (bldtype == 1 || bldtype == 2 || bldtype == 5)
			{
				//Abandoned buildings and SC_buildings further overgrowth check
				if (SMI_spawn_abdbld_sc_checkovergrowthmore(e, selected_origin, onceling, vfly, autocvar_g_spawnmiscitemsaround_abdbld_overgrowth_rigor)) {
					remove(e);
					print("abdbld: Overgrown returning!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
					return;
				}
			}
			
			if (bldtype == 3 || bldtype == 4)
			{
				traceline(e.origin + '0 0 2', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
				setorigin(e, trace_endpos);
				e.angles_y = (360*random())-180;
				
				//MiscBuilding type Building
				entity mx = spawn();
				world.colormap = SMI_Select_Building_ColorMap(0); //The world is the owner of unowned buildings, thus they will get this colormap when they spawn
				float brandvar;
				//brandvar = random();
				if (bldtype == 3)
				{
					multitool_setstartcastlecolormaybe(mx); //for applying g_suggested_multitool_castlecolor
					
					/////////////Start////////////
					brandvar = random() *
					(autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge1
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge2
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge3
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_belltower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_crsdrstrnghld
					);

					if (brandvar < autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu) {
						mx.count = 17; //Chataeu
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					)) {
						mx.count = 11; //Gmanse
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					)) {
						mx.count = 7; //StrongCastle
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					)) {
						mx.count = 5; //Stronghold
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					)) {
						mx.count = 6; //Strongtower
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					)) {
						mx.count = 1; //MG
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					)) {
						mx.count = 2; //Electro
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					)) {
						mx.count = 3; //Rockets
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					)) {
						mx.count = 8; //HEllion
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					)) {
						mx.count = 10; //HK
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					)) {
						mx.count = 4; //Garrison
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					)) {
						mx.count = 9; //Townhall
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					)) {
						mx.count = 12; //arsenal
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					)) {
						mx.count = -3; //Shrine
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					)) {
						mx.count = -4; //Dojo
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					)) {
						mx.count = 13; //Barracks
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					)) {
						mx.count = 14; //church
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					)) {
						mx.count = 15; //OldHangar
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					)) {
						mx.count = 16; //Tankhangar
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					)) {
						mx.count = -1; //SniperTower
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					)) {
						mx.count = 501; //Field
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					)) {
						mx.count = -2; //House(nippon)
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					)) {
						mx.count = 18; //PalladianManor
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					)) {
						mx.count = 19; //StoneHouse
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					)) {
						mx.count = 21; //SiegeWorkshop
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					)) {
						mx.count = 502; //Vineyard
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					)) {
						mx.count = 22; //Gaol
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail
					)) {
						mx.count = 23; //Small Jail
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge1
					)) {
						mx.count = 24; //Forge N
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge1
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge2
					)) {
						mx.count = 25; //Forge R
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge1
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge2
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge3
					)) {
						mx.count = 26; //Forge E
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge1
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge2
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge3
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_belltower
					)) {
						mx.count = -5; //BellTower
					} else if (brandvar < (
					autocvar_g_spawnmiscitemsaround_abdbld_misc_chtaeu
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gmanse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_scastle
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strnghld
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_strngtwr
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towermg
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerelectro
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerrkts
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhelln
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_towerhk
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_garrison
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_townhall
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_arsenal
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_shrine
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_dojo
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_barracks
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_church
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_hangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_tankhangar
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_snipertower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_field
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_house
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_pmanor
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sthouse
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sworkshop
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_vineyard
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_gaol
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_sjail
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge1
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge2
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_forge3
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_belltower
					+ autocvar_g_spawnmiscitemsaround_abdbld_misc_crsdrstrnghld
					)) {
						mx.count = 27; //CrusaderStronghold
					} else {
						print("M Shouldn't reach here MISC-----MISC\n");
						mx.count = -2; //House(nippon) //Shouldn't get here
					}
					/////////////End//////////////
				}
				else
				{
					local float fiscbuildingclass;
					fiscbuildingclass = SMI_abdbld_findtype_ent(e, autocvar_g_spawnmiscitemsaround_abdbld_keeptypesearchradius);
					fiscbuildingclass = SMI_abdbld_blendbuildingclass(fiscbuildingclass);
					if (autocvar_g_spawnmiscitemsaround_abdbld_keeptyperate && 
					(autocvar_g_spawnmiscitemsaround_abdbld_keeptyperate > random()))
					{
						if (fiscbuildingclass == BUILDINGCLASS_INDUSTRIAL) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_INDUSTRIAL();
						} else if (fiscbuildingclass == BUILDINGCLASS_LIGHTINDUSTRIAL) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_LIGHTINDUSTRIAL();
						} else if (fiscbuildingclass == BUILDINGCLASS_COMMERCIAL) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_COMMERCIAL();
						} else if (fiscbuildingclass == BUILDINGCLASS_MEDIUMCOMMERCIAL) {
							//Currently don't have this, so will use random
							mx.count = SMI_AbdBld_Select_Fisc_Model();
						} else if (fiscbuildingclass == BUILDINGCLASS_LIGHTCOMMERCIAL) {
							//Currently don't have this, so will use random
							mx.count = SMI_AbdBld_Select_Fisc_Model();
						} else if (fiscbuildingclass == BUILDINGCLASS_AIRPORT) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_AIRPORT();
						} else if (fiscbuildingclass == BUILDINGCLASS_MILITARY) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_MILITARY();
						} else if (fiscbuildingclass == BUILDINGCLASS_RESIDENTIAL_DENSE) { 
							mx.count = SMI_AbdBld_Select_Fisc_Model_RESIDENTIAL_DENSE();
						} else if (fiscbuildingclass == BUILDINGCLASS_RESIDENTIAL_LC) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_RESIDENTIAL_LC();
						} else if (fiscbuildingclass == BUILDINGCLASS_RESIDENTIAL_MC) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_RESIDENTIAL_LC();
						} else if (fiscbuildingclass == BUILDINGCLASS_RESIDENTIAL_UC) {
							mx.count = SMI_AbdBld_Select_Fisc_Model_RESIDENTIAL_LC();
						} else if (fiscbuildingclass == BUILDINGCLASS_RURALFARM) {
							//Currently don't have this, so will use random
							mx.count = SMI_AbdBld_Select_Fisc_Model();
						} else {
							mx.count = SMI_AbdBld_Select_Fisc_Model();	
						}
					} else {
								if (autocvar_sv_spawnarraysctilesrectify_noprint < 4) print("Chose not to keep type, random FISC Building\n");
						mx.count = SMI_AbdBld_Select_Fisc_Model();
					}
				}
				mx.origin = e.origin;
				mx.angles = e.angles;
				
				e.subordinate = mx;
				self = e;
				self.subordinate.think = multitool_spawner;
				self.subordinate.nextthink = time;
				if (mx.count == 1510
				|| mx.count == 1015
				|| mx.count == 501
				|| mx.count == 502
				|| mx.count == 1501
				|| mx.count == 1521
				|| mx.count == 1531
				|| mx.count == 1536
				|| mx.count == 1537
				|| (
				(mx.count == 1003
				|| mx.count == 1013
				|| mx.count == 1014
				|| mx.count == 1127
				|| mx.count == 1124
				|| mx.count == 1125
				|| mx.count == 1126
				|| mx.count == 1123
				|| mx.count == 1122
				|| mx.count == 1121
				|| mx.count == 1120
				|| mx.count == 1131
				|| mx.count == 1130)
				&& (random() > 0.5)))
				{
					local vector eorigin;
					eorigin = e.origin;
					e.origin = eorigin + '512 0 0';
					traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
					setorigin(e, trace_endpos);
					entity ma = spawn();
					ma.count = mx.count;
					ma.origin = e.origin;
					ma.angles = e.angles;
					
					e.subordinate = ma;
					self = e;
					self.subordinate.think = multitool_spawner;
					self.subordinate.nextthink = time;
					//
					e.origin = eorigin + '-512 0 0';
					traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
					setorigin(e, trace_endpos);
					entity mb = spawn();
					mb.count = mx.count;
					mb.origin = e.origin;
					mb.angles = e.angles;
					
					e.subordinate = mb;
					self = e;
					self.subordinate.think = multitool_spawner;
					self.subordinate.nextthink = time;
					//
					e.origin = eorigin + '0 512 0';
					traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
					setorigin(e, trace_endpos);
					entity mc = spawn();
					mc.count = mx.count;
					mc.origin = e.origin;
					mc.angles = e.angles;
					
					e.subordinate = mc;
					self = e;
					self.subordinate.think = multitool_spawner;
					self.subordinate.nextthink = time;
					//
					e.origin = eorigin + '0 -512 0';
					traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
					setorigin(e, trace_endpos);
					entity md = spawn();
					md.count = mx.count;
					md.origin = e.origin;
					md.angles = e.angles;
					
					e.subordinate = md;
					self = e;
					self.subordinate.think = multitool_spawner;
					self.subordinate.nextthink = time;
					
					if((mx.count == 501 || mx.count == 502 || random() > 0.5)
					||
					(mx.count == 1521
					|| mx.count == 1531
					|| mx.count == 1536
					|| mx.count == 1537))
					{
						//More
						e.origin = eorigin + '512 512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mma = spawn();
						mma.count = mx.count;
						mma.origin = e.origin;
						mma.angles = e.angles;
					
						e.subordinate = mma;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '-512 -512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmb = spawn();
						mmb.count = mx.count;
						mmb.origin = e.origin;
						mmb.angles = e.angles;
					
						e.subordinate = mmb;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '-512 512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmc = spawn();
						mmc.count = mx.count;
						mmc.origin = e.origin;
						mmc.angles = e.angles;
					
						e.subordinate = mmc;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '512 -512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmd = spawn();
						mmd.count = mx.count;
						mmd.origin = e.origin;
						mmd.angles = e.angles;
					
						e.subordinate = mmd;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//End
					}
					
					//Extra for farm fields
					if((mx.count == 501 || mx.count == 502 || mx.count == 1501) && random() > 0.5)
					{
						e.origin = eorigin + '512 1024 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmb = spawn();
						mmmb.count = mx.count;
						mmmb.origin = e.origin;
						mmmb.angles = e.angles;
					
						e.subordinate = mmmb;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '-512 -1024 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmc = spawn();
						mmmc.count = mx.count;
						mmmc.origin = e.origin;
						mmmc.angles = e.angles;
					
						e.subordinate = mmmc;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '1024 512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmd = spawn();
						mmmd.count = mx.count;
						mmmd.origin = e.origin;
						mmmd.angles = e.angles;
					
						e.subordinate = mmmd;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						///////////////////////////////////////////
						//More
						e.origin = eorigin + '-1024 -512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmma = spawn();
						mmmma.count = mx.count;
						mmmma.origin = e.origin;
						mmmma.angles = e.angles;
					
						e.subordinate = mmmma;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '-512 1024 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmmb = spawn();
						mmmmb.count = mx.count;
						mmmmb.origin = e.origin;
						mmmmb.angles = e.angles;
					
						e.subordinate = mmmmb;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '512 -1024 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmmc = spawn();
						mmmmc.count = mx.count;
						mmmmc.origin = e.origin;
						mmmmc.angles = e.angles;
					
						e.subordinate = mmmmc;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						
						e.origin = eorigin + '1024 -512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmmd = spawn();
						mmmmd.count = mx.count;
						mmmmd.origin = e.origin;
						mmmmd.angles = e.angles;
					
						e.subordinate = mmmmd;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//End
						/////
						e.origin = eorigin + '-1024 512 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmme = spawn();
						mmmme.count = mx.count;
						mmmme.origin = e.origin;
						mmmme.angles = e.angles;
					
						e.subordinate = mmmme;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//End
						////////////////////////////////////////
						//More
						e.origin = eorigin + '-1024 0 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmmma = spawn();
						mmmmma.count = mx.count;
						mmmmma.origin = e.origin;
						mmmmma.angles = e.angles;

						e.subordinate = mmmmma;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '0 1024 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmmmb = spawn();
						mmmmmb.count = mx.count;
						mmmmmb.origin = e.origin;
						mmmmmb.angles = e.angles;
					
						e.subordinate = mmmmmb;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						e.origin = eorigin + '0 -1024 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmmmc = spawn();
						mmmmmc.count = mx.count;
						mmmmmc.origin = e.origin;
						mmmmmc.angles = e.angles;
					
						e.subordinate = mmmmmc;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//
						
						e.origin = eorigin + '1024 0 0';
						traceline(e.origin + '0 0 1024', e.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
						setorigin(e, trace_endpos);
						entity mmmmmd = spawn();
						mmmmmd.count = mx.count;
						mmmmmd.origin = e.origin;
						mmmmmd.angles = e.angles;
					
						e.subordinate = mmmmmd;
						self = e;
						self.subordinate.think = multitool_spawner;
						self.subordinate.nextthink = time;
						//End
					}
					
					//Fin
					self = e;
				}
				remove_safely(self);
			}
			else
			{
			//Start Regular Building
			float scbasetype;
			float scbuildingclass;
			scbuildingclass = 0;
			scbasetype = 0; //For bldtype 5 "cup"/base
			
			e.classname = "building"; //So crossbow bolts behave correctly when striking
			e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
			if (bldtype == 2)
			{
				e.count = 2;
				e.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass; //Want to block so people can build on automatically
				e.model = "models/misc/abandoned_gtower1.bsp";
				e.abdbldcanburn	= 0; //Default, concrete, glass, etc
				//Set extended damagescale; //Will degrade into mostly concrete
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_smallglassoffice;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_smallglassoffice;
			} else if (bldtype == 5)
			{
				e.count = 5;
				e.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc; //Want to block so people can build on automatically
				scbuildingclass = SMI_abdbld_findtype_ent(e, autocvar_g_spawnmiscitemsaround_abdbld_keeptypesearchradius);
				scbuildingclass = SMI_abdbld_blendbuildingclass(scbuildingclass);
				if (autocvar_g_spawnmiscitemsaround_abdbld_keeptyperate &&
				(autocvar_g_spawnmiscitemsaround_abdbld_keeptyperate > random()))
				{
					local float mygreaterradius;
					mygreaterradius = 0;
					
					if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc
					&& scbuildingclass == BUILDINGCLASS_RESIDENTIAL_LC)
					{
						//Here we change building class if too close to UC homes etc
						if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc > random())
						{
							mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc_radius;
							if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc_radius)
							{
								mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
							}
							
							if (SMI_abdbld_findtype_ent_bestnearby(self, mygreaterradius, BUILDINGCLASS_RESIDENTIAL_UC, BUILDINGCLASS_RESIDENTIAL_UC))
							{
								scbuildingclass = BUILDINGCLASS_RESIDENTIAL_MC;	
							}
						}
					} else if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense
					&& scbuildingclass == BUILDINGCLASS_RESIDENTIAL_DENSE)
					{
						//Here we change building class if too close to UC homes etc
						if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense > random())
						{
							mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense_radius;
							if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense_radius)
							{
								mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
							}
							
							if (SMI_abdbld_findtype_ent_bestnearby(self, mygreaterradius, BUILDINGCLASS_RESIDENTIAL_UC, BUILDINGCLASS_RESIDENTIAL_UC))
							{
								scbuildingclass = BUILDINGCLASS_RESIDENTIAL_MC;	
							}
						}	
					} else if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom
					&& scbuildingclass == BUILDINGCLASS_MEDIUMCOMMERCIAL)
					{
						//Here we change building class if too close to UC homes etc
						if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom > random())
						{
							mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom_radius;
							if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom_radius)
							{
								mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
							}
							
							if (SMI_abdbld_findtype_ent_bestnearby(self, mygreaterradius, BUILDINGCLASS_RESIDENTIAL_UC, BUILDINGCLASS_RESIDENTIAL_UC))
							{
								scbuildingclass = BUILDINGCLASS_RESIDENTIAL_MC;	
							}
						}
					} else if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry
					&& scbuildingclass == BUILDINGCLASS_INDUSTRIAL)
					{
						//Here we change building class if too close to UC homes etc
						if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry > random())
						{
							mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry_radius;
							if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry_radius)
							{
								mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
							}
							
							if (SMI_abdbld_findtype_ent_bestnearby(self, mygreaterradius, BUILDINGCLASS_RESIDENTIAL_UC, BUILDINGCLASS_RESIDENTIAL_UC))
							{
								scbuildingclass = BUILDINGCLASS_RESIDENTIAL_MC;	
							}
						}	
					} else if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry
					&& scbuildingclass == BUILDINGCLASS_LIGHTINDUSTRIAL)
					{
						//Here we change building class if too close to UC homes etc
						if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry > random())
						{
							mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry_radius;
							if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry_radius)
							{
								mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
							}
							
							if (SMI_abdbld_findtype_ent_bestnearby(self, mygreaterradius, BUILDINGCLASS_RESIDENTIAL_UC, BUILDINGCLASS_RESIDENTIAL_UC))
							{
								scbuildingclass = BUILDINGCLASS_RESIDENTIAL_MC;	
							}
						}	
					} 
					
					//Now we select a model from a specific class of buildings, for zoning.
					if (scbuildingclass == BUILDINGCLASS_INDUSTRIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_INDUSTRIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_LIGHTINDUSTRIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_LIGHTINDUSTRIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_COMMERCIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_COMMERCIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_MEDIUMCOMMERCIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_MEDIUMCOMMERCIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_LIGHTCOMMERCIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_LIGHTCOMMERCIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_AIRPORT) {
						scbasetype = SMI_AbdBld_SelectSC_Model_AIRPORT(e);
					} else if (scbuildingclass == BUILDINGCLASS_MILITARY) {
						scbasetype = SMI_AbdBld_SelectSC_Model_MILITARY(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_DENSE) { 
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_DENSE(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_LC) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_LC(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_MC) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_MC(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_UC) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_UC(e);
					} else if (scbuildingclass == BUILDINGCLASS_RURALFARM) {
						//Currently don't have any rural farm, so will use random
						scbasetype = SMI_AbdBld_SelectSC_Model_RURALFARM(e);
					} else {
						scbasetype = SMI_AbdBld_SelectSC_Model(e);	
					}
				} else {
							if (autocvar_sv_spawnarraysctilesrectify_noprint < 4) print("Chose not to keep type, random SC Building\n");
					scbasetype = SMI_AbdBld_SelectSC_Model(e);
				}
				precache_model (e.model);
			} else {
				e.count = 1;
				e.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_concrete; //Want to block so people can build on automatically
				e.model = "models/misc/abandoned_tower1.bsp";
				e.abdbldcanburn	= 0; //Default, concrete
				//Set extended damagescale;
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
			}
			e.mins = '-20 -20 0';
			e.maxs = '20 20 20';
			e.solid = SOLID_BSP;
				
			self = e;
			setorigin(self, self.origin);
			if not(vfly) {
			if (onceling == 1) {
				e.angles_z = 180;
				e.mins = '-20 -20 -20';
				e.maxs = '20 20 0';
				
				//tracebox(self.origin + '0 0 2', self.mins, self.maxs, self.origin + '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 2', self.origin + '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 2) {
				//X
				e.angles_x = -90;
				e.mins = '-16 -16 -16';
				e.maxs = '0 16 16';
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin + '10000 0 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '2 0 0', self.origin + '10000 0 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 3) {
				//-X
				e.angles_x = 90;
				e.mins = '0 -16 -16';
				e.maxs = '16 16 16';
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin - '10000 0 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '2 0 0', self.origin - '10000 0 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 4) {
				//Y
				e.angles_z = 90;
				e.mins = '-16 -16 -16';
				e.maxs = '16 0 16';
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 10000 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
        		       	traceline(self.origin + '0 2 0', self.origin + '0 10000 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 5) {
				//-Y
				e.angles_z = -90;
				e.mins = '-16 0 -16';
				e.maxs = '16 16 16';
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 10000 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '0 2 0', self.origin - '0 10000 0', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else {
       				//tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 100', self.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
        			if (bldtype == 5) {
					//print("For sc_tile buildings, raise abit\n");
					trace_endpos_z = trace_endpos_z + autocvar_g_spawnmiscitemsaround_abdbld_baseheight_sc;
					if (autocvar_g_spawnmiscitemsaround_abdbld_baseheightrand_sc)
					if (autocvar_g_spawnmiscitemsaround_abdbld_baseheightrandmax_sc)
					{
						if (autocvar_g_spawnmiscitemsaround_abdbld_baseheightrand_sc > random()) {
							trace_endpos_z = trace_endpos_z + (random() * autocvar_g_spawnmiscitemsaround_abdbld_baseheightrandmax_sc);
						}
					}
				}
				setorigin(self, trace_endpos);
			}
			}
			
			if(allowliquid < 1) {
				if(pointcontents(self.origin) == CONTENT_WATER)
				{
					remove_deletesubordinatewithme_ents(self); //Might not be required at this point, but being careful
					self.abdbldcanburn = 0; //Otherwise the "removed" burns if set, like as if its a ghost...
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					self = previousself;
					return;
				}
				if(allowliquid < 0) {
					//We don't even want to be above water
					traceline(self.origin + '0 0 2', self.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
					if(pointcontents(trace_endpos) == CONTENT_WATER)
					{
						remove_deletesubordinatewithme_ents(self);
						self.abdbldcanburn = 0;
						self.isautoblocktypemultitool = 0;
						self.classname = "";
						self.accptcrrdbldspltr = 0;
						self.abdbldextendedsearchclass = 0;
						remove(self);
						self = previousself;
						return;	
					}
				}
			}
			
			if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose) {
				//If we are too close, return
				if (SMI_abdbld_tooclose_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose))
				{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					print("^xFA0abdbld: Final ORIGIN too close to other blding, returning. -0A^7\n");
					self = previousself;
					return;
				}
			  
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_extendedsearch) {
					//Current extended search classes existing in the code right now
					//are only self.abdbldextendedsearchclass = 2 (1024*2 _more_ than normal tile to center)
					//Office Tower 1 and 2
					//and self.abdbldextendedsearchclass = 1 (1024*1 _more_ than normal tile to center)
					//Medium apartments 1 and 2
					//This way buildings don't run into eachother
					if (self.abdbldextendedsearchclass) {
						//Searching about self.
						if (SMI_abdbld_tooclose_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+(self.abdbldextendedsearchclass*1024)))
						{
						remove_deletesubordinatewithme_ents(self);
						self.abdbldcanburn = 0;
						self.isautoblocktypemultitool = 0;
						self.classname = "";
						self.accptcrrdbldspltr = 0;
						self.abdbldextendedsearchclass = 0;
						remove(self);
						print("^x222abdbld: Final Extended Search self ORIGIN too close to other blding, returning. -A^7\n");
						self = previousself;
						return;
						}
						
						//Now for huge buildings far away origin
						if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+(self.abdbldextendedsearchclass*1024)+2048, 2))
						{
						remove_deletesubordinatewithme_ents(self);
						self.abdbldcanburn = 0;
						self.isautoblocktypemultitool = 0;
						self.classname = "";
						self.accptcrrdbldspltr = 0;
						self.abdbldextendedsearchclass = 0;
						remove(self);
						print("^x555abdbld: Final EXTENDED SEARCH self+other ORIGIN too close to other blding, returning. -B^7\n");
						self = previousself;
						return;
						}
						
						//Now big buildings somewhat far away origin
						if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+(self.abdbldextendedsearchclass*1024)+1024, 1))
						{
						remove_deletesubordinatewithme_ents(self);
						self.abdbldcanburn = 0;
						self.isautoblocktypemultitool = 0;
						self.classname = "";
						self.accptcrrdbldspltr = 0;
						self.abdbldextendedsearchclass = 0;
						remove(self);
						print("^x999abdbld: Final EXTENDED SEARCH self+other ORIGIN too close to other blding, returning. -C^7\n");
						self = previousself;
						return;
						}
					}
					
					if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+2048, 2))
					{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					print("^xAA0abdbld: Final EXTENDED SEARCH ORIGIN too close to other blding, returning. -D^7\n");
					self = previousself;
					return;
					}
					
					if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+1024, 1))
					{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					print("^xFF0abdbld: Final EXTENDED SEARCH ORIGIN too close to other blding, returning. -E^7\n");
					self = previousself;
					return;
					}
				}
			}
			
			float didangles2norm;
			didangles2norm = 0;
			if (autocvar_g_spawnmiscitemsaround_abdbld_angles2norm) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_angles2norm > random()) {
					if (!onceling && !vfly) {
						tracebox(e.origin + '0 0 512', '-128 -128 0', '128 128 0',  e.origin - '0 0 1024', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), e);
					}
					
					print(vtos(trace_plane_normal), "tplane\n");
					
					if (trace_plane_normal_x == 0 && trace_plane_normal_y == 0
					&& (trace_plane_normal_z == 0 || trace_plane_normal_z == 1))
					{
						//Land is flat, do nothing
					} else {
						// now set angles_x so that the bsp model points parallel to the surface
						// (Notice no negation on the third statement below)
						// (This is likely due to Quake's different handling of brush(bsp) vs model models
						// thanks Divverent, this code is from the bugrigs stuff in cl_physics.qc mostly
						e.angles = vectoangles(
							'1 0 0' * v_forward_x * trace_plane_normal_z
							+
							'0 1 0' * v_forward_y * trace_plane_normal_z
							+
							'0 0 1' * (v_forward_x * trace_plane_normal_x + v_forward_y * trace_plane_normal_y)
							);
						
						didangles2norm = 1;
					}
				}
			}
			
			
			local float scupdatebase;
			local float scupdatebaserank;
			scupdatebase = 0;
			scupdatebaserank = 0;
			if (self.building_class == BUILDINGCLASS_LIGHTCOMMERCIAL) {
				local float mycheckedbtype;
				scupdatebase = BUILDINGCLASS_LIGHTCOMMERCIAL;
				mycheckedbtype = 0;
				mycheckedbtype = SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_MC, BUILDINGCLASS_RESIDENTIAL_UC);
				if (mycheckedbtype == 0) {
					//Otherwise check further for just middleclass.
					mycheckedbtype = SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_mc, BUILDINGCLASS_RESIDENTIAL_MC, BUILDINGCLASS_RESIDENTIAL_MC);
				}
				
				if (mycheckedbtype == BUILDINGCLASS_RESIDENTIAL_UC) {
					scbasetype = 401;
					scupdatebaserank = BUILDINGCLASS_RESIDENTIAL_UC;
					SMI_abdbld_addfoliage_to(1, self);
				} else if (mycheckedbtype == BUILDINGCLASS_RESIDENTIAL_MC) {
					scbasetype = 201;
					scupdatebaserank = BUILDINGCLASS_RESIDENTIAL_MC;
					
					SMI_abdbld_addfoliage_to(2, self);
				}
			} else if (self.building_class == BUILDINGCLASS_RESIDENTIAL_MC) {
				//We are searching for scbasecups for light commercial buildings, we will change to an _mc style unless we find one that is better: _uc, there allready, in that case we will do nothing
				SMI_abdbld_scupdatebase(BUILDINGCLASS_LIGHTCOMMERCIAL, self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_mc, BUILDINGCLASS_RESIDENTIAL_MC, 201, BUILDINGCLASS_RESIDENTIAL_UC);
			
				if (SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_UC, BUILDINGCLASS_RESIDENTIAL_UC))
				{
					SMI_abdbld_addfoliage_to(3, self);
				} else if (SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_LC, BUILDINGCLASS_RESIDENTIAL_LC))
				{
					SMI_abdbld_addfoliage_to(5, self);
				} else {
					SMI_abdbld_addfoliage_to(4, self); //Some
				}
			} else if (self.building_class == BUILDINGCLASS_RESIDENTIAL_UC) {
				SMI_abdbld_scupdatebase(BUILDINGCLASS_LIGHTCOMMERCIAL, self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_UC, 401, BUILDINGCLASS_RESIDENTIAL_UC);
				local float mygreaterradius;
				if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc > random())
				{
					mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc_radius;
					if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lc_radius)
					{
						mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
					}
							
					SMI_abdbld_replace_lc_with_mc(self, mygreaterradius, BUILDINGCLASS_RESIDENTIAL_LC);
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense > random())
				{
					mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense_radius;
					if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_dense_radius)
					{
						mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
					}
					
					SMI_abdbld_replace_lc_with_mc(self, mygreaterradius, BUILDINGCLASS_RESIDENTIAL_DENSE);
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom > random())
				{
					mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom_radius;
					if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_mcom_radius)
					{
						mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
					}
							
					SMI_abdbld_replace_lc_with_mc(self, mygreaterradius, BUILDINGCLASS_MEDIUMCOMMERCIAL);
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry > random())
				{
					mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry_radius;
					if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_hindustry_radius)
					{
						mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
					}
					
					SMI_abdbld_replace_lc_with_mc(self, mygreaterradius, BUILDINGCLASS_INDUSTRIAL);
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry > random())
				{
					mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry_radius;
					if (autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius > autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_lindustry_radius)
					{
						mygreaterradius = autocvar_g_spawnmiscitemsaround_abdbld_border_uc_no_radius;
					}
							
					SMI_abdbld_replace_lc_with_mc(self, mygreaterradius, BUILDINGCLASS_LIGHTINDUSTRIAL);
				}

			} else if (self.building_class == BUILDINGCLASS_RESIDENTIAL_LC) {
				SMI_abdbld_addfoliage_to(6, self);
			} else if (self.building_class == BUILDINGCLASS_RURALFARM) {
				SMI_abdbld_addfoliage_to(7, self);
			}
			
			setmodel(self, self.model); //Had to add so lodmodels would "work"
			//gamemodel doesn't work for this, just clientmodel
                        //spawnfunc_misc_clientmodel();
			if (autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight) {
				//If you do prefer the lightmapped effect
				spawnfunc_func_clientwall();
			} else {
				spawnfunc_func_clientwall_dlight(); //Sets solid right away, otherwise similar to clientmodel
                        }
			self.solid = SOLID_BSP;
                        self.movetype = MOVETYPE_PUSH;
			
			self.event_damage       = SMI_abdbld_damage;
			self.isabdbld = 1;
    			self.takedamage         = DAMAGE_YES;
    			//self.deadflag           = DEAD_NO;
    			self.think              = func_null;
			SMI_AbdBld_SpawnItems(self); //If any set in self.smi_abdbld_spawnitems (set when model is set)
			
			if (bldtype == 2)
    			{
				self.vehicle_health =  95000;
			} else if (bldtype == 5)
    			{
				self.vehicle_health =  75000;
				if (scbasetype) {
					SMI_spawn_abdbld_scbase(self.origin, scbasetype, self.angles, scupdatebase, scupdatebaserank);
				}
				
				if (autocvar_g_spawnmiscitemsaround_abdbld_useretainingwall_sc)
				if (!didangles2norm) {
				  if (scbasetype > 9 && scbasetype < 100) {
				  	//Don't have retaining walls for these types yet
				  } else if (scbasetype == 6 || scbasetype == 6001 || scbasetype == 6002) {
				  	//These have their own long supports themselves
				  } else {
				  	local float myzchange;
				  	myzchange = SMI_abdbld_checkfourpointstoolow (self, self.origin, 1024, 512);
					//Returns if Z difference is greater than 512 
					
					if (myzchange) {
						//If height differential is too great (more than 512), we need a retaining wall
						//-10000 is retaining wall
						if (myzchange > 2560) {
							SMI_spawn_abdbld_scbase(self.origin, -10000, self.angles, 0, 0);
						} else if (myzchange > 1152) {
							SMI_spawn_abdbld_scbase(self.origin, -10001, self.angles, 0, 0);
						} else {
							SMI_spawn_abdbld_scbase(self.origin, -10002, self.angles, 0, 0);
						}
					}
				  }
				}
			} else {
				self.vehicle_health = 100000;
			}
			
			//print(ftos(e.count), " e count\n");
			//print(ftos(self.count), " self count\n");
			//End Regular Building		
			}
			self = previousself;
}



.float abdbld_baseheightrand_sc;
.float abdbld_baseheightrandmax_sc;
.float abdbld_baseheight_sc;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Map spawned buildings

//This is for spawning a building from a map rather than generation
//Similar to SMI_spawn_abdbld but not exactly
void spawnsctilebuildingfrommap (entity e, float scbuildingclass)
{
			//So we can identify this in a spawnarray
			//float my_spawnarray_id = e.spawnarray_id;
			//float my_spawnarray_id_lvl = e.spawnarray_id_lvl;
			//float my_spawnarray_id_row = e.spawnarray_id_row;
			//float my_spawnarray_id_col = e.spawnarray_id_col;
			//float my_spawnarray_id_membertype = e.spawnarray_id_membertype;
			//float my_spawnarray_id_generation = e.spawnarray_id_generation;
			//unnecessary
			
			float eoldspawnflags;
			float hasmodel;
			float buildingisfloating;
			float buildingignoretooclose;
			float buildingboxesoverlapcheck;
			float buildingnooversize;
			float buildingretryifoversized;
			float buildingretryiffail;
			float buildingretryiffail_max;
			float buildingnoscbase;
			float buildingnoextras;
			float buildingnoitems;
			float scbasetype;
			buildingretryiffail_max = 10;
			entity previousself = self;
			hasmodel = 0;
			buildingnoscbase = 0;
			buildingisfloating = 0;
			buildingignoretooclose = 0;
			buildingboxesoverlapcheck = 0;
			buildingnooversize = 0;
			buildingretryifoversized = 0;
			buildingretryiffail = 0;
			buildingnoextras = 0;
			buildingnoitems = 0;
			scbasetype = 0; //For bldtype 5 "cup"/base
			
			if (autocvar_sv_spawnarraysctilesrectify_noprint < 2) print("\n\n***\n",ftos(e.spawnflags),"=Spawnflags\n***\n\n");
						
			if (e.model != "") hasmodel = 1;
			if (e.spawnflags & 1) buildingisfloating = 1;
			if (e.spawnflags & 2) buildingignoretooclose = 1;
			if (e.spawnflags & 4) buildingboxesoverlapcheck = 1;
			if (e.spawnflags & 8) buildingnooversize = 1;
			if (e.spawnflags & 16) buildingretryifoversized = 1;
			if (e.spawnflags & 32) buildingnoscbase = 1;
			if (e.spawnflags & 64) buildingnoextras = 1;
			if (e.spawnflags & 128) buildingnoitems = 1;
			
			//if (buildingisfloating && buildingignoretooclose && buildingnooversize && buildingretryifoversized)
			//{
			//	print("no cup base\n");
			// 	buildingnoscbase = 1; //test
			//}
			
			if (e.spawnflags & 2) e.spawnflags &~= 2;	
			if (e.spawnflags & 4) e.spawnflags &~= 4;	
			if (e.spawnflags & 8) e.spawnflags &~= 8;	
			if (e.spawnflags & 16) e.spawnflags &~= 16;	
			if (e.spawnflags & 32) {
				e.spawnflags &~= 32;
				if (autocvar_sv_spawnarraysctilesrectify_noprint < 2) print(etos(e)," NoSCBase\n");
			}		
			if (e.spawnflags & 64) { 
				e.spawnflags &~= 64;
				if (autocvar_sv_spawnarraysctilesrectify_noprint < 2) print(etos(e)," NoExtras\n");
			}		
			if (e.spawnflags & 128) {
				e.spawnflags &~= 128;
				if (autocvar_sv_spawnarraysctilesrectify_noprint < 2) print(etos(e)," NoItems\n");
			}	
			
			eoldspawnflags = e.spawnflags;

:BUILDINGRETRYIFFAIL
			
			e.classname = "building"; //So crossbow bolts behave correctly when striking
			e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
			
			
				e.count = 5;
				e.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_sc; //Want to block so people can build on automatically
				
				if (hasmodel) {
					//Do nothing.
				} else if (scbuildingclass) {
					
					
					//Now we select a model from a specific class of buildings, for zoning.
					if (scbuildingclass == BUILDINGCLASS_INDUSTRIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_INDUSTRIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_LIGHTINDUSTRIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_LIGHTINDUSTRIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_COMMERCIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_COMMERCIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_MEDIUMCOMMERCIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_MEDIUMCOMMERCIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_LIGHTCOMMERCIAL) {
						scbasetype = SMI_AbdBld_SelectSC_Model_LIGHTCOMMERCIAL(e);
					} else if (scbuildingclass == BUILDINGCLASS_AIRPORT) {
						scbasetype = SMI_AbdBld_SelectSC_Model_AIRPORT(e);
					} else if (scbuildingclass == BUILDINGCLASS_MILITARY) {
						scbasetype = SMI_AbdBld_SelectSC_Model_MILITARY(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_DENSE) { 
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_DENSE(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_LC) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_LC(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_MC) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_MC(e);
					} else if (scbuildingclass == BUILDINGCLASS_RESIDENTIAL_UC) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RESIDENTIAL_UC(e);
					} else if (scbuildingclass == BUILDINGCLASS_RURALFARM) {
						scbasetype = SMI_AbdBld_SelectSC_Model_RURALFARM(e);
					//SPECIFIC
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_NARROWROAD_STRAIGHT_QUADRICE) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_NARROWROAD_STRAIGHT_QUADRICE(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_NARROWROAD_CROSS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_NARROWROAD_CROSS(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_THINROAD_STRAIGHT_TWICE) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_THINROAD_STRAIGHT_TWICE(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_THINROAD_CROSS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_THINROAD_CROSS(e);	
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_THINROAD_NARROWROAD_CROSS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_THINROAD_NARROWROAD_CROSS(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_ROADWIDE_STRAIGHT) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_STRAIGHT(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_ROADWIDE_CROSS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_CROSS(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_ROADWIDE_THINROAD_CROSS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_THINROAD_CROSS(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_ROADWIDE_NARROWROAD_CROSS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_ROADWIDE_NARROWROAD_CROSS(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_PARKWAY3XW_STRAIGHT_HALF) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_STRAIGHT_HALF(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_PARKWAY3XW_INTERCHANGE) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_INTERCHANGE(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_PARKWAY3XW_THINROAD_VS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_THINROAD_VS(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_PARKWAY3XW_NARROWROAD_VS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_NARROWROAD_VS(e);
					} else if (scbuildingclass == BUILDINGSPCFC_ROAD_PARKWAY3XW_ROADWIDE_VS) {
						scbasetype = SMI_AbdBld_SelectSC_Model_ROAD_PARKWAY3XW_ROADWIDE_VS(e);
					//ENDSPECIFIC
					} else {
						scbasetype = SMI_AbdBld_SelectSC_Model(e);	
					}
				} else {
							if (autocvar_sv_spawnarraysctilesrectify_noprint < 4) print("Chose not to keep type, random SC Building\n");
					scbasetype = SMI_AbdBld_SelectSC_Model(e);
				}
				precache_model (e.model);
			
			
			e.mins = '-20 -20 0';
			e.maxs = '20 20 20';
			e.solid = SOLID_BSP;
				
			self = e;
			setorigin(self, self.origin);
			
			if (buildingnooversize) {
				if (self.abdbldextendedsearchclass)
				{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					if (buildingretryifoversized) {
						if (hasmodel) {
							//Model was set allready
							print("^xAFAabdbld: No oversize, but hasmodel is set!^7\n");
						} else if (buildingretryiffail < buildingretryiffail_max) {
							local entity newe;
							
							buildingretryiffail++;
							
							scbasetype = 0;
							self.model = "";
							print("^xCF7abdbld: No oversize, trying AGAIN^7\n");
							
							newe = spawn();	
							newe.model = "";						
							newe.spawnflags = eoldspawnflags;
							newe.origin = self.origin;
							newe.angles = self.angles;
							newe.v_angle = self.v_angle;
							newe.colormod = self.colormod;
							newe.colormap = self.colormap;
							newe.team = self.team;
							
							newe.abdbld_baseheightrand_sc = self.abdbld_baseheightrand_sc;
							newe.abdbld_baseheightrandmax_sc = self.abdbld_baseheightrand_sc;
							newe.abdbld_baseheight_sc = self.abdbld_baseheight_sc;
							
							remove(self);
							self = previousself; //Important

							e = newe;
							
							goto BUILDINGRETRYIFFAIL;
						} else {
							print("^xAFFabdbld: No oversize, Exausted retrys^7\n");
						}
					}
					remove(self);
					print("^xFF0abdbld: No oversize, returning^7\n");
					self = previousself;
					return;
				}
			}
			
			if (!buildingisfloating) {
       				//tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 100', self.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
        			
					//print("For sc_tile buildings, raise abit\n");
					trace_endpos_z = trace_endpos_z + autocvar_g_spawnmiscitemsaround_abdbld_baseheight_sc;
					if (autocvar_g_spawnmiscitemsaround_abdbld_baseheightrand_sc)
					if (autocvar_g_spawnmiscitemsaround_abdbld_baseheightrandmax_sc)
					{
						if (autocvar_g_spawnmiscitemsaround_abdbld_baseheightrand_sc > random()) {
							trace_endpos_z = trace_endpos_z + (random() * autocvar_g_spawnmiscitemsaround_abdbld_baseheightrandmax_sc);
						}
					}
				
				setorigin(self, trace_endpos);
			} else {
						if (autocvar_sv_spawnarraysctilesrectify_noprint < 2) print("building is floating\n");
				//Now... if the building is just floating... we shouldn't have to do anything.
				//That is what we might think, and we would be wrong
				//For some reason this is necessary:
				//traceline(self.origin + '0 0 1', self.origin - '0 0 1', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				//Let's try this too:
				traceline(self.origin + '0 0 0.1', self.origin, G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
				
				//////(Note, the spawnfunc_func_clientwallnodroptofloor_dlight(), may have alleviated the need for this traceline, perhaps)
				
				//You might think "hey, why not just set the origin, or the trace_endpos if need be instead?"
				//Sorry, you would be thinking wrong
				//Doesntwork//
				//////trace_endpos = self.origin;
				//////setorigin(self, trace_endpos);
				//Building ends up at the bottom of wherever
			}
			
			
			//////////////////////////
			//If it's self set, (customized) add
			if (self.abdbld_baseheight_sc
			|| self.abdbld_baseheightrand_sc
			|| self.abdbld_baseheightrandmax_sc) {
					//Self set:
					trace_endpos_z = trace_endpos_z + self.abdbld_baseheight_sc;
					if (self.abdbld_baseheightrand_sc)
					if (self.abdbld_baseheightrandmax_sc)
					{
						if (self.abdbld_baseheightrand_sc > random()) {
							trace_endpos_z = trace_endpos_z + (random() * self.abdbld_baseheightrandmax_sc);
						}
					}
				setorigin(self, trace_endpos);
			}
			//If it's self set, add
			//////////////////////////
			
			
			//Not efficent, should actually do this stuff at the end of all the spawning
			//However then others wouldn't have a change to take its place...
			if (buildingboxesoverlapcheck) {
				if (SMI_abdbld_boxesoverlap_ent(self, 1024, 1))
				{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					print("^xF00abdbld: Boxes overlap other blding, returning^7\n");
					self = previousself;
					return;
				}
			}

			
			
			if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose && !buildingignoretooclose) {
				//If we are too close, return
				if (SMI_abdbld_tooclose_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose))
				{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					print("^x9F0abdbld: Final ORIGIN too close to other blding, returning. -AA^7\n");
					self = previousself;
					return;
				}
			  
				if (autocvar_g_spawnmiscitemsaround_abdbld_tooclose_extendedsearch) {
					//Current extended search classes existing in the code right now
					//are only self.abdbldextendedsearchclass = 2 (1024*2 _more_ than normal tile to center)
					//Office Tower 1 and 2
					//and self.abdbldextendedsearchclass = 1 (1024*1 _more_ than normal tile to center)
					//Medium apartments 1 and 2
					//This way buildings don't run into eachother
					if (self.abdbldextendedsearchclass) {
						//Searching about self.
						if (SMI_abdbld_tooclose_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+(self.abdbldextendedsearchclass*1024)))
						{
						remove_deletesubordinatewithme_ents(self);
						self.abdbldcanburn = 0;
						self.isautoblocktypemultitool = 0;
						self.classname = "";
						self.accptcrrdbldspltr = 0;
						self.abdbldextendedsearchclass = 0;
						remove(self);
						print("^xF09abdbld: Final Extended Search self ORIGIN too close to other blding, returning. -AB^7\n");
						self = previousself;
						return;
						}
						
						//Now for huge buildings far away origin
						if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+(self.abdbldextendedsearchclass*1024)+2048, 2))
						{
						remove_deletesubordinatewithme_ents(self);
						self.abdbldcanburn = 0;
						self.isautoblocktypemultitool = 0;
						self.classname = "";
						self.accptcrrdbldspltr = 0;
						self.abdbldextendedsearchclass = 0;
						remove(self);
						print("^xFA0abdbld: Final EXTENDED SEARCH self+other ORIGIN too close to other blding, returning. -AC^7\n");
						self = previousself;
						return;
						}
						
						//Now big buildings somewhat far away origin
						if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+(self.abdbldextendedsearchclass*1024)+1024, 1))
						{
						remove_deletesubordinatewithme_ents(self);
						self.abdbldcanburn = 0;
						self.isautoblocktypemultitool = 0;
						self.classname = "";
						self.accptcrrdbldspltr = 0;
						self.abdbldextendedsearchclass = 0;
						remove(self);
						print("^xFFFabdbld: Final EXTENDED SEARCH self+other ORIGIN too close to other blding, returning. -AD^7\n");
						self = previousself;
						return;
						}
					}
					
					if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+2048, 2))
					{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					print("abdbld: Final EXTENDED SEARCH ORIGIN too close to other blding, returning. -AE\n");
					self = previousself;
					return;
					}
					
					if (SMI_abdbld_toocloseextended_ent(self, autocvar_g_spawnmiscitemsaround_abdbld_tooclose+1024, 1))
					{
					remove_deletesubordinatewithme_ents(self);
					self.abdbldcanburn = 0;
					self.isautoblocktypemultitool = 0;
					self.classname = "";
					self.accptcrrdbldspltr = 0;
					self.abdbldextendedsearchclass = 0;
					remove(self);
					print("abdbld: Final EXTENDED SEARCH ORIGIN too close to other blding, returning. -AF\n");
					self = previousself;
					return;
					}
				}
			}
			
			
			local float scupdatebase;
			local float scupdatebaserank;
			scupdatebase = 0;
			scupdatebaserank = 0;
			if (self.building_class == BUILDINGCLASS_LIGHTCOMMERCIAL) {
				local float mycheckedbtype;
				scupdatebase = BUILDINGCLASS_LIGHTCOMMERCIAL;
				mycheckedbtype = 0;
				mycheckedbtype = SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_MC, BUILDINGCLASS_RESIDENTIAL_UC);
				if (mycheckedbtype == 0) {
					//Otherwise check further for just middleclass.
					mycheckedbtype = SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_mc, BUILDINGCLASS_RESIDENTIAL_MC, BUILDINGCLASS_RESIDENTIAL_MC);
				}
				
				if (mycheckedbtype == BUILDINGCLASS_RESIDENTIAL_UC) {
					scbasetype = 401;
					scupdatebaserank = BUILDINGCLASS_RESIDENTIAL_UC;
					
					if (buildingnoextras) {
						//No extras, to save entities
					} else {
						SMI_abdbld_addfoliage_to(1, self);
					}
				} else if (mycheckedbtype == BUILDINGCLASS_RESIDENTIAL_MC) {
					scbasetype = 201;
					scupdatebaserank = BUILDINGCLASS_RESIDENTIAL_MC;
					
					if (buildingnoextras) {
						//No extras, to save entities
					} else {
						SMI_abdbld_addfoliage_to(2, self);
					}
				}
			} else if (self.building_class == BUILDINGCLASS_RESIDENTIAL_MC) {
				if (buildingnoitems && buildingnoextras && buildingnoitems) {
					//No extras, to save entities
				} else {
					//We are searching for scbasecups for light commercial buildings, we will change to an _mc style unless we find one that is better: _uc, there allready, in that case we will do nothing
					SMI_abdbld_scupdatebase(BUILDINGCLASS_LIGHTCOMMERCIAL, self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_mc, BUILDINGCLASS_RESIDENTIAL_MC, 201, BUILDINGCLASS_RESIDENTIAL_UC);
				}
				
				if (buildingnoextras) {
					//No extras, to save entities
				} else {
					if (SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_UC, BUILDINGCLASS_RESIDENTIAL_UC))
					{
						SMI_abdbld_addfoliage_to(3, self);
					} else if (SMI_abdbld_findtype_ent_bestnearby(self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_LC, BUILDINGCLASS_RESIDENTIAL_LC))
					{
						SMI_abdbld_addfoliage_to(5, self);
					} else {
						SMI_abdbld_addfoliage_to(4, self); //Some
					}
				}
			} else if (self.building_class == BUILDINGCLASS_RESIDENTIAL_UC) {
				if (buildingnoitems && buildingnoextras && buildingnoitems) {
					//No extras, to save entities
				} else {
					SMI_abdbld_scupdatebase(BUILDINGCLASS_LIGHTCOMMERCIAL, self, autocvar_g_spawnmiscitemsaround_abdbld_bestnearsearchradius_ucmc, BUILDINGCLASS_RESIDENTIAL_UC, 401, BUILDINGCLASS_RESIDENTIAL_UC);
				}
			} else if (self.building_class == BUILDINGCLASS_RESIDENTIAL_LC) {
				if (buildingnoextras) {
					//No extras, to save entities
				} else {
					SMI_abdbld_addfoliage_to(6, self);
				}
			} else if (self.building_class == BUILDINGCLASS_RURALFARM) {
				if (buildingnoextras) {
					//No extras, to save entities
				} else {
					SMI_abdbld_addfoliage_to(7, self);
				}
			}
			
			setmodel(self, self.model); //Had to add so lodmodels would "work"
			//gamemodel doesn't work for this, just clientmodel
                        //spawnfunc_misc_clientmodel();
			if (!buildingisfloating) {
				if (autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight) {
					//If you do prefer the lightmapped effect
					spawnfunc_func_clientwall();
				} else {
					spawnfunc_func_clientwall_dlight(); //Sets solid right away, otherwise similar to clientmodel
                        	}
			} else {
				if (autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight) {
					//If you do prefer the lightmapped effect
					spawnfunc_func_clientwallnodroptofloor();
				} else {
					spawnfunc_func_clientwallnodroptofloor_dlight(); //Sets solid right away, otherwise similar to clientmodel
				}
			}
			self.solid = SOLID_BSP;
                        self.movetype = MOVETYPE_PUSH;
			
			self.event_damage       = SMI_abdbld_damage;
			self.isabdbld = 1;
    			self.takedamage         = DAMAGE_YES;
    			//self.deadflag           = DEAD_NO;
    			self.think              = func_null;
			//
			if (self.spawnarray_id && !autocvar_sv_spawnarraysctilesrectify_noprint) {
			print("^xAFF*****************************************************^7\n");
			print("^xAFFabdbld: sc_tiles spawnarraycoords and id ***START*** ^7\n");
			print("^xAFF  spawnarray_id ^7", ftos(self.spawnarray_id), "\n");
			print("^xAFF  lvl ^7", ftos(self.spawnarray_id_lvl), "\n");
			print("^xAFF  row ^7", ftos(self.spawnarray_id_row), "\n");
			print("^xAFF  col ^7", ftos(self.spawnarray_id_col), "\n\n");
			print("^xAFF  membertype ^7", ftos(self.spawnarray_id_membertype), "\n");
			print("^xAFF  generation ^7", ftos(self.spawnarray_id_generation), "\n");
			if (self.abdbldextendedsearchclass) {
			print("^xAFF  abd^xFAAbld^xAFFextended^xFAAsearch^xAFFclass ^xF00", ftos(self.abdbldextendedsearchclass), "^7\n");
			} else {
			print("^xAFF  abdbldextendedsearchclass ^7", ftos(self.abdbldextendedsearchclass), "\n");
			}
			print("^xAFFabdbld: sc_tiles spawnarraycoords and id ***END*** ^7\n");
			print("^xAFF*****************************************************^7\n");
			}
			
			
			if (buildingnoitems) {
				//No items, to save entities
			} else {
				SMI_AbdBld_SpawnItems(self); //If any set in self.smi_abdbld_spawnitems (set when model is set)
			}
			
				self.vehicle_health =  75000;
				if (buildingnoscbase) {
					//No cupbase
				} else if (scbasetype) {
					SMI_spawn_abdbld_scbase(self.origin, scbasetype, self.angles, scupdatebase, scupdatebaserank);
				}
				
				if (buildingnoscbase) {
					//No cupbase
				} else if (autocvar_g_spawnmiscitemsaround_abdbld_useretainingwall_sc)
				{
				  if (scbasetype > 9 && scbasetype < 100) {
				  	//Don't have retaining walls for these types yet
				  } else if (scbasetype == 6 || scbasetype == 6001 || scbasetype == 6002) {
				  	//These have their own long supports themselves
				  } else {
				  	local float myzchange;
				  	myzchange = SMI_abdbld_checkfourpointstoolow (self, self.origin, 1024, 512);
					//Returns if Z difference is greater than 512 
					
					if (myzchange) {
						//If height differential is too great (more than 512), we need a retaining wall
						//-10000 is retaining wall
						if (myzchange > 2560) {
							SMI_spawn_abdbld_scbase(self.origin, -10000, self.angles, 0, 0);
						} else if (myzchange > 1152) {
							SMI_spawn_abdbld_scbase(self.origin, -10001, self.angles, 0, 0);
						} else {
							SMI_spawn_abdbld_scbase(self.origin, -10002, self.angles, 0, 0);
						}
					}
				  }
				}
			
			
			//print(ftos(e.count), " e count\n");
			//print(ftos(self.count), " self count\n");
			//End Regular Building		

			self = previousself;
}


void spawnabandonedbuildingfrommap (entity e, float bldtype)
{
			float buildingisfloating;
			entity previousself = self;
			buildingisfloating = 0;
			
			if (e.spawnflags & 1) buildingisfloating = 1;
			
			else
			{
			//Start Regular Building
			float scbasetype;
			float scbuildingclass;
			scbuildingclass = 0;
			scbasetype = 0; //For bldtype 5 "cup"/base
			
			e.classname = "building"; //So crossbow bolts behave correctly when striking
			e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
			if (bldtype == 2)
			{
				e.count = 2;
				e.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_glass; //Want to block so people can build on automatically
				e.model = "models/misc/abandoned_gtower1.bsp";
				e.abdbldcanburn	= 0; //Default, concrete, glass, etc
				//Set extended damagescale; //Will degrade into mostly concrete
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_smallglassoffice;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_smallglassoffice;
			} else {
				e.count = 1;
				e.isautoblocktypemultitool = autocvar_g_spawnmiscitemsaround_abdbld_autoblocktype_concrete; //Want to block so people can build on automatically
				e.model = "models/misc/abandoned_tower1.bsp";
				e.abdbldcanburn	= 0; //Default, concrete
				//Set extended damagescale;
				e.abdbld_damagescale_bulldozer = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_bulldozer_concrete;
				e.abdbld_damagescale_normalexplosive = autocvar_g_spawnmiscitemsaround_abdbld_damagescale_explosive_concrete;
			}
			
			precache_model (e.model);
			
			e.mins = '-20 -20 0';
			e.maxs = '20 20 20';
			e.solid = SOLID_BSP;
				
			self = e;
			setorigin(self, self.origin);
			if not(buildingisfloating) {
       				//tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 100', self.origin - '0 0 10000', G_SPAWNABDBLD_FORCE_TRACE_MOVETYPE(), self);
        			
				setorigin(self, trace_endpos);
			}
			
			
			
			setmodel(self, self.model); //Had to add so lodmodels would "work"
			//gamemodel doesn't work for this, just clientmodel
                        //spawnfunc_misc_clientmodel();
			if (autocvar_g_spawnmiscitemsaround_abdbld_noforcedlight) {
				//If you do prefer the lightmapped effect
				spawnfunc_func_clientwall();
			} else {
				spawnfunc_func_clientwall_dlight(); //Sets solid right away, otherwise similar to clientmodel
                        }
			self.solid = SOLID_BSP;
                        self.movetype = MOVETYPE_PUSH;
			
			self.event_damage       = SMI_abdbld_damage;
			self.isabdbld = 1;
    			self.takedamage         = DAMAGE_YES;
    			//self.deadflag           = DEAD_NO;
    			self.think              = func_null;
			SMI_AbdBld_SpawnItems(self); //If any set in self.smi_abdbld_spawnitems (set when model is set)
			
			if (bldtype == 2)
    			{
				self.vehicle_health =  95000;
			} else {
				self.vehicle_health = 100000;
			}
			
			//print(ftos(e.count), " e count\n");
			//print(ftos(self.count), " self count\n");
			//End Regular Building		
			}
			self = previousself;
}

void spawnfunc_building_abandoned_concrete()
{
	spawnabandonedbuildingfrommap(self, 0);
}

void spawnfunc_building_abandoned_glass()
{
	spawnabandonedbuildingfrommap(self, 2);
}

.float sc_keeptyperate;
.float sc_keeptypesearchradius;
.float sc_keeptypeignorerate;
.float sc_kt_ignoretanktrapsetc;
.float sc_keeptypeignoresbldgclass;

//The spawnfuncs:
void spawnfunc_building_sctiles()
{
	local float myignoretanktrapsetc;
	
	if (!self.count || self.sc_keeptypeignoresbldgclass) {
		if (self.sc_keeptyperate && 
		(self.sc_keeptyperate > random()))
		{
			myignoretanktrapsetc = autocvar_g_spawnmiscitemsaround_abdbld_tooclose_ignoretanktrapsetc;
		
			if (self.sc_kt_ignoretanktrapsetc < 0) {
				myignoretanktrapsetc = 0; //-1 etc
			} else if (self.sc_kt_ignoretanktrapsetc) {
				myignoretanktrapsetc = self.sc_kt_ignoretanktrapsetc;
			}
		
			self.count = SMI_abdbld_findtype_forbuildingsctiles_ent
			(self,
			self.sc_keeptypesearchradius,
			self.count,
			self.sc_keeptypeignorerate,
			myignoretanktrapsetc); //Returns self.count if fails
		}

	}
	spawnsctilebuildingfrommap(self, self.count);
}


void spawnfunc_building_sctiles_random()
{
	spawnsctilebuildingfrommap(self, 0);
}


void spawnfunc_building_sctiles_industrial()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_INDUSTRIAL);
}


void spawnfunc_building_sctiles_lightindustrial()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_LIGHTINDUSTRIAL);
}


void spawnfunc_building_sctiles_commercial()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_COMMERCIAL);
}


void spawnfunc_building_sctiles_mediumcommercial()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_MEDIUMCOMMERCIAL);
}


void spawnfunc_building_sctiles_lightcommercial()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_LIGHTCOMMERCIAL);
}


void spawnfunc_building_sctiles_airport()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_AIRPORT);
}


void spawnfunc_building_sctiles_military()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_MILITARY);
}


void spawnfunc_building_sctiles_residential_dense()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_RESIDENTIAL_DENSE);
}


void spawnfunc_building_sctiles_residential_lc()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_RESIDENTIAL_LC);
}


void spawnfunc_building_sctiles_residential_mc()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_RESIDENTIAL_MC);
}


void spawnfunc_building_sctiles_residential_uc()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_RESIDENTIAL_UC);
}


void spawnfunc_building_sctiles_ruralfarm()
{
	spawnsctilebuildingfrommap(self, BUILDINGCLASS_RURALFARM);
}

//Specific models:
void spawnfunc_road_sctiles_narrowroad_straight_quadrice()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_NARROWROAD_STRAIGHT_QUADRICE);
}
void spawnfunc_road_sctiles_narrowroad_straight_quadrice_90() { self.angles_y = self.angles_y - 90; spawnfunc_road_sctiles_narrowroad_straight_quadrice(); }

void spawnfunc_road_sctiles_narrowroad_cross()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_NARROWROAD_CROSS);
}


void spawnfunc_road_sctiles_thinroad_straight_twice()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_THINROAD_STRAIGHT_TWICE);
}
void spawnfunc_road_sctiles_thinroad_straight_twice_90() { self.angles_y = self.angles_y - 90; spawnfunc_road_sctiles_thinroad_straight_twice(); }

void spawnfunc_road_sctiles_thinroad_cross()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_THINROAD_CROSS);
}



void spawnfunc_road_sctiles_thinroad_narrowroad_cross()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_THINROAD_NARROWROAD_CROSS);
}
void spawnfunc_road_sctiles_thinroad_narrowroad_cross_90() { self.angles_y = self.angles_y - 90; spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_THINROAD_NARROWROAD_CROSS);}







void spawnfunc_road_sctiles_roadwide_narrowroad_cross()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_ROADWIDE_NARROWROAD_CROSS);
}
void spawnfunc_road_sctiles_roadwide_narrowroad_cross_90() { self.angles_y = self.angles_y - 90; spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_ROADWIDE_NARROWROAD_CROSS);}



void spawnfunc_road_sctiles_roadwide_cross()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_ROADWIDE_CROSS);
}



void spawnfunc_road_sctiles_roadwide_thinroad_cross()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_ROADWIDE_THINROAD_CROSS);
}
void spawnfunc_road_sctiles_roadwide_thinroad_cross_90() { self.angles_y = self.angles_y - 90; spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_ROADWIDE_THINROAD_CROSS);}



void spawnfunc_road_sctiles_roadwide_straight()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_ROADWIDE_STRAIGHT);
}
void spawnfunc_road_sctiles_roadwide_straight_90() { self.angles_y = self.angles_y - 90; spawnfunc_road_sctiles_roadwide_straight(); }









void spawnfunc_road_sctiles_parkway3xw_narrowroad_vs()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_NARROWROAD_VS);
}
void spawnfunc_road_sctiles_parkway3xw_narrowroad_vs_90() { self.angles_y = self.angles_y - 90; spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_NARROWROAD_VS);}



void spawnfunc_road_sctiles_parkway3xw_interchange()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_INTERCHANGE);
}
void spawnfunc_road_sctiles_parkway3xw_interchange_90() { self.angles_y = self.angles_y - 90; spawnfunc_road_sctiles_parkway3xw_interchange(); }



void spawnfunc_road_sctiles_parkway3xw_thinroad_vs()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_THINROAD_VS);
}
void spawnfunc_road_sctiles_parkway3xw_thinroad_vs_90() { self.angles_y = self.angles_y - 90; spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_THINROAD_VS);}



void spawnfunc_road_sctiles_parkway3xw_roadwide_vs()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_ROADWIDE_VS);
}
void spawnfunc_road_sctiles_parkway3xw_roadwide_vs_90() { self.angles_y = self.angles_y - 90; spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_ROADWIDE_VS);}


void spawnfunc_road_sctiles_parkway3xw_straight_half()
{
	spawnsctilebuildingfrommap(self, BUILDINGSPCFC_ROAD_PARKWAY3XW_STRAIGHT_HALF);
}
void spawnfunc_road_sctiles_parkway3xw_straight_half_90() { self.angles_y = self.angles_y - 90; spawnfunc_road_sctiles_parkway3xw_straight_half(); }



//End Map spawned buildings
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





void SMI_spawn_jumppad(vector selected_origin, float selected_color)
{
			entity previousself = self;
			entity e = spawn();
			e.origin = selected_origin;
			e.angles_y = random() * 180;
			e.fixangle = TRUE;
			
			e.model = "models/xonotic_jumppad01/xonotic_jumppad01.md3";
			e.lodmodel1 = "models/xonotic_jumppad01/xonotic_jumppad01_lod1.md3";
			//e.scale = random() + 0.4;
			//e.scale = 3;
			e.mins = '-32 -32 0';
			e.maxs = '32 32 16';
			e.solid = SOLID_TRIGGER;

			e.skin = selected_color;
				
			self = e;
			setorigin(self, self.origin);
       			//tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        		traceline(self.origin + '0 0 100', self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
			setorigin(self, trace_endpos);
			
			spawnfunc_misc_gamemodel();
			
			self.noise = "misc/jumppad.wav";
			precache_sound (self.noise);
					
			self.touch = SMI_jumppad_touch;
								
			self = previousself;
}

void SMI_Baloon(float spawns_we_want)
{
	if (g_spawnmiscitemsaround_baloon_current >= autocvar_g_spawnmiscitemsaround_baloon_max) {
		//dprint("We have enough baloons\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = SMI_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
		
			float selected_color;
			selected_color = SMI_select_color(1);
			SMI_spawn_baloon(selected_origin, selected_color);
			
			float wrandvar;
			wrandvar = random();
			
			if (wrandvar > 0.9) {
				//Diamond
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('64 0 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 0 64'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 -64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-64 0 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 0 -64'), selected_color);
			} else if (wrandvar > 0.87) {
				//ladder
				//SMI_spawn_baloon(selected_origin + ('0 0 64'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 0 128'), selected_color);
				//SMI_spawn_baloon(selected_origin + ('0 0 192'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 0 256'), selected_color);
				//SMI_spawn_baloon(selected_origin + ('0 0 320'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 0 384'), selected_color);
				//SMI_spawn_baloon(selected_origin + ('0 0 448'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 0 512'), selected_color);
			} else if (wrandvar > 0.85) {
				//Array
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 128 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 -64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('0 -128 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('64 0 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('128 0 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-64 0 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-128 0 0'), selected_color);
				
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('64 64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('64 128 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('64 -64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('64 -128 0'), selected_color);
				
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('128 64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('128 128 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('128 -64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('128 -128 0'), selected_color);
				
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-64 64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-64 128 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-64 -64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-64 -128 0'), selected_color);
				
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-128 64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-128 128 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-128 -64 0'), selected_color);
				selected_color = SMI_select_color(1); SMI_spawn_baloon(selected_origin + ('-128 -128 0'), selected_color);
			}

			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_baloon_current = g_spawnmiscitemsaround_baloon_current + 1;
			
			if (g_spawnmiscitemsaround_baloon_current >= autocvar_g_spawnmiscitemsaround_baloon_max) {
				//dprint("We have enough baloons\n");
				i = spawns_we_want + 1;
			}
		}
	}
}

void SMI_Bumper(float spawns_we_want)
{
	if (g_spawnmiscitemsaround_bumper_current >= autocvar_g_spawnmiscitemsaround_bumper_max) {
		//dprint("We have enough bumpers\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = SMI_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
		
			float selected_color;
			selected_color = SMI_select_color(0);
			SMI_spawn_bumper(selected_origin, selected_color);
			
			float wrandvar;
			wrandvar = random();
			
			if (wrandvar > 0.9) {
				//Diamond
				SMI_spawn_bumper(selected_origin + ('0 64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('64 0 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 0 64'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 -64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-64 0 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 0 -64'), selected_color);
			} else if (wrandvar > 0.87) {
				//ladder
				//SMI_spawn_bumper(selected_origin + ('0 0 64'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 0 128'), selected_color);
				//SMI_spawn_bumper(selected_origin + ('0 0 192'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 0 256'), selected_color);
				//SMI_spawn_bumper(selected_origin + ('0 0 320'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 0 384'), selected_color);
				//SMI_spawn_bumper(selected_origin + ('0 0 448'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 0 512'), selected_color);
			} else if (wrandvar > 0.85) {
				//Array
				SMI_spawn_bumper(selected_origin + ('0 64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 128 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 -64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('0 -128 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('64 0 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('128 0 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-64 0 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-128 0 0'), selected_color);
				
				SMI_spawn_bumper(selected_origin + ('64 64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('64 128 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('64 -64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('64 -128 0'), selected_color);
				
				SMI_spawn_bumper(selected_origin + ('128 64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('128 128 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('128 -64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('128 -128 0'), selected_color);
				
				SMI_spawn_bumper(selected_origin + ('-64 64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-64 128 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-64 -64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-64 -128 0'), selected_color);
				
				SMI_spawn_bumper(selected_origin + ('-128 64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-128 128 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-128 -64 0'), selected_color);
				SMI_spawn_bumper(selected_origin + ('-128 -128 0'), selected_color);
			}

			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_bumper_current = g_spawnmiscitemsaround_bumper_current + 1;
			
			if (g_spawnmiscitemsaround_bumper_current >= autocvar_g_spawnmiscitemsaround_bumper_max) {
				//dprint("We have enough bumpers\n");
				i = spawns_we_want + 1;
			}
		}
	}
}

void SMI_spikeball_think_roty() {
	self.nextthink = time;
	
	self.angles_z += 45 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotx() {
	self.nextthink = time;
	
	self.angles_x += 45 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotz() {
	self.nextthink = time;
	
	self.angles_y += 45 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}
///LittleFaster
void SMI_spikeball_think_rotyf() {
	self.nextthink = time;
	
	self.angles_z += 60 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotxf() {
	self.nextthink = time;
	
	self.angles_x += 60 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotzf() {
	self.nextthink = time;
	
	self.angles_y += 60 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}
///Faster
void SMI_spikeball_think_rotyf2() {
	self.nextthink = time;
	
	self.angles_z += 90 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotxf2() {
	self.nextthink = time;
	
	self.angles_x += 90 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotzf2() {
	self.nextthink = time;
	
	self.angles_y += 90 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}
///FasterStill
void SMI_spikeball_think_rotyf3() {
	self.nextthink = time;
	
	self.angles_z += 180 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotxf3() {
	self.nextthink = time;
	
	self.angles_x += 180 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_rotzf3() {
	self.nextthink = time;
	
	self.angles_y += 180 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}

//ReversedRotation

void SMI_spikeball_think_croty() {
	self.nextthink = time;
	
	self.angles_z -= 45 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotx() {
	self.nextthink = time;
	
	self.angles_x -= 45 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotz() {
	self.nextthink = time;
	
	self.angles_y -= 45 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}
///LittleFaster
void SMI_spikeball_think_crotyf() {
	self.nextthink = time;
	
	self.angles_z -= 60 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotxf() {
	self.nextthink = time;
	
	self.angles_x -= 60 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotzf() {
	self.nextthink = time;
	
	self.angles_y -= 60 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}
///Faster
void SMI_spikeball_think_crotyf2() {
	self.nextthink = time;
	
	self.angles_z -= 90 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotxf2() {
	self.nextthink = time;
	
	self.angles_x -= 90 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotzf2() {
	self.nextthink = time;
	
	self.angles_y -= 90 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}
///FasterStill
void SMI_spikeball_think_crotyf3() {
	self.nextthink = time;
	
	self.angles_z -= 180 * sys_frametime;
        if(self.angles_z >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotxf3() {
	self.nextthink = time;
	
	self.angles_x -= 180 * sys_frametime;
        if(self.angles_x >= 360) self.angles_z = 0;
}

void SMI_spikeball_think_crotzf3() {
	self.nextthink = time;
	
	self.angles_y -= 180 * sys_frametime;
        if(self.angles_y >= 360) self.angles_y = 0;
}

void SMI_SpikeBall(float spawns_we_want)
{
	if (g_spawnmiscitemsaround_spikeball_current >= autocvar_g_spawnmiscitemsaround_spikeball_max) {
		//dprint("We have enough spikeballs\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = SMI_Select_Spawn_Point();
		if(selected_origin != '0 0 0')
		{
			float wrandvar;
			float randvar;			
			
			local entity a, b, c, d, e, f;
			local float x;
			local float sfaster;
			local float onceling;
			local vector v;
			onceling = -1;
			
			wrandvar  = random();
			if (wrandvar > 0.75) {
				sfaster	= 3;
			} else if (wrandvar > 0.50) {
				sfaster	= 2;
			} else if (wrandvar > 0.25) {
				sfaster	= 1;
			} else {
				sfaster	= 0;
			}
			
			a = SMI_spawn_spikeball(selected_origin, -1);
			wrandvar  = random() *
			(spawnmiscitemsaround_spikeball_xamnt
			+ spawnmiscitemsaround_spikeball_yamnt
			+ spawnmiscitemsaround_spikeball_zamnt
			);
			
			randvar  = random() *
			(spawnmiscitemsaround_spikeball_floatamnt
			+ spawnmiscitemsaround_spikeball_standamnt
			);
			
			if (wrandvar < spawnmiscitemsaround_spikeball_xamnt)
			{
				v = '0 1 0';
				
				if (random() > 0.5) {
					if (sfaster == 3) { a.think = SMI_spikeball_think_rotyf3;
					} else if (sfaster == 2) { a.think = SMI_spikeball_think_rotyf2;
					} else if (sfaster == 1) { a.think = SMI_spikeball_think_rotyf;
					} else { a.think = SMI_spikeball_think_roty;
					}
				} else {
					if (sfaster == 3) { a.think = SMI_spikeball_think_crotyf3;
					} else if (sfaster == 2) { a.think = SMI_spikeball_think_crotyf2;
					} else if (sfaster == 1) { a.think = SMI_spikeball_think_crotyf;
					} else { a.think = SMI_spikeball_think_croty;
					}
				}
				
				if (randvar < spawnmiscitemsaround_spikeball_standamnt)
				{
					wrandvar = random();
					if (wrandvar > 0.5) {
						//X
						traceline(a.origin + '2 0 0', a.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), a);
						if (!(trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) || !(spawnmiscitemsaround_spikeball_floatamnt)) setorigin(a, trace_endpos - ('40 0 0'));
					} else {
						//-X
						traceline(a.origin + '2 0 0', a.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), a);
						if (!(trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) || !(spawnmiscitemsaround_spikeball_floatamnt)) setorigin(a, trace_endpos + ('40 0 0'));
					}
				}	
			}
			else if (wrandvar < (spawnmiscitemsaround_spikeball_xamnt + spawnmiscitemsaround_spikeball_yamnt))
			{
				v = '1 0 0';
				
				if (random() > 0.5) {
					if (sfaster == 3) { a.think = SMI_spikeball_think_rotxf3;
					} else if (sfaster == 2) { a.think = SMI_spikeball_think_rotxf2;
					} else if (sfaster == 1) { a.think = SMI_spikeball_think_rotxf;
					} else { a.think = SMI_spikeball_think_rotx;
					}
				} else {
					if (sfaster == 3) { a.think = SMI_spikeball_think_crotxf3;
					} else if (sfaster == 2) { a.think = SMI_spikeball_think_crotxf2;
					} else if (sfaster == 1) { a.think = SMI_spikeball_think_crotxf;
					} else { a.think = SMI_spikeball_think_crotx;
					}
				}
				
				if (randvar < spawnmiscitemsaround_spikeball_standamnt)
				{
					wrandvar = random();
					if (wrandvar > 0.5) {
						//Y
						traceline(a.origin + '0 2 0', a.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), a);
						if (!(trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) || !(spawnmiscitemsaround_spikeball_floatamnt)) setorigin(a, trace_endpos - ('0 40 0'));
					} else {
						//-Y
						traceline(a.origin + '0 2 0', a.origin - '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), a);
						if (!(trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) || !(spawnmiscitemsaround_spikeball_floatamnt)) setorigin(a, trace_endpos + ('0 40 0'));
					}
				}
			}
			else if (wrandvar < (spawnmiscitemsaround_spikeball_xamnt
						+ spawnmiscitemsaround_spikeball_yamnt
						+ spawnmiscitemsaround_spikeball_zamnt))
			{
				v = '1 0 0';
				if (random() > 0.5) {
					if (sfaster == 3) { a.think = SMI_spikeball_think_rotzf3;
					} else if (sfaster == 2) { a.think = SMI_spikeball_think_rotzf2;
					} else if (sfaster == 1) { a.think = SMI_spikeball_think_rotzf;
					} else { a.think = SMI_spikeball_think_rotz;
					}
				} else {
					if (sfaster == 3) { a.think = SMI_spikeball_think_crotzf3;
					} else if (sfaster == 2) { a.think = SMI_spikeball_think_crotzf2;
					} else if (sfaster == 1) { a.think = SMI_spikeball_think_crotzf;
					} else { a.think = SMI_spikeball_think_crotz;
					}
				}
				
				if (randvar < spawnmiscitemsaround_spikeball_standamnt)
				{
					if (random() < spawnmiscitemsaround_spikeball_celingamnt) {
						traceline(a.origin + '0 0 2', a.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), a);
						if (!(trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) || !(spawnmiscitemsaround_spikeball_floatamnt)) setorigin(a, trace_endpos - ('0 0 40'));
					} else {
						traceline(a.origin + '0 0 100', a.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), a);
        					if (!(trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) || !(spawnmiscitemsaround_spikeball_floatamnt)) setorigin(a, trace_endpos + ('0 0 40'));
					}
				}
			} else {
				v = '1 1 1';
				//failsafe = doesn't move
			}
			
			selected_origin = a.origin;
			
			x = 32;
			
			wrandvar = random();
			if (wrandvar > 0.9) {
				//Single
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*6, 1);
			} else if (wrandvar > 0.8) {
				//Double
				local entity g, h, h2, j, k;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*6, 1);
				
				g = SMI_spawn_spikeball(selected_origin - v*x, 0);	
				h = SMI_spawn_spikeball(selected_origin - v*x*2, 0);
				h2 = SMI_spawn_spikeball(selected_origin - v*x*3, 0);
				j = SMI_spawn_spikeball(selected_origin - v*x*4, 0);
				k = SMI_spawn_spikeball(selected_origin - v*x*6, 1);
				
				follow_sameorigin(g, a);
				follow_sameorigin(h, a);
				follow_sameorigin(h2, a);
				follow_sameorigin(j, a);
				follow_sameorigin(k, a);
			} else if (wrandvar > 0.7) {
				//Long
				local entity g, h, h2, j;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
				g = SMI_spawn_spikeball(selected_origin + v*x*6, 0);
				h = SMI_spawn_spikeball(selected_origin + v*x*7, 0);
				h2 = SMI_spawn_spikeball(selected_origin + v*x*8, 0);
				j = SMI_spawn_spikeball(selected_origin + v*x*10, 1);
				
				follow_sameorigin(g, a);
				follow_sameorigin(h, a);
				follow_sameorigin(h2, a);
				follow_sameorigin(j, a);
			} else if (wrandvar > 0.6) {
				//Single no big ball
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
			} else if (wrandvar > 0.5) {
				//Double No big ball
				local entity g, h, h2, j, k;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
				
				g = SMI_spawn_spikeball(selected_origin - v*x, 0);	
				h = SMI_spawn_spikeball(selected_origin - v*x*2, 0);
				h2 = SMI_spawn_spikeball(selected_origin - v*x*3, 0);
				j = SMI_spawn_spikeball(selected_origin - v*x*4, 0);
				k = SMI_spawn_spikeball(selected_origin - v*x*5, 0);
				
				follow_sameorigin(g, a);
				follow_sameorigin(h, a);
				follow_sameorigin(h2, a);
				follow_sameorigin(j, a);
				follow_sameorigin(k, a);
			} else if (wrandvar > 0.4) {
				//15 line. No big ball
				local entity g, h, h2, j, k;
				local entity l, m, n, o, p;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
				
				g = SMI_spawn_spikeball(selected_origin - v*x*6, 0);	
				h = SMI_spawn_spikeball(selected_origin - v*x*7, 0);
				h2 = SMI_spawn_spikeball(selected_origin - v*x*8, 0);
				j = SMI_spawn_spikeball(selected_origin - v*x*9, 0);
				k = SMI_spawn_spikeball(selected_origin - v*x*10, 0);
				
				l = SMI_spawn_spikeball(selected_origin - v*x*11, 0);	
				m = SMI_spawn_spikeball(selected_origin - v*x*12, 0);
				n = SMI_spawn_spikeball(selected_origin - v*x*13, 0);
				o = SMI_spawn_spikeball(selected_origin - v*x*14, 0);
				p = SMI_spawn_spikeball(selected_origin - v*x*15, 0);
				
				follow_sameorigin(g, a);
				follow_sameorigin(h, a);
				follow_sameorigin(h2, a);
				follow_sameorigin(j, a);
				follow_sameorigin(k, a);
				
				follow_sameorigin(l, a);
				follow_sameorigin(m, a);
				follow_sameorigin(n, a);
				follow_sameorigin(o, a);
				follow_sameorigin(p, a);
			} else if (wrandvar > 0.3) {
				//4way No big ball
				local entity g, h, h2, j, k;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
				
				g = SMI_spawn_spikeball(selected_origin - v*x, 0);	
				h = SMI_spawn_spikeball(selected_origin - v*x*2, 0);
				h2 = SMI_spawn_spikeball(selected_origin - v*x*3, 0);
				j = SMI_spawn_spikeball(selected_origin - v*x*4, 0);
				k = SMI_spawn_spikeball(selected_origin - v*x*5, 0);
				
				follow_sameorigin(g, a);
				follow_sameorigin(h, a);
				follow_sameorigin(h2, a);
				follow_sameorigin(j, a);
				follow_sameorigin(k, a);
				
				local entity l, m, n, o, p;
				local entity q, r, s, t, u;
				if (v == '1 0 0') {
					v = '0 1 0';
				} else if (v == '0 1 0') {
					v = '1 0 0';
				}
				
				l = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				m = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				n = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				o = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				p = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
				
				q = SMI_spawn_spikeball(selected_origin - v*x, 0);	
				r = SMI_spawn_spikeball(selected_origin - v*x*2, 0);
				s = SMI_spawn_spikeball(selected_origin - v*x*3, 0);
				t = SMI_spawn_spikeball(selected_origin - v*x*4, 0);
				u = SMI_spawn_spikeball(selected_origin - v*x*5, 0);
				follow_sameorigin(l, a);
				follow_sameorigin(m, a);
				follow_sameorigin(n, a);
				follow_sameorigin(o, a);
				follow_sameorigin(p, a);
				
				
				follow_sameorigin(q, a);
				follow_sameorigin(r, a);
				follow_sameorigin(s, a);
				follow_sameorigin(t, a);
				follow_sameorigin(u, a);
			} else if (wrandvar > 0.2) {
				//Double Extended No big ball
				x = 64;
				local entity g, h, h2, j, k;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
				
				g = SMI_spawn_spikeball(selected_origin - v*x, 0);	
				h = SMI_spawn_spikeball(selected_origin - v*x*2, 0);
				h2 = SMI_spawn_spikeball(selected_origin - v*x*3, 0);
				j = SMI_spawn_spikeball(selected_origin - v*x*4, 0);
				k = SMI_spawn_spikeball(selected_origin - v*x*5, 0);
				
				follow_sameorigin(g, a);
				follow_sameorigin(h, a);
				follow_sameorigin(h2, a);
				follow_sameorigin(j, a);
				follow_sameorigin(k, a);
			} else if (wrandvar > 0.1) {
				//Triple Extended No big ball
				x = 96;
				local entity g, h, h2, j, k;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
				
				g = SMI_spawn_spikeball(selected_origin - v*x, 0);	
				h = SMI_spawn_spikeball(selected_origin - v*x*2, 0);
				h2 = SMI_spawn_spikeball(selected_origin - v*x*3, 0);
				j = SMI_spawn_spikeball(selected_origin - v*x*4, 0);
				k = SMI_spawn_spikeball(selected_origin - v*x*5, 0);
				
				follow_sameorigin(g, a);
				follow_sameorigin(h, a);
				follow_sameorigin(h2, a);
				follow_sameorigin(j, a);
				follow_sameorigin(k, a);
			} else {
				//extended but no big ball
				x = 64;
				b = SMI_spawn_spikeball(selected_origin + v*x, 0);	
				c = SMI_spawn_spikeball(selected_origin + v*x*2, 0);
				d = SMI_spawn_spikeball(selected_origin + v*x*3, 0);
				e = SMI_spawn_spikeball(selected_origin + v*x*4, 0);
				f = SMI_spawn_spikeball(selected_origin + v*x*5, 0);
			}
			
			follow_sameorigin(b, a);
			follow_sameorigin(c, a);
			follow_sameorigin(d, a);
			follow_sameorigin(e, a);
			follow_sameorigin(f, a);
			
			

			a.nextthink = time;


			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_spikeball_current = g_spawnmiscitemsaround_spikeball_current + 1;
			
			if (g_spawnmiscitemsaround_spikeball_current >= autocvar_g_spawnmiscitemsaround_spikeball_max) {
				//dprint("We have enough spikeballs\n");
				i = spawns_we_want + 1;
			}
		}
	}
}

void SMI_JumpPad(float spawns_we_want)
{
	if (g_spawnmiscitemsaround_jumppad_current >= autocvar_g_spawnmiscitemsaround_jumppad_max) {
		//dprint("We have enough jumppads\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		selected_origin = SMI_Select_JPSpawn_Point();
		if(selected_origin != '0 0 0')
		{
		
			float selected_skin;
			selected_skin = SMI_select_skin();
			SMI_spawn_jumppad(selected_origin, selected_skin);
			
			float wrandvar;
			wrandvar = random();

			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_jumppad_current = g_spawnmiscitemsaround_jumppad_current + 1;
			
			if (g_spawnmiscitemsaround_jumppad_current >= autocvar_g_spawnmiscitemsaround_jumppad_max) {
				//dprint("We have enough jumppads\n");
				i = spawns_we_want + 1;
			}
		}
	}
}

void SMI_Spikes(float spawns_we_want)
{
	if (g_spawnmiscitemsaround_spikes_current >= autocvar_g_spawnmiscitemsaround_spikes_max) {
		//dprint("We have enough spikess\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		local float onceling;
		onceling = 0;
		
		float wrandvar;
		
		if ((autocvar_g_spawnmiscitemsaround_spikes_uz) && (autocvar_g_spawnmiscitemsaround_spikes_xy == 1))
		{
			//Z and XY
			wrandvar = random();
			if (wrandvar > 0.833) {
				onceling = 5;
			} else if (wrandvar > 0.6664) {
				onceling = 4;
			} else if (wrandvar > 0.4998) {
				onceling = 3;
			} else if (wrandvar > 0.3332) {
				onceling = 2;
			}  else if (wrandvar > 0.1666) {
				onceling = 1;
			} else {
				onceling = 0;
			}
		}
		else if ((autocvar_g_spawnmiscitemsaround_spikes_uz) && (autocvar_g_spawnmiscitemsaround_spikes_xy == 2))
		{
			//XY and Celing
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 1;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_spikes_xy == 1)
		{
			//XY and Ground
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 0;
			}
		
		}
		else if (autocvar_g_spawnmiscitemsaround_spikes_xy == 2)
		{
			//Only XY
			wrandvar = random();
			if (wrandvar > 0.75) {
				onceling = 5;
			} else if (wrandvar > 0.50) {
				onceling = 4;
			} else if (wrandvar > 0.25) {
				onceling = 3;
			} else {
				onceling = 2;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_spikes_uz)
		{
			wrandvar = random();
			if (wrandvar > 0.5) {
				onceling = 1;
			}
		}
		
		selected_origin = SMI_Select_SPKSpawn_Point(onceling);
		if(selected_origin != '0 0 0')
		{
			SMI_spawn_spikes(selected_origin, onceling);
			
			wrandvar = random();
			
			if (wrandvar > 0.9) {
				//Array
				if (onceling >= 4) {
				SMI_spawn_spikes(selected_origin + ('64 0 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 0 64'), onceling);
				SMI_spawn_spikes(selected_origin + ('-64 0 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 0 -64'), onceling);
				SMI_spawn_spikes(selected_origin + ('64 0 64'), onceling);
				SMI_spawn_spikes(selected_origin + ('-64 0 -64'), onceling);
				SMI_spawn_spikes(selected_origin + ('64 0 -64'), onceling);
				SMI_spawn_spikes(selected_origin + ('-64 0 64'), onceling);
				} else if (onceling >= 2) {
				SMI_spawn_spikes(selected_origin + ('0 64 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 0 64'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 -64 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 0 -64'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 64 64'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 -64 -64'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 64 -64'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 -64 64'), onceling);
				} else {
				SMI_spawn_spikes(selected_origin + ('64 0 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 64 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('-64 0 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('0 -64 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('64 64 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('-64 -64 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('64 -64 0'), onceling);
				SMI_spawn_spikes(selected_origin + ('-64 64 0'), onceling);
				}
				
			}

			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_spikes_current = g_spawnmiscitemsaround_spikes_current + 1;
			
			if (g_spawnmiscitemsaround_spikes_current >= autocvar_g_spawnmiscitemsaround_spikes_max) {
				//dprint("We have enough spikess\n");
				i = spawns_we_want + 1;
			}
		}
	}
}

void SMI_TnkPyr(float spawns_we_want, float maxfail)
{
	if (g_spawnmiscitemsaround_tnkpyr_current >= autocvar_g_spawnmiscitemsaround_tnkpyr_max) {
		//dprint("We have enough tnkpyrs\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		if ((g_spawnmiscitemsaround_tnkpyr_currentfail > maxfail)
		&& ((g_spawnmiscitemsaround_tnkpyr_currentwin * 1.5) < g_spawnmiscitemsaround_tnkpyr_currentfail)
		) {
			//If too difficult to find a spot and above maxfail, giveup
			//print("Giving up attempt to Spawn TankPyrs\n");
			i = spawns_we_want + 1;
			++i; //Yeah
		} else {
	
		local float onceling;
		onceling = 0;
		
		float wrandvar;
		
		if ((autocvar_g_spawnmiscitemsaround_tnkpyr_uz) && (autocvar_g_spawnmiscitemsaround_tnkpyr_xy == 1))
		{
			//Z and XY
			wrandvar = random();
			if (wrandvar > 0.833) {
				onceling = 5;
			} else if (wrandvar > 0.6664) {
				onceling = 4;
			} else if (wrandvar > 0.4998) {
				onceling = 3;
			} else if (wrandvar > 0.3332) {
				onceling = 2;
			}  else if (wrandvar > 0.1666) {
				onceling = 1;
			} else {
				onceling = 0;
			}
		}
		else if ((autocvar_g_spawnmiscitemsaround_tnkpyr_uz) && (autocvar_g_spawnmiscitemsaround_tnkpyr_xy == 2))
		{
			//XY and Celing
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 1;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_tnkpyr_xy == 1)
		{
			//XY and Ground
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 0;
			}
		
		}
		else if (autocvar_g_spawnmiscitemsaround_tnkpyr_xy == 2)
		{
			//Only XY
			wrandvar = random();
			if (wrandvar > 0.75) {
				onceling = 5;
			} else if (wrandvar > 0.50) {
				onceling = 4;
			} else if (wrandvar > 0.25) {
				onceling = 3;
			} else {
				onceling = 2;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_tnkpyr_uz)
		{
			wrandvar = random();
			if (wrandvar > 0.5) {
				onceling = 1;
			}
		}
		
		spawnmiscitemsaround_overgrowth = autocvar_g_spawnmiscitemsaround_tnkpyr_overgrowth;
		float randomangle, allowliquid, vfly;
		randomangle = autocvar_g_spawnmiscitemsaround_tnkpyr_randomangle;
		allowliquid = autocvar_g_spawnmiscitemsaround_tnkpyr_allowliquid;
		vfly = autocvar_g_spawnmiscitemsaround_tnkpyr_fly;
		selected_origin = SMI_Select_TNKSpawn_Point(onceling, autocvar_g_spawnmiscitemsaround_tnkpyr_allowliquid, vfly);
		if(selected_origin != '0 0 0')
		{
			SMI_spawn_tnkpyr(selected_origin, onceling, randomangle, allowliquid, vfly);
			
			wrandvar = random();
			
			if (wrandvar > 0.5) {
				//Array
				if (onceling >= 4) {
				SMI_spawn_tnkpyr(selected_origin + ('512 0 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 0 512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('-512 0 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 0 -512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('512 0 512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('-512 0 -512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('512 0 -512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('-512 0 512'), onceling, randomangle, allowliquid, vfly);
				} else if (onceling >= 2) {
				SMI_spawn_tnkpyr(selected_origin + ('0 512 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 0 512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 -512 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 0 -512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 512 512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 -512 -512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 512 -512'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 -512 512'), onceling, randomangle, allowliquid, vfly);
				} else {
				SMI_spawn_tnkpyr(selected_origin + ('512 0 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 512 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('-512 0 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('0 -512 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('512 512 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('-512 -512 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('512 -512 0'), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_tnkpyr(selected_origin + ('-512 512 0'), onceling, randomangle, allowliquid, vfly);
				}
				
			}

			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_tnkpyr_current = g_spawnmiscitemsaround_tnkpyr_current + 1;
			
			if (g_spawnmiscitemsaround_tnkpyr_current >= autocvar_g_spawnmiscitemsaround_tnkpyr_max) {
				//dprint("We have enough tnkpyrs\n");
				i = spawns_we_want + 1;
			}
		}
		}
	}
}


/////////////////////////////////////////////////////////////////////
//Rocks//

vector SMI_Select_ROCKSpawn_Point(float onceling, float allowliquid, float vfly)
{
	entity e = spawn();
	float vertamt;
	
	if not(vfly) {
	if (onceling == 2) {
		//X
		vertamt = 51248;
		e.mins = '-512 -512 -512';
		e.maxs = '0 512 512';
	} else if (onceling == 3) {
		//-X
		vertamt = 51248;
		e.mins = '0 -512 -512';
		e.maxs = '512 512 512';
	} else if (onceling == 4) {	
		vertamt = 51248;
		e.mins = '-512 -512 -512';
		e.maxs = '512 0 512';
	} else if (onceling == 5) {
		vertamt = 51248;
		e.mins = '-512 0 -512';
		e.maxs = '512 512 512';
	} else {
		//Regular
		vertamt = 0;
		e.mins = '-512 -512 -1';
		e.maxs = '512 512 512';
	}
	} else {
		vertamt = (random() * vfly);
	}
	
	float bitmask1, bitmask2;
	if(allowliquid) {
		bitmask1 = DPCONTENTS_WATER;
		bitmask2 = DPCONTENTS_SLIME;
	} else {
		bitmask1 = DPCONTENTS_PLAYERCLIP;
		bitmask2 = DPCONTENTS_WATER;
	}

	// tries 10 times then gives up, that's what the number 10 stands for
	if(MoveToRandomMapLocation(e, DPCONTENTS_SOLID | DPCONTENTS_PLAYERCLIP | bitmask1, bitmask2 | DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_CORPSE | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, 10, vertamt, 1))
	{
		// yay we found a suitable location!
		vector selected_origin = e.origin;
		
		if not(vfly) {
		if (onceling == 1) {
			traceline(e.origin + '0 0 2', e.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 2) {
			//X
			traceline(e.origin + '2 0 0', e.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 3) {
			//X
			traceline(e.origin + '2 0 0', e.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);	
		} else if (onceling == 4) {
			//Y
			traceline(e.origin + '0 2 0', e.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else if (onceling == 5) {
			//Y
			traceline(e.origin + '0 2 0', e.origin - '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		} else {
			traceline(e.origin + '0 0 100', e.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
		}
		}
		
		if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) {
			//Makesure it isn't skybox (say underwater or on side or edge of map like in some maps etc.)
			remove(e);
			return '0 0 0';
		}
		
		if(allowliquid < 1) {
			if(pointcontents(e.origin) == CONTENT_WATER)
			{	
				remove(e);
				return '0 0 0';
			}
			if(allowliquid < 0) {
				//We don't even want to be above water
				traceline(e.origin + '0 0 2', e.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
				if(pointcontents(trace_endpos) == CONTENT_WATER)
				{
					remove(e);
					return '0 0 0';
				}
			}
		}
		
		if (spawnmiscitemsaround_overgrowth < 7) {
			float hitmaterial;
			hitmaterial = W_EvaluateMaterialHit();
		
			if ((hitmaterial == 1) || (hitmaterial == 2)) {
				//print("Metal\n");
				remove(e);
				g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
				return '0 0 0';
			} else if (hitmaterial == 5) {
				//print("Concrete\n");
				if (spawnmiscitemsaround_overgrowth < 5) {
					remove(e);
					g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
					return '0 0 0';
				}
			} else if ((hitmaterial == 3) || (hitmaterial == 4)) {
				//print("Stone and Brick\n");
				if (spawnmiscitemsaround_overgrowth < 4) {
					remove(e);
					g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 6) {
				//print("Glass or Window\n");
			} else if (hitmaterial == 8) {
				//print("Wood and Bark\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 9) {
				//print("Sheetrock or Cardboard or Vinyl\n");
				if (spawnmiscitemsaround_overgrowth < 3) {
					remove(e);
					g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "asphalt", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "asphault", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "road", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "filzkachel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "roof", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "cobble", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "paving", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "pavement", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "rubber", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "vtiles", 0) != -1 )
			)
			{
				//print("Asphalt or astroturf or roof\n");
				if (spawnmiscitemsaround_overgrowth < 2) {
					remove(e);
					g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
					return '0 0 0';
				}
			} else if (
			( strstrofs(trace_dphittexturename, "gravel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "sand", 0) != -1 )
			)
			{
				//print("Gravel or Sand\n");
				if (spawnmiscitemsaround_overgrowth < 1) {
					remove(e);
					g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
					return '0 0 0';
				}
			} else if (hitmaterial == 7) {
				//print("Dirt Etc\n");
				//Allow growth in all cases of dirt or grass not caught above
			} else if (
			( strstrofs(trace_dphittexturename, "caulk", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "common", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "base", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "door", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "tile", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "barrel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "detail", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "decal", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "wall", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "carpet", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plastic", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "panel", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "floor", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "flr_", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "plaster", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "trim", 0) != -1 )
			|| ( strstrofs(trace_dphittexturename, "celing", 0) != -1 )
			)
			{
				//If the thing was any of the other "real" materials, we do not get here
				//If it isn't any of the rest, before allowing, check to see if 
				//it has some stated purpose that we should not grown things on
				//print("Stated Purpose\n");
				if (spawnmiscitemsaround_overgrowth < 6) {
					remove(e);
					g_spawnmiscitemsaround_rock_currentfail = g_spawnmiscitemsaround_rock_currentfail + 1;
					return '0 0 0';
				}
			} else {
				//print("NotMetal\n");
			}
		}
		remove(e);
		
		//dprint("^4SUCCESS: we found a suitable location for TANKTRAPS_PYRAMID.\n");
		g_spawnmiscitemsaround_rock_currentwin = g_spawnmiscitemsaround_rock_currentwin + 1;
		return selected_origin;
	}
	else
	{
		// no place found, better luck next time
		remove(e);
		return '0 0 0';
	}
}

//
float SMI_Rock_ChooseBaseTerrainType()
{
	//We follow the SMI_AbdBld_ChooseBaseTerrainType way
	float myabdbldseason;
	float myusedfoliageseason;
	myusedfoliageseason = 0;
	if (!autocvar_g_spawnmiscitemsaround_rock_suggested_season_use) {
		//This is most likely so we'll hit it first
		myabdbldseason = spawnfoliagearound_season;
	} else if (autocvar_g_spawnmiscitemsaround_rock_suggested_season_use >= 3) {
		//Force use of this always
		myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
	} else if (autocvar_g_spawnmiscitemsaround_rock_suggested_season_use >= 2) {
		//Only override if the mutator in the menu is enabled 
		if (cvar("g_spawnfoliagearound")) {
			myabdbldseason = autocvar_g_spawnfoliagearound_season;
			myusedfoliageseason = 1;
		} else {
			if (!autocvar_g_spawnmiscitemsaround_abdbld_suggested_season && spawnfoliagearound_season) {
				//Accommodation
				myabdbldseason = spawnfoliagearound_season;
			} else {
			myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
			}
		}
	} else if (autocvar_g_spawnmiscitemsaround_rock_suggested_season_use >= 1.5) {
		//Change if the mutator season in the menu is set to anything other than 0
		//(note: 1 is the default tho)
		if (autocvar_g_spawnfoliagearound_season) {
			myabdbldseason = autocvar_g_spawnfoliagearound_season;
			myusedfoliageseason = 1;
		} else {
			if (!autocvar_g_spawnmiscitemsaround_abdbld_suggested_season && spawnfoliagearound_season) {
				//Accommodation
				myabdbldseason = spawnfoliagearound_season;
			} else {
			myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
			}
		}
	} else if (autocvar_g_spawnmiscitemsaround_rock_suggested_season_use >= 1) {
		//Change if the mutator season in the menu is set to anything other than 1
		//1 is default, if set to other than 1, use that,
		//this way player can use the season slider easily to change the look, convienent
		if (autocvar_g_spawnfoliagearound_season != 1) {
			myabdbldseason = autocvar_g_spawnfoliagearound_season;
			myusedfoliageseason = 1;
		} else {
			if (!autocvar_g_spawnmiscitemsaround_abdbld_suggested_season && spawnfoliagearound_season) {
				//Accommodation
				myabdbldseason = spawnfoliagearound_season;
			} else {
			myabdbldseason = autocvar_g_spawnmiscitemsaround_abdbld_suggested_season;
			}
		}
	} else {
		//Useless fallback but ohwell, better safe than...
		myabdbldseason = spawnfoliagearound_season;
		myusedfoliageseason = 1;
	}
	

	if (myabdbldseason == 0)
	{
		return TERRAIN_ROCK_MISC; //Mix
	}
	else if (myabdbldseason == 1)
	{
		return TERRAIN_ROCK_SUMMER;
	}
	else if (myabdbldseason == 2)
	{
		return TERRAIN_ROCK_FALL;
	}
	else if (myabdbldseason == 3)
	{
		//Winter
		return TERRAIN_ROCK_WINTER; //Winter
	}
	else if (myabdbldseason == 4)
	{
		return TERRAIN_ROCK_STRANGE;
	}
	else if (myabdbldseason == 5)
	{
		if (autocvar_g_spawnmiscitemsaround_rock_season5alwaysburning
		&& autocvar_g_spawnmiscitemsaround_rock_season5alwaysdesert)
		{
			local float trandvar;
			trandvar = random();
			if (trandvar > 0.82) {
				return TERRAIN_ROCK_BURNING;
			} else if (trandvar > 0.66) {
				return TERRAIN_ROCK_GRAYSTONE;
			} else if (trandvar > 0.50) {
				return TERRAIN_ROCK_BLACKSTONE;	
			} else {
				return TERRAIN_ROCK_DESERT;
			}
		} else if ((myusedfoliageseason && !autocvar_g_spawnmiscitemsaround_rock_season5alwaysdesert)
		|| (autocvar_g_spawnmiscitemsaround_rock_season5alwaysburning))
		{
			//Set foliage to sunset park, not using abdbldterrain:
			//IE the mapper or the player wants this burning cauldron
			local float trandvar;
			trandvar = random();
			if (trandvar > 0.66) {
				return TERRAIN_ROCK_BURNING;
			} else if (trandvar > 0.33) {
				return TERRAIN_ROCK_GRAYSTONE;
			} else {
				return TERRAIN_ROCK_BLACKSTONE;
			}
		} else {
			return TERRAIN_ROCK_DESERT;
		}
	}
		
	return 0;
}

void SMI_rock_burning_touch()
{

	if(other != world) {
		if (other.classname == "tree" || other.classname == "bush"
		|| isPlayerOrMonsterByClassname(other)) {
			Fire_AddDamage(other, world, 10*120, 120, DEATH_FIRE);
		} else if (other.classname == "building" && other.multitool_hitbox != world) {
			Fire_AddDamage(other.multitool_hitbox, world, 10*120, 120, DEATH_FIRE);
		} else if (other.accptcrssbwstklkbld) {
			if (other.multitool_doorframeent && other.multitool_doorframeent.multitool_hitbox != world)
			{
				Fire_AddDamage(other.multitool_doorframeent.multitool_hitbox, world, 10*120, 120, DEATH_FIRE);
			}
		}
				
	}
}

void SMI_rock_burninghot_touch()
{
	if(other != world) {
		if (other.classname == "tree" || other.classname == "bush"
		|| isPlayerOrMonsterByClassname(other)) {
			Fire_AddDamage(other, world, 30*180, 180, DEATH_FIRE);
		} else if (other.classname == "building" && other.multitool_hitbox != world) {
			Fire_AddDamage(other.multitool_hitbox, world, 30*180, 180, DEATH_FIRE);
		} else if (other.accptcrssbwstklkbld) {
			if (other.multitool_doorframeent && other.multitool_doorframeent.multitool_hitbox != world)
			{
			Fire_AddDamage(other.multitool_doorframeent.multitool_hitbox, world, 30*180, 180, DEATH_FIRE);
			}
		}
				
	}
}

void SMI_rock_burningintense_touch()
{
	if(other != world) {
		if (other.classname == "tree" || other.classname == "bush"
		|| isPlayerOrMonsterByClassname(other)) {
			Fire_AddDamage(other, world, 100*3600, 3600, DEATH_FIRE);
		} else if (other.classname == "building" && other.multitool_hitbox != world) {
			Fire_AddDamage(other.multitool_hitbox, world, 100*3600, 3600, DEATH_FIRE);
		} else if (other.accptcrssbwstklkbld) {
			if (other.multitool_doorframeent && other.multitool_doorframeent.multitool_hitbox != world)
			{
			Fire_AddDamage(other.multitool_doorframeent.multitool_hitbox, world, 100*3600, 3600, DEATH_FIRE);
			}
		}
				
	}
}


void SMI_spawn_rock_precache_model(float myrocktype)
{
	print("\n\n\n\n\n\n\n\n\n\n\n\n\n\nPRECACHING ROCKS\n");
	print("\nPreCACHING ROCKS\n");
	print("\n\nPRECACHING RockS\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
	
	if (myrocktype == TERRAIN_ROCK_BURNING) {
		g_spawnmiscitemsaround_rock_didprecache_burning = 1;
				precache_model ("models/misc/terrain_rock1_melting.bsp");
				precache_model ("models/misc/terrain_rock1_flaming.bsp");
				precache_model ("models/misc/terrain_rock1_burning.bsp");
	} else if (myrocktype == TERRAIN_ROCK_BLACKSTONE) {
		g_spawnmiscitemsaround_rock_didprecache_blackstone = 1;
				precache_model ("models/misc/terrain_rock1_volcanic.bsp");
				precache_model ("models/misc/terrain_rock1_black.bsp");
				precache_model ("models/misc/terrain_rock1_dirtyblack.bsp");
	} else if (myrocktype == TERRAIN_ROCK_GRAYSTONE) {
		g_spawnmiscitemsaround_rock_didprecache_graystone = 1;
				precache_model ("models/misc/terrain_rock1_cliffdarkgray.bsp");
				precache_model ("models/misc/terrain_rock1_dirtygray.bsp");
	} else if (myrocktype == TERRAIN_ROCK_WINTER) {
		g_spawnmiscitemsaround_rock_didprecache_winter = 1;
				precache_model ("models/misc/terrain_rock1_cliffsnowy.bsp");
				precache_model ("models/misc/terrain_rock1_snowcliff.bsp");
				precache_model ("models/misc/terrain_rock1_snowrock.bsp");
				precache_model ("models/misc/terrain_rock1_alpineb.bsp");
				precache_model ("models/misc/terrain_rock1_polar.bsp");
	} else if (myrocktype == TERRAIN_ROCK_DESERT) {
		g_spawnmiscitemsaround_rock_didprecache_desert = 1;
				precache_model ("models/misc/terrain_rock1_cliffdesert.bsp");
				precache_model ("models/misc/terrain_rock1_desert2.bsp");
				precache_model ("models/misc/terrain_rock1_desert3.bsp");
				precache_model ("models/misc/terrain_rock1_desert4.bsp");
				precache_model ("models/misc/terrain_rock1_desert5.bsp");
				precache_model ("models/misc/terrain_rock1_desert.bsp");
				precache_model ("models/misc/terrain_rock1_desertmars1.bsp");
				precache_model ("models/misc/terrain_rock1_desertmars2.bsp");
	} else if (myrocktype == TERRAIN_ROCK_STRANGE) {
		g_spawnmiscitemsaround_rock_didprecache_strange = 1;
				precache_model ("models/misc/terrain_rock1_polar.bsp");
				precache_model ("models/misc/terrain_rock1_dirtygray.bsp");
				precache_model ("models/misc/terrain_rock1_cliffdarkgray.bsp");
				precache_model ("models/misc/terrain_rock1_alpinecliff.bsp");
				precache_model ("models/misc/terrain_rock1_alpineb.bsp");
	} else if (myrocktype == TERRAIN_ROCK_MISC) {
		g_spawnmiscitemsaround_rock_didprecache_misc = 1;
				precache_model ("models/misc/terrain_rock1_aegean.bsp");
				precache_model ("models/misc/terrain_rock1_alpineb.bsp");
				precache_model ("models/misc/terrain_rock1_alpinecliff.bsp");
				precache_model ("models/misc/terrain_rock1_alpinemnt.bsp");
				precache_model ("models/misc/terrain_rock1_cliffdarkgray.bsp");
				precache_model ("models/misc/terrain_rock1_dirty.bsp");
				precache_model ("models/misc/terrain_rock1_dirtygray.bsp");
				precache_model ("models/misc/terrain_rock1_dirtymossy.bsp");
				precache_model ("models/misc/terrain_rock1_dirtymuted.bsp");
				precache_model ("models/misc/terrain_rock1_italia.bsp");
				precache_model ("models/misc/terrain_rock1_cliffdesert.bsp");
				precache_model ("models/misc/terrain_rock1_desert2.bsp");
				precache_model ("models/misc/terrain_rock1_desert3.bsp");
				precache_model ("models/misc/terrain_rock1_desert4.bsp");
				precache_model ("models/misc/terrain_rock1_desert5.bsp");
				precache_model ("models/misc/terrain_rock1_desert.bsp");
				precache_model ("models/misc/terrain_rock1_desertmars1.bsp");
				precache_model ("models/misc/terrain_rock1_desertmars2.bsp");
				precache_model ("models/misc/terrain_rock1_polar.bsp");
				precache_model ("models/misc/terrain_rock1_volcanic.bsp");
				precache_model ("models/misc/terrain_rock1_black.bsp");
				precache_model ("models/misc/terrain_rock1_dirtyblack.bsp");
				precache_model ("models/misc/terrain_rock1_cliffdarkgray.bsp");
				precache_model ("models/misc/terrain_rock1_dirtygray.bsp");
				precache_model ("models/misc/terrain_rock1_temperate.bsp");
	} else {
		g_spawnmiscitemsaround_rock_didprecache_summer = 1;
		g_spawnmiscitemsaround_rock_didprecache_fall = 1;
				precache_model ("models/misc/terrain_rock1_aegean.bsp");
				precache_model ("models/misc/terrain_rock1_alpineb.bsp");
				precache_model ("models/misc/terrain_rock1_alpinecliff.bsp");
				precache_model ("models/misc/terrain_rock1_alpinemnt.bsp");
				precache_model ("models/misc/terrain_rock1_cliffdarkgray.bsp");
				precache_model ("models/misc/terrain_rock1_dirty.bsp");
				precache_model ("models/misc/terrain_rock1_dirtygray.bsp");
				precache_model ("models/misc/terrain_rock1_dirtymossy.bsp");
				precache_model ("models/misc/terrain_rock1_dirtymuted.bsp");
				precache_model ("models/misc/terrain_rock1_italia.bsp");
				precache_model ("models/misc/terrain_rock1_temperate.bsp");
	}
}



void SMI_spawn_rock_model(entity e)
{
	local float myrocktype;
	local float myrocks;
	local float rkrandvar;
	myrocktype = SMI_Rock_ChooseBaseTerrainType();
	
	rkrandvar = random();

	if (myrocktype == TERRAIN_ROCK_BURNING) {
			if (!g_spawnmiscitemsaround_rock_didprecache_burning) {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			e.canigniteflame = 1; //We can ignite crossbow/ballista bolts
			
			//Added a think for these, to set on fire those who touch
			if (rkrandvar > 0.66) {
				e.model = "models/misc/terrain_rock1_melting.bsp";
				e.touch = SMI_rock_burningintense_touch;
			} else if (rkrandvar > 0.33) {
				e.model = "models/misc/terrain_rock1_flaming.bsp";
				e.touch = SMI_rock_burninghot_touch;
			} else {
				e.model = "models/misc/terrain_rock1_burning.bsp";
				e.touch = SMI_rock_burning_touch;
			}
			//e.effects = EF_FULLBRIGHT; //We glooow HOT
			//effect Didn't work (maybe because we are bsp, had to symlink _glow maps for shaders
	} else if (myrocktype == TERRAIN_ROCK_BLACKSTONE) {
			if (!g_spawnmiscitemsaround_rock_didprecache_blackstone) {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			if (rkrandvar > 0.66) {
				e.model = "models/misc/terrain_rock1_volcanic.bsp";
			} else if (rkrandvar > 0.33) {
				e.model = "models/misc/terrain_rock1_black.bsp";
			} else {
				e.model = "models/misc/terrain_rock1_dirtyblack.bsp";
			}
	} else if (myrocktype == TERRAIN_ROCK_GRAYSTONE) {
			if (!g_spawnmiscitemsaround_rock_didprecache_graystone) {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			if (rkrandvar > 0.50) {
				e.model = "models/misc/terrain_rock1_cliffdarkgray.bsp";
			} else {
				e.model = "models/misc/terrain_rock1_dirtygray.bsp";
			}
	} else if (myrocktype == TERRAIN_ROCK_WINTER) {
			if (!g_spawnmiscitemsaround_rock_didprecache_winter) {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			if (rkrandvar > 0.80) {
				e.model = "models/misc/terrain_rock1_cliffsnowy.bsp";
			} else if (rkrandvar > 0.60) {
				e.model = "models/misc/terrain_rock1_snowcliff.bsp";
			} else if (rkrandvar > 0.40) {
				e.model = "models/misc/terrain_rock1_snowrock.bsp";
			} else if (rkrandvar > 0.20) {
				e.model = "models/misc/terrain_rock1_alpineb.bsp";
			} else {
				e.model = "models/misc/terrain_rock1_polar.bsp";
			}
	} else if (myrocktype == TERRAIN_ROCK_DESERT) {
			if (!g_spawnmiscitemsaround_rock_didprecache_desert) {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			myrocks = 8;
			if (rkrandvar > ((1/myrocks)*(myrocks-1))) {
				e.model = "models/misc/terrain_rock1_cliffdesert.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-2))) {
				e.model = "models/misc/terrain_rock1_desert2.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-3))) {
				e.model = "models/misc/terrain_rock1_desert3.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-4))) {
				e.model = "models/misc/terrain_rock1_desert4.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-5))) {
				e.model = "models/misc/terrain_rock1_desert5.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-6))) {
				e.model = "models/misc/terrain_rock1_desert.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-7))) {
				e.model = "models/misc/terrain_rock1_desertmars1.bsp";
			} else {
				e.model = "models/misc/terrain_rock1_desertmars2.bsp";
			}
	} else if (myrocktype == TERRAIN_ROCK_STRANGE) {
			if (!g_spawnmiscitemsaround_rock_didprecache_strange) {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			myrocks = 5;
			if (rkrandvar > ((1/myrocks)*(myrocks-1))) {
				e.model = "models/misc/terrain_rock1_polar.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-2))) {
				e.model = "models/misc/terrain_rock1_dirtygray.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-3))) {
				e.model = "models/misc/terrain_rock1_cliffdarkgray.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-4))) {
				e.model = "models/misc/terrain_rock1_alpinecliff.bsp";
			} else {
				e.model = "models/misc/terrain_rock1_alpineb.bsp";
			}
	} else if (myrocktype == TERRAIN_ROCK_MISC) {
			if (!g_spawnmiscitemsaround_rock_didprecache_misc) {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			myrocks = 25;
			if (rkrandvar > ((1/myrocks)*(myrocks-1))) {
				e.model = "models/misc/terrain_rock1_aegean.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-2))) {
				e.model = "models/misc/terrain_rock1_alpineb.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-3))) {
				e.model = "models/misc/terrain_rock1_alpinecliff.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-4))) {
				e.model = "models/misc/terrain_rock1_alpinemnt.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-5))) {
				e.model = "models/misc/terrain_rock1_cliffdarkgray.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-6))) {
				e.model = "models/misc/terrain_rock1_dirty.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-7))) {
				e.model = "models/misc/terrain_rock1_dirtygray.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-8))) {
				e.model = "models/misc/terrain_rock1_dirtymossy.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-9))) {
				e.model = "models/misc/terrain_rock1_dirtymuted.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-10))) {
				e.model = "models/misc/terrain_rock1_italia.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-11))) {
				e.model = "models/misc/terrain_rock1_cliffdesert.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-12))) {
				e.model = "models/misc/terrain_rock1_desert2.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-13))) {
				e.model = "models/misc/terrain_rock1_desert3.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-14))) {
				e.model = "models/misc/terrain_rock1_desert4.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-15))) {
				e.model = "models/misc/terrain_rock1_desert5.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-16))) {
				e.model = "models/misc/terrain_rock1_desert.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-17))) {
				e.model = "models/misc/terrain_rock1_desertmars1.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-18))) {
				e.model = "models/misc/terrain_rock1_desertmars2.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-19))) {
				e.model = "models/misc/terrain_rock1_polar.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-20))) {
				e.model = "models/misc/terrain_rock1_volcanic.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-21))) {
				e.model = "models/misc/terrain_rock1_black.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-22))) {
				e.model = "models/misc/terrain_rock1_dirtyblack.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-23))) {
				e.model = "models/misc/terrain_rock1_cliffdarkgray.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-24))) {
				e.model = "models/misc/terrain_rock1_dirtygray.bsp";
			} else {
				e.model = "models/misc/terrain_rock1_temperate.bsp";
			}
	} else {
		//Summer, fall, etc
			if (g_spawnmiscitemsaround_rock_didprecache_summer
			|| g_spawnmiscitemsaround_rock_didprecache_fall) {
				//Do nothing, we're good
			} else {
				SMI_spawn_rock_precache_model(myrocktype);
			}
			
			myrocks = 11;
			if (rkrandvar > ((1/myrocks)*(myrocks-1))) {
				e.model = "models/misc/terrain_rock1_aegean.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-2))) {
				e.model = "models/misc/terrain_rock1_alpineb.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-3))) {
				e.model = "models/misc/terrain_rock1_alpinecliff.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-4))) {
				e.model = "models/misc/terrain_rock1_alpinemnt.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-5))) {
				e.model = "models/misc/terrain_rock1_cliffdarkgray.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-6))) {
				e.model = "models/misc/terrain_rock1_dirty.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-7))) {
				e.model = "models/misc/terrain_rock1_dirtygray.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-8))) {
				e.model = "models/misc/terrain_rock1_dirtymossy.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-9))) {
				e.model = "models/misc/terrain_rock1_dirtymuted.bsp";
			} else if (rkrandvar > ((1/myrocks)*(myrocks-10))) {
				e.model = "models/misc/terrain_rock1_italia.bsp";
			} else {
				e.model = "models/misc/terrain_rock1_temperate.bsp";
			}
	}
}

//
void SMI_spawn_rock(vector selected_origin, float onceling, float randomangle, float allowliquid, float vfly)
{
			if (
			(selected_origin_x > world.maxs_x)
			|| (selected_origin_y > world.maxs_y)
			|| (selected_origin_z > world.maxs_z)
			|| (selected_origin_x < world.mins_x)
			|| (selected_origin_y < world.mins_y)
			|| (selected_origin_z < world.mins_z)
			) {
				//print("rock: selected origin out of world bounds, returning\n");
				return;
			}
			
			//Here we find out if we can build in that spot
			local float myteam;
			myteam = 0;
			myteam = autocvar_g_spawnmiscitemsaround_rock_spawnnearteam;
			
			if not(SMI_AbdBld_BuildNearBase(myteam, selected_origin))
			{
					//print("rock: selected Origin too close to wrong teambase, returning\n");
					return;
			}
			
			
			
			entity previousself = self;
			entity e;
			
			e = spawn();
			e.origin = selected_origin;
			
				if (autocvar_g_spawnmiscitemsaround_rock_tooclose) {
					//If we are too close, return
					if (autocvar_g_spawnmiscitemsaround_rock_avoidbuildings) {
						if (SMI_abdbld_tooclose_ent(e, autocvar_g_spawnmiscitemsaround_rock_tooclose))
						{
							remove(e);
							//print("rock: selected Origin too close to abdbld, spawnpoint, ctf flag, etc, returning\n");
							return;
						}
					} else {
						if (SMI_rocks_tooclose_ent(e, autocvar_g_spawnmiscitemsaround_rock_tooclose))
						{
							remove(e);
							//print("rock: selected Origin too close to spawnpoint, ctf flag, etc, returning\n");
							return;
						}
					}
				}
			
			
				if (onceling < 2)
				if (randomangle)
				{
					e.angles_y = random() * 180;
					//With rocks, we go all the way
					e.angles_x = random() * 180;
					e.angles_z = random() * 180;
				}
				
			e.fixangle = TRUE;
			
			e.classname = "building"; //So crossbow bolts behave correctly when striking
			e.accptcrrdbldspltr = BUILDING_ACCPTCRRDBLDSPLTR;
			//e.model = "models/misc/tanktraps_pyramid.bsp";
			SMI_spawn_rock_model(e);
			e.isautoblocktypemultitool = 1; //We're (big) terrain
			e.mins = '-20 -20 0';
			e.maxs = '20 20 20';
			e.solid = SOLID_BSP;
				
			self = e;
			setorigin(self, self.origin);
			if not(vfly) {
			if (onceling == 1) {
				e.angles_z = 180;
				e.mins = '-20 -20 -20';
				e.maxs = '20 20 0';
				
				//tracebox(self.origin + '0 0 2', self.mins, self.maxs, self.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 2', self.origin + '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 2) {
				//X
				e.angles_x = -90;
				e.mins = '-16 -16 -16';
				e.maxs = '0 16 16';
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '2 0 0', self.origin + '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 3) {
				//-X
				e.angles_x = 90;
				e.mins = '0 -16 -16';
				e.maxs = '16 16 16';
				
				//tracebox(self.origin + '2 0 0', self.mins, self.maxs, self.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '2 0 0', self.origin - '10000 0 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 4) {
				//Y
				e.angles_z = 90;
				e.mins = '-16 -16 -16';
				e.maxs = '16 0 16';
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        		       	traceline(self.origin + '0 2 0', self.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else if (onceling == 5) {
				//-Y
				e.angles_z = -90;
				e.mins = '-16 0 -16';
				e.maxs = '16 16 16';
				
				//tracebox(self.origin + '0 2 0', self.mins, self.maxs, self.origin + '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			traceline(self.origin + '0 2 0', self.origin - '0 10000 0', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				setorigin(self, trace_endpos);
			} else {
       				//tracebox(self.origin + '0 0 100', self.mins, self.maxs, self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
				traceline(self.origin + '0 0 100', self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
        			setorigin(self, trace_endpos);
			}
			}
			
			if(allowliquid < 1) {
				if(pointcontents(self.origin) == CONTENT_WATER)
				{
					remove(self);
					self = previousself;
					return;
				}
				if(allowliquid < 0) {
					//We don't even want to be above water
					traceline(self.origin + '0 0 2', self.origin - '0 0 10000', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), self);
					if(pointcontents(trace_endpos) == CONTENT_WATER)
					{
						remove(self);
						self = previousself;
						return;	
					}
				}
			}
			
			if (autocvar_g_spawnmiscitemsaround_rock_angles2norm) {
				if (autocvar_g_spawnmiscitemsaround_rock_angles2norm > random()) {
					//if (!onceling && !vfly) {
					//	tracebox(e.origin + '0 0 512', '-128 -128 0', '128 128 0',  e.origin - '0 0 1024', G_SPAWNMISCITEMS_FORCE_TRACE_MOVETYPE(), e);
					//}
					
					// now set angles_x so that the bsp model points parallel to the surface
					// (Notice the negation on the third statement below)
					// (This is likely due to Quake's different handling of brush(bsp) vs model models
					// thanks Divverent, this code is from the bugrigs stuff in cl_physics.qc mostly
					e.angles = vectoangles(
						'1 0 0' * v_forward_x * trace_plane_normal_z
						+
						'0 1 0' * v_forward_y * trace_plane_normal_z
						+
						'0 0 1' * -(v_forward_x * trace_plane_normal_x + v_forward_y * trace_plane_normal_y)
						);
				}
			}
			
			//gamemodel doesn't work for this, just clientmodel
			if (autocvar_g_spawnmiscitemsaround_rock_noforcedlight) {
				//If you do prefer the lightmapped effect
				spawnfunc_misc_clientmodel();
			} else {
                        	spawnfunc_misc_clientmodel_dlight();
			}
                        self.solid = SOLID_BSP;
                        self.movetype = MOVETYPE_PUSH;
								
			self = previousself;
}


void SMI_Rock(float spawns_we_want, float maxfail)
{
	if (g_spawnmiscitemsaround_rock_current >= autocvar_g_spawnmiscitemsaround_rock_max) {
		//dprint("We have enough rocks\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		if ((g_spawnmiscitemsaround_rock_currentfail > maxfail)
		&& ((g_spawnmiscitemsaround_rock_currentwin * 1.5) < g_spawnmiscitemsaround_rock_currentfail)
		) {
			//If too difficult to find a spot and above maxfail, giveup
			//print("Giving up attempt to Spawn TankPyrs\n");
			i = spawns_we_want + 1;
			++i; //Yeah
		} else {
	
		local float onceling;
		onceling = 0;
		
		float wrandvar;
		
		if ((autocvar_g_spawnmiscitemsaround_rock_uz) && (autocvar_g_spawnmiscitemsaround_rock_xy == 1))
		{
			//Z and XY
			wrandvar = random();
			if (wrandvar > 0.833) {
				onceling = 5;
			} else if (wrandvar > 0.6664) {
				onceling = 4;
			} else if (wrandvar > 0.4998) {
				onceling = 3;
			} else if (wrandvar > 0.3332) {
				onceling = 2;
			}  else if (wrandvar > 0.1666) {
				onceling = 1;
			} else {
				onceling = 0;
			}
		}
		else if ((autocvar_g_spawnmiscitemsaround_rock_uz) && (autocvar_g_spawnmiscitemsaround_rock_xy == 2))
		{
			//XY and Celing
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 1;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_rock_xy == 1)
		{
			//XY and Ground
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 0;
			}
		
		}
		else if (autocvar_g_spawnmiscitemsaround_rock_xy == 2)
		{
			//Only XY
			wrandvar = random();
			if (wrandvar > 0.75) {
				onceling = 5;
			} else if (wrandvar > 0.50) {
				onceling = 4;
			} else if (wrandvar > 0.25) {
				onceling = 3;
			} else {
				onceling = 2;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_rock_uz)
		{
			wrandvar = random();
			if (wrandvar > 0.5) {
				onceling = 1;
			}
		}
		
		spawnmiscitemsaround_overgrowth = autocvar_g_spawnmiscitemsaround_rock_overgrowth;
		float randomangle, allowliquid, vfly;
		randomangle = autocvar_g_spawnmiscitemsaround_rock_randomangle;
		allowliquid = autocvar_g_spawnmiscitemsaround_rock_allowliquid;
		vfly = autocvar_g_spawnmiscitemsaround_rock_fly;
		selected_origin = SMI_Select_ROCKSpawn_Point(onceling, autocvar_g_spawnmiscitemsaround_rock_allowliquid, vfly);
		if(selected_origin != '0 0 0')
		{
			SMI_spawn_rock(selected_origin, onceling, randomangle, allowliquid, vfly);
			
			wrandvar = random();
			
			if (wrandvar > 0.5) {
				//Array
				//1536
				local float roffseta;
				local float roffsetb;
				local float roffsetc;
				local float roffsetd;
				local float roffsete;
				local float roffsetf;
				local float roffsetg;
				local float roffseth;
				roffseta = 128 + (2048 + random());
				roffsetb = 128 + (2048 + random());
				roffsetc = 128 + (2048 + random());
				roffsetd = 128 + (2048 + random());
				roffsete = 128 + (2048 + random());
				roffsetf = 128 + (2048 + random());
				roffsetg = 128 + (2048 + random());
				roffseth = 128 + (2048 + random());
				if (onceling >= 4) {
				SMI_spawn_rock(selected_origin + ('1 0 0' * roffseta), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 0 1' * roffsetb), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('-1 0 0' * roffsetc), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 0 -1' * roffsetd), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('1 0 1' * roffsete), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('-1 0 -1' * roffsetf), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('1 0 -1' * roffsetg), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('-1 0 1' * roffseth), onceling, randomangle, allowliquid, vfly);
				} else if (onceling >= 2) {
				SMI_spawn_rock(selected_origin + ('0 1 0' * roffseta), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 0 1' * roffsetb), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 -1 0' * roffsetc), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 0 -1' * roffsetd), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 1 1' * roffsete), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 -1 -1' * roffsetf), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 1 -1' * roffsetg), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 -1 1' * roffseth), onceling, randomangle, allowliquid, vfly);
				} else {
				SMI_spawn_rock(selected_origin + ('1 0 0' * roffseta), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 1 0' * roffsetb), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('-1 0 0' * roffsetc), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('0 -1 0' * roffsetd), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('1 1 0' * roffsete), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('-1 -1 0' * roffsetf), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('1 -1 0' * roffsetg), onceling, randomangle, allowliquid, vfly);
				SMI_spawn_rock(selected_origin + ('-1 1 0' * roffseth), onceling, randomangle, allowliquid, vfly);
				}
				
			}

			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_rock_current = g_spawnmiscitemsaround_rock_current + 1;
			
			if (g_spawnmiscitemsaround_rock_current >= autocvar_g_spawnmiscitemsaround_rock_max) {
				//dprint("We have enough rocks\n");
				i = spawns_we_want + 1;
			}
		}
		}
	}
}


//End Rocks
/////////////////////////////////////////////////////////////////////


float SMI_AbdBld_SelectType()
{
	float mpick, mrandvar;
	local float con_bld_amount, gls_bld_amount, misc_bld_amount, fisc_bld_amount, sc_bld_amount;
	con_bld_amount = cvar("g_spawnmiscitemsaround_abdbld_concrete_amnt");
	gls_bld_amount = cvar("g_spawnmiscitemsaround_abdbld_glass_amnt");
	misc_bld_amount = cvar("g_spawnmiscitemsaround_abdbld_misc_amnt");
	fisc_bld_amount = cvar("g_spawnmiscitemsaround_abdbld_fisc_amnt");
	sc_bld_amount = cvar("g_spawnmiscitemsaround_abdbld_sc_amnt");
	
	mrandvar = random() *
	(con_bld_amount
	+ gls_bld_amount
	+ misc_bld_amount
	+ fisc_bld_amount
	+ sc_bld_amount
	);

	if (mrandvar < con_bld_amount) {
		mpick = 1;
	} else if (mrandvar < (
	con_bld_amount
	+ gls_bld_amount
	)) {
		mpick = 2;
	} else if (mrandvar < (
	con_bld_amount
	+ gls_bld_amount
	+ misc_bld_amount
	)) {
		mpick = 3;
	} else if (mrandvar < (
	con_bld_amount
	+ gls_bld_amount
	+ misc_bld_amount
	+ fisc_bld_amount
	)) {
		mpick = 4;
	} else if (mrandvar < (
	con_bld_amount
	+ gls_bld_amount
	+ misc_bld_amount
	+ fisc_bld_amount
	+ sc_bld_amount
	)) {
		mpick = 5;
	} else {
		mpick = 1;
	}
	
	return mpick;
}

void SMI_AbdBld_ArrayA (vector selected_origin, float onceling, float randomangle, float allowliquid, float vfly, float bldtype)
{
				//Array
				if (onceling >= 4) {
				SMI_spawn_abdbld(selected_origin + ('2048 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				} else if (onceling >= 2) {
				SMI_spawn_abdbld(selected_origin + ('0 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				} else {
				SMI_spawn_abdbld(selected_origin + ('2048 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				}
}

void SMI_AbdBld_ArrayRing1A (vector selected_origin, float onceling, float randomangle, float allowliquid, float vfly, float bldtype)
{
				local float wrandvar;
				float abdringisbox;
				abdringisbox = 0;
				wrandvar = random();
				
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring_isbox) {
					abdringisbox = 1;
				}
				
				//Ring (possibly around Array)
				if (onceling >= 4) {
				SMI_spawn_abdbld(selected_origin + ('4096 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-4096 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('4096 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-4096 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('4096 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-4096 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('4096 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-4096 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('4096 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-4096 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				
				} else if (onceling >= 2) {
				SMI_spawn_abdbld(selected_origin + ('0 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 4096 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 -4096 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 4096 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 -4096 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('0 4096 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -4096 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('0 4096 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -4096 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				} else {
				SMI_spawn_abdbld(selected_origin + ('4096 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-4096 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('4096 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-4096 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('4096 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-4096 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('4096 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-4096 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('4096 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-4096 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				}
}

void SMI_AbdBld_ArrayRing2A (vector selected_origin, float onceling, float randomangle, float allowliquid, float vfly, float bldtype)
{
				local float wrandvar;
				float abdringisbox;
				abdringisbox = 0;
				wrandvar = random();
				
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring2_isbox) {
					abdringisbox = 1;
				}
				
				//Ring2 (possibly around Ring and Array)
				if (onceling >= 4) {
				SMI_spawn_abdbld(selected_origin + ('6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('6144 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('6144 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					if (abdringisbox) {
					SMI_spawn_abdbld(selected_origin + ('6144 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					SMI_spawn_abdbld(selected_origin + ('6144 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					}
				
				} else if (onceling >= 2) {
				SMI_spawn_abdbld(selected_origin + ('0 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 6144 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 -6144 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 6144 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 -6144 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('0 6144 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -6144 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('0 6144 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -6144 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					if (abdringisbox) {
					SMI_spawn_abdbld(selected_origin + ('0 6144 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 4096 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -6144 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 4096 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					SMI_spawn_abdbld(selected_origin + ('0 6144 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -4096 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -6144 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -4096 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					}
					
				} else {
				SMI_spawn_abdbld(selected_origin + ('6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('6144 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('6144 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					if (abdringisbox) {
					SMI_spawn_abdbld(selected_origin + ('6144 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					SMI_spawn_abdbld(selected_origin + ('6144 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					}
				
				}
}

//This one is edges first
void SMI_AbdBld_ArrayRing2B (vector selected_origin, float onceling, float randomangle, float allowliquid, float vfly, float bldtype)
{
				local float wrandvar;
				float abdringisbox;
				abdringisbox = 0;
				wrandvar = random();
				
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring2_isbox) {
					abdringisbox = 1;
				}
				
				//Ring2 (possibly around Ring and Array)
				if (onceling >= 4) {
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					
					if (abdringisbox) {
					SMI_spawn_abdbld(selected_origin + ('6144 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 0 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					SMI_spawn_abdbld(selected_origin + ('6144 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 0 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					}
				SMI_spawn_abdbld(selected_origin + ('-6144 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				
				SMI_spawn_abdbld(selected_origin + ('6144 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					
				SMI_spawn_abdbld(selected_origin + ('6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('6144 0 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				//
				//
				
				//
				//
				SMI_spawn_abdbld(selected_origin + ('-6144 0 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					
				
				} else if (onceling >= 2) {
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 6144 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 -6144 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 6144 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('0 -6144 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					if (abdringisbox) {
					SMI_spawn_abdbld(selected_origin + ('0 6144 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 4096 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -6144 4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 4096 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					SMI_spawn_abdbld(selected_origin + ('0 6144 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -4096 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -6144 -4096'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('0 -4096 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
					}
				SMI_spawn_abdbld(selected_origin + ('0 -6144 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				
				SMI_spawn_abdbld(selected_origin + ('0 6144 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					
				SMI_spawn_abdbld(selected_origin + ('0 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 0 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('0 6144 2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 2048 6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				//
				//
				
				//
				//
				SMI_spawn_abdbld(selected_origin + ('0 -6144 -2048'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -2048 -6144'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					
					
				} else {
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('6144 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				if (abdringisbox) SMI_spawn_abdbld(selected_origin + ('-6144 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					
					if (abdringisbox) {
					SMI_spawn_abdbld(selected_origin + ('6144 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('4096 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					SMI_spawn_abdbld(selected_origin + ('6144 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-6144 -4096 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					SMI_spawn_abdbld(selected_origin + ('-4096 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
					}
				SMI_spawn_abdbld(selected_origin + ('-6144 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				
				SMI_spawn_abdbld(selected_origin + ('6144 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					
				SMI_spawn_abdbld(selected_origin + ('6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-6144 0 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('0 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
				SMI_spawn_abdbld(selected_origin + ('6144 2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('2048 6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				//
				//
				
				//
				//
				SMI_spawn_abdbld(selected_origin + ('-6144 -2048 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				SMI_spawn_abdbld(selected_origin + ('-2048 -6144 0'), onceling, randomangle, allowliquid, vfly, bldtype);
				
					
				
				}
}

//Abandoned Building
void SMI_AbdBld(float spawns_we_want, float maxfail, float bldtype)
{
	if (g_spawnmiscitemsaround_abdbld_current >= autocvar_g_spawnmiscitemsaround_abdbld_max) {
		//dprint("We have enough abdblds\n");
		return;
	}
	
	float i = 0;
	vector selected_origin = '0 0 0';

	//dprint("Spawning Misc Items\n");
	for(i = 1; i <= spawns_we_want;)
	{
		if ((g_spawnmiscitemsaround_abdbld_currentfail > maxfail)
		&& ((g_spawnmiscitemsaround_abdbld_currentwin * 1.5) < g_spawnmiscitemsaround_abdbld_currentfail)
		) {
			//If too difficult to find a spot and above maxfail, giveup
			//print("Giving up attempt to Spawn TankPyrs\n");
			i = spawns_we_want + 1;
			++i; //Yeah
		} else {
		local float onceling;
		onceling = 0;
		
		float wrandvar;
		
		if ((autocvar_g_spawnmiscitemsaround_abdbld_uz) && (autocvar_g_spawnmiscitemsaround_abdbld_xy == 1))
		{
			//Z and XY
			wrandvar = random();
			if (wrandvar > 0.833) {
				onceling = 5;
			} else if (wrandvar > 0.6664) {
				onceling = 4;
			} else if (wrandvar > 0.4998) {
				onceling = 3;
			} else if (wrandvar > 0.3332) {
				onceling = 2;
			}  else if (wrandvar > 0.1666) {
				onceling = 1;
			} else {
				onceling = 0;
			}
		}
		else if ((autocvar_g_spawnmiscitemsaround_abdbld_uz) && (autocvar_g_spawnmiscitemsaround_abdbld_xy == 2))
		{
			//XY and Celing
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 1;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_abdbld_xy == 1)
		{
			//XY and Ground
			wrandvar = random();
			if (wrandvar > 0.8) {
				onceling = 5;
			} else if (wrandvar > 0.6) {
				onceling = 4;
			} else if (wrandvar > 0.4) {
				onceling = 3;
			} else if (wrandvar > 0.2) {
				onceling = 2;
			} else {
				onceling = 0;
			}
		
		}
		else if (autocvar_g_spawnmiscitemsaround_abdbld_xy == 2)
		{
			//Only XY
			wrandvar = random();
			if (wrandvar > 0.75) {
				onceling = 5;
			} else if (wrandvar > 0.50) {
				onceling = 4;
			} else if (wrandvar > 0.25) {
				onceling = 3;
			} else {
				onceling = 2;
			}
		}
		else if (autocvar_g_spawnmiscitemsaround_abdbld_uz)
		{
			wrandvar = random();
			if (wrandvar > 0.5) {
				onceling = 1;
			}
		}
		
		spawnmiscitemsaround_overgrowth = autocvar_g_spawnmiscitemsaround_abdbld_overgrowth;
		float randomangle, allowliquid, vfly;
		randomangle = autocvar_g_spawnmiscitemsaround_abdbld_randomangle;
		allowliquid = autocvar_g_spawnmiscitemsaround_abdbld_allowliquid;
		vfly = autocvar_g_spawnmiscitemsaround_abdbld_fly;
		selected_origin = SMI_Select_ABDSpawn_Point(onceling, autocvar_g_spawnmiscitemsaround_abdbld_allowliquid, vfly);
		if(selected_origin != '0 0 0')
		{
			if (autocvar_g_spawnmiscitemsaround_abdbld_snapamnt)
			{
				local float myzorig;
				myzorig = selected_origin_z;
				selected_origin = vsnap(selected_origin, autocvar_g_spawnmiscitemsaround_abdbld_snapamnt);
				selected_origin_z = myzorig; //We only want x and y to snap
			}
			
			if (random() < autocvar_g_spawnmiscitemsaround_abdbld_randombld)
			{
				bldtype = 0; //Random each time
			}
			
			wrandvar = random();
			if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayreverseorder)
			{
				//A less linear ordering so we have some room for larger blds.
				//////////////////////Ring2
				wrandvar = random();
				//
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring2) {
					SMI_AbdBld_ArrayRing2B(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
				}
				
				/////////////////////3x3 array
				wrandvar = random();
				//
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate) {
					SMI_AbdBld_ArrayA(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
					
				}
				
				////////////////////Ring1
				wrandvar = random();
				//
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring) {
					SMI_AbdBld_ArrayRing1A(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
				}
				
				SMI_spawn_abdbld(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
			} else {
			
				SMI_spawn_abdbld(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
			
				/////////////////////3x3 array
				wrandvar = random();
				//
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate) {
					SMI_AbdBld_ArrayA(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
					
				}
			
				////////////////////Ring1
				wrandvar = random();
				//
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring) {
					SMI_AbdBld_ArrayRing1A(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
				}
			
				//////////////////////Ring2
				wrandvar = random();
				//
				if (wrandvar < autocvar_g_spawnmiscitemsaround_abdbld_arrayrate_ring2) {
					SMI_AbdBld_ArrayRing2A(selected_origin, onceling, randomangle, allowliquid, vfly, bldtype);
				}
			}

			++i; // we found a spot, lets progress to the next one now
			g_spawnmiscitemsaround_abdbld_current = g_spawnmiscitemsaround_abdbld_current + 1;
			
			if (g_spawnmiscitemsaround_abdbld_current >= autocvar_g_spawnmiscitemsaround_abdbld_max) {
				//dprint("We have enough abdblds\n");
				i = spawns_we_want + 1;
			}
		}
		}
	}
}

void SMI_ZeroOutVars()
{
	g_spawnmiscitemsaround_bumper_current = 0;
	g_spawnmiscitemsaround_baloon_current = 0;
	g_spawnmiscitemsaround_jumppad_current = 0;
	g_spawnmiscitemsaround_spikes_current = 0;
	g_spawnmiscitemsaround_tnkpyr_current = 0;
	g_spawnmiscitemsaround_rock_current = 0;
	g_spawnmiscitemsaround_abdbld_current = 0;
	g_spawnmiscitemsaround_spikeball_current = 0;
	g_spawnmiscitemsaround_gradual_started = 0;
	g_spawnmiscitemsaround_tnkpyr_currentwin = 0;
	g_spawnmiscitemsaround_tnkpyr_currentfail = 0;
	g_spawnmiscitemsaround_rock_currentwin = 0;
	g_spawnmiscitemsaround_rock_currentfail = 0;
	g_spawnmiscitemsaround_rock_didprecache_misc = 0;
	g_spawnmiscitemsaround_rock_didprecache_summer = 0;
	g_spawnmiscitemsaround_rock_didprecache_fall = 0;
	g_spawnmiscitemsaround_rock_didprecache_winter = 0;
	g_spawnmiscitemsaround_rock_didprecache_strange = 0;
	g_spawnmiscitemsaround_rock_didprecache_desert = 0;
	g_spawnmiscitemsaround_rock_didprecache_graystone = 0;
	g_spawnmiscitemsaround_rock_didprecache_blackstone = 0;
	g_spawnmiscitemsaround_rock_didprecache_burning = 0;
	g_spawnmiscitemsaround_abdbld_currentwin = 0;
	g_spawnmiscitemsaround_abdbld_currentfail = 0;
	g_spawnmiscitemsaround_abdbld_currentnukes = 0;
	g_spawnmiscitemsaround_abdbld_city1_meadowset = 0;
	g_spawnmiscitemsaround_abdbld_city1_meadowset_lastorigin = '0 0 0';
	g_spawnmiscitemsaround_abdbld_city2_meadowset = 0;
	g_spawnmiscitemsaround_abdbld_city2_meadowset_lastorigin = '0 0 0';
	g_spawnmiscitemsaround_abdbld_city3_meadowset = 0;
	g_spawnmiscitemsaround_abdbld_city3_meadowset_lastorigin = '0 0 0';
	g_spawnmiscitemsaround_abdbld_city4_meadowset = 0;
	g_spawnmiscitemsaround_abdbld_city4_meadowset_lastorigin = '0 0 0';
	if (teamplay || autocvar_g_spawn_around_findbases_nonteamplay)
	{
		Mutator_FindBases_ZeroOutCvars(); //for g_spawn_around_findbases_nonteamplay
		//Yes, if we have all 4 mutators that use the routine running
		//one _might_ __think__ that it could mean that
		//we run the find bases computation 4 times at map start.
		//If such were the case: Ohwell. It's not an intense computation.
		//and the alternative could be old values from previous run sticking around
		//
		//However since the zeroout routines are run _before_ the first spawn at BuildMutatorsString
		//(and at match end), this should not happen, and we should
		//still run the find bases routine only once.
	}
}

void SMI_Spawn_Gradual ()
{
	if ((g_spawnmiscitemsaround_bumper_current >= autocvar_g_spawnmiscitemsaround_bumper_max)
	&& (g_spawnmiscitemsaround_baloon_current >= autocvar_g_spawnmiscitemsaround_baloon_max)
	&& (g_spawnmiscitemsaround_jumppad_current >= autocvar_g_spawnmiscitemsaround_jumppad_max)
	&& (g_spawnmiscitemsaround_spikes_current >= autocvar_g_spawnmiscitemsaround_spikes_max)
	&& (g_spawnmiscitemsaround_tnkpyr_current >= autocvar_g_spawnmiscitemsaround_tnkpyr_max)
	&& (g_spawnmiscitemsaround_abdbld_current >= autocvar_g_spawnmiscitemsaround_abdbld_max)
	&& (g_spawnmiscitemsaround_rock_current >= autocvar_g_spawnmiscitemsaround_rock_max)
	&& (g_spawnmiscitemsaround_spikeball_current >= autocvar_g_spawnmiscitemsaround_spikeball_max))
	{
		self.nextthink = time + 2;
	} else {
		
		spawnmiscitemsaround_spikeball_xamnt = cvar("g_spawnmiscitemsaround_spikeball_xamnt");
		spawnmiscitemsaround_spikeball_yamnt = cvar("g_spawnmiscitemsaround_spikeball_yamnt");
		spawnmiscitemsaround_spikeball_zamnt = cvar("g_spawnmiscitemsaround_spikeball_zamnt");
		spawnmiscitemsaround_spikeball_celingamnt = cvar("g_spawnmiscitemsaround_spikeball_celingamnt");
	
		spawnmiscitemsaround_spikeball_floatamnt = cvar("g_spawnmiscitemsaround_spikeball_floatamnt");
		spawnmiscitemsaround_spikeball_standamnt = cvar("g_spawnmiscitemsaround_spikeball_standamnt");
	
		local float m, n;
		//Make sure we don't spawn more than max.
		m = autocvar_g_spawnmiscitemsaround_bumper_max;
		n = m - g_spawnmiscitemsaround_bumper_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_Bumper(n);
		
		m = autocvar_g_spawnmiscitemsaround_baloon_max;
		n = m - g_spawnmiscitemsaround_baloon_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_Baloon(n);
		
		m = autocvar_g_spawnmiscitemsaround_jumppad_max;
		n = m - g_spawnmiscitemsaround_jumppad_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_JumpPad(n);
		
		m = autocvar_g_spawnmiscitemsaround_spikes_max;
		n = m - g_spawnmiscitemsaround_spikes_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_Spikes(n);

		
		m = autocvar_g_spawnmiscitemsaround_abdbld_max;
		n = m - g_spawnmiscitemsaround_abdbld_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_AbdBld(n, 500, SMI_AbdBld_SelectType());
		
		
		m = autocvar_g_spawnmiscitemsaround_rock_max;
		n = m - g_spawnmiscitemsaround_rock_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_Rock(n, 500);
		
				
		m = autocvar_g_spawnmiscitemsaround_tnkpyr_max;
		n = m - g_spawnmiscitemsaround_tnkpyr_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_TnkPyr(n, 500);
		
		
		m = autocvar_g_spawnmiscitemsaround_spikeball_max;
		n = m - g_spawnmiscitemsaround_spikeball_current;
		if (n > autocvar_g_spawnmiscitemsaround_gradual_per) {
			n = autocvar_g_spawnmiscitemsaround_gradual_per;
		}
		SMI_SpikeBall(n);
		
		
		self.nextthink = time + autocvar_g_spawnmiscitemsaround_gradual;
	}
}

void SMI_Spawn_GradualInit()
{
		entity e;
		
		e = spawn();
		e.think = SMI_Spawn_Gradual;
		e.nextthink = time; //Start Right Away
}


MUTATOR_HOOKFUNCTION(spawnmiscitems_MatchEnd)
{
	SMI_ZeroOutVars();
	return TRUE;
}

MUTATOR_HOOKFUNCTION(spawnmiscitems_PlayerSpawn)
{
	if (g_spawnmiscitemsaround_bumper_current >= autocvar_g_spawnmiscitemsaround_bumper_max)
	if (g_spawnmiscitemsaround_baloon_current >= autocvar_g_spawnmiscitemsaround_baloon_max)
	if (g_spawnmiscitemsaround_jumppad_current >= autocvar_g_spawnmiscitemsaround_jumppad_max)
	if (g_spawnmiscitemsaround_spikes_current >= autocvar_g_spawnmiscitemsaround_spikes_max)
	if (g_spawnmiscitemsaround_tnkpyr_current >= autocvar_g_spawnmiscitemsaround_tnkpyr_max)
	if (g_spawnmiscitemsaround_abdbld_current >= autocvar_g_spawnmiscitemsaround_abdbld_max)
	if (g_spawnmiscitemsaround_rock_current >= autocvar_g_spawnmiscitemsaround_rock_max)
	if (g_spawnmiscitemsaround_spikeball_current >= autocvar_g_spawnmiscitemsaround_spikeball_max)
	{
		//dprint("We have jumppads and bumpers\n");
		return 0;
	}
	
	if (autocvar_g_spawnmiscitemsaround_gradual && !g_spawnmiscitemsaround_gradual_started) {
		SMI_Spawn_GradualInit();
		g_spawnmiscitemsaround_gradual_started = 1;
	} else {
	spawnmiscitemsaround_spikeball_xamnt = cvar("g_spawnmiscitemsaround_spikeball_xamnt");
	spawnmiscitemsaround_spikeball_yamnt = cvar("g_spawnmiscitemsaround_spikeball_yamnt");
	spawnmiscitemsaround_spikeball_zamnt = cvar("g_spawnmiscitemsaround_spikeball_zamnt");
	spawnmiscitemsaround_spikeball_celingamnt = cvar("g_spawnmiscitemsaround_spikeball_celingamnt");
	
	spawnmiscitemsaround_spikeball_floatamnt = cvar("g_spawnmiscitemsaround_spikeball_floatamnt");
	spawnmiscitemsaround_spikeball_standamnt = cvar("g_spawnmiscitemsaround_spikeball_standamnt");

	SMI_Bumper(autocvar_g_spawnmiscitemsaround_bumper_per);
	SMI_Baloon(autocvar_g_spawnmiscitemsaround_baloon_per);
	SMI_JumpPad(autocvar_g_spawnmiscitemsaround_jumppad_per);
	SMI_Spikes(autocvar_g_spawnmiscitemsaround_spikes_per);
	SMI_AbdBld(autocvar_g_spawnmiscitemsaround_abdbld_per, 500, SMI_AbdBld_SelectType());
	SMI_Rock(autocvar_g_spawnmiscitemsaround_rock_per, 500);
	SMI_TnkPyr(autocvar_g_spawnmiscitemsaround_tnkpyr_per, 500);
	SMI_SpikeBall(autocvar_g_spawnmiscitemsaround_spikeball_per);
	}
	
	return TRUE;
}


MUTATOR_HOOKFUNCTION(spawnmiscitems_BuildMutatorsString)
{
	//Happens on map start only
	SMI_ZeroOutVars();
	ret_string = strcat(ret_string, ":spawnmiscitems");
	return 0;
}

MUTATOR_HOOKFUNCTION(spawnmiscitems_BuildMutatorsPrettyString)
{
	//Happens on each player join it seems
	ret_string = strcat(ret_string, ", Spawn MiscItems");
	return 0;
}

MUTATOR_DEFINITION(mutator_spawnmiscitems)
{
	MUTATOR_HOOK(MatchEnd, spawnmiscitems_MatchEnd, CBC_ORDER_ANY);
	MUTATOR_HOOK(PlayerSpawn, spawnmiscitems_PlayerSpawn, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsString, spawnmiscitems_BuildMutatorsString, CBC_ORDER_ANY);
	MUTATOR_HOOK(BuildMutatorsPrettyString, spawnmiscitems_BuildMutatorsPrettyString, CBC_ORDER_ANY);
	
	// this just turns on the cvar.
	MUTATOR_ONADD
	{
		g_spawnmiscitemsaround = 1;
	}

	// this just turns off the cvar.
	MUTATOR_ONREMOVE
	{	 
		g_spawnmiscitemsaround = 0;
	}

	return 0;
}

