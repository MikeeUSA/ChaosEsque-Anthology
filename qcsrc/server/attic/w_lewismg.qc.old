#ifdef REGISTER_WEAPON
REGISTER_WEAPON(LEWISMG, w_lewismg, IT_NAILS, 3, WEP_FLAG_NORMAL | WEP_FLAG_RELOADABLE | WEP_TYPE_HITSCAN, BOT_PICKUP_RATING_HIGH, "lewismg", "lewismg", _("Lewis Gun"))
#else
#ifdef SVQC
.float lewismg_jammed;
.float lewismg_unjam;
.float lewismg_unjam_time;
.float lewismg_click;
.float lewismg_overheat_cnt;
.float lewismg_overheated_until;
// weapon frames

float W_LewisMG_NeedManualReload() {
	if  (autocvar_g_manualreload && (autocvar_g_balance_lewismg_reload_ammo && self.clip_load < autocvar_g_balance_lewismg_sustained_ammo))
	{
		if (!self.lewismg_click && (self.BUTTON_ATCK)) {
			spamsound (self, CH_SHOTS, "weapons/dryfire.wav", VOL_BASE * 0.35, ATTN_NORM); //Not 0.25: Heavier Firing Pin
			self.lewismg_click = 1;
		}
		else if not(self.BUTTON_ATCK)
		{
			self.lewismg_click = 0;
		}
		return 1;
	} else {
		return 0;
	}
	
}

void lewismg_fire_auto()
{
	float lewismg_spread;
	
	if (self.lewismg_jammed)
	{
		w_ready();
		return;
	}
	
	if not((time > self.lewismg_overheated_until) || autocvar_g_nosmallarmsoverheating)
	{
		w_ready();
		return;
	}
	
	if(W_LewisMG_NeedManualReload()) {
		w_ready();
		return;	
	}

	if (!self.BUTTON_ATCK)
	{
		w_ready();
		return;
	}

	if (!weapon_action(self.weapon, WR_CHECKAMMO1))
	if not(self.items & IT_UNLIMITED_WEAPON_AMMO)
	{
		W_SwitchWeapon_Force(self, w_getbestweapon(self));
		w_ready();
		return;
	}

	W_DecreaseAmmo(ammo_nails, autocvar_g_balance_lewismg_sustained_ammo, autocvar_g_balance_lewismg_reload_ammo);

	
	if(autocvar_g_balance_lewismg_jamrate &&
 	(autocvar_g_balance_lewismg_jamrate > random() ))
 	{
		if ((clienttype(self) == CLIENTTYPE_REAL)) {
			sprint(self, "Your machinegun has jammed\n");
		}
		self.lewismg_jammed = 1;
	} else { //Start Not Jammed
	
	W_SetupShot (self, autocvar_g_antilag_bullets && autocvar_g_balance_lewismg_speed >= autocvar_g_antilag_bullets, 0, "weapons/uzi_fire_bass.ogg", CH_WEAPON_A, autocvar_g_balance_lewismg_sustained_damage);
	if (!g_norecoil)
	{
		self.punchangle_x = random () - 0.5;
		self.punchangle_y = random () - 0.5;
	}

	W_MaybeShootFromEyeForAltAim(self); //shoot from the eye maybe if in alt aim so that shooting through windows works correctly when aiming

	lewismg_spread = bound(autocvar_g_balance_lewismg_spread_min, autocvar_g_balance_lewismg_spread_min + (autocvar_g_balance_lewismg_spread_add * self.misc_bulletcounter), autocvar_g_balance_lewismg_spread_max);
	fireBallisticBullet(w_shotorg, w_shotdir, lewismg_spread, autocvar_g_balance_lewismg_speed, 5, autocvar_g_balance_lewismg_sustained_damage, autocvar_g_balance_lewismg_sustained_headshotaddeddamage, autocvar_g_balance_lewismg_sustained_force, WEP_LEWISMG, PROJECTILE_BULLETRIFLE9MM, 1, autocvar_g_balance_lewismg_bulletconstant, autocvar_g_balance_lewismg_sustained_coreshotaddeddamage);
	endFireBallisticBullet();

	self.misc_bulletcounter = self.misc_bulletcounter + 1;

	pointparticles(particleeffectnum("uzi_muzzleflash"), w_shotorg, w_shotdir * 1000, 1);

	UziFlash();
	W_AttachToShotorg(self.muzzle_flash, '19 0 1.5');
	
	PlayerGunRise(self, autocvar_g_balance_lewismg_gunrise, random() * autocvar_g_balance_lewismg_gunrun);

	if (autocvar_g_casings >= 2) // casing code
		SpawnCasing_Offset (((random () * 50 + 50) * v_right) - (v_forward * (random () * 30 + 30)) - ((random () * 120 + 40) * v_up), 2, vectoangles(v_forward),'0 250 0', 100, 105, self, '1 0 0');

	
	if not (autocvar_g_nosmallarmsoverheating) {
	    	//Overheating//
			//print(ftos(self.lewismg_overheat_cnt),"_Firing\n");
		
	    	self.lewismg_overheat_cnt = self.lewismg_overheat_cnt + autocvar_g_balance_lewismg_heatconstant;
         
	    	if (self.lewismg_overheat_cnt > random() )
 	    	{
			if ((clienttype(self) == CLIENTTYPE_REAL)) {
				sprint(self, "Your lewismg overheated\n");
			}
				
			self.lewismg_overheated_until = time + (autocvar_g_balance_lewismg_cooldownwait * (self.lewismg_overheat_cnt + 1));
	    	}
	    	//Overheating//
	}
	
	
	} //End Not Jammed
	
	ATTACK_FINISHED(self) = time + autocvar_g_balance_lewismg_sustained_refire * W_WeaponRateFactor();
	weapon_thinkf(WFRAME_FIRE1, autocvar_g_balance_lewismg_sustained_refire, lewismg_fire_auto);
}

void spawnfunc_weapon_lewismg()
{    
	weapon_defaultspawnfunc(WEP_LEWISMG);
}

float w_lewismg(float req)
{

	if (!autocvar_g_nosmallarmsoverheating) {
	//Overheating and cooldown stuff://
		if (!self.BUTTON_ATCK) {
				//Secondary does nothing, so is irrelevant here
				//print(ftos(self.lewismg_overheat_cnt),"_Cooldown\n");
			
			if (self.lewismg_overheat_cnt < autocvar_g_balance_lewismg_heatmin) {
				self.lewismg_overheat_cnt = autocvar_g_balance_lewismg_heatmin;
			} else {
				self.lewismg_overheat_cnt = self.lewismg_overheat_cnt - (autocvar_g_balance_lewismg_cooldownrate * sys_frametime);
			}
		}
	//Overheating and cooldown stuff Done//
	}
	

	float ammo_amount;
	if (req == WR_AIM) {
		if (W_LewisMG_NeedManualReload()) { weapon_action(self.weapon, WR_RELOAD); } // bot reload if automatic reload off

		if (self.lewismg_jammed) {
			 weapon_action(self.weapon, WR_RELOAD);
		}

		if(vlen(self.origin-self.enemy.origin) < 3000 - bound(0, skill, 10) * 200)
			self.BUTTON_ATCK = bot_aim(1000000, 0, 0.001, FALSE);
		else
		{
			self.BUTTON_ATCK2 = bot_aim(1000000, 0, 0.001, FALSE);
		}
	}
	else if (req == WR_THINK && !W_LewisMG_NeedManualReload())
	{
		if(autocvar_g_balance_lewismg_reload_ammo && self.clip_load < autocvar_g_balance_lewismg_sustained_ammo) // forced reload
			weapon_action(self.weapon, WR_RELOAD);		
		else
		{
		  if (self.lewismg_jammed && self.lewismg_unjam)
		  {
		  	if (time >= self.lewismg_unjam_time) {
				self.lewismg_jammed = 0;
				self.lewismg_unjam = 0;
				if ((clienttype(self) == CLIENTTYPE_REAL)) {
					sprint(self, "You cleared the jam\n");
				}
			}
		  } else {
			if (self.BUTTON_ATCK)
			if (self.lewismg_jammed != 1)
			if ((time > self.lewismg_overheated_until) || autocvar_g_nosmallarmsoverheating)
			if (weapon_prepareattack(0, 0))
			{
				self.misc_bulletcounter = 0;
				lewismg_fire_auto();
			}

			/*
			if(self.BUTTON_ATCK2)
			if (self.lewismg_jammed != 1)
			if ((time > self.lewismg_overheated_until) || autocvar_g_nosmallarmsoverheating)
			if(weapon_prepareattack(1, 0))
			{
				if (!weapon_action(self.weapon, WR_CHECKAMMO2))
				if not(self.items & IT_UNLIMITED_WEAPON_AMMO)
				{
					W_SwitchWeapon_Force(self, w_getbestweapon(self));
					w_ready();
					return FALSE;
				}

				W_DecreaseAmmo(ammo_nails, autocvar_g_balance_lewismg_burst_ammo, autocvar_g_balance_lewismg_reload_ammo);

				self.misc_bulletcounter = autocvar_g_balance_lewismg_burst * -1;
				uzi_mode1_fire_burst();
			}
			*/
			////END NORMAL////
		  }
		}
	}
	else if (req == WR_PRECACHE)
	{
		precache_model ("models/uziflash.md3");
		precache_model ("models/weapons/g_lewismg.md3");
		precache_model ("models/weapons/v_lewismg.md3");
		precache_model ("models/weapons/h_lewismg.iqm");
		precache_sound ("weapons/uzi_fire_bass.ogg");		
	}
	else if (req == WR_SETUP)
	{
		self.lewismg_overheat_cnt = autocvar_g_balance_lewismg_heatmin;

		self.weaponaltaim_use = 1;
		//self.weaponaltaim = '44 0.1 -5';
		//self.weaponaltaim = '54 -0.35 -2.95';
		//self.weaponaltaim = '47 -0.35 -5';
		//self.weaponaltaim = '50 -0.35 -4';
		//self.weaponaltaim = '52 -0.35 -4'; //too far to right
		//self.weaponaltaim = '52 0 -4'; //too far to left
		//self.weaponaltaim = '62 -0.20 -5.25';
		//self.weaponaltaim = '62 -0.20 -6';
		self.weaponaltaim = '62 -0.20 -5.6';
		weapon_setup(WEP_LEWISMG);
		self.current_ammo = ammo_nails;
		
		
		
		  if (self.lewismg_jammed && self.lewismg_unjam)
		  {
		  	if (time >= self.lewismg_unjam_time) {
				self.lewismg_jammed = 0;
				self.lewismg_unjam = 0;
				if ((clienttype(self) == CLIENTTYPE_REAL)) {
					sprint(self, "You cleared the malfunction\n");
				}
			}
		  }
	}
	else if (req == WR_CHECKAMMO1)
	{
        ammo_amount = self.ammo_nails >= autocvar_g_balance_lewismg_sustained_ammo;

		if(autocvar_g_balance_lewismg_reload_ammo)		
            ammo_amount += self.(weapon_load[WEP_LEWISMG]) >= autocvar_g_balance_lewismg_sustained_ammo;
		
		return ammo_amount;
	}
	else if (req == WR_CHECKAMMO2)
	{
        ammo_amount = self.ammo_nails >= autocvar_g_balance_lewismg_sustained_ammo;

		if(autocvar_g_balance_lewismg_reload_ammo)
            ammo_amount += self.(weapon_load[WEP_LEWISMG]) >= autocvar_g_balance_lewismg_sustained_ammo;
		
		return ammo_amount;
	}
	else if (req == WR_RELOAD)
	{
		if (self.lewismg_jammed) {
			weapon_thinkf(WFRAME_RELOAD, autocvar_g_balance_lewismg_clearjam_time, w_ready);
			if (self.lewismg_unjam != 1) {
				self.lewismg_unjam = 1;
				self.lewismg_unjam_time = time + autocvar_g_balance_lewismg_clearjam_time;
				self.lewismg_click = 0;
				if ((clienttype(self) == CLIENTTYPE_REAL)) {
					sprint(self, "You work on the weapon\n");
				}
			}
		} else {
			W_Reload(autocvar_g_balance_lewismg_sustained_ammo, autocvar_g_balance_lewismg_reload_ammo, autocvar_g_balance_lewismg_reload_time, "weapons/reload.wav");
			self.lewismg_click = 0;
		}
	}
	return TRUE;
}
#endif
#ifdef CSQC
float w_lewismg(float req)
{
	if(req == WR_IMPACTEFFECT)
	{
		vector org2;
		org2 = w_org + w_backoff * 2;
		pointparticles(particleeffectnum("machinegun_impact"), org2, w_backoff * 1000, 1);
		if(!w_issilent)
			if(w_random < 0.05)
				sound(self, CH_SHOTS, "weapons/ric1.wav", VOL_BASE, ATTN_NORM);
			else if(w_random < 0.1)
				sound(self, CH_SHOTS, "weapons/ric2.wav", VOL_BASE, ATTN_NORM);
			else if(w_random < 0.2)
				sound(self, CH_SHOTS, "weapons/ric3.wav", VOL_BASE, ATTN_NORM);
	}
	else if(req == WR_PRECACHE)
	{
		precache_sound("weapons/ric1.wav");
		precache_sound("weapons/ric2.wav");
		precache_sound("weapons/ric3.wav");
	}
	else if (req == WR_SUICIDEMESSAGE)
		w_deathtypestring = _("%s is now thinking with portals");
	else if (req == WR_KILLMESSAGE)
	{
		if(w_deathtype & HITTYPE_SECONDARY)
			w_deathtypestring = _("%s was sniped by %s's Lewis Gun");
		else if(w_deathtype & HITTYPE_CORESHOT)
			w_deathtypestring = _("%s was ripped through the heart and lungs by %s's Lewis Gun");
		else
			w_deathtypestring = _("%s torn to bits by %s's Lewis Gun");
	}
	return TRUE;
}
#endif
#endif


//void spawnfunc_weapon_lewismg()
//{    
//	weapon_defaultspawnfunc(WEP_LEWISMG);
//}
