#ifdef REGISTER_WEAPON
REGISTER_WEAPON(TEC9, w_tec9, IT_NAILS, 2, WEP_FLAG_NORMAL | WEP_FLAG_RELOADABLE | WEP_TYPE_HITSCAN, BOT_PICKUP_RATING_LOW, "tec9", "tec9", _("Tec-9"))
#else
#ifdef SVQC

.float tec9_release;
.float tec9_jammed;
.float tec9_unjam;
.float tec9_unjam_time;
.float tec9_click;
.float tec9_animempty;
.float tec9_animset;
.float tec9_nextanim;
.float tec9_nextbot;

void W_Tec9_Attack (void)
{
	float	ammoamount;
	float	d;
	float	f;
	float	spread;
	float	bulletspeed;
	float	bulletconstant;
	entity flash;

	ammoamount = autocvar_g_balance_tec9_primary_ammo;
	d = autocvar_g_balance_tec9_primary_damage;
	f = autocvar_g_balance_tec9_primary_force;
	//spread = autocvar_g_balance_tec9_primary_spread;
	spread = bound(autocvar_g_balance_tec9_spread_min, autocvar_g_balance_tec9_spread_min + (autocvar_g_balance_tec9_spread_add * self.misc_bulletcounter), autocvar_g_balance_tec9_spread_max);

	//print(ftos(spread), " spread\n");

	bulletspeed = autocvar_g_balance_tec9_primary_speed;
	bulletconstant = autocvar_g_balance_tec9_primary_bulletconstant;

	W_DecreaseAmmo(ammo_nails, ammoamount, autocvar_g_balance_tec9_reload_ammo);
	
	if (autocvar_g_balance_tec9_jamrate &&
 	(autocvar_g_balance_tec9_jamrate > random() ))
 	{
		if ((clienttype(self) == CLIENTTYPE_REAL)) {
			sprint(self, "Your Tec-9 jammed\n");
		}
		self.tec9_jammed = 1;
	} else { //Start Not Jammed

		W_SetupShot (self, autocvar_g_antilag_bullets && bulletspeed >= autocvar_g_antilag_bullets, 5, "weapons/uzi_fire.wav", CH_WEAPON_A, d);

	W_MaybeShootFromEyeForAltAim(self); //shoot from the eye maybe if in alt aim so that shooting through windows works correctly when aiming
	
	fireBallisticBullet(w_shotorg, w_shotdir, spread, bulletspeed, 5, d, autocvar_g_balance_tec9_primary_headshotaddeddamage, f, WEP_TEC9, PROJECTILE_BULLET9MM, 1, bulletconstant, autocvar_g_balance_tec9_primary_coreshotaddeddamage);
	endFireBallisticBullet();

	if (!g_norecoil)
	{
		if (self.misc_bulletcounter) {
		//If we've been shooting full auto, shake things around
		self.punchangle_x = random () - 0.5;
		self.punchangle_y = random () - 0.5;
		}
	}
	self.misc_bulletcounter = self.misc_bulletcounter + 1;

		pointparticles(particleeffectnum("uzi_muzzleflash"), w_shotorg, w_shotdir * 1000, autocvar_g_balance_tec9_primary_ammo);
	
		PlayerGunRise(self, autocvar_g_balance_tec9_gunrise, random() * autocvar_g_balance_tec9_gunrun);

		// muzzle flash for 1st person view
		flash = spawn();
		setmodel(flash, "models/uziflash.md3"); // precision set below
		flash.think = SUB_Remove;
		flash.nextthink = time + 0.06;
		flash.effects = EF_ADDITIVE | EF_FULLBRIGHT | EF_LOWPRECISION;
		W_AttachToShotorg(flash, '9.25 0 0');
	
	
	if (autocvar_g_casings >= 2)
		SpawnCasing (((random () * 50 + 50) * v_right) - (v_forward * (random () * 25 + 25)) - ((random () * -300 - 140) * v_up), 2, vectoangles(v_forward),'0 250 0', 100, 5, self);

	
	} //End Not Jammed
}


float W_Tec9_NeedManualReload() {
	if  (autocvar_g_manualreload && (autocvar_g_balance_tec9_reload_ammo && self.clip_load < autocvar_g_balance_tec9_primary_ammo))
	{
		if (!self.tec9_click && (self.BUTTON_ATCK)) {
			spamsound (self, CH_SHOTS, "weapons/dryfire.wav", VOL_BASE * 0.25, ATTN_NORM);
			self.tec9_click = 1;
		}
		else if not(self.BUTTON_ATCK)
		{
			self.tec9_click = 0;
		}
		return 1;
	} else {
		return 0;
	}
	
}


void spawnfunc_weapon_tec9 (void)
{
	weapon_defaultspawnfunc(WEP_TEC9);
}


.float tec9_primarytime;

float w_tec9(float req)
{
	float ammo_amount;
	if (req == WR_AIM) {
		if (W_Tec9_NeedManualReload()) { weapon_action(self.weapon, WR_RELOAD); } // bot reload if automatic reload off

		if (self.tec9_jammed) {
			 weapon_action(self.weapon, WR_RELOAD);
		}
		
		self.BUTTON_ATCK=FALSE;
		self.BUTTON_ATCK2=FALSE;

		if (self.tec9_release) {
			if(autocvar_g_antilag_bullets)
				self.BUTTON_ATCK = bot_aim(1000000, 0, 0.001, FALSE);
			else
				self.BUTTON_ATCK = bot_aim(autocvar_g_balance_tec9_primary_speed, 0, 0.001, FALSE);
		}
		
	}
	else if (req == WR_THINK && !W_Tec9_NeedManualReload())
	{
		if(autocvar_g_balance_tec9_reload_ammo && self.clip_load < autocvar_g_balance_tec9_primary_ammo) // forced reload
		{
			// don't force reload an empty tec9 if its melee attack is active
			if not(autocvar_g_balance_tec9_secondary && self.ammo_nails < autocvar_g_balance_tec9_primary_ammo)
				weapon_action(self.weapon, WR_RELOAD);
				//self.tec9_release = 0;
		}
		else
		{
		  if (self.tec9_jammed && self.tec9_unjam)
		  {
		  	if (time >= self.tec9_unjam_time) {
				self.tec9_jammed = 0;
				self.tec9_unjam = 0;
				if ((clienttype(self) == CLIENTTYPE_REAL)) {
					sprint(self, "You cleared the jam\n");
				}
			}
		  } else {
			float bp_skipme;
			if (self.BUTTON_ATCK)
			if (self.tec9_release)
			if (self.tec9_jammed != 1)
			if (weapon_prepareattack_check(0, 0))
			{
				if(clienttype(self) == CLIENTTYPE_BOT) {
					//Nope
					//print("I bot", ftos(self.tec9_nextbot)," \n");
				} else {
					self.tec9_nextbot = 0;
				}
				
				if (time >= self.tec9_nextbot) {
					W_Tec9_Attack();
					ATTACK_FINISHED(self) = time + autocvar_g_balance_tec9_primary_refire * W_WeaponRateFactor();
					weapon_thinkf(WFRAME_FIRE1, autocvar_g_balance_tec9_primary_animtime, w_ready);
					self.tec9_release = 0;
					self.tec9_animempty = 1;
					self.tec9_animset = 1;
					self.tec9_nextanim = time + autocvar_g_balance_tec9_primary_rfanim;
					bp_skipme = 1;
					//self.tec9_nextbot = time + (autocvar_g_balance_tec9_primary_refire * 50 * random());
					self.tec9_nextbot = time + 0.1 + (0.4 * random());
					
					//Fullauto:
					self.tec9_release = 1;
					self.tec9_nextbot = time;
				}
			}
			
			
			if not(bp_skipme) {
				if (self.tec9_jammed != 1)
				if (time >= self.tec9_nextanim)
				if (self.tec9_animempty)
				{
					self.tec9_animempty = 0;
					self.tec9_animset = 1;
				}
			}
			
			if not(self.BUTTON_ATCK || self.BUTTON_ATCK2) {
				self.tec9_release = 1;
			}
			
			if not(self.BUTTON_ATCK) {
				//Not full auto, reset bullet counter
				self.misc_bulletcounter = 0;
			}
				
			//Reversed: open bolt
			if (self.tec9_animset)
			if (self.tec9_jammed != 1) {
					if (self.tec9_animempty)
						self.weaponname = "tec9";
					else
						self.weaponname = "tec9_empty";
			}
			
			self.tec9_animset = 0;
			bp_skipme = 0;
			////END NORMAL////
		  }
		}
		
	}
	else if (req == WR_PRECACHE)
	{
		precache_model ("models/uziflash.md3");
		precache_model ("models/weapons/g_tec9.md3");
		precache_model ("models/weapons/v_tec9.md3");
		precache_model ("models/weapons/h_tec9.iqm");
		
		precache_model ("models/weapons/v_tec9_empty.md3");
		precache_model ("models/weapons/h_tec9_empty.iqm");
		precache_sound ("misc/itempickup.wav");
		precache_sound ("weapons/uzi_fire.wav");
		//precache_sound ("weapons/reload.wav"); // until weapons have individual reload sounds, precache the reload sound somewhere else
	}
	else if (req == WR_SETUP)
	{
		self.weaponaltaim_use = 1;
		self.weaponaltaim = '40 -0.35 -2.1';
			
		weapon_setup(WEP_TEC9);
		self.current_ammo = ammo_nails;
			//Reversed, open bolt
			if (self.tec9_animempty)
				self.weaponname = "tec9";
			else
				self.weaponname = "tec9_empty";
	
	
	
	
		  //When a jam occurs when there is no ammo left, then one cannot reach the routine to unjam
		  //Thus is a "malfunction" and takes more to fix (switching weapon)
		  if (self.tec9_jammed && self.tec9_unjam)
		  {
		  	if (time >= self.tec9_unjam_time) {
				self.tec9_jammed = 0;
				self.tec9_unjam = 0;
				if ((clienttype(self) == CLIENTTYPE_REAL)) {
					sprint(self, "You cleared the malfunction\n");
				}
			}
		  }
	}
	else if (req == WR_CHECKAMMO1)
	{
		ammo_amount = self.ammo_nails >= autocvar_g_balance_tec9_primary_ammo;
		ammo_amount += self.(weapon_load[WEP_TEC9]) >= autocvar_g_balance_tec9_primary_ammo;
		return ammo_amount;
	}
	else if (req == WR_CHECKAMMO2)
	{
		// melee attack is always available
		return TRUE;
	}
	else if (req == WR_RELOAD)
	{
		if (self.tec9_jammed) {
			weapon_thinkf(WFRAME_RELOAD, autocvar_g_balance_tec9_clearjam_time, w_ready);
			if (self.tec9_unjam != 1) {
				self.tec9_unjam = 1;
				self.tec9_unjam_time = time + autocvar_g_balance_tec9_clearjam_time;
				self.tec9_click = 0;
				if ((clienttype(self) == CLIENTTYPE_REAL)) {
					sprint(self, "You work on the weapon\n");
				}
			}
		} else {
			W_Reload(autocvar_g_balance_tec9_primary_ammo, autocvar_g_balance_tec9_reload_ammo, autocvar_g_balance_tec9_reload_time, "weapons/reload.wav");
		}
	}
	return TRUE;
}
#endif
#ifdef CSQC
.float prevric;
float w_tec9(float req)
{
	if(req == WR_IMPACTEFFECT)
	{
		vector org2;
		org2 = w_org + w_backoff * 2;
		pointparticles(particleeffectnum("machinegun_impact"), org2, w_backoff * 1000, 1);
		if(!w_issilent && time - self.prevric > 0.25)
		{
			if(w_random < 0.0165)
				sound(self, CH_SHOTS, "weapons/ric1.wav", VOL_BASE, ATTN_NORM);
			else if(w_random < 0.033)
				sound(self, CH_SHOTS, "weapons/ric2.wav", VOL_BASE, ATTN_NORM);
			else if(w_random < 0.05)
				sound(self, CH_SHOTS, "weapons/ric3.wav", VOL_BASE, ATTN_NORM);
			self.prevric = time;
		}
	}
	else if(req == WR_PRECACHE)
	{
		precache_sound("weapons/ric1.wav");
		precache_sound("weapons/ric2.wav");
		precache_sound("weapons/ric3.wav");
	}
	else if (req == WR_SUICIDEMESSAGE)
		w_deathtypestring = _("%s is now thinking with portals");
	else if (req == WR_KILLMESSAGE)
	{
		if(w_deathtype & HITTYPE_CORESHOT)
			w_deathtypestring = _("%1$s chest was ventelated by %2$s Tec-9");
		else if(w_deathtype & HITTYPE_HEADSHOT)
			w_deathtypestring = _("%1$s died when %2$s domed them with a Tec-9");
		else
			w_deathtypestring = _("%s was kiled by %s's Tec-9");
	}
	return TRUE;
}
#endif
#endif
