void CopyBody(float keepvelocity);

#ifdef NOCHEATS

float CheatImpulse(float i) { return 0; }
float CheatCommand(float argc) { return 0; }
float CheatFrame() { return 0; }
void CheatInit() { cheatcount_total = world.cheatcount; }
void CheatShutdown() { }
void CheatInitClient() { }
void CheatShutdownClient() { }
void Drag_MoveDrag(entity from, entity to) { }

#else

.float maycheat;
float gamestart_sv_cheats;

#define CHIMPULSE_SPEEDRUN_INIT 30
#define CHIMPULSE_GIVE_ALL 99
#define CHIMPULSE_CLONE_MOVING 140
#define CHIMPULSE_SPEEDRUN 141
#define CHIMPULSE_CLONE_STANDING 142
#define CHIMPULSE_TELEPORT 143
#define CHIMPULSE_R00T 148

#define CHRAME_DRAG 8

void CheatInit()
{
	gamestart_sv_cheats = autocvar_sv_cheats;
}

void CheatShutdown()
{
}

void CheatInitClient()
{
}

void CheatShutdownClient()
{
}

float NotCheatAllowed()
{
	// dead people cannot command
	if(self.deadflag != DEAD_NO)
		return 0;
	if(gamestart_sv_cheats < 2 && self.classname != "player") {
		//bprint(sprintf("Spectator or Observer %s^7 tried to issue a command\n", self.netname));
		return 0; //So spectators may not issue commands as other players
	}
	
	return 1;
}

float CheatsAllowed(float i, float argc, float fr) // the cheat gets passed as argument for possible future ACL checking
{
	// dead people cannot cheat
	if(self.deadflag != DEAD_NO)
		return 0;
	if(gamestart_sv_cheats < 2 && self.classname != "player")
		return 0;
	
	// sv_clones
	if(i == CHIMPULSE_CLONE_MOVING || i == CHIMPULSE_CLONE_STANDING)
		if(self.lip < sv_clones)
			return 1;

	// haha
	if(self.maycheat)
		return 1;
	
	// sv_cheats
	if(gamestart_sv_cheats && autocvar_sv_cheats)
		return 1;

	// if we get here, player is not allowed to cheat. Log it.
	if(i)
		bprint(sprintf("Player %s^7 tried to use cheat 'impulse %d'\n", self.netname, i));
	else if(argc)
		bprint(sprintf("Player %s^7 tried to use cheat '%s'\n", self.netname, argv(0)));
	else if(fr)
		bprint(sprintf("Player %s^7 tried to use cheat frame %d\n", self.netname, fr));
	else
		bprint(sprintf("Player %s^7 tried to use an unknown cheat\n", self.netname));

	return 0;
}

#define NOT_CHEAT() \
	attempting = 1; \
	if((!NotCheatAllowed())) \
		break
#define BEGIN_CHEAT_FUNCTION() \
	float cheating, attempting; \
	cheating = 0; attempting = 0
#define DID_CHEAT() \
	++cheating
#define ADD_CHEATS(e,n) \
	cheatcount_total += n; \
	e.cheatcount += n
#define END_CHEAT_FUNCTION() \
	ADD_CHEATS(self,cheating); \
	return attempting
#define IS_CHEAT(i,argc,fr) \
	if((++attempting, !CheatsAllowed(i,argc,fr))) \
		break

float num_autoscreenshot;
void info_autoscreenshot_findtarget()
{
	entity e;
	e = find(world, targetname, self.target);
	if(!e)
	{
		objerror("Missing target. FAIL!");
		return;
	}
	vector a = vectoangles(e.origin - self.origin);
	a_x = -a_x; // don't ask
	self.angles_x = a_x;
	self.angles_y = a_y;
	// we leave Rick Roll alone
}
void spawnfunc_info_autoscreenshot()
{
	if(++num_autoscreenshot > autocvar_g_max_info_autoscreenshot)
	{
		objerror("Too many info_autoscreenshot entitites. FAIL!");
		return;
	}
	if(self.target != "")
		InitializeEntity(self, info_autoscreenshot_findtarget, INITPRIO_FINDTARGET);
	// this one just has to exist
}

float CheatImpulse(float i)
{
	BEGIN_CHEAT_FUNCTION();
	switch(i)
	{
		entity e, e2;

		case CHIMPULSE_SPEEDRUN_INIT: // deploy personal waypoint
			// shared with regular waypoint init, so this is not a cheat by itself
			if(!self.personal)
			{
				self.personal = spawn();
				self.personal.classname = "personal_wp";
			}
			self.personal.origin = self.origin;
			self.personal.v_angle = self.v_angle;
			self.personal.velocity = self.velocity;
			self.personal.ammo_rockets = self.ammo_rockets;
			self.personal.ammo_nails = self.ammo_nails;
			self.personal.ammo_cells = self.ammo_cells;
			self.personal.ammo_shells = self.ammo_shells;
			self.personal.ammo_fuel = self.ammo_fuel;
			self.personal.health = self.health;
			self.personal.armorvalue = self.armorvalue;
			WEPSET_COPY_EE(self.personal, self);
			self.personal.items = self.items;
			self.personal.pauserotarmor_finished = self.pauserotarmor_finished;
			self.personal.pauserothealth_finished = self.pauserothealth_finished;
			self.personal.pauserotfuel_finished = self.pauserotfuel_finished;
			self.personal.pauseregen_finished = self.pauseregen_finished;
			self.personal.strength_finished = self.strength_finished;
			self.personal.invincible_finished = self.invincible_finished;
			self.personal.teleport_time = time;
			break; // this part itself doesn't cheat, so let's not count this
		case CHIMPULSE_CLONE_MOVING:
			IS_CHEAT(i, 0, 0);
			makevectors (self.v_angle);
			self.velocity = self.velocity + v_forward * 300;
			CopyBody(1);
			self.lip += 1;
			self.velocity = self.velocity - v_forward * 300;
			DID_CHEAT();
			break;
		case CHIMPULSE_CLONE_STANDING:
			IS_CHEAT(i, 0, 0);
			CopyBody(0);
			self.lip += 1;
			DID_CHEAT();
			break;
		case CHIMPULSE_GIVE_ALL:
			IS_CHEAT(i, 0, 0);
			CheatCommand(tokenize_console("give all"));
			break; // already counted as cheat
		case CHIMPULSE_SPEEDRUN:
			IS_CHEAT(i, 0, 0);
			if(self.personal)
			{
				self.speedrunning = TRUE;
				tracebox(self.personal.origin, self.mins, self.maxs, self.personal.origin, MOVE_WORLDONLY, self);
				if(trace_startsolid)
				{
					sprint(self, "Cannot move there, cheater - only waypoints set using g_waypointsprite_personal work\n");
				}
				else
				{
					// Abort speedrun, teleport back
					setorigin(self, self.personal.origin);
					self.oldvelocity = self.velocity = self.personal.velocity;
					self.angles = self.personal.v_angle;
					self.fixangle = TRUE;
					
					MUTATOR_CALLHOOK(AbortSpeedrun);
				}

				self.ammo_rockets = self.personal.ammo_rockets;
				self.ammo_nails = self.personal.ammo_nails;
				self.ammo_cells = self.personal.ammo_cells;
				self.ammo_shells = self.personal.ammo_shells;
				self.ammo_fuel = self.personal.ammo_fuel;
				self.health = self.personal.health;
				self.armorvalue = self.personal.armorvalue;
				WEPSET_COPY_EE(self, self.personal);
				self.items = self.personal.items;
				self.pauserotarmor_finished = time + self.personal.pauserotarmor_finished - self.personal.teleport_time;
				self.pauserothealth_finished = time + self.personal.pauserothealth_finished - self.personal.teleport_time;
				self.pauserotfuel_finished = time + self.personal.pauserotfuel_finished - self.personal.teleport_time;
				self.pauseregen_finished = time + self.personal.pauseregen_finished - self.personal.teleport_time;
				self.strength_finished = time + self.personal.strength_finished - self.personal.teleport_time;
				self.invincible_finished = time + self.personal.invincible_finished - self.personal.teleport_time;

				DID_CHEAT();
				break;
			}
			if(self.deadflag != DEAD_NO)
				sprint(self, "UR DEAD AHAHAH))\n");
			else
				sprint(self, "No waypoint set, cheater (use g_waypointsprite_personal to set one)\n");
			break;
		case CHIMPULSE_TELEPORT:
			IS_CHEAT(i, 0, 0);
			if(self.movetype == MOVETYPE_NOCLIP)
			{
				e = find(world, classname, "info_autoscreenshot");
				if(e)
				{
					sprint(self, "Emergency teleport used info_autoscreenshot location\n");
					setorigin(self, e.origin);
					self.angles = e.angles;
					remove(e);
					// should we? self.angles_x = -self.angles_x;
					self.fixangle = TRUE;
					self.velocity = '0 0 0';
					DID_CHEAT();
					break;
				}
			}
			if(MoveToRandomMapLocation(self, DPCONTENTS_SOLID | DPCONTENTS_CORPSE | DPCONTENTS_PLAYERCLIP, DPCONTENTS_SLIME | DPCONTENTS_LAVA | DPCONTENTS_SKY | DPCONTENTS_BODY | DPCONTENTS_DONOTENTER, Q3SURFACEFLAG_SKY, ((gamestart_sv_cheats < 2) ? 100 : 100000), 1024, 256))
			{
				sprint(self, "Emergency teleport used random location\n");
				self.angles_x = -self.angles_x;
				self.fixangle = TRUE;
				self.velocity = '0 0 0';
				DID_CHEAT();
				break;
			}
			sprint(self, "Emergency teleport could not find a good location, forget it!\n");
			break;
		case CHIMPULSE_R00T:
			IS_CHEAT(i, 0, 0);
			RandomSelection_Init();
			FOR_EACH_PLAYER(e)
				if(e.deadflag == DEAD_NO)
					if(IsDifferentTeam(e, self))
						RandomSelection_Add(e, 0, string_null, 1, 1);
			if(RandomSelection_chosen_ent)
				e = RandomSelection_chosen_ent;
			else
				e = self;

			pointparticles(particleeffectnum("rocket_explode"), e.origin, '0 0 0', 1);
			sound(e, CH_SHOTS, "weapons/rocket_impact.wav", VOL_BASE, ATTN_NORM);

			e2 = spawn();
			setorigin(e2, e.origin);
			RadiusDamage(e2, self, 1000, 0, 128, world, 500, DEATH_CHEAT, e);
			remove(e2);

			print("404 Sportsmanship not found.\n");
			DID_CHEAT();
			break;
	}

	END_CHEAT_FUNCTION();
}

void GiveSpellByName (entity caster, string spellname)
{
	
}

void LearnSpell (entity player, string spellname, .float ammotype)
{
	if (player.ammotype < 0) {
		//Less than 0 are sealed spells
		player.ammotype = floor((player.ammotype * -1));
		if (player.ammotype == 1)
		{
			if ((clienttype(player) == CLIENTTYPE_REAL)) {
				sound(player, CH_PLAYER, "flare/fantasycore/level-up.ogg", VOL_BASE*0.5, ATTN_NORM);
				sprint(player, strcat("You have relearned ",spellname,"\n"));
			}
		}
		else
		{
			if ((clienttype(player) == CLIENTTYPE_REAL)) {
				sound(player, CH_PLAYER, "flare/fantasycore/level-up.ogg", VOL_BASE*0.5, ATTN_NORM);
				sprint(player, strcat("What you knew of ",spellname," returns to you\n"));	
			}
		}	
	} else if (player.ammotype < 100) {
		//Normal learning from books
		player.ammotype = floor(player.ammotype + 1);
		if (player.ammotype == 1)
		{
			if ((clienttype(player) == CLIENTTYPE_REAL)) {
				sound(player, CH_PLAYER, "flare/fantasycore/level-up.ogg", VOL_BASE*0.5, ATTN_NORM);
				sprint(player, strcat("You learned the spell ",spellname,"\n"));
			}
		}
		else
		{
			if ((clienttype(player) == CLIENTTYPE_REAL)) {
				sound(player, CH_PLAYER, "flare/fantasycore/level-up.ogg", VOL_BASE*0.5, ATTN_NORM);
				sprint(player, strcat("Your knowlege of ",spellname," has grown to level ",ftos(player.ammotype),"\n"));	
			}
		}
	} else {
		if ((clienttype(player) == CLIENTTYPE_REAL))
			sprint(player, strcat("There is no greater level of ",spellname," that your knowledge can reach\n"));
	}
}


float PlayerCanDoMagic (entity player)
{
	if (player.spell_agency > 0) return 1; //Might need mana
	if (player.inv_scroll_agency) return 2; //No mana needed

	if (player.spell_death > 0) return 1; 
	if (player.inv_scroll_death) return 2;

	if (player.spell_drainlife > 0) return 1;
	if (player.inv_scroll_drainlife) return 2;

	if (player.spell_cancellation > 0) return 1;
	if (player.inv_scroll_cancellation) return 2;
	
	if (player.spell_castfromlife > 0) return 1;
	if (player.inv_scroll_castfromlife) return 2;
	
	if (player.spell_confer > 0) return 1;
	if (player.inv_scroll_confer) return 2;

	if (player.spell_iceball > 0) return 1; 
	if (player.inv_scroll_iceball) return 2;

	if (player.spell_icestar > 0) return 1;
	if (player.inv_scroll_icestar) return 2;

	if (player.spell_aquacaelestis > 0) return 1;
	if (player.inv_scroll_aquacaelestis) return 2;

	if (player.spell_nivosus > 0) return 1;
	if (player.inv_scroll_nivosus) return 2;

	if (player.spell_rosa > 0) return 1;
	if (player.inv_scroll_rosa) return 2;

	if (player.spell_corvuspenna > 0) return 1;
	if (player.inv_scroll_corvuspenna) return 2;

	if (player.spell_plumosus > 0) return 1;
	if (player.inv_scroll_plumosus) return 2;

	if (player.spell_firebolt > 0) return 1; 
	if (player.inv_scroll_firebolt) return 2;

	if (player.spell_fireball > 0) return 1; 
	if (player.inv_scroll_fireball) return 2;

	if (player.spell_magmasphere > 0) return 1; 
	if (player.inv_scroll_magmasphere) return 2;

	if (player.spell_firebeam > 0) return 1; 
	if (player.inv_scroll_firebeam) return 2;

	if (player.spell_inferno > 0) return 1; 
	if (player.inv_scroll_inferno) return 2;

	if (player.spell_firewall > 0) return 1;
	if (player.inv_scroll_firewall) return 2;

	if (player.spell_lightiningwall > 0) return 1;
	if (player.inv_scroll_lightiningwall) return 2;
	
	if (player.spell_scepterofflame > 0) return 1;
	if (player.inv_scroll_scepterofflame) return 2;
	
	if (player.spell_explosion > 0) return 1;
	if (player.inv_scroll_explosion) return 2;
	
	if (player.spell_phantasmalbarrier > 0) return 1;
	if (player.inv_scroll_phantasmalbarrier) return 2;
	
	if (player.spell_raiseundead > 0) return 1;
	if (player.inv_scroll_raiseundead) return 2;

	if (player.spell_flameburst > 0) return 1;
	if (player.inv_scroll_flameburst) return 2;

	if (player.spell_firecentury > 0) return 1;
	if (player.inv_scroll_firecentury) return 2;

	if (player.spell_frostbeam > 0) return 1; 
	if (player.inv_scroll_frostbeam) return 2;

	if (player.spell_grace > 0) return 1; 
	if (player.inv_scroll_grace) return 2;
	
	if (player.spell_holybolt > 0) return 1; 
	if (player.inv_scroll_holybolt) return 2;
	
	if (player.spell_holylight > 0) return 1; 
	if (player.inv_scroll_holylight) return 2;
	
	if (player.spell_acervilux > 0) return 1; 
	if (player.inv_scroll_acervilux) return 2;
	
	if (player.spell_heal > 0) return 1; 
	if (player.inv_scroll_heal) return 2;
	
	if (player.spell_repair > 0) return 1; 
	if (player.inv_scroll_repair) return 2;
	
	if (player.spell_holyword > 0) return 1; 
	if (player.inv_scroll_holyword) return 2;
	
	if (player.spell_extinguish > 0) return 1; 
	if (player.inv_scroll_extinguish) return 2;
	
	if (player.spell_darkritual > 0) return 1; 
	if (player.inv_scroll_darkritual) return 2;

	if (player.spell_lightining > 0) return 1; 
	if (player.inv_scroll_lightining) return 2;

	if (player.spell_balllightining > 0) return 1; 
	if (player.inv_scroll_balllightining) return 2;

	if (player.spell_lightiningburst > 0) return 1; 
	if (player.inv_scroll_lightiningburst) return 2;

	if (player.spell_chargedbolt > 0) return 1; 
	if (player.inv_scroll_chargedbolt) return 2;

	if (player.spell_chainlightining > 0) return 1; 
	if (player.inv_scroll_chainlightining) return 2;
	
	if (player.spell_lightiningstrike > 0) return 1; 
	if (player.inv_scroll_lightiningstrike) return 2;

	if (player.spell_monstertomonolith > 0) return 1;
	if (player.inv_scroll_monstertomonolith) return 2;

	if (player.spell_monstertomouse > 0) return 1;
	if (player.inv_scroll_monstertomouse) return 2;
	
	if (player.spell_manashield > 0) return 1; 
	if (player.inv_scroll_manashield) return 2;
	
	if (player.spell_clairvoyance > 0) return 1; 
	if (player.inv_scroll_clairvoyance) return 2;
	
	if (player.spell_magicbullets > 0) return 1; 
	if (player.inv_scroll_magicbullets) return 2;

	if (player.spell_magicmissile > 0) return 1; 
	if (player.inv_scroll_magicmissile) return 2;

	if (player.spell_meteor > 0) return 1;
	if (player.inv_scroll_meteor) return 2;

	if (player.spell_meteorshower > 0) return 1;
	if (player.inv_scroll_meteorshower) return 2;

	if (player.spell_mimic > 0) return 1;
	if (player.inv_scroll_mimic) return 2;
	
	if (player.spell_paralyse > 0) return 1; 
	if (player.inv_scroll_paralyse) return 2;

	if (player.spell_ringoffire > 0) return 1; 
	if (player.inv_scroll_ringoffire) return 2;

	if (player.spell_stonecurse > 0) return 1; 
	if (player.inv_scroll_stonecurse) return 2;
	
	if (player.spell_stonerain > 0) return 1; 
	if (player.inv_scroll_stonerain) return 2;
	
	if (player.spell_timesink > 0) return 1; 
	if (player.inv_scroll_timesink) return 2;
	
	if (player.spell_vampyricconduit > 0) return 1; 
	if (player.inv_scroll_vampyricconduit) return 2;
	
	return 0;
}


//////
void ReadSpellByNameCaseInsensitive (entity caster, float type, string spellname)
{
	//Why not put this in the ReadSpellByName routine?
	//That is not just used by interactive console commands...
	//Imagine going through this whole list, not doing a simple exact string match
	//but this ... more invasive thing
	//everytime an entity want's to read a scroll..
	//So, no, we are not opting for the easy way...
	if(!strcasecmp(spellname, "agency")) {
	   ReadSpellByName(caster, type, "agency");
	} else if(!strcasecmp(spellname, "death")) {
	   ReadSpellByName(caster, type, "death");
	} else if(!strcasecmp(spellname, "drainlife")) {
	   ReadSpellByName(caster, type, "drainlife");
	} else if(!strcasecmp(spellname, "cancellation")) {
	   ReadSpellByName(caster, type, "cancellation");
	} else if(!strcasecmp(spellname, "castfromlife")) {
	   ReadSpellByName(caster, type, "castfromlife");
	} else if(!strcasecmp(spellname, "confer")) {
	   ReadSpellByName(caster, type, "confer");	
	} else if(!strcasecmp(spellname, "iceball")) {
	   ReadSpellByName(caster, type, "iceball");
	} else if(!strcasecmp(spellname, "icestar")) {
	   ReadSpellByName(caster, type, "icestar");
	} else if(!strcasecmp(spellname, "aquacaelestis")) {
	   ReadSpellByName(caster, type, "aquacaelestis");
	} else if(!strcasecmp(spellname, "nivosus")) {
	   ReadSpellByName(caster, type, "nivosus");
	} else if(!strcasecmp(spellname, "rosa")) {
	   ReadSpellByName(caster, type, "rosa");
	} else if(!strcasecmp(spellname, "corvuspenna")) {
	   ReadSpellByName(caster, type, "corvuspenna");
	} else if(!strcasecmp(spellname, "plumosus")) {
	   ReadSpellByName(caster, type, "plumosus");
	} else if(!strcasecmp(spellname, "fireball")) {
	   ReadSpellByName(caster, type, "fireball");	
	} else if(!strcasecmp(spellname, "magmasphere")) {
	   ReadSpellByName(caster, type, "magmasphere");	
	} else if(!strcasecmp(spellname, "firebolt")) {
	   ReadSpellByName(caster, type, "firebolt");	
	} else if(!strcasecmp(spellname, "firebeam")) {
	   ReadSpellByName(caster, type, "firebeam");	
	} else if(!strcasecmp(spellname, "inferno")) {
	   ReadSpellByName(caster, type, "inferno");
	} else if(!strcasecmp(spellname, "firewall")) {
	   ReadSpellByName(caster, type, "firewall");
	} else if(!strcasecmp(spellname, "lightiningwall")) {
	   ReadSpellByName(caster, type, "lightiningwall");
	} else if(!strcasecmp(spellname, "scepterofflame")) {
	   ReadSpellByName(caster, type, "scepterofflame");
	} else if(!strcasecmp(spellname, "explosion")) {
	   ReadSpellByName(caster, type, "explosion");
	} else if(!strcasecmp(spellname, "phantasmalbarrier")) {
	   ReadSpellByName(caster, type, "phantasmalbarrier");
	} else if(!strcasecmp(spellname, "raiseundead")) {
	   ReadSpellByName(caster, type, "raiseundead");
	} else if(!strcasecmp(spellname, "flameburst")) {
	   ReadSpellByName(caster, type, "flameburst");	
	} else if(!strcasecmp(spellname, "firecentury")) {
	   ReadSpellByName(caster, type, "firecentury");	
	} else if(!strcasecmp(spellname, "frostbeam")) {
	   ReadSpellByName(caster, type, "frostbeam");
	} else if(!strcasecmp(spellname, "grace")) {
	   ReadSpellByName(caster, type, "grace");
	} else if(!strcasecmp(spellname, "holybolt")) {
	   ReadSpellByName(caster, type, "holybolt");
	} else if(!strcasecmp(spellname, "holylight")) {
	   ReadSpellByName(caster, type, "holylight");
	} else if(!strcasecmp(spellname, "acervilux")) {
	   ReadSpellByName(caster, type, "acervilux");
	} else if(!strcasecmp(spellname, "heal")) {
	   ReadSpellByName(caster, type, "heal");
	} else if(!strcasecmp(spellname, "repair")) {
	   ReadSpellByName(caster, type, "repair");
	} else if(!strcasecmp(spellname, "holyword")) {
	   ReadSpellByName(caster, type, "holyword");
	} else if(!strcasecmp(spellname, "extinguish")) {
	   ReadSpellByName(caster, type, "extinguish");
	} else if(!strcasecmp(spellname, "darkritual")) {
	   ReadSpellByName(caster, type, "darkritual");	
	} else if(!strcasecmp(spellname, "lightining")) {
	   ReadSpellByName(caster, type, "lightining");
	} else if(!strcasecmp(spellname, "balllightining")) {
	   ReadSpellByName(caster, type, "balllightining");
	} else if(!strcasecmp(spellname, "chainlightining")) {
	   ReadSpellByName(caster, type, "chainlightining");
	} else if(!strcasecmp(spellname, "lightiningburst")) {
	   ReadSpellByName(caster, type, "lightiningburst");
	} else if(!strcasecmp(spellname, "chargedbolt")) {
	   ReadSpellByName(caster, type, "chargedbolt");
	} else if(!strcasecmp(spellname, "lightiningstrike")) {
	   ReadSpellByName(caster, type, "lightiningstrike");
	} else if(!strcasecmp(spellname, "manashield")) {
	   ReadSpellByName(caster, type, "manashield");
	} else if(!strcasecmp(spellname, "clairvoyance")) {
	   ReadSpellByName(caster, type, "clairvoyance");
	} else if(!strcasecmp(spellname, "magicbullets")) {
	   ReadSpellByName(caster, type, "magicbullets");	
	} else if(!strcasecmp(spellname, "magicmissile")) {
	   ReadSpellByName(caster, type, "magicmissile");
	} else if(!strcasecmp(spellname, "monstertomonolith")) {
	   ReadSpellByName(caster, type, "monstertomonolith");
	} else if(!strcasecmp(spellname, "monstertomouse")) {
	   ReadSpellByName(caster, type, "monstertomouse");
	} else if(!strcasecmp(spellname, "meteor")) {
	   ReadSpellByName(caster, type, "meteor");
	} else if(!strcasecmp(spellname, "meteorshower")) {
	   ReadSpellByName(caster, type, "meteorshower");	
	} else if(!strcasecmp(spellname, "mimic")) {
	   ReadSpellByName(caster, type, "mimic");	
	} else if(!strcasecmp(spellname, "paralyse")) {
	   ReadSpellByName(caster, type, "paralyse");
	} else if(!strcasecmp(spellname, "ringoffire")) {
	   ReadSpellByName(caster, type, "ringoffire");	
	} else if(!strcasecmp(spellname, "stonecurse")) {
	   ReadSpellByName(caster, type, "stonecurse");	
	} else if(!strcasecmp(spellname, "stonerain")) {
	   ReadSpellByName(caster, type, "stonerain");
	} else if(!strcasecmp(spellname, "timesink")) {
	   ReadSpellByName(caster, type, "timesink");
	} else if(!strcasecmp(spellname, "vampyricconduit")) {
	   ReadSpellByName(caster, type, "vampyricconduit");
	//Knowledge	
	} else if(!strcasecmp(spellname, "carpentry")) {
	   ReadSpellByName(caster, type, "carpentry");	
	} else if(!strcasecmp(spellname, "mortise")) {
	   ReadSpellByName(caster, type, "mortise");	
	} else if(!strcasecmp(spellname, "stonemasonry")) {
	   ReadSpellByName(caster, type, "stonemasonry");	
	} else if(!strcasecmp(spellname, "ironworking")) {
	   ReadSpellByName(caster, type, "ironworking");	
	} else if(!strcasecmp(spellname, "arch")) {
	   ReadSpellByName(caster, type, "arch");	
	} else if(!strcasecmp(spellname, "welding")) {
	   ReadSpellByName(caster, type, "welding");	
	} else if(!strcasecmp(spellname, "concrete")) {
	   ReadSpellByName(caster, type, "concrete");	
	} else {
		ReadSpellByName(caster, type, spellname);	
	}
}
//////
float CastSpellByName(float isscroll, entity caster, string spellname);
void ReadSpellByName (entity caster, float type, string spellname)
{
	//Type 0 = scroll, 1 = book
	if (spellname == "agency") {
		if (type == 1) {
			if (caster.inv_book_agency) {
				caster.inv_book_agency = caster.inv_book_agency - 1;
				LearnSpell(caster, spellname, spell_agency);
			}
		} else {
			if (caster.inv_scroll_agency) {
				caster.inv_scroll_agency = caster.inv_scroll_agency - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "death") {
		if (type == 1) {
			if (caster.inv_book_death) {
				caster.inv_book_death = caster.inv_book_death - 1;
				LearnSpell(caster, spellname, spell_death);
			}
		} else {
			if (caster.inv_scroll_death) {
				caster.inv_scroll_death = caster.inv_scroll_death - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "drainlife") {
		if (type == 1) {
			if (caster.inv_book_drainlife) {
				caster.inv_book_drainlife = caster.inv_book_drainlife - 1;
				LearnSpell(caster, spellname, spell_drainlife);
			}
		} else {
			if (caster.inv_scroll_drainlife) {
				caster.inv_scroll_drainlife = caster.inv_scroll_drainlife - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "cancellation") {
		if (type == 1) {
			if (caster.inv_book_cancellation) {
				caster.inv_book_cancellation = caster.inv_book_cancellation - 1;
				LearnSpell(caster, spellname, spell_cancellation);
			}
		} else {
			if (caster.inv_scroll_cancellation) {
				caster.inv_scroll_cancellation = caster.inv_scroll_cancellation - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "castfromlife") {
		if (type == 1) {
			if (caster.inv_book_castfromlife) {
				caster.inv_book_castfromlife = caster.inv_book_castfromlife - 1;
				LearnSpell(caster, spellname, spell_castfromlife);
			}
		} else {
			if (caster.inv_scroll_castfromlife) {
				caster.inv_scroll_castfromlife = caster.inv_scroll_castfromlife - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "confer") {
		if (type == 1) {
			if (caster.inv_book_confer) {
				caster.inv_book_confer = caster.inv_book_confer - 1;
				LearnSpell(caster, spellname, spell_confer);
			}
		} else {
			if (caster.inv_scroll_confer) {
				caster.inv_scroll_confer = caster.inv_scroll_confer - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "iceball") {
		if (type == 1) {
			if (caster.inv_book_iceball) {
				caster.inv_book_iceball = caster.inv_book_iceball - 1;
				LearnSpell(caster, spellname, spell_iceball);
			}
		} else {
			if (caster.inv_scroll_iceball) {
				caster.inv_scroll_iceball = caster.inv_scroll_iceball - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "icestar") {
		if (type == 1) {
			if (caster.inv_book_icestar) {
				caster.inv_book_icestar = caster.inv_book_icestar - 1;
				LearnSpell(caster, spellname, spell_icestar);
			}
		} else {
			if (caster.inv_scroll_icestar) {
				caster.inv_scroll_icestar = caster.inv_scroll_icestar - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "aquacaelestis") {
		if (type == 1) {
			if (caster.inv_book_aquacaelestis) {
				caster.inv_book_aquacaelestis = caster.inv_book_aquacaelestis - 1;
				LearnSpell(caster, spellname, spell_aquacaelestis);
			}
		} else {
			if (caster.inv_scroll_aquacaelestis) {
				caster.inv_scroll_aquacaelestis = caster.inv_scroll_aquacaelestis - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "nivosus") {
		if (type == 1) {
			if (caster.inv_book_nivosus) {
				caster.inv_book_nivosus = caster.inv_book_nivosus - 1;
				LearnSpell(caster, spellname, spell_nivosus);
			}
		} else {
			if (caster.inv_scroll_nivosus) {
				caster.inv_scroll_nivosus = caster.inv_scroll_nivosus - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "rosa") {
		if (type == 1) {
			if (caster.inv_book_rosa) {
				caster.inv_book_rosa = caster.inv_book_rosa - 1;
				LearnSpell(caster, spellname, spell_rosa);
			}
		} else {
			if (caster.inv_scroll_rosa) {
				caster.inv_scroll_rosa = caster.inv_scroll_rosa - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "corvuspenna") {
		if (type == 1) {
			if (caster.inv_book_corvuspenna) {
				caster.inv_book_corvuspenna = caster.inv_book_corvuspenna - 1;
				LearnSpell(caster, spellname, spell_corvuspenna);
			}
		} else {
			if (caster.inv_scroll_corvuspenna) {
				caster.inv_scroll_corvuspenna = caster.inv_scroll_corvuspenna - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "plumosus") {
		if (type == 1) {
			if (caster.inv_book_plumosus) {
				caster.inv_book_plumosus = caster.inv_book_plumosus - 1;
				LearnSpell(caster, spellname, spell_plumosus);
			}
		} else {
			if (caster.inv_scroll_plumosus) {
				caster.inv_scroll_plumosus = caster.inv_scroll_plumosus - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "fireball") {
		if (type == 1) {
			if (caster.inv_book_fireball) {
				caster.inv_book_fireball = caster.inv_book_fireball - 1;
				LearnSpell(caster, spellname, spell_fireball);
			}
		} else {
			if (caster.inv_scroll_fireball) {
				caster.inv_scroll_fireball = caster.inv_scroll_fireball - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "magmasphere") {
		if (type == 1) {
			if (caster.inv_book_magmasphere) {
				caster.inv_book_magmasphere = caster.inv_book_magmasphere - 1;
				LearnSpell(caster, spellname, spell_magmasphere);
			}
		} else {
			if (caster.inv_scroll_magmasphere) {
				caster.inv_scroll_magmasphere = caster.inv_scroll_magmasphere - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "firebolt") {
		if (type == 1) {
			if (caster.inv_book_firebolt) {
				caster.inv_book_firebolt = caster.inv_book_firebolt - 1;
				LearnSpell(caster, spellname, spell_firebolt);
			}
		} else {
			if (caster.inv_scroll_firebolt) {
				caster.inv_scroll_firebolt = caster.inv_scroll_firebolt - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "firebeam") {
		if (type == 1) {
			if (caster.inv_book_firebeam) {
				caster.inv_book_firebeam = caster.inv_book_firebeam - 1;
				LearnSpell(caster, spellname, spell_firebeam);
			}
		} else {
			if (caster.inv_scroll_firebeam) {
				caster.inv_scroll_firebeam = caster.inv_scroll_firebeam - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "inferno") {
		if (type == 1) {
			if (caster.inv_book_inferno) {
				caster.inv_book_inferno = caster.inv_book_inferno - 1;
				LearnSpell(caster, spellname, spell_inferno);
			}
		} else {
			if (caster.inv_scroll_inferno) {
				caster.inv_scroll_inferno = caster.inv_scroll_inferno - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "firewall") {
		if (type == 1) {
			if (caster.inv_book_firewall) {
				caster.inv_book_firewall = caster.inv_book_firewall - 1;
				LearnSpell(caster, spellname, spell_firewall);
			}
		} else {
			if (caster.inv_scroll_firewall) {
				caster.inv_scroll_firewall = caster.inv_scroll_firewall - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "lightiningwall") {
		if (type == 1) {
			if (caster.inv_book_lightiningwall) {
				caster.inv_book_lightiningwall = caster.inv_book_lightiningwall - 1;
				LearnSpell(caster, spellname, spell_lightiningwall);
			}
		} else {
			if (caster.inv_scroll_lightiningwall) {
				caster.inv_scroll_lightiningwall = caster.inv_scroll_lightiningwall - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "scepterofflame") {
		if (type == 1) {
			if (caster.inv_book_scepterofflame) {
				caster.inv_book_scepterofflame = caster.inv_book_scepterofflame - 1;
				LearnSpell(caster, spellname, spell_scepterofflame);
			}
		} else {
			if (caster.inv_scroll_scepterofflame) {
				caster.inv_scroll_scepterofflame = caster.inv_scroll_scepterofflame - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "explosion") {
		if (type == 1) {
			if (caster.inv_book_explosion) {
				caster.inv_book_explosion = caster.inv_book_explosion - 1;
				LearnSpell(caster, spellname, spell_explosion);
			}
		} else {
			if (caster.inv_scroll_explosion) {
				caster.inv_scroll_explosion = caster.inv_scroll_explosion - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "phantasmalbarrier") {
		if (type == 1) {
			if (caster.inv_book_phantasmalbarrier) {
				caster.inv_book_phantasmalbarrier = caster.inv_book_phantasmalbarrier - 1;
				LearnSpell(caster, spellname, spell_phantasmalbarrier);
			}
		} else {
			if (caster.inv_scroll_phantasmalbarrier) {
				caster.inv_scroll_phantasmalbarrier = caster.inv_scroll_phantasmalbarrier - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "raiseundead") {
		if (type == 1) {
			if (caster.inv_book_raiseundead) {
				caster.inv_book_raiseundead = caster.inv_book_raiseundead - 1;
				LearnSpell(caster, spellname, spell_raiseundead);
			}
		} else {
			if (caster.inv_scroll_raiseundead) {
				caster.inv_scroll_raiseundead = caster.inv_scroll_raiseundead - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "flameburst") {
		if (type == 1) {
			if (caster.inv_book_flameburst) {
				caster.inv_book_flameburst = caster.inv_book_flameburst - 1;
				LearnSpell(caster, spellname, spell_flameburst);
			}
		} else {
			if (caster.inv_scroll_flameburst) {
				caster.inv_scroll_flameburst = caster.inv_scroll_flameburst - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "firecentury") {
		if (type == 1) {
			if (caster.inv_book_firecentury) {
				caster.inv_book_firecentury = caster.inv_book_firecentury - 1;
				LearnSpell(caster, spellname, spell_firecentury);
			}
		} else {
			if (caster.inv_scroll_firecentury) {
				caster.inv_scroll_firecentury = caster.inv_scroll_firecentury - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "frostbeam") {
		if (type == 1) {
			if (caster.inv_book_frostbeam) {
				caster.inv_book_frostbeam = caster.inv_book_frostbeam - 1;
				LearnSpell(caster, spellname, spell_frostbeam);
			}
		} else {
			if (caster.inv_scroll_frostbeam) {
				caster.inv_scroll_frostbeam = caster.inv_scroll_frostbeam - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "grace") {
		if (type == 1) {
			if (caster.inv_book_grace) {
				caster.inv_book_grace = caster.inv_book_grace - 1;
				LearnSpell(caster, spellname, spell_grace);
			}
		} else {
			if (caster.inv_scroll_grace) {
				caster.inv_scroll_grace = caster.inv_scroll_grace - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "holybolt") {
		if (type == 1) {
			if (caster.inv_book_holybolt) {
				caster.inv_book_holybolt = caster.inv_book_holybolt - 1;
				LearnSpell(caster, spellname, spell_holybolt);
			}
		} else {
			if (caster.inv_scroll_holybolt) {
				caster.inv_scroll_holybolt = caster.inv_scroll_holybolt - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "holylight") {
		if (type == 1) {
			if (caster.inv_book_holylight) {
				caster.inv_book_holylight = caster.inv_book_holylight - 1;
				LearnSpell(caster, spellname, spell_holylight);
			}
		} else {
			if (caster.inv_scroll_holylight) {
				caster.inv_scroll_holylight = caster.inv_scroll_holylight - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "acervilux") {
		if (type == 1) {
			if (caster.inv_book_acervilux) {
				caster.inv_book_acervilux = caster.inv_book_acervilux - 1;
				LearnSpell(caster, spellname, spell_acervilux);
			}
		} else {
			if (caster.inv_scroll_acervilux) {
				caster.inv_scroll_acervilux = caster.inv_scroll_acervilux - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "heal") {
		if (type == 1) {
			if (caster.inv_book_heal) {
				caster.inv_book_heal = caster.inv_book_heal - 1;
				LearnSpell(caster, spellname, spell_heal);
			}
		} else {
			if (caster.inv_scroll_heal) {
				caster.inv_scroll_heal = caster.inv_scroll_heal - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "repair") {
		if (type == 1) {
			if (caster.inv_book_repair) {
				caster.inv_book_repair = caster.inv_book_repair - 1;
				LearnSpell(caster, spellname, spell_repair);
			}
		} else {
			if (caster.inv_scroll_repair) {
				caster.inv_scroll_repair = caster.inv_scroll_repair - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "holyword") {
		if (type == 1) {
			if (caster.inv_book_holyword) {
				caster.inv_book_holyword = caster.inv_book_holyword - 1;
				LearnSpell(caster, spellname, spell_holyword);
			}
		} else {
			if (caster.inv_scroll_holyword) {
				caster.inv_scroll_holyword = caster.inv_scroll_holyword - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "extinguish") {
		if (type == 1) {
			if (caster.inv_book_extinguish) {
				caster.inv_book_extinguish = caster.inv_book_extinguish - 1;
				LearnSpell(caster, spellname, spell_extinguish);
			}
		} else {
			if (caster.inv_scroll_extinguish) {
				caster.inv_scroll_extinguish = caster.inv_scroll_extinguish - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "darkritual") {
		if (type == 1) {
			if (caster.inv_book_darkritual) {
				caster.inv_book_darkritual = caster.inv_book_darkritual - 1;
				LearnSpell(caster, spellname, spell_darkritual);
			}
		} else {
			if (caster.inv_scroll_darkritual) {
				caster.inv_scroll_darkritual = caster.inv_scroll_darkritual - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "lightining") {
		if (type == 1) {
			if (caster.inv_book_lightining) {
				caster.inv_book_lightining = caster.inv_book_lightining - 1;
				LearnSpell(caster, spellname, spell_lightining);
			}
		} else {
			if (caster.inv_scroll_lightining) {
				caster.inv_scroll_lightining = caster.inv_scroll_lightining - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "balllightining") {
		if (type == 1) {
			if (caster.inv_book_balllightining) {
				caster.inv_book_balllightining = caster.inv_book_balllightining - 1;
				LearnSpell(caster, spellname, spell_balllightining);
			}
		} else {
			if (caster.inv_scroll_balllightining) {
				caster.inv_scroll_balllightining = caster.inv_scroll_balllightining - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
		
	} else if (spellname == "chainlightining") {
		if (type == 1) {
			if (caster.inv_book_chainlightining) {
				caster.inv_book_chainlightining = caster.inv_book_chainlightining - 1;
				LearnSpell(caster, spellname, spell_chainlightining);
			}
		} else {
			if (caster.inv_scroll_chainlightining) {
				caster.inv_scroll_chainlightining = caster.inv_scroll_chainlightining - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "lightiningburst") {
		if (type == 1) {
			if (caster.inv_book_lightiningburst) {
				caster.inv_book_lightiningburst = caster.inv_book_lightiningburst - 1;
				LearnSpell(caster, spellname, spell_lightiningburst);
			}
		} else {
			if (caster.inv_scroll_lightiningburst) {
				caster.inv_scroll_lightiningburst = caster.inv_scroll_lightiningburst - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
		
	} else if (spellname == "chargedbolt") {
		if (type == 1) {
			if (caster.inv_book_chargedbolt) {
				caster.inv_book_chargedbolt = caster.inv_book_chargedbolt - 1;
				LearnSpell(caster, spellname, spell_chargedbolt);
			}
		} else {
			if (caster.inv_scroll_chargedbolt) {
				caster.inv_scroll_chargedbolt = caster.inv_scroll_chargedbolt - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "lightiningstrike") {
		if (type == 1) {
			if (caster.inv_book_lightiningstrike) {
				caster.inv_book_lightiningstrike = caster.inv_book_lightiningstrike - 1;
				LearnSpell(caster, spellname, spell_lightiningstrike);
			}
		} else {
			if (caster.inv_scroll_lightiningstrike) {
				caster.inv_scroll_lightiningstrike = caster.inv_scroll_lightiningstrike - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "manashield") {
		if (type == 1) {
			if (caster.inv_book_manashield) {
				caster.inv_book_manashield = caster.inv_book_manashield - 1;
				LearnSpell(caster, spellname, spell_manashield);
			}
		} else {
			if (caster.inv_scroll_manashield) {
				caster.inv_scroll_manashield = caster.inv_scroll_manashield - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "clairvoyance") {
		if (type == 1) {
			if (caster.inv_book_clairvoyance) {
				caster.inv_book_clairvoyance = caster.inv_book_clairvoyance - 1;
				LearnSpell(caster, spellname, spell_clairvoyance);
			}
		} else {
			if (caster.inv_scroll_clairvoyance) {
				caster.inv_scroll_clairvoyance = caster.inv_scroll_clairvoyance - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "magicbullets") {
		if (type == 1) {
			if (caster.inv_book_magicbullets) {
				caster.inv_book_magicbullets = caster.inv_book_magicbullets - 1;
				LearnSpell(caster, spellname, spell_magicbullets);
			}
		} else {
			if (caster.inv_scroll_magicbullets) {
				caster.inv_scroll_magicbullets = caster.inv_scroll_magicbullets - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "magicmissile") {
		if (type == 1) {
			if (caster.inv_book_magicmissile) {
				caster.inv_book_magicmissile = caster.inv_book_magicmissile - 1;
				LearnSpell(caster, spellname, spell_magicmissile);
			}
		} else {
			if (caster.inv_scroll_magicmissile) {
				caster.inv_scroll_magicmissile = caster.inv_scroll_magicmissile - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "monstertomonolith") {
		if (type == 1) {
			if (caster.inv_book_monstertomonolith) {
				caster.inv_book_monstertomonolith = caster.inv_book_monstertomonolith - 1;
				LearnSpell(caster, spellname, spell_monstertomonolith);
			}
		} else {
			if (caster.inv_scroll_monstertomonolith) {
				caster.inv_scroll_monstertomonolith = caster.inv_scroll_monstertomonolith - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "monstertomouse") {
		if (type == 1) {
			if (caster.inv_book_monstertomouse) {
				caster.inv_book_monstertomouse = caster.inv_book_monstertomouse - 1;
				LearnSpell(caster, spellname, spell_monstertomouse);
			}
		} else {
			if (caster.inv_scroll_monstertomouse) {
				caster.inv_scroll_monstertomouse = caster.inv_scroll_monstertomouse - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "meteor") {
		if (type == 1) {
			if (caster.inv_book_meteor) {
				caster.inv_book_meteor = caster.inv_book_meteor - 1;
				LearnSpell(caster, spellname, spell_meteor);
			}
		} else {
			if (caster.inv_scroll_meteor) {
				caster.inv_scroll_meteor = caster.inv_scroll_meteor - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "meteorshower") {
		if (type == 1) {
			if (caster.inv_book_meteorshower) {
				caster.inv_book_meteorshower = caster.inv_book_meteorshower - 1;
				LearnSpell(caster, spellname, spell_meteorshower);
			}
		} else {
			if (caster.inv_scroll_meteorshower) {
				caster.inv_scroll_meteorshower = caster.inv_scroll_meteorshower - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "mimic") {
		if (type == 1) {
			if (caster.inv_book_mimic) {
				caster.inv_book_mimic = caster.inv_book_mimic - 1;
				LearnSpell(caster, spellname, spell_mimic);
			}
		} else {
			if (caster.inv_scroll_mimic) {
				caster.inv_scroll_mimic = caster.inv_scroll_mimic - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "paralyse") {
		if (type == 1) {
			if (caster.inv_book_paralyse) {
				caster.inv_book_paralyse = caster.inv_book_paralyse - 1;
				LearnSpell(caster, spellname, spell_paralyse);
			}
		} else {
			if (caster.inv_scroll_paralyse) {
				caster.inv_scroll_paralyse = caster.inv_scroll_paralyse - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "ringoffire") {
		if (type == 1) {
			if (caster.inv_book_ringoffire) {
				caster.inv_book_ringoffire = caster.inv_book_ringoffire - 1;
				LearnSpell(caster, spellname, spell_ringoffire);
			}
		} else {
			if (caster.inv_scroll_ringoffire) {
				caster.inv_scroll_ringoffire = caster.inv_scroll_ringoffire - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "stonecurse") {
		if (type == 1) {
			if (caster.inv_book_stonecurse) {
				caster.inv_book_stonecurse = caster.inv_book_stonecurse - 1;
				LearnSpell(caster, spellname, spell_stonecurse);
			}
		} else {
			if (caster.inv_scroll_stonecurse) {
				caster.inv_scroll_stonecurse = caster.inv_scroll_stonecurse - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}	
	} else if (spellname == "stonerain") {
		if (type == 1) {
			if (caster.inv_book_stonerain) {
				caster.inv_book_stonerain = caster.inv_book_stonerain - 1;
				LearnSpell(caster, spellname, spell_stonerain);
			}
		} else {
			if (caster.inv_scroll_stonerain) {
				caster.inv_scroll_stonerain = caster.inv_scroll_stonerain - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "timesink") {
		if (type == 1) {
			if (caster.inv_book_timesink) {
				caster.inv_book_timesink = caster.inv_book_timesink - 1;
				LearnSpell(caster, spellname, spell_timesink);
			}
		} else {
			if (caster.inv_scroll_timesink) {
				caster.inv_scroll_timesink = caster.inv_scroll_timesink - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	} else if (spellname == "vampyricconduit") {
		if (type == 1) {
			if (caster.inv_book_vampyricconduit) {
				caster.inv_book_vampyricconduit = caster.inv_book_vampyricconduit - 1;
				LearnSpell(caster, spellname, spell_vampyricconduit);
			}
		} else {
			if (caster.inv_scroll_vampyricconduit) {
				caster.inv_scroll_vampyricconduit = caster.inv_scroll_vampyricconduit - 1;
				caster.nextspell = CastSpellByName(5, caster, spellname);
			}
		}
	//Knowledge	
	} else if (spellname == "carpentry") {
		if (type == 1) {
			if (caster.inv_book_know_carpentry) {
				caster.inv_book_know_carpentry = caster.inv_book_know_carpentry - 1;
				LearnSpell(caster, spellname, knowledge_carpentry);
			}
		}	
	} else if (spellname == "mortise") {
		if (type == 1) {
			if (caster.inv_book_know_mortise) {
				caster.inv_book_know_mortise = caster.inv_book_know_mortise - 1;
				LearnSpell(caster, spellname, knowledge_mortise);
			}
		}	
	} else if (spellname == "stonemasonry") {
		if (type == 1) {
			if (caster.inv_book_know_stonemasonry) {
				caster.inv_book_know_stonemasonry = caster.inv_book_know_stonemasonry - 1;
				LearnSpell(caster, spellname, knowledge_stonemasonry);
			}
		}	
	} else if (spellname == "ironworking") {
		if (type == 1) {
			if (caster.inv_book_know_ironworking) {
				caster.inv_book_know_ironworking = caster.inv_book_know_ironworking - 1;
				LearnSpell(caster, spellname, knowledge_ironworking);
			}
		}	
	} else if (spellname == "arch") {
		if (type == 1) {
			if (caster.inv_book_know_arch) {
				caster.inv_book_know_arch = caster.inv_book_know_arch - 1;
				LearnSpell(caster, spellname, knowledge_arch);
			}
		}	
	} else if (spellname == "welding") {
		if (type == 1) {
			if (caster.inv_book_know_welding) {
				caster.inv_book_know_welding = caster.inv_book_know_welding - 1;
				LearnSpell(caster, spellname, knowledge_welding);
			}
		}	
	} else if (spellname == "concrete") {
		if (type == 1) {
			if (caster.inv_book_know_concrete) {
				caster.inv_book_know_concrete = caster.inv_book_know_concrete - 1;
				LearnSpell(caster, spellname, knowledge_concrete);
			}
		}	
	}
}

void DropSpellByName (float type, string spellname, float coinamount)
{
	//Type 0 = scroll, 1 = book, 3/4/5 = potion (small medium large
	if (type == 3)
	{
		//Small Potions
		if (spellname == "health") spawnfunc_item_potion_health_small();
		else if (spellname == "mana") spawnfunc_item_potion_mana_small();
		else if (spellname == "rejuv") spawnfunc_item_potion_rejuv_small();
		else if (spellname == "vodka") spawnfunc_item_potion_vodka_small();
		else if (spellname == "merlot") spawnfunc_item_potion_merlot_small();
		else if (spellname == "ale") spawnfunc_item_potion_ale_small();
		else if (spellname == "water") spawnfunc_item_potion_water_small();
		else if (spellname == "bellpepper") spawnfunc_item_food_bellpepper();
		else if (spellname == "bread") spawnfunc_item_food_bread();
		else if (spellname == "cheeze") spawnfunc_item_food_cheeze();
		else if (spellname == "garlic") spawnfunc_item_food_garlic();
		else if (spellname == "grapes") spawnfunc_item_food_grapes();
		else if (spellname == "onion") spawnfunc_item_food_onion();
		else if (spellname == "tomato") spawnfunc_item_food_tomato();
		else if (spellname == "turkeyleg") spawnfunc_item_food_turkeyleg();
		else if (spellname == "faeces") spawnfunc_item_faeces_small();
	}
	else if (type == 4)
	{
		//Medium Potions
		if (spellname == "health") spawnfunc_item_potion_health_medium();
		else if (spellname == "mana") spawnfunc_item_potion_mana_medium();
		else if (spellname == "rejuv") spawnfunc_item_potion_rejuv_medium();
		else if (spellname == "vodka") spawnfunc_item_potion_vodka_medium();
		else if (spellname == "merlot") spawnfunc_item_potion_merlot_medium();
		else if (spellname == "ale") spawnfunc_item_potion_ale_medium();
		else if (spellname == "water") spawnfunc_item_potion_water_medium();
		else if (spellname == "faeces") spawnfunc_item_faeces_medium();
	}
	else if (type == 5)
	{
		//Large Potions
		if (spellname == "health") spawnfunc_item_potion_health_large();
		else if (spellname == "mana") spawnfunc_item_potion_mana_large();
		else if (spellname == "rejuv") spawnfunc_item_potion_rejuv_large();
		else if (spellname == "vodka") spawnfunc_item_potion_vodka_large();
		else if (spellname == "merlot") spawnfunc_item_potion_merlot_large();
		else if (spellname == "ale") spawnfunc_item_potion_ale_large();
		else if (spellname == "water") spawnfunc_item_potion_water_large();
		else if (spellname == "faeces") spawnfunc_item_faeces_large();
	}
	else if (type == 6)
	{
		//Ammo or resources
		if (spellname == "nails") spawnfunc_item_bullets();
		else if (spellname == "shells") spawnfunc_item_shells();
		else if (spellname == "rockets") spawnfunc_item_rockets();
		else if (spellname == "cells") spawnfunc_item_cells();
		else if (spellname == "grenade") {
			if (g_nades) {
				spawnfunc_item_grenades();
			}
		}
		else if (spellname == "flashbang") {
			if (g_nades) {
				spawnfunc_item_flashbangs();
			}
		}
		else if (spellname == "smokenade") {
			if (g_nades) {
				spawnfunc_item_smokenades();
			}
		}
		else if (spellname == "fragnade") {
			if (g_nades) {
				spawnfunc_item_fragnades();
			}
		}
		else if (spellname == "atmine") {
			if (g_nades) {
				spawnfunc_item_atmines();
			}
		}
		else if (spellname == "landmine") {
			if (g_nades) {
				spawnfunc_item_landmines();
			}
		}
	}
	else if (type == 7)
	{
		//coins
		if (spellname == "tin") {
			self.inv_coin_tin = coinamount;
			spawnfunc_item_money_coin_tin();
		} else if (spellname == "iron") {
			self.inv_coin_iron = coinamount;
			spawnfunc_item_money_coin_iron();
		} else if (spellname == "bronze") {
			self.inv_coin_bronze = coinamount;
			spawnfunc_item_money_coin_bronze();
		} else if (spellname == "copper") {
			self.inv_coin_copper = coinamount;
			spawnfunc_item_money_coin_copper();
		} else if (spellname == "silver") {
			self.inv_coin_silver = coinamount;
			spawnfunc_item_money_coin_silver();
		} else if (spellname == "gold") {
			self.inv_coin_gold = coinamount;
			spawnfunc_item_money_coin_gold();
		} else if (spellname == "plat") {
			self.inv_coin_plat = coinamount;
			spawnfunc_item_money_coin_plat();
		} else if (spellname == "jade") {
			self.inv_coin_jade = coinamount;
			spawnfunc_item_money_coin_jade();
		} else if (spellname == "amberium") {
			self.inv_coin_amberium = coinamount;
			spawnfunc_item_money_coin_amberium();
		}  //Faux, fake coins:
		else if (spellname == "fauxtin") {
			self.inv_coin_f_tin = coinamount;
			spawnfunc_item_money_coin_f_tin();
		} else if (spellname == "fauxiron") {
			self.inv_coin_f_iron = coinamount;
			spawnfunc_item_money_coin_f_iron();
		} else if (spellname == "fauxbronze") {
			self.inv_coin_f_bronze = coinamount;
			spawnfunc_item_money_coin_f_bronze();
		} else if (spellname == "fauxcopper") {
			self.inv_coin_f_copper = coinamount;
			spawnfunc_item_money_coin_f_copper();
		} else if (spellname == "fauxsilver") {
			self.inv_coin_f_silver = coinamount;
			spawnfunc_item_money_coin_f_silver();
		} else if (spellname == "fauxgold") {
			self.inv_coin_f_gold = coinamount;
			spawnfunc_item_money_coin_f_gold();
		} else if (spellname == "fauxplat") {
			self.inv_coin_f_plat = coinamount;
			spawnfunc_item_money_coin_f_plat();
		} else if (spellname == "fauxjade") {
			self.inv_coin_f_jade = coinamount;
			spawnfunc_item_money_coin_f_jade();
		} else if (spellname == "fauxamberium") {
			self.inv_coin_f_amberium = coinamount;
			spawnfunc_item_money_coin_f_amberium();
		}  //Counterfeit blatant flaking coins:
		else if (spellname == "counterfeittin") {
			self.inv_coin_cf_tin = coinamount;
			spawnfunc_item_money_coin_cf_tin();
		} else if (spellname == "counterfeitiron") {
			self.inv_coin_cf_iron = coinamount;
			spawnfunc_item_money_coin_cf_iron();
		} else if (spellname == "counterfeitbronze") {
			self.inv_coin_cf_bronze = coinamount;
			spawnfunc_item_money_coin_cf_bronze();
		} else if (spellname == "counterfeitcopper") {
			self.inv_coin_cf_copper = coinamount;
			spawnfunc_item_money_coin_cf_copper();
		} else if (spellname == "counterfeitsilver") {
			self.inv_coin_cf_silver = coinamount;
			spawnfunc_item_money_coin_cf_silver();
		} else if (spellname == "counterfeitgold") {
			self.inv_coin_cf_gold = coinamount;
			spawnfunc_item_money_coin_cf_gold();
		} else if (spellname == "counterfeitplat") {
			self.inv_coin_cf_plat = coinamount;
			spawnfunc_item_money_coin_cf_plat();
		} else if (spellname == "counterfeitjade") {
			self.inv_coin_cf_jade = coinamount;
			spawnfunc_item_money_coin_cf_jade();
		} else if (spellname == "counterfeitamberium") {
			self.inv_coin_cf_amberium = coinamount;
			spawnfunc_item_money_coin_cf_amberium();
		//Casino Tokens
		} else if (spellname == "casinotokenyellow") {
			self.inv_casinotoken_yellow = coinamount;
			spawnfunc_item_casinotoken_yellow();
		} else if (spellname == "casinotokenblue") {
			self.inv_casinotoken_blue = coinamount;
			spawnfunc_item_casinotoken_blue();
		} else if (spellname == "casinotokengray") {
			self.inv_casinotoken_gray = coinamount;
			spawnfunc_item_casinotoken_gray();
		} else if (spellname == "casinotokenlightgreen") {
			self.inv_casinotoken_lightgreen = coinamount;
			spawnfunc_item_casinotoken_lightgreen();
		} else if (spellname == "casinotokengray") {
			self.inv_casinotoken_gray = coinamount;
			spawnfunc_item_casinotoken_gray();
		} else if (spellname == "casinotokenlightblue") {
			self.inv_casinotoken_lightblue = coinamount;
			spawnfunc_item_casinotoken_lightblue();
		} else if (spellname == "casinotokenrose") {
			self.inv_casinotoken_rose = coinamount;
			spawnfunc_item_casinotoken_rose();
		} else if (spellname == "casinotokenblack") {
			self.inv_casinotoken_black = coinamount;
			spawnfunc_item_casinotoken_black();
		} else if (spellname == "casinotokenseabreeze") {
			self.inv_casinotoken_seabreeze = coinamount;
			spawnfunc_item_casinotoken_seabreeze();
		} else if (spellname == "casinotokenred") {
			self.inv_casinotoken_red = coinamount;
			spawnfunc_item_casinotoken_red();
		} else if (spellname == "casinotokencyan") {
			self.inv_casinotoken_cyan = coinamount;
			spawnfunc_item_casinotoken_cyan();
		} else if (spellname == "casinotokentan") {
			self.inv_casinotoken_tan = coinamount;
			spawnfunc_item_casinotoken_tan();
		} else if (spellname == "casinotokengreen") {
			self.inv_casinotoken_green = coinamount;
			spawnfunc_item_casinotoken_green();
		} else if (spellname == "casinotokenpurple") {
			self.inv_casinotoken_purple = coinamount;
			spawnfunc_item_casinotoken_purple();
		}
	}
	else if (type == 8)
	{
		//gems
		if (spellname == "diamond") {
			self.inv_gem_diamond = coinamount;
			spawnfunc_item_gem_diamond();
		} else if (spellname == "jacinth") {
			self.inv_gem_jacinth = coinamount;
			spawnfunc_item_gem_jacinth();
		} else if (spellname == "ruby") {
			self.inv_gem_ruby = coinamount;
			spawnfunc_item_gem_ruby();
		} else if (spellname == "pearl") {
			self.inv_gem_pearl = coinamount;
			spawnfunc_item_gem_pearl();
		} else if (spellname == "blackpearl") {
			self.inv_gem_blackpearl = coinamount;
			spawnfunc_item_gem_blackpearl();
		} else if (spellname == "peridot") {
			self.inv_gem_peridot = coinamount;
			spawnfunc_item_gem_peridot();
		} else if (spellname == "emerald") {
			self.inv_gem_emerald = coinamount;
			spawnfunc_item_gem_emerald();
		} else if (spellname == "topaz") {
			self.inv_gem_topaz = coinamount;
			spawnfunc_item_gem_topaz();
		} else if (spellname == "sapphire") {
			self.inv_gem_sapphire = coinamount;
			spawnfunc_item_gem_sapphire();
		} else if (spellname == "chalcedony") {
			self.inv_gem_chalcedony = coinamount;
			spawnfunc_item_gem_chalcedony();
		} else if (spellname == "agate") {
			self.inv_gem_agate = coinamount;
			spawnfunc_item_gem_agate();
		} else if (spellname == "onyx") {
			self.inv_gem_onyx = coinamount;
			spawnfunc_item_gem_onyx();
		} else if (spellname == "mithril") {
			self.inv_gem_mithril = coinamount;
			spawnfunc_item_gem_mithril();
		} else if (spellname == "amethyst") {
			self.inv_gem_amethyst = coinamount;
			spawnfunc_item_gem_amethyst();
		} else if (spellname == "chrysoberyl") {
			self.inv_gem_chrysoberyl = coinamount;
			spawnfunc_item_gem_chrysoberyl();
		} else if (spellname == "aquamarine") {
			self.inv_gem_aquamarine = coinamount;
			spawnfunc_item_gem_aquamarine();
		} else if (spellname == "quartz") {
			self.inv_gem_quartz = coinamount;
			spawnfunc_item_gem_quartz();
		} else if (spellname == "tourmaline") {
			self.inv_gem_tourmaline = coinamount;
			spawnfunc_item_gem_tourmaline();
		} else if (spellname == "redglass") {
			self.inv_gem_glass_r = coinamount;
			spawnfunc_item_gem_glass_r();
		} else if (spellname == "greenglass") {
			self.inv_gem_glass_g = coinamount;
			spawnfunc_item_gem_glass_g();
		} else if (spellname == "blueglass") {
			self.inv_gem_glass_b = coinamount;
			spawnfunc_item_gem_glass_b();
		} else if (spellname == "yellowglass") {
			self.inv_gem_glass_y = coinamount;
			spawnfunc_item_gem_glass_y();
		} else if (spellname == "whiteglass") {
			self.inv_gem_glass_w = coinamount;
			spawnfunc_item_gem_glass_w();
		}
		//Faux, fake gems
		else if (spellname == "cutglassdiamond") {
			self.inv_gem_f_diamond = coinamount;
			spawnfunc_item_gem_f_diamond();
		} else if (spellname == "cutglassjacinth") {
			self.inv_gem_f_jacinth = coinamount;
			spawnfunc_item_gem_f_jacinth();
		} else if (spellname == "cutglassruby") {
			self.inv_gem_f_ruby = coinamount;
			spawnfunc_item_gem_f_ruby();
		} else if (spellname == "cutglasspearl") {
			self.inv_gem_f_pearl = coinamount;
			spawnfunc_item_gem_f_pearl();
		} else if (spellname == "cutglassblackpearl") {
			self.inv_gem_f_blackpearl = coinamount;
			spawnfunc_item_gem_f_blackpearl();
		} else if (spellname == "cutglassperidot") {
			self.inv_gem_f_peridot = coinamount;
			spawnfunc_item_gem_f_peridot();
		} else if (spellname == "cutglassemerald") {
			self.inv_gem_f_emerald = coinamount;
			spawnfunc_item_gem_f_emerald();
		} else if (spellname == "cutglasstopaz") {
			self.inv_gem_f_topaz = coinamount;
			spawnfunc_item_gem_f_topaz();
		} else if (spellname == "cutglasssapphire") {
			self.inv_gem_f_sapphire = coinamount;
			spawnfunc_item_gem_f_sapphire();
		} else if (spellname == "cutglasschalcedony") {
			self.inv_gem_f_chalcedony = coinamount;
			spawnfunc_item_gem_f_chalcedony();
		} else if (spellname == "cutglassagate") {
			self.inv_gem_f_agate = coinamount;
			spawnfunc_item_gem_f_agate();
		} else if (spellname == "cutglassonyx") {
			self.inv_gem_f_onyx = coinamount;
			spawnfunc_item_gem_f_onyx();
		} else if (spellname == "cutglassmithril") {
			self.inv_gem_f_mithril = coinamount;
			spawnfunc_item_gem_f_mithril();
		} else if (spellname == "cutglassamethyst") {
			self.inv_gem_f_amethyst = coinamount;
			spawnfunc_item_gem_f_amethyst();
		} else if (spellname == "cutglasschrysoberyl") {
			self.inv_gem_f_chrysoberyl = coinamount;
			spawnfunc_item_gem_f_chrysoberyl();
		} else if (spellname == "cutglassaquamarine") {
			self.inv_gem_f_aquamarine = coinamount;
			spawnfunc_item_gem_f_aquamarine();
		} else if (spellname == "cutglassquartz") {
			self.inv_gem_f_quartz = coinamount;
			spawnfunc_item_gem_f_quartz();
		} else if (spellname == "cutglasstourmaline") {
			self.inv_gem_f_tourmaline = coinamount;
			spawnfunc_item_gem_f_tourmaline();
		}
	}
	else if (type == 9)
	{
		//print("Here\n");
		//bars
		if (spellname == "tin") {
			self.inv_bar_tin = coinamount;
			spawnfunc_item_bullion_bar_tin();
		} else if (spellname == "iron") {
			self.inv_bar_iron = coinamount;
			spawnfunc_item_bullion_bar_iron();
		} else if (spellname == "bronze") {
			self.inv_bar_bronze = coinamount;
			spawnfunc_item_bullion_bar_bronze();
		} else if (spellname == "copper") {
			self.inv_bar_copper = coinamount;
			spawnfunc_item_bullion_bar_copper();
		} else if (spellname == "silver") {
			self.inv_bar_silver = coinamount;
			spawnfunc_item_bullion_bar_silver();
		} else if (spellname == "gold") {
			self.inv_bar_gold = coinamount;
			spawnfunc_item_bullion_bar_gold();
		} else if (spellname == "plat") {
			self.inv_bar_plat = coinamount;
			spawnfunc_item_bullion_bar_plat();
		} else if (spellname == "jade") {
			self.inv_bar_jade = coinamount;
			spawnfunc_item_bullion_bar_jade();
		} else if (spellname == "amberium") {
			self.inv_bar_amberium = coinamount;
			spawnfunc_item_bullion_bar_amberium();
		}
		//Faux
		else if (spellname == "fauxtin") {
			self.inv_bar_f_tin = coinamount;
			spawnfunc_item_bullion_bar_f_tin();
		} else if (spellname == "fauxiron") {
			self.inv_bar_f_iron = coinamount;
			spawnfunc_item_bullion_bar_f_iron();
		} else if (spellname == "fauxbronze") {
			self.inv_bar_f_bronze = coinamount;
			spawnfunc_item_bullion_bar_f_bronze();
		} else if (spellname == "fauxcopper") {
			self.inv_bar_f_copper = coinamount;
			spawnfunc_item_bullion_bar_f_copper();
		} else if (spellname == "fauxsilver") {
			self.inv_bar_f_silver = coinamount;
			spawnfunc_item_bullion_bar_f_silver();
		} else if (spellname == "fauxgold") {
			self.inv_bar_f_gold = coinamount;
			spawnfunc_item_bullion_bar_f_gold();
		} else if (spellname == "fauxplat") {
			self.inv_bar_f_plat = coinamount;
			spawnfunc_item_bullion_bar_f_plat();
		} else if (spellname == "fauxjade") {
			self.inv_bar_f_jade = coinamount;
			spawnfunc_item_bullion_bar_f_jade();
		} else if (spellname == "fauxamberium") {
			self.inv_bar_f_amberium = coinamount;
			spawnfunc_item_bullion_bar_f_amberium();
		}
	}
	else if (type == 10)
	{
		//print("Here\n");
		//misc
		if (spellname == "suppressor45") {
			self.inv_misc_suppressor45 = coinamount;
			spawnfunc_item_misc_suppressor45();
			
		} else if (spellname == "suppressormac10") {
			self.inv_misc_suppressormac10 = coinamount;
			spawnfunc_item_misc_suppressormac10();
			
		} else if (spellname == "suppressor9mm") {
			self.inv_misc_suppressor9mm = coinamount;
			spawnfunc_item_misc_suppressor9mm();
			
		} else if (spellname == "suppressor5n7mm") {
			self.inv_misc_suppressor5n7mm = coinamount;
			spawnfunc_item_misc_suppressor5n7mm();
			
		} else if (spellname == "suppressorrifle") {
			self.inv_misc_suppressorrifle = coinamount;
			spawnfunc_item_misc_suppressorrifle();
			
		} else if (spellname == "suppressorpdw") {
			self.inv_misc_suppressorpdw = coinamount;
			spawnfunc_item_misc_suppressorpdw();
			
		} else if (spellname == "cylinderr1856") {
			self.inv_misc_cylinder_r1856 = coinamount;
			spawnfunc_item_misc_cylinder_r1856();
		} else if (spellname == "ak47exmag50") {
			self.inv_misc_exmag_ak47_50 = coinamount;
			spawnfunc_item_misc_exmag_ak47_50();
		} else if (spellname == "ak47exmag100") {
			self.inv_misc_exmag_ak47_100 = coinamount;
			spawnfunc_item_misc_exmag_ak47_100();
		} else if (spellname == "ak47drum75") {
			self.inv_misc_drum_ak47_75 = coinamount;
			spawnfunc_item_misc_drum_ak47_75();
		} else if (spellname == "ak47mag30") {
			self.inv_misc_mag_ak47_30 = coinamount;
			spawnfunc_item_misc_mag_ak47_30();
		} else if (spellname == "m16mag20") {
			self.inv_misc_mag_m16_20 = coinamount;
			spawnfunc_item_misc_mag_m16_20();
		} else if (spellname == "m16mag30") {
			self.inv_misc_mag_m16_30 = coinamount;
			spawnfunc_item_misc_mag_m16_30();
		} else if (spellname == "m16betacmag") {
			self.inv_misc_betacmag_m16 = coinamount;
			spawnfunc_item_misc_betacmag_m16();
		} else if (spellname == "lightpistolbetacmag") {
			self.inv_misc_betacmag_lightpistol = coinamount;
			spawnfunc_item_misc_betacmag_lightpistol();
		} else if (spellname == "lightpistolexmag") {
			self.inv_misc_exmag_lightpistol = coinamount;
			spawnfunc_item_misc_exmag_lightpistol();
		} else if (spellname == "lightpistolmag") {
			self.inv_misc_mag_lightpistol = coinamount;
			spawnfunc_item_misc_mag_lightpistol();
		} else if (spellname == "lightpistoldrum") {
			self.inv_misc_drum_lightpistol = coinamount;
			spawnfunc_item_misc_drum_lightpistol();
		} else if (spellname == "pdwbetacmag") {
			self.inv_misc_betacmag_pdw = coinamount;
			spawnfunc_item_misc_betacmag_pdw();
		} else if (spellname == "pdwexmag40") {
			self.inv_misc_exmag40_pdw = coinamount;
			spawnfunc_item_misc_exmag40_pdw();
		} else if (spellname == "pdwstdmag") {
			self.inv_misc_stdmag_pdw = coinamount;
			spawnfunc_item_misc_stdmag_pdw();
		} else if (spellname == "pdwsmallmag") {
			self.inv_misc_smallmag_pdw = coinamount;
			spawnfunc_item_misc_smallmag_pdw();
		} else if (spellname == "pdwtinymag") {
			self.inv_misc_tinymag_pdw = coinamount;
			spawnfunc_item_misc_tinymag_pdw();
		} else if (spellname == "pdwdrum") {
			self.inv_misc_drum_pdw = coinamount;
			spawnfunc_item_misc_drum_pdw();	
		} else if (spellname == "uzimag20") {
			self.inv_misc_mag_uzi_20 = coinamount;
			spawnfunc_item_misc_mag_uzi_20();
		} else if (spellname == "uzimag25") {
			self.inv_misc_mag_uzi_25 = coinamount;
			spawnfunc_item_misc_mag_uzi_25();
		} else if (spellname == "uzimag32") {
			self.inv_misc_mag_uzi_32 = coinamount;
			spawnfunc_item_misc_mag_uzi_32();
		} else if (spellname == "uziexmag40") {
			self.inv_misc_exmag_uzi_40 = coinamount;
			spawnfunc_item_misc_exmag_uzi_40();
		} else if (spellname == "uziexmag50") {
			self.inv_misc_exmag_uzi_50 = coinamount;
			spawnfunc_item_misc_exmag_uzi_50();
		} else if (spellname == "uzidrum82") {
			self.inv_misc_drum_uzi_82 = coinamount;
			spawnfunc_item_misc_drum_uzi_82();
		} else if (spellname == "uziexmag106") {
			self.inv_misc_exmag_uzi_106 = coinamount;
			spawnfunc_item_misc_exmag_uzi_106();
		} else if (spellname == "tec9mag20") {
			self.inv_misc_mag_tec9_20 = coinamount;
			spawnfunc_item_misc_mag_tec9_20();
		} else if (spellname == "tec9mag10") {
			self.inv_misc_mag_tec9_10 = coinamount;
			spawnfunc_item_misc_mag_tec9_10();
		} else if (spellname == "tec9mag32") {
			self.inv_misc_mag_tec9_32 = coinamount;
			spawnfunc_item_misc_mag_tec9_32();
		} else if (spellname == "tec9exmag36") {
			self.inv_misc_exmag_tec9_36 = coinamount;
			spawnfunc_item_misc_exmag_tec9_36();
		} else if (spellname == "tec9exmag50") {
			self.inv_misc_exmag_tec9_50 = coinamount;
			spawnfunc_item_misc_exmag_tec9_50();
		} else if (spellname == "tec9drum72") {
			self.inv_misc_drum_tec9_72 = coinamount;
			spawnfunc_item_misc_drum_tec9_72();
		} else if (spellname == "ak74mag30") {
			self.inv_misc_mag_ak74_30 = coinamount;
			spawnfunc_item_misc_mag_ak74_30();
		} else if (spellname == "ak74exmag45") {
			self.inv_misc_exmag_ak74_45 = coinamount;
			spawnfunc_item_misc_exmag_ak74_45();
		} else if (spellname == "styeraugmag30") {
			self.inv_misc_mag_styeraug_30 = coinamount;
			spawnfunc_item_misc_mag_styeraug_30();
		} else if (spellname == "styeraugexmag42") {
			self.inv_misc_exmag_styeraug_42 = coinamount;
			spawnfunc_item_misc_exmag_styeraug_42();
		} else if (spellname == "lewisgunpanmag47") {
			self.inv_misc_panmag_lewisgun_47 = coinamount;
			spawnfunc_item_misc_panmag_lewisgun_47();
		} else if (spellname == "lewisgunpanmag97") {
			self.inv_misc_panmag_lewisgun_97 = coinamount;
			spawnfunc_item_misc_panmag_lewisgun_97();
		} else if (spellname == "barmag20") {
			self.inv_misc_mag_bar_20 = coinamount;
			spawnfunc_item_misc_mag_bar_20();
		} else if (spellname == "barexmag40") {
			self.inv_misc_exmag_bar_40 = coinamount;
			spawnfunc_item_misc_exmag_bar_40();
		}
		
		
	}	
	else if (type == 1)
	{
		//Books
		if (spellname == "agency") spawnfunc_item_book_spell_agency();
		else if (spellname == "death") spawnfunc_item_book_spell_death();
		else if (spellname == "drainlife") spawnfunc_item_book_spell_drainlife();
		else if (spellname == "cancellation") spawnfunc_item_book_spell_cancellation();	
		else if (spellname == "castfromlife") spawnfunc_item_book_spell_castfromlife();	
		else if (spellname == "confer") spawnfunc_item_book_spell_confer();
		else if (spellname == "iceball") spawnfunc_item_book_spell_iceball();
		else if (spellname == "icestar") spawnfunc_item_book_spell_icestar();
		else if (spellname == "aquacaelestis") spawnfunc_item_book_spell_aquacaelestis();
		else if (spellname == "nivosus") spawnfunc_item_book_spell_nivosus();
		else if (spellname == "rosa") spawnfunc_item_book_spell_rosa();
		else if (spellname == "corvuspenna") spawnfunc_item_book_spell_corvuspenna();
		else if (spellname == "plumosus") spawnfunc_item_book_spell_plumosus();
		else if (spellname == "fireball") spawnfunc_item_book_spell_fireball();
		else if (spellname == "magmasphere") spawnfunc_item_book_spell_magmasphere();
		else if (spellname == "firebolt") spawnfunc_item_book_spell_firebolt();
		else if (spellname == "firebeam") spawnfunc_item_book_spell_firebeam();
		else if (spellname == "inferno") spawnfunc_item_book_spell_inferno();
		else if (spellname == "firewall") spawnfunc_item_book_spell_firewall();
		else if (spellname == "lightiningwall") spawnfunc_item_book_spell_lightiningwall();
		else if (spellname == "scepterofflame") spawnfunc_item_book_spell_scepterofflame();
		else if (spellname == "explosion") spawnfunc_item_book_spell_explosion();
		else if (spellname == "phantasmalbarrier") spawnfunc_item_book_spell_phantasmalbarrier();
		else if (spellname == "raiseundead") spawnfunc_item_book_spell_raiseundead();
		else if (spellname == "flameburst") spawnfunc_item_book_spell_flameburst();
		else if (spellname == "firecentury") spawnfunc_item_book_spell_firecentury();
		else if (spellname == "frostbeam") spawnfunc_item_book_spell_frostbeam();
		else if (spellname == "grace") spawnfunc_item_book_spell_grace();
		else if (spellname == "holybolt") spawnfunc_item_book_spell_holybolt();
		else if (spellname == "holylight") spawnfunc_item_book_spell_holylight();
		else if (spellname == "acervilux") spawnfunc_item_book_spell_acervilux();
		else if (spellname == "heal") spawnfunc_item_book_spell_heal();
		else if (spellname == "repair") spawnfunc_item_book_spell_repair();
		else if (spellname == "holyword") spawnfunc_item_book_spell_holyword();
		else if (spellname == "extinguish") spawnfunc_item_book_spell_extinguish();
		else if (spellname == "darkritual") spawnfunc_item_book_spell_darkritual();
		else if (spellname == "lightining") spawnfunc_item_book_spell_lightining();
		else if (spellname == "balllightining") spawnfunc_item_book_spell_balllightining();
		else if (spellname == "chainlightining") spawnfunc_item_book_spell_chainlightining();
		else if (spellname == "lightiningburst") spawnfunc_item_book_spell_lightiningburst();
		else if (spellname == "chargedbolt") spawnfunc_item_book_spell_chargedbolt();
		else if (spellname == "lightiningstrike") spawnfunc_item_book_spell_lightiningstrike();
		else if (spellname == "manashield") spawnfunc_item_book_spell_manashield();
		else if (spellname == "clairvoyance") spawnfunc_item_book_spell_clairvoyance();
		else if (spellname == "magicbullets") spawnfunc_item_book_spell_magicbullets();
		else if (spellname == "magicmissile") spawnfunc_item_book_spell_magicmissile();
		else if (spellname == "monstertomonolith") spawnfunc_item_book_spell_monstertomonolith();
		else if (spellname == "monstertomouse") spawnfunc_item_book_spell_monstertomouse();
		else if (spellname == "meteor") spawnfunc_item_book_spell_meteor();
		else if (spellname == "meteorshower") spawnfunc_item_book_spell_meteorshower();
		else if (spellname == "mimic") spawnfunc_item_book_spell_mimic();
		else if (spellname == "paralyse") spawnfunc_item_book_spell_paralyse();
		else if (spellname == "ringoffire") spawnfunc_item_book_spell_ringoffire();
		else if (spellname == "stonecurse") spawnfunc_item_book_spell_stonecurse();
		else if (spellname == "stonerain") spawnfunc_item_book_spell_stonerain();
		else if (spellname == "timesink") spawnfunc_item_book_spell_timesink();
		else if (spellname == "vampyricconduit") spawnfunc_item_book_spell_vampyricconduit();
		//Knowledge books
		else if (spellname == "carpentry") spawnfunc_item_book_know_carpentry();
		else if (spellname == "mortise") spawnfunc_item_book_know_mortise();
		else if (spellname == "stonemasonry") spawnfunc_item_book_know_stonemasonry();
		else if (spellname == "ironworking") spawnfunc_item_book_know_ironworking();
		else if (spellname == "arch") spawnfunc_item_book_know_arch();
		else if (spellname == "welding") spawnfunc_item_book_know_welding();
		else if (spellname == "concrete") spawnfunc_item_book_know_concrete();
	} else {
		//Scrolls
		if (spellname == "agency") spawnfunc_item_scroll_spell_agency();
		else if (spellname == "death") spawnfunc_item_scroll_spell_death();
		else if (spellname == "drainlife") spawnfunc_item_scroll_spell_drainlife();
		else if (spellname == "cancellation") spawnfunc_item_scroll_spell_cancellation();
		else if (spellname == "castfromlife") spawnfunc_item_scroll_spell_castfromlife();
		else if (spellname == "confer") spawnfunc_item_scroll_spell_confer();
		else if (spellname == "iceball") spawnfunc_item_scroll_spell_iceball();
		else if (spellname == "icestar") spawnfunc_item_scroll_spell_icestar();
		else if (spellname == "aquacaelestis") spawnfunc_item_scroll_spell_aquacaelestis();
		else if (spellname == "nivosus") spawnfunc_item_scroll_spell_nivosus();
		else if (spellname == "rosa") spawnfunc_item_scroll_spell_rosa();
		else if (spellname == "corvuspenna") spawnfunc_item_scroll_spell_corvuspenna();
		else if (spellname == "plumosus") spawnfunc_item_scroll_spell_plumosus();
		else if (spellname == "fireball") spawnfunc_item_scroll_spell_fireball();
		else if (spellname == "magmasphere") spawnfunc_item_scroll_spell_magmasphere();
		else if (spellname == "firebolt") spawnfunc_item_scroll_spell_firebolt();
		else if (spellname == "firebeam") spawnfunc_item_scroll_spell_firebeam();
		else if (spellname == "inferno") spawnfunc_item_scroll_spell_inferno();
		else if (spellname == "firewall") spawnfunc_item_scroll_spell_firewall();
		else if (spellname == "lightiningwall") spawnfunc_item_scroll_spell_lightiningwall();
		else if (spellname == "scepterofflame") spawnfunc_item_scroll_spell_scepterofflame();
		else if (spellname == "explosion") spawnfunc_item_scroll_spell_explosion();
		else if (spellname == "phantasmalbarrier") spawnfunc_item_scroll_spell_phantasmalbarrier();
		else if (spellname == "raiseundead") spawnfunc_item_scroll_spell_raiseundead();
		else if (spellname == "flameburst") spawnfunc_item_scroll_spell_flameburst();
		else if (spellname == "firecentury") spawnfunc_item_scroll_spell_firecentury();
		else if (spellname == "frostbeam") spawnfunc_item_scroll_spell_frostbeam();
		else if (spellname == "grace") spawnfunc_item_scroll_spell_grace();
		else if (spellname == "holybolt") spawnfunc_item_scroll_spell_holybolt();
		else if (spellname == "holylight") spawnfunc_item_scroll_spell_holylight();
		else if (spellname == "acervilux") spawnfunc_item_scroll_spell_acervilux();
		else if (spellname == "heal") spawnfunc_item_scroll_spell_heal();
		else if (spellname == "repair") spawnfunc_item_scroll_spell_repair();
		else if (spellname == "holyword") spawnfunc_item_scroll_spell_holyword();
		else if (spellname == "extinguish") spawnfunc_item_scroll_spell_extinguish();
		else if (spellname == "darkritual") spawnfunc_item_scroll_spell_darkritual();
		else if (spellname == "lightining") spawnfunc_item_scroll_spell_lightining();
		else if (spellname == "balllightining") spawnfunc_item_scroll_spell_balllightining();
		else if (spellname == "chainlightining") spawnfunc_item_scroll_spell_chainlightining();
		else if (spellname == "lightiningburst") spawnfunc_item_scroll_spell_lightiningburst();
		else if (spellname == "chargedbolt") spawnfunc_item_scroll_spell_chargedbolt();
		else if (spellname == "lightiningstrike") spawnfunc_item_scroll_spell_lightiningstrike();		
		else if (spellname == "manashield") spawnfunc_item_scroll_spell_manashield();
		else if (spellname == "clairvoyance") spawnfunc_item_scroll_spell_clairvoyance();
		else if (spellname == "magicbullets") spawnfunc_item_scroll_spell_magicbullets();
		else if (spellname == "magicmissile") spawnfunc_item_scroll_spell_magicmissile();
		else if (spellname == "monstertomonolith") spawnfunc_item_scroll_spell_monstertomonolith();
		else if (spellname == "monstertomouse") spawnfunc_item_scroll_spell_monstertomouse();
		else if (spellname == "meteor") spawnfunc_item_scroll_spell_meteor();
		else if (spellname == "meteorshower") spawnfunc_item_scroll_spell_meteorshower();
		else if (spellname == "mimic") spawnfunc_item_scroll_spell_mimic();
		else if (spellname == "paralyse") spawnfunc_item_scroll_spell_paralyse();
		else if (spellname == "ringoffire") spawnfunc_item_scroll_spell_ringoffire();
		else if (spellname == "stonecurse") spawnfunc_item_scroll_spell_stonecurse();
		else if (spellname == "timesink") spawnfunc_item_scroll_spell_timesink();
		else if (spellname == "vampyricconduit") spawnfunc_item_scroll_spell_vampyricconduit();
	}
}

//This is for when you have a staff, these 5 subs calculate the mana reduction etc (time reduction too)
float StaffManaReduceAlgo (float myammount, float mylevel)
{	
		local float myreducedammount;
		if (mylevel > 99) {
			myreducedammount = myammount * 0.11;
		} else if (mylevel > 97) {
			myreducedammount = myammount * 0.15;
		} else if (mylevel > 89) {
			myreducedammount = myammount * 0.20;
		} else if (mylevel > 84) {
			myreducedammount = myammount * 0.22;
		} else if (mylevel > 74) {
			myreducedammount = myammount * 0.25;
		} else if (mylevel > 49) {
			myreducedammount = myammount * 0.34;
		} else if (mylevel > 39) {
			myreducedammount = myammount * 0.38;
		} else if (mylevel > 25) {
			myreducedammount = myammount * 0.42;
		} else if (mylevel > 19) {
			myreducedammount = myammount * 0.45;
		} else if (mylevel > 14) {
			myreducedammount = myammount * 0.46;
		} else if (mylevel > 9) {
			myreducedammount = myammount * 0.48;
		} else {
			myreducedammount = myammount * 0.5;
		}
		return myreducedammount;
}

float StaffTimeReduceAlgo (float myammount, float mylevel)
{	
		local float myreducedammount;
		if (mylevel > 99) {
			myreducedammount = myammount * 0.30;
		} else if (mylevel > 97) {
			myreducedammount = myammount * 0.32;
		} else if (mylevel > 89) {
			myreducedammount = myammount * 0.34;
		} else if (mylevel > 84) {
			myreducedammount = myammount * 0.35;
		} else if (mylevel > 74) {
			myreducedammount = myammount * 0.36;
		} else if (mylevel > 49) {
			myreducedammount = myammount * 0.38;
		} else if (mylevel > 39) {
			myreducedammount = myammount * 0.40;
		} else if (mylevel > 25) {
			myreducedammount = myammount * 0.42;
		} else if (mylevel > 19) {
			myreducedammount = myammount * 0.44;
		} else if (mylevel > 14) {
			myreducedammount = myammount * 0.46;
		} else if (mylevel > 9) {
			myreducedammount = myammount * 0.48;
		} else {
			myreducedammount = myammount * 0.5;
		}
		return myreducedammount;
}

//For fire spells
//Color: Red
float StaffFlameReduceFor (entity caster, float mylevel, float myammount)
{
	local float myreducedammount;
	if (caster.weaponname == "staffflame")
	{
		myreducedammount = StaffManaReduceAlgo(myammount, mylevel);
			//print(ftos(myammount),"-to-",ftos(myreducedammount)," Reducing for staff of flame\n");
		return myreducedammount;
	} else {
		return myammount;
	}
}

//For magic projectiles, pure magic spells (cancellation, phantasmal barrier) and whimsical spells (mimic, size changing spells)
// NOT for elemental spells (death(black), lightning, fire, wind, rain, earth)
// NOT for conferlife, not death, not lightining
//Color: Purple/Magenta
float StaffMagiReduceFor (entity caster, float mylevel, float myammount)
{
	local float myreducedammount;
	if (caster.weaponname == "staffmagi")
	{
		myreducedammount = StaffManaReduceAlgo(myammount, mylevel);
			//print(ftos(myammount),"-to-",ftos(myreducedammount)," Reducing for magicians staff\n");
		return myreducedammount;
	} else {
		return myammount;
	}
}

float TimeStaffFlameReduceFor (float isscroll, entity caster, float mylevel, float myammount)
{
	if (isscroll) {
		return myammount;
	}
	
	local float myreducedammount;
	if (caster.weaponname == "staffflame")
	{
		myreducedammount = StaffTimeReduceAlgo(myammount, mylevel);
			//print(ftos(myammount),"-to-",ftos(myreducedammount)," Reducing time for staff of flame\n");
		return myreducedammount;
	} else {
		return myammount;
	}
}

float TimeStaffMagiReduceFor (float isscroll, entity caster, float mylevel, float myammount)
{
	if (isscroll) {
		return myammount;
	}
	
	local float myreducedammount;
	if (caster.weaponname == "staffmagi")
	{
		myreducedammount = StaffTimeReduceAlgo(myammount, mylevel);
			//print(ftos(myammount),"-to-",ftos(myreducedammount)," Reducing time for magicians staff\n");
		return myreducedammount;
	} else {
		return myammount;
	}
}

float SpellExpLVLAlgo (float mylevel)
{
	local float mynextexpammount;
	mylevel = floor(mylevel);
	
	if (autocvar_g_spelllvlalgo == 1)
	{
		//simple linear
		mynextexpammount = mylevel*100;
	} else if (autocvar_g_spelllvlalgo == 2)
	{
		//simple linear2
		mynextexpammount = mylevel*200;
	} else if (autocvar_g_spelllvlalgo == 3)
	{
		//curve
		mynextexpammount = mylevel*(100+(mylevel*10));
	} else if (autocvar_g_spelllvlalgo == 4)
	{
		//curve 2
		mynextexpammount = mylevel*(100+(mylevel*20));
	} else if (autocvar_g_spelllvlalgo == 5)
	{
		//Linear + Exponential
		mynextexpammount = mylevel*100 + pow(100, (mylevel*0.1));
	} else if (autocvar_g_spelllvlalgo == 6)
	{
		//Linear + Exponential + More //Good one
		mynextexpammount = (mylevel*(100+(mylevel*15))) + pow(100, (mylevel*0.1));
	} else if (autocvar_g_spelllvlalgo == 7)
	{
		//Same but goes higher in the begininng
		mynextexpammount = (mylevel*(100+(mylevel*100))) + pow(100, (mylevel*0.1));
	} else if (autocvar_g_spelllvlalgo == 8)
	{
		
		if (mylevel > 100) {
			//Anything not a power of 10 here is -nan...
			local float mystep;
			mystep = mylevel*0.1;
			mystep = floor(mystep);
			mystep = mystep * 10;
			mynextexpammount = (mystep*(100+(mystep*15))) + pow((100-mystep), (mystep*0.1));
		} else {
			//Reverses itself eventually (when you finally master magic?)
			mynextexpammount = (mylevel*(100+(mylevel*15))) + pow((100-mylevel), (mylevel*0.1));
		}
		
		if (mynextexpammount < 0) {
			//Less than 0, simple linear
			mynextexpammount = mylevel*100;	
		}
	} else if (autocvar_g_spelllvlalgo == 9)
	{
		//Nethack
		if (mylevel < 20)
		{
			//(2^mylevel)*10;
			mynextexpammount = (pow(2, mylevel))*10;
		} else {
			mynextexpammount = (mylevel-19)*10000000;
		}
	} else if (autocvar_g_spelllvlalgo == 10)
	{
		//Nethack *2
		if (mylevel < 20) {
			mynextexpammount = (pow(2, mylevel))*20;
		} else {
			mynextexpammount = (mylevel-19)*20000000;
		}
	} else {
		//Linear + Exponential (very)
		//Skyrockets past lvl 10 or so, hard
		////Algo:
		//lvl*100 +
		//100^(lvl/4)
		//
		//In calc:
		//(x*100)+100^(x*0.25)
		mynextexpammount = mylevel*100 + pow(100, (mylevel*0.25));
	}
	return mynextexpammount;	
}

float CalcSpellExpForNextLVL(entity player, .float my_spell)  
{
	//Returns the EXP needed to attain next spell level
	if not(player)
		return 0;
	
	if (player == world)
		return 0;
		
	if (player.my_spell < 1)
		return 0;
		
	local float targetnextexp;
	local float mylevel;
	mylevel = player.my_spell;
	
	targetnextexp = SpellExpLVLAlgo(mylevel);
	return targetnextexp;
	
}

void IncreaseSpellExpAndMaybeLVL (float isscroll, entity caster, .float my_spell, .float my_spell_exp, float addexp, entity myother)  
{
	if (isscroll)
		return;
		
	if not(caster)
		return;
	
	if (caster == world)
		return;
		
	if (caster.my_spell < 1)
		return;

		//print (ftos(caster.my_spell_exp), "-BeforeMySpellExp\n");
	
	if (myother != world) {
		if (clienttype(myother) == CLIENTTYPE_REAL) {
				//print("real\n");
			caster.my_spell_exp = caster.my_spell_exp + (addexp*4);
		} else if (clienttype(myother) == CLIENTTYPE_BOT) {
				//print("Bot\n");
			caster.my_spell_exp = caster.my_spell_exp + (addexp*3);
		} else if(myother.flags & FL_MONSTER) {
				//print("Monster\n");
			caster.my_spell_exp = caster.my_spell_exp + (addexp*2);
		} else {
				//print("Not World\n");
			caster.my_spell_exp = caster.my_spell_exp + (addexp*1.25);
		}
	} else {
			//print("World\n");
		caster.my_spell_exp = caster.my_spell_exp + addexp;
	}
	
	local float targetnextexp;
	local float mylevel;
	mylevel = caster.my_spell;
	
	targetnextexp = SpellExpLVLAlgo(mylevel);
		//print (ftos(mylevel), "-MySpellLvl\n");
		//print (ftos(caster.my_spell_exp), "-MySpellExp\n");
		//print (ftos(targetnextexp), "-TargExp\n");
	
	if (caster.my_spell_exp >= targetnextexp)
	{
		caster.my_spell = floor(caster.my_spell + 1);
		caster.my_spell_exp = 0;
	}
	
}

float CheckSpellNoCancel(entity caster, float splvl, vector spellorigin)
{	
	local float mycancelimmune;
		
		mycancelimmune = 0;
		if (caster.buff_cancellation_immune >= 1) {
			mycancelimmune = 1;
		} else if(random() < caster.buff_cancellation_immune) {
			//I'm immune
			mycancelimmune = 1;
		}
		
	//Cancellation of spells
	local float outofrange;
	local entity enextent;
	enextent = findradius(spellorigin, 2048);
	while(enextent)
	{
		if (enextent.owner != caster) {
		 if (!mycancelimmune) {
	 	    if (enextent.classname == "spellcancellation") {
		    	outofrange = 0;
		    	if (splvl < 100) {
		    	  if (vlen(enextent.origin - spellorigin) > bound(512,(splvl*20.48),2048)) {
			 	//print("out of range\n");
				outofrange = 1; //Out of range
			  }
			}
			
			if (!outofrange) {
			  if (splvl > enextent.count+50) {
				if (random() > 0.5) { //Half the time
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "Your spell was nullified\n");
					}
					if ((clienttype(enextent.owner) == CLIENTTYPE_REAL)) {
						sprint(enextent.owner, "Your spell of cancellation nullified a spell\n");
					}
					if not(enextent.ammount)
					{
						//If enextent.ammount is 0, we were not cast from a scroll and thus should give exp
						IncreaseSpellExpAndMaybeLVL(enextent.ammount,
							enextent.owner,
							spell_cancellation,
							exp_spell_cancellation,
							1, caster); //Ent set so will gain more exp based on who the caster was of the cancelled spell 
					}
					return(FALSE); //Fumble	
				}
			  } else if (splvl > enextent.count+25) {
				if (random() > 0.25) { //75 percent of the time
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "Your spell was nullified\n");
					}
					if ((clienttype(enextent.owner) == CLIENTTYPE_REAL)) {
						sprint(enextent.owner, "Your spell of cancellation nullified a spell\n");
					}
					if not(enextent.ammount)
					{
						//If enextent.ammount is 0, we were not cast from a scroll and thus should give exp
						IncreaseSpellExpAndMaybeLVL(enextent.ammount,
							enextent.owner,
							spell_cancellation,
							exp_spell_cancellation,
							1, caster); //Ent set so will gain more exp based on who the caster was of the cancelled spell 
					}
					return(FALSE); //Fumble	
				}
			  } else {
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Your spell was nullified\n");
				}
				if ((clienttype(enextent.owner) == CLIENTTYPE_REAL)) {
					sprint(enextent.owner, "Your spell of cancellation nullified a spell\n");
				}
				if not(enextent.ammount)
				{
					//If enextent.ammount is 0, we were not cast from a scroll and thus should give exp
					//We will forward this "isscroll" to the routine just to make sure (hence the first argument)
					IncreaseSpellExpAndMaybeLVL(enextent.ammount,
						enextent.owner,
						spell_cancellation,
						exp_spell_cancellation,
						1, caster); //Ent set so will gain more exp based on who the caster was of the cancelled spell 
				}
				return(FALSE); //Fumble	
			  }
			}
		    }
		 }
		}
		enextent = enextent.chain;
	}
	//End Cancellation of spells
	return(TRUE); //No Fumble
}

float CheckSpellNoFumble(float isscroll, entity caster, float splvl)
{
	if not(CheckSpellNoCancel(caster, splvl, caster.origin)) {
		return(FALSE); //Fumble, we were cancelled	
	}
	
	//We check if the spell doesn't fumble
	if (isscroll)
	{
		if (caster.armorvalue < random()*200)
			return(TRUE); //No Fumble
		else
			return(FALSE); //Fumble	
	}
	else if (splvl > random()*5)
	{
		if (caster.armorvalue < random()*200)
			return(TRUE); //No Fumble
		else
			return(FALSE); //Fumble
	}
	else
		return(FALSE); //Fumble
}

//These fires may reignite if put out
void CastSpell_firewall_burningreplacement_think(void)
{
	self.solid = SOLID_NOT;
	self.think = func_null;
	self.nextthink = 0;
	if (self.fire_burner)
		remove(self.fire_burner);
			
	if (self.subordinate && self.subordinate != world) {
		self.subordinate.active = ACTIVE_NOT;
		self.subordinate.touch              = func_null;
		if (self.subordinate.fire_burner)
			remove(self.subordinate.fire_burner);
	
		remove(self.subordinate);
	}
	remove(self);
}

void CastSpell_Firewall_Touch()
{
	if (self.active != ACTIVE_ACTIVE) 
		return;
		
	if(self.team)
		if((self.spawnflags & 4 == 0) == (self.team != other.team))
			return;
			
	// only do the EXACTTRIGGER_TOUCH checks when really needed (saves some cpu)
	if (other.iscreature)
	{
		if (other.takedamage)
		if (other.triggerhurttime < time)
		{
			EXACTTRIGGER_TOUCH;
			other.triggerhurttime = time + 1;

			Fire_AddDamage(other, self.owner, self.dmg*self.cnt, self.cnt, DEATH_FIRE);
		}
	}
}

void spawnfunc_CastSpell_Firewall_trigger_burn()
{
	EXACTTRIGGER_INIT;
	self.active = ACTIVE_ACTIVE;
	self.touch = CastSpell_Firewall_Touch;
	self.enemy = world; // I hate you all
}

entity CastSpell_Firewall_trigger_burn(float mytype, float mytime, float mydmg, vector myorigin, entity myowner, float myspread)
{	entity mypreviousself, eb;
	mypreviousself = self;
	
	eb = spawn();
	eb.origin = myorigin;

	eb.dmg = mydmg*(0.7+(random()*0.3)); //Since we're in the air, might be less
	eb.cnt = mytime;
	eb.owner = myowner;
			
	eb.mins_x = -0.5 * myspread;
	eb.mins_y = -0.5 * myspread;
	eb.mins_z = -1;
	eb.maxs_x = 0.5 * myspread;
	eb.maxs_y = 0.5 * myspread;
	
	if (mytype == 1)
		eb.maxs_z = 1024;
	else
		eb.maxs_z = 128;
				
	self = eb;
	spawnfunc_CastSpell_Firewall_trigger_burn();
	
	self = mypreviousself;
	return eb;
}

void CastSpell_Firewall_PlaceFire(float mytype, float mytime, float mydmg, vector myorigin, entity myowner, float myspread)
{
	if (pointcontents (myorigin) == CONTENT_SOLID)
		return;
		
	if (pointcontents (myorigin) == CONTENT_WATER)
		return;
		
	if (pointcontents (myorigin) == CONTENT_SLIME)
		return;
		
	if (pointcontents (myorigin) == CONTENT_SKY)
		return;
		
	entity previousself, e;
	previousself = self;
	
			e = spawn();
			e.origin = myorigin;
			e.solid = SOLID_SLIDEBOX;
			e.dmg = mydmg;
			e.cnt = mytime;
			e.owner = myowner;
			
			e.mins_x = -0.5 * myspread;
			e.mins_y = -0.5 * myspread;
			e.maxs_x = 0.5 * myspread;
			e.maxs_y = 0.5 * myspread;
			
			if (mytype == 1) {
				e.mins_z = -2;
				e.maxs_z = 16;
			} else {
				e.mins_z = -2;
				e.maxs_z = 8;
			}
			e.think = CastSpell_firewall_burningreplacement_think;
			e.alpha = -1;
			self = e;
			
			setorigin(self, self.origin);
			droptofloor();
			
			self.nextthink = time + mytime;
			self.subordinate = CastSpell_Firewall_trigger_burn(mytype, mytime, mydmg, myorigin, myowner, myspread);
			//print(etos(self.subordinate),"\n");
			
			self = previousself;
			
			spamsound (e, CH_SHOTS, "misc/ignition_firewall.ogg", VOL_BASE, ATTN_NORM);
			
			if (mytype == 1) {
				Fire_AddDamage(e, myowner, mydmg*mytime, mytime, DEATH_FIRE);
				e.fire_intensity = 41;
				e.fire_nextpartcheck = 1;
			} else {
				Fire_AddDamage(e, myowner, mydmg*mytime, mytime, DEATH_FIRE);
			}
			
}

///////////////////////////////////

//Phantasmal Barrier.
void CastSpell_phantasmalbarrier_burningreplacement_think(void)
{
	pointparticles(particleeffectnum("newcrylink_impactbig"), self.origin+'0 0 16', self.velocity, 1);

	//We'll leave the burning remove code just incase we are on fire for some unknown reason
	//(nuke ring 0 prob)

	self.solid = SOLID_NOT;
	self.think = func_null;
	self.nextthink = 0;
	if (self.fire_burner)
		remove(self.fire_burner);
			
	if (self.subordinate && self.subordinate != world) {
		self.subordinate.active = ACTIVE_NOT;
		self.subordinate.touch              = func_null;
		if (self.subordinate.fire_burner)
			remove(self.subordinate.fire_burner);
	
		remove(self.subordinate);
	}
	remove(self);
}

void CastSpell_PhantasmalBarrier_Touch()
{
	if (self.active != ACTIVE_ACTIVE) 
		return;
		
	//if(self.team)
	//	if((self.spawnflags & 4 == 0) == (self.team != other.team))
	//		return;
			
	// only do the EXACTTRIGGER_TOUCH checks when really needed (saves some cpu)
	if(other != world) {
	if (other.velocity_x || other.velocity_y || other.velocity_z)
	{
			
			local float givebackz; //Should we give it back?
			local float mygivebackz; //What was it?
			givebackz = 0;
			mygivebackz = 0;
			
			EXACTTRIGGER_TOUCH;
			
			//If the barrier's lvl is less than 100 (thus not reflective)
			//And there is a negative Z velocity
			//And we are a player or a bot
			//We will give back the neg velocity.
			//So as not to let one benifit from the phantasmal barrier
			//By having one's gravity pull reduced
			if (self.count > 100) {
				//Do Nothing
			} else if (other.velocity_z < 0) {
				if ((clienttype(other) == CLIENTTYPE_REAL)
				|| (clienttype(other) == CLIENTTYPE_BOT)) {
					givebackz = 1;
					mygivebackz = other.velocity_z;
				}
			}
			
			if(other.phantasmalbarrier_pushltime < time) {
				pointparticles(particleeffectnum("jumppad_activate"), other.origin, other.velocity, 1);
				pointparticles(particleeffectnum("newcrylink_impact"), other.origin, other.velocity, 1);
				if(self.pushltime < time)  // prevent "snorring" sound when a player hits the jumppad more than once
				{
					sound (other, CH_TRIGGER, self.noise, VOL_BASE, ATTN_NORM);
					self.pushltime = time + 0.01;
				}
				if (self.count > 100) {
					other.phantasmalbarrier_pushltime = time + 0.1;
					//Reverse and increase speed back above lvl 100
					other.velocity_x = other.velocity_x * -1 * ((self.count-100)*0.05);
					other.velocity_y = other.velocity_y * -1 * ((self.count-100)*0.05);
					other.velocity_z = other.velocity_z * -1 * ((self.count-100)*0.05);
				} else {
					other.phantasmalbarrier_pushltime = time + 6;
					other.velocity_x = other.velocity_x * 0.1; //0.1 aswell //0.01 really slows down mad fast
					other.velocity_y = other.velocity_y * 0.1;
					other.velocity_z = other.velocity_z * 0.1;
				}
			} else {
				if (self.count < 21) {
					other.velocity_x = other.velocity_x * (0.97 - (self.count * 0.045)); //0.1 aswell //0.01 really slows down mad fast
					other.velocity_y = other.velocity_y * (0.97 - (self.count * 0.045));
					other.velocity_z = other.velocity_z * (0.97 - (self.count * 0.045));
				} else if (self.count > 100) {
					//Reverse and increase speed back above lvl 100
					//Allready done, do nothing more.
				} else if (self.count > 30) {
					other.velocity_x = other.velocity_x * 0.05;
					other.velocity_y = other.velocity_y * 0.05;
					other.velocity_z = other.velocity_z * 0.05;
				} else if (self.count > 40) {
					other.velocity_x = other.velocity_x * 0.025;
					other.velocity_y = other.velocity_y * 0.025;
					other.velocity_z = other.velocity_z * 0.025;
				} else if (self.count > 50) {
					other.velocity_x = other.velocity_x * 0.01;
					other.velocity_y = other.velocity_y * 0.01;
					other.velocity_z = other.velocity_z * 0.01;
				} else if (self.count > 70) {
					other.velocity_x = other.velocity_x * 0.005;
					other.velocity_y = other.velocity_y * 0.005;
					other.velocity_z = other.velocity_z * 0.005;
				} else if (self.count > 80) {
					other.velocity_x = other.velocity_x * 0.0025;
					other.velocity_y = other.velocity_y * 0.0025;
					other.velocity_z = other.velocity_z * 0.0025;
				} else if (self.count > 90) {
					other.velocity_x = other.velocity_x * 0.001;
					other.velocity_y = other.velocity_y * 0.001;
					other.velocity_z = other.velocity_z * 0.001;
			 	} else {
					//Norm.
					other.velocity_x = other.velocity_x * 0.1;
					other.velocity_y = other.velocity_y * 0.1;
					other.velocity_z = other.velocity_z * 0.1;
				}
			}
			//Giving back Z velocity if indicated to do so above
			if (givebackz == 1) {
				other.velocity_z = mygivebackz;
			}
			
			//Got to update CSQC projectiles so they display properly
			UpdateCSQCProjectile(other);
			
	}
	}
}

void spawnfunc_CastSpell_PhantasmalBarrier_trigger_burn()
{
	EXACTTRIGGER_INIT;
	self.active = ACTIVE_ACTIVE;
	
	self.noise = "weapons/crylink_impact.wav";
	precache_sound (self.noise);
	
	self.touch = CastSpell_PhantasmalBarrier_Touch;
	self.enemy = world; // I hate you all
	
	pointparticles(particleeffectnum("jumppad_activate"), self.origin+'0 0 16', self.velocity, 1);

	local float myupz;
	local vector myzvec;
	myupz = 16; //Lets stay off the ground
	myzvec = '0 0 16';
	while (myupz < self.maxs_z) {
		pointparticles(particleeffectnum("newcrylink_impactbig"), self.origin+myzvec, self.velocity, 1);
		pointparticles(particleeffectnum("newcrylink_impactbig"), self.origin+(self.mins_y*('0 1 0'*random()))+myzvec, self.velocity, 1);
		pointparticles(particleeffectnum("newcrylink_impactbig"), self.origin+(self.mins_x*('1 0 0'*random()))+myzvec, self.velocity, 1);
		pointparticles(particleeffectnum("newcrylink_impactbig"), self.origin+(self.maxs_y*('0 1 0'*random()))+myzvec, self.velocity, 1);
		pointparticles(particleeffectnum("newcrylink_impactbig"), self.origin+(self.maxs_x*('1 0 0'*random()))+myzvec, self.velocity, 1);
		myupz = myupz + 64;
		myzvec_z = myupz;
	}
}

entity CastSpell_PhantasmalBarrier_trigger_burn(float mytype, float mytime, float mydmg, vector myorigin, entity myowner, float myspread)
{	
	local vector myendv;
	entity mypreviousself, eb;
	mypreviousself = self;
	
	eb = spawn();
	eb.origin = myorigin;

	eb.dmg = mydmg*(0.7+(random()*0.3)); //Since we're in the air, might be less
	eb.cnt = mytime;
	eb.owner = myowner;
	eb.count = mytype;
	
	//Mytype is the raw spell level here.
	local float mytypetype;
	if (mytype > 20) {
		mytypetype = 20;
		//Don't want to get insanely thick
	} else {
		mytypetype = mytype;
	}
	eb.mins_x = (-1*(0.5 + (mytypetype*0.025))) * myspread; //Thick
	eb.mins_y = (-1*(0.5 + (mytypetype*0.025))) * myspread;
	eb.mins_z = -1;
	eb.maxs_x = (0.5 + (mytypetype*0.025)) * myspread;
	eb.maxs_y = (0.5 + (mytypetype*0.025)) * myspread;
	

		traceline(eb.origin, eb.origin + ('0 0 1' * MAX_SHOT_DISTANCE), MOVE_WORLDONLY, eb);
		myendv = trace_endpos;
		if ((trace_endpos_z - eb.origin_z) < mydmg * 64) {
			eb.maxs_z = trace_endpos_z - eb.origin_z;
		} else {
			eb.maxs_z = mydmg * 64;
		}
		
		if (eb.maxs_z < 64) {
			eb.maxs_z = 64;
		}
				
	self = eb;
	spawnfunc_CastSpell_PhantasmalBarrier_trigger_burn();
	
	self = mypreviousself;
	return eb;
}

void CastSpell_PhantasmalBarrier_PlaceFire(float mytype, float mytime, float mydmg, vector myorigin, entity myowner, float myspread)
{
	if (pointcontents (myorigin) == CONTENT_SOLID)
		return;
		
	if (pointcontents (myorigin) == CONTENT_WATER)
		return;
		
	if (pointcontents (myorigin) == CONTENT_SLIME)
		return;
		
	if (pointcontents (myorigin) == CONTENT_SKY)
		return;
		
	entity previousself, e;
	previousself = self;
	
			e = spawn();
			e.origin = myorigin;
			e.solid = SOLID_SLIDEBOX;
			e.dmg = mydmg;
			e.cnt = mytime;
			e.owner = myowner;
			
			e.mins_x = -0.5 * myspread;
			e.mins_y = -0.5 * myspread;
			e.maxs_x = 0.5 * myspread;
			e.maxs_y = 0.5 * myspread;
			
			//Mytype is raw spell lvl here
			
			e.mins_z = -2;
			e.maxs_z = 8;
			
			e.think = CastSpell_phantasmalbarrier_burningreplacement_think;
			e.alpha = -1;
			self = e;
			
			setorigin(self, self.origin);
			droptofloor();
			
			self.nextthink = time + mytime;
			self.subordinate = CastSpell_PhantasmalBarrier_trigger_burn(mytype, mytime, mydmg, myorigin, myowner, myspread);
			//print(etos(self.subordinate),"\n");
			
			self = previousself;
}

///////////////////////////////////

///////////////////////////////////

//Timesink

float CastSpell_Timesink_transitionalgo(float mytargetslowmo, float mytransitiontime, float myorigtime)
{
	float myalgo;

	//Example: if 0.33 is our slowmo goal and our frametime is 0.1; (((0.33-1) * -1) * 0.1) / 2
	myalgo = ((((mytargetslowmo - myorigtime) * -1) * frametime) / mytransitiontime);
	
	
	//print (ftos(frametime), "::frametime    ");
	//print (ftos(sys_frametime), "::sys_frametime    ");
	//print (ftos(autocvar_sys_ticrate), "::sys_ticrate    ");
	//print (ftos(mytargetslowmo), "::targ    ");
	//print (ftos(mytransitiontime), "::ttime    ");
	//print (ftos(myalgo), "::amntchange   \n");
	
	return myalgo;
}

void CastSpell_Timesink_think()
{
	//Note:
	//.amnt = mytargetslowmo;
	//.cnt = mytransitiontime;
	//.count = myduration;
	//.ammount = autocvar_slowmo;
	//.ammount2 = time+mytransitiontime;
	//.ammount3 = 0; //Phase 
	
	if (self.ammount3 == 1) {
		//Phase2
		if (time < self.ammount2) {
			//Do nothing
		} else {
			//print("Phase2_exit\n");
			self.ammount2 = time+self.cnt; //(time+mytransitiontime)
			self.ammount3 = 2; //Phase
		}
	} else if (self.ammount3 == 2) {
		//Phase3
			
		timesink_slowmo = autocvar_slowmo;
		timesink_slowmo = timesink_slowmo + CastSpell_Timesink_transitionalgo(self.amnt, self.cnt, self.ammount);
			if (timesink_slowmo < 0) {
				timesink_slowmo = 0;
			}
			
		if (time < self.ammount2) {
			//print("Phase3_main\n");
		} else {
			//print("Phase3_exit\n");
			self.ammount3 = 0;
			self.realowner.timesinkent = world;
			if (timesinksactive > 1) {
				timesinksactive = timesinksactive - 1;
			} else {
				timesinksactive = 0;
				//autocvar_slowmo = timesink_orig_slowmo; //Reset
				if (timesink_orig_slowmo > 0) {
					localcmd(strcat("slowmo ", ftos(timesink_orig_slowmo), "\n"));
				}
			}
			self.think = func_null;
			remove(self);
			return;
		}
	} else {
		//Phase1
		//print("Phase1\n");
		
		timesink_slowmo = autocvar_slowmo;
		timesink_slowmo = timesink_slowmo - CastSpell_Timesink_transitionalgo(self.amnt, self.cnt, self.ammount);
			if (timesink_slowmo < 0) {
				timesink_slowmo = 0.0001;
			}
			
		if (time < self.ammount2) {
			//print("Phase1_main\n");	
		} else {
			if (timesink_slowmo > self.amnt) {
				timesink_slowmo = self.amnt;
			}
			//print("Phase1_exit\n");
			self.ammount2 = time+self.count; //(time+myduration)
			self.ammount3 = 1; //Phase
			
			if (timesink_slowmo > 0) {
				localcmd(strcat("slowmo ", ftos(timesink_slowmo), "\n"));
			}
		}
	}
	
	self.think = CastSpell_Timesink_think;
	//self.nextthink = time;
	self.nextthink = time + frametime;
	//self.nextthink = time + autocvar_sys_ticrate;
	
	if (self.ammount3 != 1) {
		//print(ftos(self.amnt),"::Target    ",ftos(self.cnt),"::TimeTo \n");
		//print(ftos(timesink_slowmo),"\n");
		if (timesink_slowmo > 0) {
			localcmd(strcat("slowmo ", ftos(timesink_slowmo), "\n"));
		}
	}
}

void CastSpell_Timesink(entity caster, float mytargetslowmo, float mytransitiontime, float myduration, float mylevel)
{
	entity e;
	if (!caster.timesinkent || caster.timesinkent == world)
	{
			e = spawn();
			e.realowner = caster;
			
			caster.timesinkent = e;
	}
		
	caster.timesinkent.think = CastSpell_Timesink_think;
	caster.timesinkent.nextthink = time;
	
	timesink_slowmo = autocvar_slowmo;
	//print(ftos(autocvar_slowmo)," AutocvarSlowmo\n");
	
	if (timesinksactive > 0) {
		timesinksactive = timesinksactive + 1;
	} else {
		timesinksactive = 1;
		timesink_orig_slowmo = autocvar_slowmo;
	}
	
	caster.timesinkent.amnt = mytargetslowmo;
	caster.timesinkent.cnt = mytransitiontime;
	caster.timesinkent.count = myduration;
	caster.timesinkent.ammount = autocvar_slowmo;
	caster.timesinkent.ammount2 = time+mytransitiontime;
	caster.timesinkent.ammount3 = 0; //Phase 
	caster.timesinkent.ammount4 = mylevel;
	
	//print(
	//ftos(caster.timesinkent.amnt), "_targetslowmo ",
	//ftos(caster.timesinkent.cnt), "_transition ",
	//ftos(caster.timesinkent.count), "_dur XXXXX\n");
	//print(
	//ftos(caster.timesinkent.ammount), "_autocvarslow ",
	//ftos(caster.timesinkent.ammount2), "_timemytransitiontime ",
	//ftos(caster.timesinkent.ammount3), "_phase YYYYY\n");
}

///////////////////////////////////

///////////////////////////////////
void spawnfunc_monster_skeleton();
void spawnfunc_monster_zombie();
.float monster_forcetype; //For spawning specific types/skins of monsters

float CastSpell_RaiseUndead(entity caster, float mylevel)
{
	local float spawnednum;
	spawnednum = 0;
	local entity enextent;
	enextent = findradius(caster.origin, mylevel*64);
	while(enextent)
	{
		if (enextent != world)
		if (enextent != caster) {
		  if (enextent.classname == "raise_undead_marker")
		  if (enextent.pushltime < time)
		  if ((mylevel * 0.05) >= enextent.cnt)
		  if ((enextent.count == 1 && (enextent.species != SPECIES_ROBOT_SHINY
		  && enextent.species != SPECIES_ROBOT_RUSTY
		  && enextent.species != SPECIES_ROBOT_SOLID))
		  || (enextent.count != 1 && (enextent.species == SPECIES_HUMAN || enextent.species == SPECIES_FAE)))
		  {
		  	local entity myoldself;
			local entity mynewmonster;
			myoldself = self;
			
			//Add nolarp (timeout for using same cnt) and only on same team if high lvl
			//Spawn zombie
			mynewmonster = spawn();
			mynewmonster.origin = enextent.origin + '0 0 64';
	 		mynewmonster.monster_norespawn = 1;
			if (mylevel >= 10) {
	 			mynewmonster.monster_keepowner = 1;
	 			mynewmonster.monster_noteamcolors = 1;
	 			if (teamplay) {
	 				mynewmonster.team = caster.team;
	 			} else {
	 				mynewmonster.monster_owner = caster;
	 			}
			}
	 
	 		self = mynewmonster;
			self.monster_noitemdrop = 1;
	 		if (enextent.cnt >= 1) {
				if (mylevel < 50) {
					self.monster_forcetype = 300; //Default
				}
		 		spawnfunc_monster_skeleton();
	 		} else {
	 			spawnfunc_monster_zombie();
	 		}
			
			enextent.cnt = enextent.cnt + 1; //How many times things have been spawned from this
			enextent.pushltime = time + 10;
			self = myoldself;
			spawnednum = spawnednum + 1;
		  }
		}
		
		enextent = enextent.chain;
	}
	
	return(spawnednum);
}
///////////////////////////////////

void CastSpell_LightiningStrike(entity e, entity caster, float mylevel, float isscroll)
{
	local vector myskytrace;
	myskytrace = '0 0 0';
	myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
	local vector mystartv;
	local vector myabsolutestart;
	local vector mytargetv;
	local vector myendv;
	local float mytargetnum;
	mytargetnum = 0;
	
	mystartv = myabsolutestart = e.origin;

	traceline(e.origin, e.origin - (('0 0 1' * MAX_SHOT_DISTANCE) + myskytrace), MOVE_WORLDONLY, e);
	e.origin = trace_endpos;
	myendv = trace_endpos;
	
	e.origin = myendv;

	sound (e, CH_WEAPON_A, "weather/thunder_crack.wav", VOL_BASE*(0.9+(random()*0.5)), ATTN_NORM);
		//print(vtos(mystartv), " Starttttttttttttttttttttttttttttttttttt\n");
	local entity echk;
	echk = spawn();
	echk.mins = '-1 -1 -1';
	echk.maxs = '1 1 1';
	
	local entity enextent;
	enextent = findradius(e.origin, mylevel*64);
	while(enextent)
	{
		if (enextent != caster) {
		  /////////////////////////////////////
		  echk.origin = enextent.origin;
		  traceline(echk.origin, echk.origin + (('0 0 1' * MAX_SHOT_DISTANCE) + myskytrace), MOVE_WORLDONLY, e);
		  echk.origin = trace_endpos;
		  if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY) {
		  if not (pointcontents(echk.origin - '0 0 1') == CONTENT_SOLID)
		  {
		    /////
	 	    if ( (((enextent.flags & FL_MONSTER) || (enextent.flags & FL_CLIENT)) && enextent.health > 0)
	 	    || enextent.classname == "tree" || enextent.classname == "bush"
		    || ((mylevel >= 60) && enextent.abdbldcanburn && (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 3))
	 	    || (enextent.classname == "bldhitbx" && multitool_iswooden(enextent.count)) ) {
			
			if not (mytargetnum) {
				mytargetv = enextent.origin;
				mytargetv_z = enextent.origin_z + enextent.maxs_z;
				te_csqc_lightningarc(e.origin + '0 0 2048', mytargetv);
			} else {
				te_csqc_lightningarc(mystartv, enextent.origin);
			}
			lgunbeam_arcs(72 + (mylevel*4), autocvar_g_balance_lightninggun_primary_arcrange * 4, enextent.origin, caster);

			pointparticles(particleeffectnum("electro_muzzleflash"), mystartv, v_forward * 1000, 1);
			
				//print(vtos(mytargetv), " Endddddddddddddddddddddddddddddd\n");

			
			if ((enextent.classname == "tree"
			|| enextent.classname == "bush"
			|| ((mylevel >= 60) && enextent.abdbldcanburn && (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 3))
			|| (enextent.classname == "bldhitbx" && multitool_iswooden(enextent.count)) )
			&& (random() > 0.8)) {
				//Rarely catch, but sometimes do
				Fire_AddDamage(enextent, caster, autocvar_g_balance_torch_fire_damage * autocvar_g_balance_torch_fire_burntime, autocvar_g_balance_torch_fire_burntime, self.projectiledeathtype);
			}

			mystartv = enextent.origin;
			
			
			mytargetnum = mytargetnum + 1;
		    }
		    /////
		  }
		  }
		  /////////////////////////////////////
		}
		
		enextent = enextent.chain;
	}
	
	remove(echk);
	
	if (!mytargetnum) {
		te_csqc_lightningarc(e.origin + '0 0 2048', myendv);
	} else {
		IncreaseSpellExpAndMaybeLVL(isscroll,
			caster,
			spell_lightiningstrike,
			exp_spell_lightiningstrike,
			mytargetnum, world); //1 Exp per targ
	}
}
void CastSpell_LightiningStrike_Overtime_do() {
	CastSpell_LightiningStrike(self, self.owner, self.count, self.ammount);
	self.think = func_null;
	self.nextthink = 0;
	remove(self);
}

void CastSpell_LightiningStrike_Overtime(vector myorigin, entity caster, float level, float isscroll)
{
	entity castspellthinker;
	entity oldself;
	
	oldself = self;
	
	castspellthinker = spawn();
	
	self = castspellthinker;
	
	self.ammount = isscroll; //Are we cast from a scroll?
	self.owner = caster;
	self.count = level;
	self.origin = myorigin;
	self.think = CastSpell_LightiningStrike_Overtime_do;
	self.nextthink = time+(random()*1.2);
	setorigin(self, self.origin);
	self = oldself;
}

float CastSpell_HolyWord(entity caster, float mylevel)
{	
	local float myattacked;
	myattacked = 0;
	local entity enextent;
	enextent = findradius(caster.origin, 128+mylevel*12);
	while(enextent)
	{
		if (enextent != world)
		if (enextent != caster) {
	 		if((enextent.flags & FL_MONSTER) || (enextent.flags & FL_CLIENT))
			{
				if (enextent.vuln_isundead) {
					Damage(enextent, caster, caster, 
					enextent.vuln_isundead*((mylevel*10)+30), DEATH_HOLYBOLT, 
					enextent.origin + enextent.view_ofs, 
					'0 0 0');					
					//pointparticles(particleeffectnum("TE_PLASMABURN"), enextent.origin, '0 0 0', 1);
					
					myattacked = myattacked + 1;
				} else {
					enextent.health = enextent.health + mylevel + 10;
					
						if (enextent.flags & FL_CLIENT) {
							caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.1;
						} else if (enextent.flags & FL_MONSTER) {
							caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.015;
						}
				}
			}
		}
		
		enextent = enextent.chain;
	}
	
	return(myattacked); //You get exp for those undead attacked (Though not for healing other than the default)
}

void CastSpell_Cancellation_remove();
float CastSpell_Extinguish(entity caster, float mylevel)
{	
	local float removeoldenextent;
	local entity oldenextent;
	removeoldenextent = 0;
	local float myattacked;
	myattacked = 0;
	local entity enextent;
	enextent = findradius(caster.origin, 128+(mylevel*128));
	while(enextent)
	{
		removeoldenextent = 0;
		oldenextent = enextent;
		if (enextent != world) {
			//We attack caster too
			
			if (enextent.fire_endtime) {
				//Extinguish fires
				enextent.fire_endtime = 0;
			}
			
			if (enextent.fire_oilfire_entreignite) {
				//No oil reignite
				enextent.fire_oilfire_entreignite = 0;
				enextent.fire_oilfire_entreignite_owner = world;
			}
			
	 		if((enextent.flags & FL_MONSTER) || (enextent.flags & FL_CLIENT))
			{
				enextent.compositebow_arrowlit = 0;
				enextent.cb_arrowlit = 0;
				enextent.crudebow_arrowlit = 0;
				enextent.flamethrower_arrowlit = 0;
				enextent.lightcrossbow_arrowlit = 0;
				enextent.longbow_arrowlit = 0;
				enextent.yumibow_arrowlit = 0;
				enextent.lightsabreii_lit = 0;
				enextent.lightsabreiv_lit = 0;
				enextent.lightsabre_lit = 0;
				enextent.lightsabrexi_lit = 0;
				enextent.torch_lit = 0;
				if (enextent.weaponname == "torch_lit") {
					enextent.weaponname = "torch";
				}
				
				float d;
				float t;
				d = enextent.armorvalue;
				t = enextent.armortype;
				enextent.armorvalue = 0; //Ignores armor
			
				if (enextent.vuln_isundead >= 1) {
					//No damage, Totally undead
					enextent.health = enextent.health + bound(0, enextent.health, enextent.health+1);
					myattacked = myattacked + 0.2;
				} else if (enextent.vuln_isundead > random()) {
					//Not totally undead, so could kill
					//But Lucky this time: No damage
					enextent.health = enextent.health + bound(0, (enextent.health * enextent.vuln_isundead), enextent.health+1);
					myattacked = myattacked + 0.5;
				} else {
					local float mydeathtype;
					mydeathtype = DEATH_ROT; //Using DEATH_ROT as DEATH_KILL kills nomatter what
								//Here we want to give manashield etc a chance to avoid
								//since this is an area effect...
								//Also we are simply extinguishing life, fire, etc
								//perhaps slightly different than dealing death...
								//slightly
								
					if (enextent == caster) {
						//So full dmg is done
						Damage(enextent, caster, world, 
						(enextent.health+1), mydeathtype, 
						enextent.origin, 
						'0 0 0');	
					} else {
						Damage(enextent, caster, caster, 
						(enextent.health+1), mydeathtype, 
						enextent.origin, 
						'0 0 0');
					}					
					//pointparticles(particleeffectnum("TE_PLASMABURN"), enextent.origin, '0 0 0', 1);
					
					myattacked = myattacked + 1;
				}
				
				enextent.armorvalue = d; //Damage done, give back armor
				enextent.armortype = t;  //Just incase it was removed due to value being 0
			
			}
			
			if (enextent.classname == "tree" || enextent.classname == "bush")
			{
				Fire_ApplyEffect_Blacken(enextent);
				enextent.multitool_ammocurrent = 0; //No value for chopping..
			}
			
			if(enextent.classname == "oilfire") {
				enextent.solid = SOLID_NOT;
				enextent.think = CastSpell_Cancellation_remove; //A generic remove
				enextent.nextthink = time;
			}
			
			if (enextent.classname == "func_pointparticles") {
				//Similar code is in w_crossbowdtwr and mutators_spawnvehicles and g_questspawns 
				//perhaps consolidate at some point
				if (enextent.mdl == "torchflame"
				|| enextent.mdl == "torch_small"
				|| enextent.mdl == "flamethrower"
				|| enextent.mdl == "firefield"
				|| enextent.mdl == "TE_FLAMEJET"
				|| enextent.mdl == "EF_BIGFLAME"
				|| enextent.mdl == "EF_LARGEFLAME"
				|| enextent.mdl == "EF_HUGEFLAME"
				|| enextent.mdl == "EF_IMMENSEFLAME") {
					enextent.mdl = "null";
					removeoldenextent = 1;
				}
			}
			
			if (enextent.classname == "skycycletorchlight"
			|| enextent.classname == "skycycleyellowlight") {
				enextent.light_lev = 0;
				enextent.color = '0 0 0';
				removeoldenextent = 1;
			}
		}
		
		enextent = enextent.chain;
		
		if (removeoldenextent) {
			if (oldenextent != world) {
				remove(oldenextent);
			}
		}
	}
	
	return(myattacked); //You get exp for those attacked, and abit for those undead healed too!
}


entity CastSpell_DarkRitual_FindTransferee(entity caster, entity mytarget)
{	
	local entity enextent;
	enextent = findradius(caster.origin, 128);
	while(enextent)
	{
		if (enextent != world)
		if (enextent != caster)
		if (enextent != mytarget)
		{
			
	 		if(enextent.flags & FL_CLIENT)
			{
				////Can be frozen or made of stone, that's fine
				//if(!enextent.frozen)
				//if(!enextent.freezetag_frozen)
				//if(!enextent.stoned)
				////Can be frozen or made of stone, that's fine
				////Must be alive however...
				if(enextent.deadflag == DEAD_NO)
				if(enextent.health >= 1)
				{
					return(enextent);
				}	
			}
			
		}
		
		enextent = enextent.chain;
	}
	
	return(world);
}




////
////
////




entity CastSpell_Heal_FindHealee(entity caster, vector myendpos)
{	
	local entity enextent;
	enextent = findradius(myendpos, 128);
	while(enextent)
	{
		if (enextent != world)
		if (enextent != caster)
		{
			
	 		if(enextent.flags & FL_CLIENT)
			{
				if(!enextent.frozen)
				if(!enextent.freezetag_frozen)
				if(!enextent.stoned)
				if(enextent.deadflag == DEAD_NO)
				if(enextent.health > 0)
				{
					return(enextent);
				}	
			}
			
		}
		
		enextent = enextent.chain;
	}
	
	return(world);
}

entity CastSpell_Heal_FindHealeeMonster(entity caster, vector myendpos)
{	
	local entity enextent;
	enextent = findradius(myendpos, 128);
	while(enextent)
	{
		if (enextent != world)
		if (enextent != caster)
		{
			
	 		if(enextent.flags & FL_MONSTER)
			{
				if(!enextent.frozen)
				if(!enextent.freezetag_frozen)
				if(!enextent.stoned)
				if(enextent.deadflag == DEAD_NO)
				if(enextent.health > 0)
				{
					return(enextent);
				}	
			}
			
		}
		
		enextent = enextent.chain;
	}
	
	return(world);
}

entity CastSpell_Heal_FindHealeeTree(entity caster, vector myendpos)
{	
	local entity enextent;
	enextent = findradius(myendpos, 128);
	while(enextent)
	{
		if (enextent != world)
		if (enextent != caster)
		{
			
	 		if(enextent.classname == "tree" || enextent.classname == "bush")
			{
				
				if(enextent.vehicle_health > 0)
				{
					return(enextent);
				}	
			}
			
		}
		
		enextent = enextent.chain;
	}
	
	return(world);
}


float CastSpell_Heal_AreaHeal(entity caster, entity mytargent, vector myendpos, float myspelllevel, float myhealamnt)
{	
	local float myexpadd;
	local entity enextent;
	myexpadd = 0;
	enextent = findradius(myendpos, bound(128, myspelllevel*64, 1024));
	while(enextent)
	{
		if (enextent != world)
		if (enextent != caster)
		if (enextent != mytargent)
		{
			
	 		if((enextent.flags & FL_MONSTER) || (enextent.flags & FL_CLIENT))
			{
				if(!enextent.frozen)
				if(!enextent.freezetag_frozen)
				if(!enextent.stoned)
				if(enextent.deadflag == DEAD_NO)
				if(enextent.health > 0)
				{
					if(enextent.flags & FL_CLIENT) {
						enextent.health = bound(enextent.health, enextent.health + myhealamnt, autocvar_g_balance_health_limit);
						enextent.pauserothealth_finished = max(enextent.pauserothealth_finished, time + autocvar_g_balance_pause_health_rot);
						pointparticles(particleeffectnum("healing_fx"), enextent.origin, enextent.velocity, 1);
					
						myexpadd = myexpadd + 1;
						
						caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.075;
					} else if (enextent.flags & FL_MONSTER) {
						if (enextent.max_health > 0) {
							if (enextent.health < enextent.max_health) {
								enextent.health = bound(enextent.health, enextent.health + myhealamnt, enextent.max_health);
								pointparticles(particleeffectnum("healing_fx"), enextent.origin, enextent.velocity, 1);
								myexpadd = myexpadd + 0.25;
								
								caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.025;
							}
						} else {
							if (enextent.health < autocvar_g_balance_health_limit) {
								enextent.health = bound(enextent.health, enextent.health + myhealamnt, autocvar_g_balance_health_limit);
								pointparticles(particleeffectnum("healing_fx"), enextent.origin, enextent.velocity, 1);
								myexpadd = myexpadd + 0.25;
								caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.025;
							}
						}
					}
				}	
			} else if (enextent.classname == "tree" || enextent.classname == "bush") {
				if(enextent.vehicle_health > 0)
				{
					enextent.vehicle_health = enextent.vehicle_health + myhealamnt;
					pointparticles(particleeffectnum("healing_fx"), enextent.origin, enextent.velocity, 1);
					myexpadd = myexpadd + 0.15;
				}
			}
			
		}
		
		enextent = enextent.chain;
	}
	
	return(myexpadd);
}




////
////
////




void CastSpell_StoneRain(entity e, entity caster, float mylevel)
{
	e.mins = '-1 -1 -1';
	e.maxs = '1 1 1';
	
	local vector myskytrace;
	myskytrace = '0 0 0';
	myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
	//print(ftos(myskytrace_z), "\n");
	
	vector forigin;
	forigin = e.origin;
	float	sc;
	for (sc = 0;sc < (1 + floor(mylevel*2));sc = sc + 1) {
		e.origin = forigin + (randomvec() * 64*mylevel);
		e.origin_z = forigin_z;
		if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
		{
			makevectors(e.v_angle);
			
			if (myskytrace_z > 12000) {
				//For huge maps
				W_StoneRain2(e, caster,
				time + (autocvar_g_balance_fireball_primary_lifetime * (myskytrace_z/12000)),
				time + (autocvar_g_balance_grenadelauncher_secondary_lifetime * (myskytrace_z/12000)));
			} else {
				W_StoneRain1(e, caster);
			}
		}
	}
	
	remove(e);
}

void CastSpell_StoneRain_Overtime_do() {
	CastSpell_StoneRain(self, self.owner, self.count);
	self.think = func_null;
	self.nextthink = 0;
	remove(self);
}

void CastSpell_StoneRain_Overtime(vector myorigin, entity caster, float level, float mytime)
{
	entity castspellthinker;
	entity oldself;
	
	oldself = self;
	
	castspellthinker = spawn();
	
	self = castspellthinker;
	
	self.owner = caster;
	self.count = level;
	self.origin = myorigin;
	self.think = CastSpell_StoneRain_Overtime_do;
	self.nextthink = time+(mytime*random());
	setorigin(self, self.origin);
	self = oldself;
}

void CastSpell_Cancellation_remove() {
	self.classname = "";
	self.think = func_null;
	self.nextthink = 0;
	remove(self);
}

void CastSpell_Cancellation(vector myorigin, entity caster, float level, float mytime, float isscroll)
{
	entity castspellthinker;
	entity oldself;
	
	oldself = self;
	
	castspellthinker = spawn();
	
	self = castspellthinker;
	
	self.ammount = isscroll; //Are we cast from a scroll?
	self.owner = caster;
	self.count = level;
	self.origin = myorigin;
	self.classname = "spellcancellation";
	self.think = CastSpell_Cancellation_remove;
	self.nextthink = time + mytime;
	setorigin(self, self.origin);
	self = oldself;
}

float autocvar_g_monster_hellknight_spike_force;
float autocvar_g_monster_hellknight_spike_radius;
float autocvar_g_monster_hellknight_spike_edgedamage;
float autocvar_g_monster_hellknight_spike_damage;
void CastSpell_MagicBullets_spike_think()
{
	if(self)
	{
		RadiusDamage (self, self.realowner, autocvar_g_monster_hellknight_spike_damage, autocvar_g_monster_hellknight_spike_edgedamage, autocvar_g_monster_hellknight_spike_force, world, autocvar_g_monster_hellknight_spike_radius, WEP_CRYLINK, other);
		remove(self);
	}
}

void CastSpell_MagicBullets_spike_touch()
{
	PROJECTILE_TOUCH;
	
	pointparticles(particleeffectnum("TE_WIZSPIKE"), self.origin, '0 0 0', 1);
	
	CastSpell_MagicBullets_spike_think();
}

void CastSpell_MagicBullets_shoot ()
{
	local	entity 	missile;
	//local	vector	dir = normalize((self.enemy.origin + '0 0 10') - (self.origin + '0 0 52'));
	local vector dir = self.v_angle;
	//local	float	dist = vlen (self.enemy.origin - self.origin), flytime = 0;

	//flytime = dist * 0.002;
	//if (flytime < 0.1)
	//	flytime = 0.1;

	self.effects |= EF_MUZZLEFLASH;
	sound (self, CHAN_WEAPON, "weapons/spike.wav", 1, ATTN_NORM);

	missile = spawn ();
	missile.owner = missile.realowner = self.owner;
	missile.solid = SOLID_TRIGGER;
	missile.movetype = MOVETYPE_FLYMISSILE;
	setsize (missile, '0 0 0', '0 0 0');		
	//setorigin(missile, self.origin + '0 0 62' + v_forward * 14);
	setorigin(missile, self.origin);
	missile.scale = self.scale;
	missile.velocity = v_forward * 400;
	missile.avelocity = '300 300 300';
	missile.nextthink = time + 5;
	missile.think = CastSpell_MagicBullets_spike_think;
	missile.enemy = self.enemy;
	missile.touch = CastSpell_MagicBullets_spike_touch;
	CSQCProjectile(missile, TRUE, PROJECTILE_BULLET, TRUE);
}

void CastSpell_MagicBulletsFire()
{
	self.think = CastSpell_MagicBulletsFire;
	self.nextthink = time + 0.1;
	self.cnt = self.cnt + 1;
	
	if (CheckSpellNoCancel(self.owner, self.count, self.origin)) {
		makevectors(self.v_angle);
		CastSpell_MagicBullets_shoot();
	} else {
		self.think = CastSpell_Cancellation_remove; //A generic remove
	}
	
	//self.v_angle_x = self.v_angle_x + 1; //Buzzsaw
	//self.v_angle_y = self.v_angle_y + 4.25; //all around.
	self.v_angle_x = self.v_angle_x + (4 * (random() - 0.5));
	self.v_angle_y = self.v_angle_y + (4 * (random() - 0.5));
	
	if(self.cnt >= self.ammount) {
		self.think = CastSpell_Cancellation_remove; //A generic remove
	}
}

void CastSpell_MagicBullets_Shoot(entity caster, float mylevel, vector myshotorig)
{
	makevectors(caster.v_angle);
	entity castspellthinker;
	entity oldself;
	
	oldself = self;
	
	castspellthinker = spawn();
	
	traceline(myshotorig + (caster.view_ofs*0.5), myshotorig + (caster.view_ofs*0.5) + v_forward * 32, MOVE_NORMAL, caster);
	
	self = castspellthinker;
	
	self.cnt = 0;
	if (random() > 0.5) {
		if (random() > 0.5) {
			self.ammount = mylevel * 5;
		} else {
			self.ammount = mylevel * 2;
		}
	} else {
		self.ammount = mylevel * 3;
	}
	self.angles = caster.angles;
	self.v_angle = caster.v_angle;
	self.owner = caster;
	self.count = mylevel;
	self.origin = trace_endpos;
	self.classname = "spellmagicbullets";
	self.think = CastSpell_MagicBulletsFire;
	self.nextthink = time + 0.1;
	setorigin(self, self.origin);
	self = oldself;
}

void CastSpell_MagicBullets(entity caster, float mylevel)
{
	local float varchangespot;
	local float varchangespot2;
	local float varchangespot3;
	local float varchangespot4;
	varchangespot = 16 + (4 * (random() - 0.5));
	varchangespot2 = ((16 + (4 * (random() - 0.5))) * -1);
	varchangespot3 = 32 + (4 * (random() - 0.5));
	varchangespot4 = ((32 + (4 * (random() - 0.5))) * -1);
	CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin);
	if (mylevel >= 10) {
		makevectors(caster.v_angle);
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_right * varchangespot));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_right * varchangespot2));
	}
	
	if (mylevel >= 20) {
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot2));
	}
	
	if (mylevel >= 30) {
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot) + (v_right * varchangespot));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot2) + (v_right * varchangespot2));
	}
	
	if (mylevel >= 40) {
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot) + (v_right * varchangespot2));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot2) + (v_right * varchangespot));
	}
	
	if (mylevel >= 60) {
		makevectors(caster.v_angle);
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_right * varchangespot3));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_right * varchangespot4));
	}
	
	if (mylevel >= 70) {
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot3));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot4));
	}
	
	if (mylevel >= 80) {
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot3) + (v_right * varchangespot));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot4) + (v_right * varchangespot2));
	}
	
	if (mylevel >= 100) {
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot3) + (v_right * varchangespot2));
		CastSpell_MagicBullets_Shoot(caster, mylevel, caster.origin + (v_up * varchangespot4) + (v_right * varchangespot));
	}
}


void CastSpellExplosion_Mine_Damage_Tree (entity mymine, float myexradius, float myexdamage)
{
	entity eburn;
	eburn = findradius(mymine.origin, myexradius * 0.5);
	while(eburn)
	{
		if (eburn.classname == "tree") {
			mine_damage_tree(eburn, mymine, myexdamage * autocvar_g_balance_minelayer_damagerate_tree);
		}
		
		eburn = eburn.chain;
	}
	
	eburn = findradius(mymine.origin, myexradius*0.35);
	while(eburn)
	{
		if (eburn.classname == "misc_gamemodel") {
 			atmine_destroy_gamemodel_tree(eburn);	
		}
		
		eburn = eburn.chain;
	}
}

void CastSpellExplosion_AddBurnDamage (float isscroll, entity caster, entity mymine, float exprad, float myfireintensity, float mylevel)
{
	local entity eburn;
	eburn = findradius(mymine.origin, exprad);
		while(eburn)
		{
		if ((eburn.classname == "player" && eburn.health > 0) || eburn.classname == "tree" || eburn.classname == "bush"
		|| ((mylevel >= 15) && eburn.abdbldcanburn && (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 3))
		|| (eburn.classname == "bldhitbx" && multitool_iswooden(eburn.count)) )
			Fire_AddDamage(eburn, self.realowner, autocvar_g_balance_nukelayer_fire2_damage *
			20, 20, 
			WEP_FIREBALL);
		
			if (eburn.classname == "tree"
			|| eburn.classname == "bush"
			|| ((mylevel >= 15) && eburn.abdbldcanburn && (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 3))) {
				if (eburn.fire_intensity < myfireintensity) {
					eburn.fire_intensity = myfireintensity;
				}
			}
			
			IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_explosion,
						exp_spell_explosion,
						0.2, eburn);
		
			eburn = eburn.chain;
		}
}

void CastSpellScepterOfFlame_AddBurnDamage (float isscroll, entity caster, entity mymine, float exprad, float myfireintensity)
{
	local entity eburn;
	eburn = findradius(mymine.origin, exprad);
		while(eburn)
		{
		if ((eburn.classname == "player" && eburn.health > 0) || eburn.classname == "tree" || eburn.classname == "bush"
		|| (eburn.abdbldcanburn && (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 3))
		|| (eburn.classname == "bldhitbx" && multitool_iswooden(eburn.count)) )
			Fire_AddDamage(eburn, self.realowner, autocvar_g_balance_nukelayer_fire2_damage *
			20, 20, 
			WEP_FIREBALL);
		
			if (eburn.classname == "tree"
			|| eburn.classname == "bush") {
				if (eburn.fire_intensity < myfireintensity) {
					eburn.fire_intensity = myfireintensity;
				}
			}
			
			IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_scepterofflame,
						exp_spell_scepterofflame,
						0.2, eburn);
		
			eburn = eburn.chain;
		}
}

//These fires ...
entity CastSpell_scepterofflame_spawntorchlight(vector myorg, float mylevel) {
	local entity newtorchlight;
	local float trand;
	trand = random();
	newtorchlight = spawn();
	newtorchlight.pflags = PFLAGS_FULLDYNAMIC;
	//newtorchlight.light_lev = 32 * mylevel;
	////newtorchlight.light_lev = mylevel;
	newtorchlight.light_lev = 8 * mylevel;
	newtorchlight.color = '0.75 0.25 0'; //w_torch
	newtorchlight.color_x = newtorchlight.color_x + (0.25*(random () - 0.5));
	newtorchlight.color_y = newtorchlight.color_y + (0.25*(random () - 0.5));
	//print(vtos(newtorchlight.color),"----TorchColor\n");
	if (trand > 0.75) {
		newtorchlight.style = 11;
	} else {
		newtorchlight.style = 0;
	}
		
	newtorchlight.origin = myorg;
	setorigin(newtorchlight, newtorchlight.origin);
	return newtorchlight;
}

void CastSpell_scepterofflame_burningreplacement_think(void)
{
	if (time > self.count) {
		self.solid = SOLID_NOT;
		self.think = func_null;
		self.nextthink = 0;
		if (self.fire_burner)
			remove(self.fire_burner);
				
		if (self.subordinate && self.subordinate != world) {
			self.subordinate.active = ACTIVE_NOT;
			self.subordinate.touch              = func_null;
			if (self.subordinate.fire_burner)
				remove(self.subordinate.fire_burner);
		
			remove(self.subordinate);
		}
		//Lights
		if (self.subordinate4 && self.subordinate4 != world) {
			self.subordinate4.light_lev = 0;
			remove(self.subordinate4);
		}
		if (self.subordinate5 && self.subordinate5 != world) {
			self.subordinate5.light_lev = 0;
			remove(self.subordinate4);
		}
		remove(self);
	} else {
		self.nextthink = time + 0.25;
		modeleffect_spawn("models/misc/cylinderexpfire.iqm", 0, 0, self.origin, '0 0 0', '0 0 0', '0 0 0', 0, self.ammount*225, 0.75, 0.07, 2.0);
		if (time > self.amnt) {
			CastSpellScepterOfFlame_AddBurnDamage (1, self.owner, self, self.ammount, 1);
			self.amnt = time + 2;
		}
	}
}

void CastSpell_ScepterOfFlame_Touch()
{
	if (self.active != ACTIVE_ACTIVE) 
		return;
		
	if(self.team)
		if((self.spawnflags & 4 == 0) == (self.team != other.team))
			return;
			
	// only do the EXACTTRIGGER_TOUCH checks when really needed (saves some cpu)
	if (other.iscreature)
	{
		if (other.takedamage)
		if (other.triggerhurttime < time)
		{
			EXACTTRIGGER_TOUCH;
			other.triggerhurttime = time + 1;

			Fire_AddDamage(other, self.owner, self.dmg*self.cnt, self.cnt, DEATH_FIRE);
		}
	}
}

void spawnfunc_CastSpell_ScepterOfFlame_trigger_burn()
{
	EXACTTRIGGER_INIT;
	self.active = ACTIVE_ACTIVE;
	self.touch = CastSpell_ScepterOfFlame_Touch;
	self.enemy = world; // I hate you all
}

entity CastSpell_ScepterOfFlame_trigger_burn(float mytime, float mydmg, vector myorigin, entity myowner, float myspread, float myheight)
{	entity mypreviousself, eb;
	mypreviousself = self;
	
	eb = spawn();
	eb.origin = myorigin;

	eb.dmg = mydmg*(0.7+(random()*0.3)); //Since we're in the air, might be less
	eb.cnt = mytime;
	eb.owner = myowner;
			
	eb.mins_x = -1.0 * myspread;
	eb.mins_y = -1.0 * myspread;
	eb.mins_z = -1;
	eb.maxs_x = 1.0 * myspread;
	eb.maxs_y = 1.0 * myspread;
	
	eb.maxs_z = myheight;
				
	self = eb;
	spawnfunc_CastSpell_ScepterOfFlame_trigger_burn();
	
	self = mypreviousself;
	return eb;
}

void CastSpell_ScepterOfFlame_PlaceFire(float mytime, float mydmg, vector myorigin, entity myowner, float myspread, float myheight, float myintensity)
{
	//Was interfering with SC_Tile placed bldgs
	//if (pointcontents (myorigin) == CONTENT_SOLID)
	//	return;
		
	if (pointcontents (myorigin) == CONTENT_WATER)
		return;
		
	if (pointcontents (myorigin) == CONTENT_SLIME)
		return;
		
	if (pointcontents (myorigin) == CONTENT_SKY)
		return;
		
	entity previousself, e;
	previousself = self;
	
			e = spawn();
			e.origin = myorigin;
			e.solid = SOLID_SLIDEBOX;
			e.dmg = mydmg;
			e.cnt = mytime;
			e.owner = myowner;
			
			e.mins_x = -1.0 * myspread;
			e.mins_y = -1.0 * myspread;
			e.maxs_x = 1.0 * myspread;
			e.maxs_y = 1.0 * myspread;
			e.ammount = myspread; //The radius
			
			
				e.mins_z = -2;
				e.maxs_z = 8;

			e.think = CastSpell_scepterofflame_burningreplacement_think;
			e.alpha = -1;
			
			local vector myvecorg;
			myvecorg = e.origin;
			myvecorg_z = e.origin_z + 256;
			e.subordinate5 = CastSpell_scepterofflame_spawntorchlight(myvecorg, myspread);
			myvecorg = e.origin;
			myvecorg_z = e.origin_z + (e.maxs_z * 0.5);		
			e.subordinate4 = CastSpell_scepterofflame_spawntorchlight(myvecorg, myspread);
			
			self = e;
			
			self.model = "null";
			setmodel (self, self.model); //So our effect can be seen
			
			setorigin(self, self.origin);
			droptofloor();
			
			self.count = time + mytime; //When I will be removed.
			self.nextthink = time;
			self.subordinate = CastSpell_ScepterOfFlame_trigger_burn(mytime, mydmg, myorigin, myowner, myspread, myheight);
			//print(etos(self.subordinate),"\n");
			
			self = previousself;
			
			spamsound (e, CH_SHOTS, "misc/ignition_firewall.ogg", VOL_BASE, ATTN_NORM);
			
			Fire_AddDamage(e, myowner, mydmg*mytime, mytime, DEATH_FIRE);
			if (myintensity) {
				e.fire_intensity = myintensity;
				e.fire_nextpartcheck = 1;
			}
}

///////////////////////////////////



float CastSpell_Grace_Do(entity caster, float mylevel, float mysrchrad, vector mysrchorigin, entity mygraceent, float mygracedtime)
{	
	local float myhealed;
	myhealed = 0;
	local entity enextent;
	enextent = findradius(mysrchorigin, mysrchrad);
	while(enextent)
	{
		if (enextent != world) {
	 		if((enextent.flags & FL_MONSTER) || (enextent.flags & FL_CLIENT))
			{
				if (enextent.vuln_isundead) {
					Damage(enextent, caster, caster, 
					enextent.vuln_isundead*((mylevel*0.33)+8), DEATH_HOLYBOLT, 
					enextent.origin + enextent.view_ofs, 
					'0 0 0');					
					//pointparticles(particleeffectnum("TE_PLASMABURN"), enextent.origin, '0 0 0', 1);
					
				} else {
					if (random() < 0.33) {
						// 1/3 chance of heal
						if (enextent.health < (100+(mylevel*2))) {
							if (enextent != caster) {
								myhealed = myhealed + 1;
								
								if (enextent.flags & FL_CLIENT) {
									caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.01;
								} else if (enextent.flags & FL_MONSTER) {
									caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.0015;
								}
							}
							enextent.health = enextent.health + (mylevel*0.1) + 1;
							pointparticles(particleeffectnum("cherryblossom"), enextent.origin+enextent.view_ofs, '0 0 0', 1);
						}
					}
					
					enextent.gracegivingent = mygraceent;
					enextent.gracegivingtime = mygracedtime+0.1;
					enextent.gracegivingradius = mysrchrad;
				}
			}
		}
		
		enextent = enextent.chain;
	}
	
	return(myhealed); //You get exp for those healed, but not those attacked
}

void CastSpell_Grace_Think()
{
	float mybonusexp;
	mybonusexp = 0;
	self.think = CastSpell_Grace_Think;
	self.nextthink = time + bound(0.5, ((20/(self.cnt*2)) + (random() - 0.5)), 11);
	
	if (self.realowner && self.realowner != world) {
		mybonusexp = CastSpell_Grace_Do(self.realowner, self.cnt, self.count, self.origin, self, self.nextthink);
	}
	
	if (!self.ammount2) {
		if (mybonusexp) {
			IncreaseSpellExpAndMaybeLVL(self.ammount2,
					self.realowner,
				 	spell_grace,
					exp_spell_grace,
					(mybonusexp*0.15), world); 
		}
	}
	
	if (time > self.ammount3) {
		if (self.subordinate.subordinate) {
			SUB_SetFade (self.subordinate.subordinate, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate.subordinate2) {
			SUB_SetFade (self.subordinate.subordinate2, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate.subordinate3) {
			SUB_SetFade (self.subordinate.subordinate3, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate.subordinate4) {
			SUB_SetFade (self.subordinate.subordinate4, time, 1+(self.cnt*0.2));
		}
		
		/////
		if (self.subordinate) {
			sound (self.subordinate, CH_WEAPON_A, "ardentryst/Maea.ogg", VOL_BASE*(0.8+(random()*0.4)), ATTN_NORM);
			SUB_SetFade (self.subordinate, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate2) remove (self.subordinate2);
		
		if (self.subordinate3) {
			SUB_SetFade (self.subordinate3, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate4) {
			SUB_SetFade (self.subordinate4, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate5) {
			SUB_SetFade (self.subordinate5, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate6) {
			SUB_SetFade (self.subordinate6, time, 1+(self.cnt*0.2));
		}
		
		if (self.realowner && self.realowner != world) {
			self.realowner.gracespellent = world;
		}
		
		self.think = func_null;
		self.nextthink = 0;
		remove(self);
	}
	
}

void CastSpell_Grace(entity caster, float mylevel, float isscroll, float mymgcskin)
{
	entity e, e2, e3, e4, e5, e6, e7, eoldself;
	entity e8, e9, e10, e11;
	float mytop;
	e = spawn();
	e.ammount3 = time + (5 * mylevel);
	e.ammount2 = isscroll;
	e.cnt = mylevel;
	e.realowner = caster;
	//Radius is: * 15 is maximum:
	e.count = bound(0.25, mylevel * 128 * 0.25, 1920);
	e.ammount = bound(0.25, mylevel * 0.25, 15);
	e.origin = caster.origin;
	traceline(e.origin + '0 0 2', e.origin + '0 0 -66', MOVE_NORMAL, e);
	e.origin = trace_endpos;
	e.think = CastSpell_Grace_Think;
	e.nextthink = time;
	
	traceline(e.origin, e.origin + (e.count * '0 0 1'), MOVE_WORLDONLY, e);
	mytop = trace_endpos_z;
	
	e2 = spawn();
	e2.origin = e.origin;
	e2.scale = e.ammount;
	e2.model = "models/circles/magiccircle.iqm";
	e2.skin = mymgcskin;
	e2.alpha = 0.9;
	
	eoldself = self;
	self = e2;
	//spawnfunc_misc_clientmodel();
        self.solid = SOLID_NOT;
	setmodel(self, self.model);
	self = eoldself;
	
	
	e3 = spawn();
	if (mymgcskin == 2) {
	e3.mdl = "fountain01";
	} else {
	e3.mdl = "cherryblossom";
	}
	e3.impulse = -0.05;
	e3.velocity = '0 0 -30';
	e3.waterlevel = 10;
	//e3.spawnflags = 4;
	//No origin set as this is a brush one
	e3.mins = e.count * '-0.7 -0.7 -0.7';
	e3.maxs = e.count * '0.7 0.7 0.7';
	if (mytop > e3.mins_z) {
		e3.maxs_z = mytop;
	}
	e3.mins = e3.mins + e.origin;
	e3.maxs = e3.maxs + e.origin;
	//print(ftos(e.count), " ", vtos(e3.mins), " ", vtos(e3.maxs)," MM\n");
		
	setsize(e3, e3.mins, e3.maxs);
	eoldself = self;
	self = e3;
	spawnfunc_func_pointparticles();
	self.solid = SOLID_NOT;
	self = eoldself;
	
	e.subordinate = e2;
	e.subordinate2 = e3;
	
	local float myringoffset1, myringsize1, myringalpha1;
	local float myringoffset2, myringsize2, myringalpha2;
	myringoffset1 = 0.42;
	myringsize1 = 0.39;
	myringalpha1 = 0.7;
	if (mylevel >= 8) {
		e4 = spawn();
		e5 = spawn();
		e5.origin = e4.origin = e.origin;
		e4.origin_x = e4.origin_x + (e.count*myringoffset1);
		e5.origin_x = e5.origin_x - (e.count*myringoffset1);
		e5.scale = e4.scale = e.ammount * myringsize1;
		e5.model = e4.model = "models/circles/magiccircle.iqm";
		e5.skin = e4.skin = mymgcskin;
		e5.alpha = e4.alpha = myringalpha1;
	
		eoldself = self;
		self = e4;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e5;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate3 = e4;
		e.subordinate4 = e5;	
	}
	
	if (mylevel >= 10) {
		e6 = spawn();
		e7 = spawn();
		e7.origin = e6.origin = e.origin;
		e6.origin_y = e6.origin_y + (e.count*myringoffset1);
		e7.origin_y = e7.origin_y - (e.count*myringoffset1);
		e7.scale = e6.scale = e.ammount * myringsize1;
		e7.model = e6.model = "models/circles/magiccircle.iqm";
		e7.skin = e6.skin = mymgcskin;
		e7.alpha = e6.alpha = myringalpha1;
	
		eoldself = self;
		self = e6;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e7;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate5 = e6;
		e.subordinate6 = e7;	
	}
	
	myringoffset2 = 0.48; // 0.48 close but not enough //0.64 is near outside rings
	myringsize2 = 0.15; //0.1 was nice
	myringalpha2 = 0.5;
	if (mylevel >= 13) {
		e8 = spawn();
		e9 = spawn();
		e9.origin = e8.origin = e.origin;
		e8.origin_x = e8.origin_x + (e.count*myringoffset2);
		e8.origin_y = e8.origin_y + (e.count*myringoffset2);
		e9.origin_x = e9.origin_x - (e.count*myringoffset2);
		e9.origin_y = e9.origin_y - (e.count*myringoffset2);
		e9.scale = e8.scale = e.ammount * myringsize2;
		e9.model = e8.model = "models/circles/magiccircle.iqm";
		e9.skin = e8.skin = mymgcskin;
		e9.alpha = e8.alpha = myringalpha2;
	
		eoldself = self;
		self = e8;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e9;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate.subordinate = e8;
		e.subordinate.subordinate2 = e9;	
	}
	
	if (mylevel >= 15) {
		e10 = spawn();
		e7 = spawn();
		e7.origin = e10.origin = e.origin;
		e7.origin_x = e7.origin_x + (e.count*myringoffset2);
		e7.origin_y = e7.origin_y - (e.count*myringoffset2);
		e10.origin_x = e10.origin_x - (e.count*myringoffset2);
		e10.origin_y = e10.origin_y + (e.count*myringoffset2);
		e7.scale = e10.scale = e.ammount * myringsize2;
		e7.model = e10.model = "models/circles/magiccircle.iqm";
		e7.skin = e10.skin = mymgcskin;
		e7.alpha = e10.alpha = myringalpha2;
	
		eoldself = self;
		self = e10;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e7;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate.subordinate3 = e10;
		e.subordinate.subordinate4 = e7;	
	}
	
	caster.gracespellent = e;
}


///////////////////////////////////


///////////////////////////////////



void CastSpell_VampyricConduit_Do(entity caster, float mylevel, float mysrchrad, vector mysrchorigin, entity myvampyricconduitent, float myvampyricconduitdtime)
{	
	local entity enextent;
	enextent = findradius(mysrchorigin, mysrchrad);
	while(enextent)
	{
		if (enextent != world) {
	 		if((enextent.flags & FL_MONSTER) || (enextent.flags & FL_CLIENT))
			{
				
					
					enextent.vampyricconduitgivingent = myvampyricconduitent;
					enextent.vampyricconduitgivingtime = myvampyricconduitdtime+0.1;
					enextent.vampyricconduitgivingradius = mysrchrad;
			}
		}
		
		enextent = enextent.chain;
	}
}

void CastSpell_VampyricConduit_Think()
{
	self.think = CastSpell_VampyricConduit_Think;
	self.nextthink = time + bound(0.5, ((20/(self.cnt*2)) + (random() - 0.5)), 11);
	
	if (self.realowner && self.realowner != world) {
		CastSpell_VampyricConduit_Do(self.realowner, self.cnt, self.count, self.origin, self, self.nextthink);
	}
	
	if (time > self.ammount3) {
		if (self.subordinate.subordinate) {
			SUB_SetFade (self.subordinate.subordinate, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate.subordinate2) {
			SUB_SetFade (self.subordinate.subordinate2, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate.subordinate3) {
			SUB_SetFade (self.subordinate.subordinate3, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate.subordinate4) {
			SUB_SetFade (self.subordinate.subordinate4, time, 1+(self.cnt*0.2));
		}
		
		/////
		if (self.subordinate) {
			//sound (self.subordinate, CH_WEAPON_A, "ardentryst/Maea.ogg", VOL_BASE*(0.8+(random()*0.4)), ATTN_NORM);
			SUB_SetFade (self.subordinate, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate2) remove (self.subordinate2);
		
		if (self.subordinate3) {
			SUB_SetFade (self.subordinate3, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate4) {
			SUB_SetFade (self.subordinate4, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate5) {
			SUB_SetFade (self.subordinate5, time, 1+(self.cnt*0.2));
		}
		
		if (self.subordinate6) {
			SUB_SetFade (self.subordinate6, time, 1+(self.cnt*0.2));
		}
		
		if (self.realowner && self.realowner != world) {
			self.realowner.vampyricconduitspellent = world;
		}
		
		self.think = func_null;
		self.nextthink = 0;
		remove(self);
	}
	
}

void CastSpell_VampyricConduit(entity caster, float mylevel, float isscroll)
{
	entity e, e2, e3, e4, e5, e6, e7, eoldself;
	entity e8, e9, e10, e11;
	float mytop;
	e = spawn();
	e.ammount3 = time + (4 * mylevel);
	e.ammount2 = isscroll;
	e.cnt = mylevel;
	e.realowner = caster;
	//Radius is: * 15 is maximum:
	e.count = bound(0.125, mylevel * 128 * 0.125, 1920);
	e.ammount = bound(0.125, mylevel * 0.125, 15);
	e.origin = caster.origin;
	traceline(e.origin + '0 0 2', e.origin + '0 0 -66', MOVE_NORMAL, e);
	e.origin = trace_endpos;
	e.think = CastSpell_VampyricConduit_Think;
	e.nextthink = time;
	
	traceline(e.origin, e.origin + (e.count * '0 0 1'), MOVE_WORLDONLY, e);
	mytop = trace_endpos_z;
	
	e2 = spawn();
	e2.origin = e.origin;
	e2.scale = e.ammount;
	e2.model = "models/circles/magiccircle.iqm";
	e2.skin = 1;
	e2.alpha = 0.9;
	
	eoldself = self;
	self = e2;
	//spawnfunc_misc_clientmodel();
        self.solid = SOLID_NOT;
	setmodel(self, self.model);
	self = eoldself;
	
	
	e3 = spawn();
	e3.mdl = "laser_impact";
	e3.impulse = -0.05;
	e3.velocity = '0 0 30'; //Up
	e3.waterlevel = 10;
	//e3.spawnflags = 4;
	//No origin set as this is a brush one
	e3.mins = e.count * '-0.7 -0.7 -0.7';
	e3.maxs = e.count * '0.7 0.7 0.7';
	if (mytop > e3.mins_z) {
		e3.maxs_z = mytop;
	}
	e3.mins = e3.mins + e.origin;
	e3.maxs = e3.maxs + e.origin;
	//print(ftos(e.count), " ", vtos(e3.mins), " ", vtos(e3.maxs)," MM\n");
		
	setsize(e3, e3.mins, e3.maxs);
	eoldself = self;
	self = e3;
	spawnfunc_func_pointparticles();
	self.solid = SOLID_NOT;
	self = eoldself;
	
	e.subordinate = e2;
	e.subordinate2 = e3;
	
	local float myringoffset1, myringsize1, myringalpha1;
	local float myringoffset2, myringsize2, myringalpha2;
	myringoffset1 = 0.42;
	myringsize1 = 0.39;
	myringalpha1 = 0.7;
	if (mylevel >= 8) {
		e4 = spawn();
		e5 = spawn();
		e5.origin = e4.origin = e.origin;
		e4.origin_x = e4.origin_x + (e.count*myringoffset1);
		e5.origin_x = e5.origin_x - (e.count*myringoffset1);
		e5.scale = e4.scale = e.ammount * myringsize1;
		e5.model = e4.model = "models/circles/magiccircle.iqm";
		e5.skin = e4.skin = 1;
		e5.alpha = e4.alpha = myringalpha1;
	
		eoldself = self;
		self = e4;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e5;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate3 = e4;
		e.subordinate4 = e5;	
	}
	
	if (mylevel >= 10) {
		e6 = spawn();
		e7 = spawn();
		e7.origin = e6.origin = e.origin;
		e6.origin_y = e6.origin_y + (e.count*myringoffset1);
		e7.origin_y = e7.origin_y - (e.count*myringoffset1);
		e7.scale = e6.scale = e.ammount * myringsize1;
		e7.model = e6.model = "models/circles/magiccircle.iqm";
		e7.skin = e6.skin = 1;
		e7.alpha = e6.alpha = myringalpha1;
	
		eoldself = self;
		self = e6;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e7;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate5 = e6;
		e.subordinate6 = e7;	
	}
	
	myringoffset2 = 0.48; // 0.48 close but not enough //0.64 is near outside rings
	myringsize2 = 0.15; //0.1 was nice
	myringalpha2 = 0.5;
	if (mylevel >= 13) {
		e8 = spawn();
		e9 = spawn();
		e9.origin = e8.origin = e.origin;
		e8.origin_x = e8.origin_x + (e.count*myringoffset2);
		e8.origin_y = e8.origin_y + (e.count*myringoffset2);
		e9.origin_x = e9.origin_x - (e.count*myringoffset2);
		e9.origin_y = e9.origin_y - (e.count*myringoffset2);
		e9.scale = e8.scale = e.ammount * myringsize2;
		e9.model = e8.model = "models/circles/magiccircle.iqm";
		e9.skin = e8.skin = 1;
		e9.alpha = e8.alpha = myringalpha2;
	
		eoldself = self;
		self = e8;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e9;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate.subordinate = e8;
		e.subordinate.subordinate2 = e9;	
	}
	
	if (mylevel >= 15) {
		e10 = spawn();
		e7 = spawn();
		e7.origin = e10.origin = e.origin;
		e7.origin_x = e7.origin_x + (e.count*myringoffset2);
		e7.origin_y = e7.origin_y - (e.count*myringoffset2);
		e10.origin_x = e10.origin_x - (e.count*myringoffset2);
		e10.origin_y = e10.origin_y + (e.count*myringoffset2);
		e7.scale = e10.scale = e.ammount * myringsize2;
		e7.model = e10.model = "models/circles/magiccircle.iqm";
		e7.skin = e10.skin = 1;
		e7.alpha = e10.alpha = myringalpha2;
	
		eoldself = self;
		self = e10;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		self = e7;
        	self.solid = SOLID_NOT;
		setmodel(self, self.model);
		self = eoldself;
		
		e.subordinate.subordinate3 = e10;
		e.subordinate.subordinate4 = e7;	
	}
	
	caster.vampyricconduitspellent = e;
}


///////////////////////////////////



float CastSpellIsUnderSky(entity caster)
{
				local vector myskytrace;
				local entity sktrcr;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
								
				sktrcr = spawn();
				sktrcr.mins = '-1 -1 -1';
				sktrcr.maxs = '1 1 1';
				sktrcr.origin = caster.origin;
				traceline(sktrcr.origin, sktrcr.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, sktrcr);
				
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					remove(sktrcr);
					return TRUE;	
				}
				
				remove(sktrcr);
				return FALSE;
}


///////////////////////////////////

///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
//This is similar to code in w_sunbeam etc
//But made specific for spells...
.float inferno_attack_finished_single;
.float inferno_pulseduration;

.entity inferno_subordinate;
.entity inferno_mylazerenemy;

.entity inferno_spellent; //Our spell thinker, we set it to world when done
.entity acervilux_spellent;
.entity rosa_spellent;
.entity corvuspenna_spellent;

void CastSpell_rosa_think (void);
void CastSpell_corvuspenna_think (void);

void CastSpell_inferno_pulse_laser_think(void);

void CastSpell_inferno_pulse_laser_think(void) {
	if (time > self.ammount
	//|| self.inferno_subordinate.weapon != WEP_SUNBEAM
	|| self.inferno_subordinate.deadflag != DEAD_NO
	|| (!(self.inferno_subordinate.health > 0))
	) {
		self.inferno_subordinate.inferno_mylazerenemy = world;
		entity myselflaser;
		myselflaser = self;
		self = world; //So whoever is pointing at us is pointing at world now (hopefully)
		remove(myselflaser);
	} else {
		misc_laser_think();
	}
}

float CastSpell_inferno_maybe_fire_laser(entity _gun, entity pilot,
				entity _vehic, vector _mycolormod, float _myalpha,
				float _myscale, float _mydynlight, float _mydamage,
				float _myduration, float firerequirementsment, vector myshotorigin, float myaltdeathtype, float isscroll)
{
	local vector s;
	
	if(firerequirementsment)
	{
		makevectors(pilot.v_angle);
		W_SetupShot (pilot, TRUE, 0, "", CH_WEAPON_A, _mydamage);
		s = normalize(w_shotdir);
		s = vectoangles(s);
		s_x = s_x * -1;

		if (pilot.inferno_mylazerenemy == world || !pilot.inferno_mylazerenemy) {
			//vector v;
			entity mylaser;
			entity myoldself;
			myoldself = self;
			mylaser = spawn();
			self = mylaser;
			self.realowner = pilot;
			self.colormod = _mycolormod;
			self.alpha = _myalpha;
			self.scale = _myscale;
			self.modelscale = _mydynlight; //Dynlight
			
			
			self.origin = myshotorigin; //Changed from w_shotorg to suit spells
						
			self.angles = s;
			
			self.dmg = _mydamage;
			if (myaltdeathtype) {
				self.altdeathtype = myaltdeathtype;
				if (myaltdeathtype == DEATH_FIRE) {
					self.mdl = "firemine";
					self.altdeathtype_fireadd = 1; //Add fire, if 2 the deathtype is altdeathtype
					self.altdeathtype_fireadd_dmg = autocvar_g_balance_torch_fire_damage;
					self.altdeathtype_fireadd_time = autocvar_g_balance_torch_fire_burntime;
					self.altdeathtype_fireadd_owner = pilot;
					self.altdeathtype_addspellexp = 1;
					self.altdeathtype_addspellexp_spell = 1; //Inferno
					self.altdeathtype_addspellexp_owner = pilot;
					self.altdeathtype_addspellexp_isscroll = isscroll;
					self.altdeathtype_hitsounds = 1;
					self.altdeathtype_hitsounds_time = 0.125; //jitter is set to same
				} else if (myaltdeathtype == DEATH_HOLYBOLT) {
					self.mdl = "none";
					self.altdeathtype_dmgundeadonly = 1; 
					self.altdeathtype_addspellexp = 1;
					self.altdeathtype_addspellexp_spell = 2; //Acervilux
					self.altdeathtype_addspellexp_owner = pilot;
					self.altdeathtype_addspellexp_isscroll = isscroll;
				}
			}
			spawnfunc_misc_laser();
			if (_myduration) {
				self.ammount = time + _myduration;
				
					self.think = CastSpell_inferno_pulse_laser_think;
				
				self.inferno_subordinate = pilot;
			}
			self = myoldself;
			
			pilot.inferno_mylazerenemy = mylaser;
		} else {
			pilot.inferno_mylazerenemy.origin = myshotorigin; //Changed from w_shotorg to suit spells
			
			pilot.inferno_mylazerenemy.angles = s;
		}
		return 1;
	}
	else {
		entity myremovelaser;
		if(pilot.inferno_mylazerenemy) {
			myremovelaser = pilot.inferno_mylazerenemy;
			pilot.inferno_mylazerenemy = world;
			remove(myremovelaser);
		}
		return 0;
	}
}

void CastSpell_inferno_lasercannon_fire(entity mg_lasercannon, entity player, entity _gun, float attackbutton, float mydamage, vector mycolor, float mypulseduration, float myradius, float myrefire, float mylight, vector myshotorigin, float myaltdeathtype, float isscroll) 
{
	local vector oldvforward;
	local vector oldvup;
	local vector oldvright;
	
	oldvforward = v_forward;
	oldvforward = v_up;
	oldvforward = v_right;
	
	float myrequirementstofire;
    	myrequirementstofire = 0;
	
	if(attackbutton) {
		if(time > _gun.inferno_attack_finished_single || time < _gun.inferno_pulseduration) {
			//if(player.ammo_cells >= mycost)
			//{
					myrequirementstofire = 1;
			//}
		}
	}
	
	if (CastSpell_inferno_maybe_fire_laser(_gun, player,
				mg_lasercannon, mycolor, 0.85,
				myradius, mylight, mydamage,
				mypulseduration, myrequirementstofire, myshotorigin, myaltdeathtype, isscroll))
	{
		if (time > _gun.inferno_attack_finished_single) {
			////mg_lasercannon.vehicle_ammo1 -= mycost;
			//local entity myolderself;
			//myolderself = self;
			//self = player;
			//Spells don't use ammo... //W_DecreaseAmmo(ammo_cells, mycost, autocvar_g_balance_inferno_reload_ammo);
			//self = myolderself;
			
			_gun.inferno_attack_finished_single = time + myrefire;
			_gun.inferno_pulseduration = time + mypulseduration; //Pulse duration;
		}
	}
	
	//Restore previous
	v_forward = oldvforward;
	v_up = oldvup;
	v_right = oldvright;
}
///////////////////////////////////
void CastSpell_inferno_think (void) {
	local float myrequirementsmet;
	local vector myshotorigin;
	myrequirementsmet = 0;
	
	self.think = CastSpell_inferno_think;
	self.origin = self.realowner.origin;
	
	if(!self.realowner.frozen)
	if(!self.realowner.freezetag_frozen)
	if(!self.realowner.stoned)
	if(self.realowner.deadflag == DEAD_NO)
	if(self.realowner.health > 0) {
		myrequirementsmet = 1;
	}
	
	if (time > self.cnt) {
		myrequirementsmet = 0;
	}
	
	myshotorigin = self.origin;
	
	if (self.realowner.view_ofs_z > 0) {
		myshotorigin_z = myshotorigin_z + (self.realowner.view_ofs_z * 0.5);
	}
	
	if (myrequirementsmet) {
		local vector oldvf, oldvr, oldvu;
		oldvf = v_forward;
		oldvr = v_right;
		oldvu = v_up;
	
		makevectors(self.realowner.v_angle);
		
		//128 works, 64 works, 48 works
		traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
		myshotorigin = trace_endpos;
		
		traceline(myshotorigin, myshotorigin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, self.realowner);
		
		if (time > self.ammount3) {
			//fireball -- too much
			//firemine --ditto
			//fireball_laser
			//fireball_explode -- pretty good
			//fireball_muzzleflash --underwelming but fast
			//fireball_bfgdamage --underwelming
			//EF_FLAME --not good
			//TR_SEEKER --not real good..
			//torchflame --not good
			//spiderbot_rocket_launch
			//tr_hagar
			//fireflies
			//TR_GRENADE
			//TR_ROCKET
			
			trailparticles(self.realowner, particleeffectnum("fireball_explode"), myshotorigin, trace_endpos);
			trailparticles(self.realowner, particleeffectnum("TR_ROCKET"), myshotorigin, trace_endpos);
			
			//pointparticles(particleeffectnum("fireball"), myshotorigin, '0 0 0', 1);
			pointparticles(particleeffectnum("torchflame"), myshotorigin, (v_forward*1), 1);

			//self.ammount3 = time + 0.5 + (random()*2);
			self.ammount3 = time + 0.1;
		}

		v_forward = oldvf;
		v_right = oldvr;
		v_up = oldvu;
	}
	
	
	CastSpell_inferno_lasercannon_fire(self, self.realowner, self, myrequirementsmet, self.dmg, '1 0.3 0',
	self.ammount2,
	bound(8,8+(self.ammount*0.5),16),
	bound(2,2+(self.ammount*0.1),10),
	0.1,
	myshotorigin, DEATH_FIRE, self.ammount4);
	
	if (myrequirementsmet == 0) {
		if (self.realowner.inferno_spellent == self) {
			self.realowner.inferno_spellent = world;
		}
		self.think = CastSpell_Cancellation_remove; //A generic remove
	}

	self.nextthink = time;
}

void CastSpell_inferno (entity player, float mydmg, float mytime, float mylevel, float isscroll)
{
	local entity e;
	e = spawn();
	e.origin = player.origin;
	
	e.dmg = mydmg;
	e.cnt = time + mytime;
	e.ammount2 = mytime+0.1;
	e.owner = player;
	e.realowner = player;
	e.ammount = mylevel; //sets the radius etc
	e.ammount4 = isscroll;

	e.think = CastSpell_inferno_think;
	e.nextthink = time;
	
	player.inferno_spellent = e;
}
///////////////////////////////////
///////////////////////////////////
void CastSpell_acervilux_think (void) {
	local float myrequirementsmet;
	local vector myshotorigin;
	myrequirementsmet = 0;
	
	self.think = CastSpell_acervilux_think;
	self.origin = self.realowner.origin;
	
	if(!self.realowner.frozen)
	if(!self.realowner.freezetag_frozen)
	if(!self.realowner.stoned)
	if(self.realowner.deadflag == DEAD_NO)
	if(self.realowner.health > 0) {
		myrequirementsmet = 1;
	}
	
	if (time > self.cnt) {
		myrequirementsmet = 0;
	}
	
	myshotorigin = self.origin;
	
	if (self.realowner.view_ofs_z > 0) {
		myshotorigin_z = myshotorigin_z + (self.realowner.view_ofs_z * 0.5);
	}
	
	if (myrequirementsmet) {
		local vector oldvf, oldvr, oldvu;
		oldvf = v_forward;
		oldvr = v_right;
		oldvu = v_up;
	
		makevectors(self.realowner.v_angle);
		
		//128 works, 64 works, 48 works
		traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
		myshotorigin = trace_endpos;
		
		self.origin = myshotorigin; //so we don't do shadows, since we're using self as a light...
		
		traceline(myshotorigin, myshotorigin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, self.realowner);
		
		if (time > self.ammount3) {
			
			
			//trailparticles(self.realowner, particleeffectnum("TE_TEI_PLASMAHIT"), myshotorigin, trace_endpos);
			//trailparticles(self.realowner, particleeffectnum("TR_ROCKET"), myshotorigin, trace_endpos);
			
			////pointparticles(particleeffectnum("fireball"), myshotorigin, '0 0 0', 1);
			//pointparticles(particleeffectnum("nex_impact"), myshotorigin, (v_forward*1), 1);

			//self.ammount3 = time + 0.5 + (random()*2);
			self.ammount3 = time + 0.1;
			
			self.effects = EF_FULLBRIGHT | EF_BRIGHTFIELD | EF_BRIGHTLIGHT | EF_MUZZLEFLASH | EF_NOSHADOW | EF_DOUBLESIDED;
			
			self.pflags = PFLAGS_FULLDYNAMIC;
			self.light_lev = 100*self.ammount;
			self.color = '1 1 1';
		}

		v_forward = oldvf;
		v_right = oldvr;
		v_up = oldvu;
	}
	
	
	CastSpell_inferno_lasercannon_fire(self, self.realowner, self, myrequirementsmet, self.dmg, '1 1 1',
	self.ammount2,
	bound(2,2+(self.ammount*0.75),16),
	bound(1,1+(self.ammount*0.75),16),
	0.1,
	myshotorigin, DEATH_HOLYBOLT, self.ammount4);
	
	if (myrequirementsmet == 0) {
		if (self.realowner.acervilux_spellent == self) {
			self.realowner.acervilux_spellent = world;
		}
		self.effects = 0;
		self.light_lev = 0;
		self.color = '0 0 0';
		self.pflags = 0;
		self.think = CastSpell_Cancellation_remove; //A generic remove
	}

	self.nextthink = time;
}

void CastSpell_acervilux (entity player, float mydmg, float mytime, float mylevel, float isscroll)
{
	local entity e;
	e = spawn();
	e.origin = player.origin;
	
	e.dmg = mydmg;
	e.cnt = time + mytime;
	e.ammount2 = mytime+0.1;
	e.owner = player;
	e.realowner = player;
	e.ammount = mylevel; //sets the radius etc
	e.ammount4 = isscroll;

	e.think = CastSpell_acervilux_think;
	e.nextthink = time;
	
	player.acervilux_spellent = e;
}
///////////////////////////////////
void CastSpell_EndOtherBeamSpells (entity caster, string myspellname) {
	entity myolderself;
	if (myspellname != "inferno") {
	if (caster.inferno_spellent) {
		myolderself = self;
		self = caster.inferno_spellent;
		caster.inferno_spellent.cnt = 0;
		caster.inferno_spellent = world;
		CastSpell_inferno_think();
		self.think();
		
		self = myolderself;
	}
	}
	
	if (myspellname != "acervilux") {
	if (caster.acervilux_spellent) {
		myolderself = self;
		self = caster.acervilux_spellent;
		caster.acervilux_spellent.cnt = 0;
		caster.acervilux_spellent = world;
		CastSpell_acervilux_think();
		self.think();
		
		self = myolderself;
	}
	}
	
	if (myspellname != "rosa") {
	if (caster.rosa_spellent) {
		myolderself = self;
		self = caster.rosa_spellent;
		caster.rosa_spellent.cnt = 0;
		caster.rosa_spellent = world;
		CastSpell_rosa_think();
		self.think();
		
		self = myolderself;
	}
	}
	
	if (myspellname != "corvuspenna") {
	if (caster.corvuspenna_spellent) {
		myolderself = self;
		self = caster.corvuspenna_spellent;
		caster.corvuspenna_spellent.cnt = 0;
		caster.corvuspenna_spellent = world;
		CastSpell_corvuspenna_think();
		self.think();
		
		self = myolderself;
	}
	}
	
}
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////



///////////////////////////////////
///////////////////////////////////
float CastSpell_BallLightining_AttackAround()
{
	local float mylevel, isscroll, mymaxattacks;
	local entity caster;
	caster = self.realowner;
	mylevel = self.ammount3;
	isscroll = self.ammount4;
	
	if (mylevel >= 75) {
		mymaxattacks = 1+(mylevel*100);
	} else if (mylevel >= 50) {
		mymaxattacks = 1+(mylevel*40);
	} else if (mylevel >= 30) {
		mymaxattacks = 1+(mylevel*20);
	} else if (mylevel >= 25) {
		mymaxattacks = 1+(mylevel*15);
	} else if (mylevel >= 20) {
		mymaxattacks = 1+(mylevel*10);
	} else if (mylevel >= 19) {
		mymaxattacks = 1+(mylevel*9);
	} else if (mylevel >= 18) {
		mymaxattacks = 1+(mylevel*8);
	} else if (mylevel >= 17) {
		mymaxattacks = 1+(mylevel*7);
	} else if (mylevel >= 16) {
		mymaxattacks = 1+(mylevel*6);
	} else if (mylevel >= 15) {
		mymaxattacks = 1+(mylevel*5);
	} else if (mylevel >= 10) {
		mymaxattacks = 1+(mylevel*4);
	} else if (mylevel >= 5) {
		mymaxattacks = 1+(mylevel*3);
	} else if (mylevel >= 2) {
		mymaxattacks = 1+(mylevel*2);
	} else {
		mymaxattacks = 1+mylevel;
	}
					
	pointparticles(particleeffectnum("electro_muzzleflash"), self.origin, '0 0 0', 1);
				
				
	local entity myeburnttarg;
	myeburnttarg = findradius(self.origin, self.ammount2);
	while(myeburnttarg)
	{
		//print("here", ftos(self.amnt)," ", etos(caster),"\n");		
		//////////
		if(myeburnttarg != world) {
		if((self.amnt == 2) || (myeburnttarg != caster)) {
		if(myeburnttarg != self) {
		if(self.cnt < mymaxattacks) {
		if((myeburnttarg.flags & FL_MONSTER) || (myeburnttarg.flags & FL_CLIENT))
		{
			//print(etos(myeburnttarg), "...\n"); 
				
			traceline(self.origin, myeburnttarg.origin, MOVE_NORMAL, self);
			
			if(self.amnt == 2 || myeburnttarg == trace_ent) {
				//Make sure we can "see" enemy ent
				te_csqc_lightningarc(self.origin,myeburnttarg.origin);
						
				pointparticles(particleeffectnum("electro_muzzleflash"), myeburnttarg.origin, '0 0 0', 1);
				spamsound (myeburnttarg, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);

										
				
				if (self.amnt == 2) {
					if (myeburnttarg == caster) {
						//Do nothing
					} else {
						IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
						spell_lightiningwall,
						exp_spell_lightiningwall,
						1, myeburnttarg);
					}
				} else if (self.amnt == 1) {
					IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
					spell_lightiningburst,
					exp_spell_lightiningburst,
					1, myeburnttarg);
				} else {	
					IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
					spell_balllightining,
					exp_spell_balllightining,
					1, myeburnttarg); 
				}
					
					
					
						
				spamsound (self, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);
					
									
					Damage (myeburnttarg, caster, caster,
					36 + mylevel, WEP_LIGHTNINGGUN, myeburnttarg.origin,
					'0 0 0');
				
				self.cnt = self.cnt + 1;
			}
		
		}
		}
		}
		}
		}
		//////////
					
	myeburnttarg = myeburnttarg.chain;
	}
	
	if(self.cnt < mymaxattacks) {
		return FALSE;
	} else {
		//We should xplode
		return TRUE;
	}
}


void CastSpell_BallLightining_TouchWall (void)
{
	CastSpell_BallLightining_AttackAround();
	W_Plasma_TriggerCombo(self.origin, autocvar_g_balance_electro_primary_comboradius, self.realowner);
	Chemical_flash_maybe(self);
	
}	


void CastSpell_BallLightining_Explode (void)
{
	self.light_lev = 0;
	self.color = '0 0 0';
	self.pflags = 0;
	
	if (self.amnt == 2) {
		CastSpell_BallLightining_AttackAround();
	} else {
		CastSpell_BallLightining_AttackAround();
		CastSpell_BallLightining_AttackAround();
		CastSpell_BallLightining_AttackAround();
	}
	
	W_Plasma_TriggerCombo(self.origin, autocvar_g_balance_electro_primary_comboradius, self.realowner);
	Chemical_flash_maybe(self);
	remove (self);
}

void CastSpell_BallLightining_Attack_Think()
{
	local vector myrandorigin;
	if(time > self.pushltime)
	{
		self.cnt = 1;
		self.projectiledeathtype |= HITTYPE_SPLASH;
		CastSpell_BallLightining_Explode();
		return;
	}

	if (CastSpell_BallLightining_AttackAround()) {
		//print("xplode due to exaustion\n");
		CastSpell_BallLightining_Explode();
	} else {
	
		if (self.amnt == 2) {
			local entity myeburnttarg;
			myeburnttarg = findradius(self.origin, 132);
			while(myeburnttarg)
			{
					
				//////////
				if(myeburnttarg != world) {
				if(myeburnttarg != self.realowner) {
				if(myeburnttarg != self) {
				if(myeburnttarg.classname == "lightiningwall") {
					te_csqc_lightningarc(self.origin,myeburnttarg.origin);
				}
				}
				}
				}
				//////////
					
			myeburnttarg = myeburnttarg.chain;
			}
		}
		
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
		
		myrandorigin = myrandorigin + self.origin;
			
		te_csqc_lightningarc(self.origin,myrandorigin);
	
	
	
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
	
		myrandorigin = myrandorigin + self.origin;
	
		te_csqc_lightningarc(self.origin,myrandorigin);
	
	
	
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
	
		myrandorigin = myrandorigin + self.origin;
	
		te_csqc_lightningarc(self.origin,myrandorigin);
	
	
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
	
		myrandorigin = myrandorigin + self.origin;
	
		te_csqc_lightningarc(self.origin,myrandorigin);
	
		if (self.amnt == 2) {
			self.nextthink = time + 0.125 + (random()*0.75);
		} else {
			self.nextthink = time + 0.1;
		}
	}
}

void CastSpell_BallLightining_TouchExplode (void)
{
	PROJECTILE_TOUCH;
	if (time >= self.ammount) {
		//print(etos(other), "_touch\n");
		if (self.amnt == 2) {
			CastSpell_BallLightining_TouchWall();
		} else {
			CastSpell_BallLightining_Explode();
		}
	}
}

void CastSpell_BallLightining_Attack(vector myshotorg, vector myshotdir, float myshotspeed, float myshotspread, entity myplayer, float mylevel, float isscroll, float mywaittime, float myspellis)
{
	entity proj;

	W_SetupShot_ProjectileSize (myplayer, '-16 -16 -16', '16 16 16', FALSE, 2, "", CH_WEAPON_A, 36 + mylevel);

	proj = spawn ();
	if (myspellis == 2) {
		proj.classname = "lightiningwall";
	} else {
		proj.classname = "balllightining";
	}
	proj.owner = proj.realowner = myplayer;
	proj.bot_dodge = TRUE;
	proj.bot_dodgerating = 36 + mylevel;
	proj.ammount = mywaittime;
	proj.ammount3 = mylevel;
	if (myspellis == 2) {
		proj.ammount2 = 64;
	} else {
		proj.ammount2 = bound(64, 64+(mylevel*16), 512);
	}
	proj.ammount4 = isscroll;
	proj.amnt = myspellis; //0 balllightining, 1 lightiningburst, 2 lightiningwall
	if (mylevel >= 10) {
		proj.pushltime = time + bound(4, 4+mylevel, 20);
	} else if (mylevel >= 4) {
		proj.pushltime = time + bound(4, 4+mylevel, 10);
	} else if (mylevel >= 3) {
		proj.pushltime = time + bound(2, 2+mylevel, 10);
	} else {
		proj.pushltime = time + bound(1, 1+mylevel, 10);
	}
	proj.use = CastSpell_BallLightining_Explode;
	proj.think = CastSpell_BallLightining_Attack_Think;
	proj.nextthink = time;
	proj.team = myplayer.team;
	PROJECTILE_MAKETRIGGER(proj);
	proj.projectiledeathtype = WEP_LIGHTNINGGUN;
	setorigin(proj, myshotorg);

	proj.movetype = MOVETYPE_FLY;
	//W_SETUPPROJECTILEVELOCITY(proj, g_balance_fireball_primary);
	W_SetupProjectileVelocityEx(proj, myshotdir, v_up, myshotspeed, 0, 0, myshotspread, 0);
	proj.angles = vectoangles(proj.velocity);
	proj.touch = CastSpell_BallLightining_TouchExplode;
	setsize(proj, '-16 -16 -16', '16 16 16');
	proj.flags = FL_PROJECTILE;
    proj.missile_flags = MIF_SPLASH | MIF_PROXY;
    
	
	if (myspellis == 2) {
		proj.pflags = PFLAGS_FULLDYNAMIC;
		proj.light_lev = 135;
		proj.color = '1 1 1';
	} else {		
		proj.pflags = PFLAGS_FULLDYNAMIC;
		proj.light_lev = 200;
		proj.color = '1 1 1';
	}
    
	//No CSQCProjectile

	other = proj; MUTATOR_CALLHOOK(EditProjectile);
}
///////////////////////////////////
///////////////////////////////////




///////////////////////////////////
///////////////////////////////////
float CastSpell_ChargedBolt_AttackAround()
{
	local float mylevel, isscroll, mymaxattacks;
	local entity caster;
	caster = self.realowner;
	mylevel = self.ammount3;
	isscroll = self.ammount4;
	

	mymaxattacks = bound(1, floor(mylevel*0.5), 10);
	
					
	pointparticles(particleeffectnum("electro_muzzleflash"), self.origin, '0 0 0', 1);
				
				
	local entity myeburnttarg;
	myeburnttarg = findradius(self.origin, self.ammount2);
	while(myeburnttarg)
	{
					
		//////////
		if(myeburnttarg != world) {
		if(myeburnttarg != caster) {
		if(myeburnttarg != self) {
		if(self.cnt < mymaxattacks) {
		if((myeburnttarg.flags & FL_MONSTER) || (myeburnttarg.flags & FL_CLIENT))
		{
			//print(myeburnttarg.classname, "...", ftos(mycurrenttargs),"\n"); 
				
			traceline(self.origin, myeburnttarg.origin, MOVE_NORMAL, self);
			
			if(myeburnttarg == trace_ent) {
				//Make sure we can "see" enemy ent
				te_csqc_lightningarc(self.origin,myeburnttarg.origin);
						
				pointparticles(particleeffectnum("electro_muzzleflash"), myeburnttarg.origin, '0 0 0', 1);
				spamsound (myeburnttarg, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);

										
					
				IncreaseSpellExpAndMaybeLVL(isscroll,
				caster,
				spell_chargedbolt,
				exp_spell_chargedbolt,
				1, myeburnttarg); 
					
					
					
						
				spamsound (self, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);
												
				Damage (myeburnttarg, caster, caster,
				floor(1+(random()*15)), WEP_LIGHTNINGGUN, myeburnttarg.origin,
				'0 0 0');
				
				self.cnt = self.cnt + 1;
			}
		
		}
		}
		}
		}
		}
		//////////
					
	myeburnttarg = myeburnttarg.chain;
	}
	
	if(self.cnt < mymaxattacks) {
		return FALSE;
	} else {
		//We should xplode
		return TRUE;
	}
}	


void CastSpell_ChargedBolt_Explode (void)
{
	self.light_lev = 0;
	self.color = '0 0 0';
	self.pflags = 0;
	
	CastSpell_ChargedBolt_AttackAround();
	W_Plasma_TriggerCombo(self.origin, autocvar_g_balance_electro_primary_comboradius, self.realowner);
	Chemical_flash_maybe(self);
	remove (self);
}

void CastSpell_ChargedBolt_Attack_Think()
{
	local vector myrandorigin;
	if(time > self.pushltime)
	{
		self.cnt = 1;
		self.projectiledeathtype |= HITTYPE_SPLASH;
		CastSpell_ChargedBolt_Explode();
		return;
	}
	
	local vector myrandvec;
	
	//////////////////
	//Erratic movement
	myrandvec = randomvec();
	myrandvec_z = 0;
	myrandvec_x = myrandvec_x * 100;
	myrandvec_y = myrandvec_y * 100;
	self.velocity = self.velocity + myrandvec;
	//Erratic movement
	//////////////////
	
	if (CastSpell_ChargedBolt_AttackAround()) {
		//print("xplode due to exaustion\n");
		CastSpell_ChargedBolt_Explode();
	} else {
	
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
		
		myrandorigin = myrandorigin + self.origin;
			
		te_csqc_lightningarc(self.origin,myrandorigin);
	
	
	
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
	
		myrandorigin = myrandorigin + self.origin;
	
		te_csqc_lightningarc(self.origin,myrandorigin);
	
	
	
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
	
		myrandorigin = myrandorigin + self.origin;
	
		te_csqc_lightningarc(self.origin,myrandorigin);
	
	
		myrandorigin = randomvec();
		myrandorigin_x = myrandorigin_x * self.ammount2;
		myrandorigin_y = myrandorigin_y * self.ammount2;
		myrandorigin_z = myrandorigin_z * self.ammount2;
	
		myrandorigin = myrandorigin + self.origin;
	
		te_csqc_lightningarc(self.origin,myrandorigin);
	
		self.nextthink = time + 0.1 + (random()*0.15); //~Doubled from ball lightining
	}
}

void CastSpell_ChargedBolt_TouchExplode (void)
{
	PROJECTILE_TOUCH;
	if (time >= self.ammount) {
		//print(etos(other), "_touch\n");
		CastSpell_ChargedBolt_Explode();
	}
}

void CastSpell_ChargedBolt_Attack(vector myshotorg, vector myshotdir, float myshotspeed, float myshotspread, entity myplayer, float mylevel, float isscroll, float mywaittime)
{
	entity proj;

	W_SetupShot_ProjectileSize (myplayer, '-16 -16 -16', '16 16 16', FALSE, 2, "", CH_WEAPON_A, 10);

	proj = spawn ();
	proj.classname = "myradius";
	proj.owner = proj.realowner = myplayer;
	proj.bot_dodge = TRUE;
	proj.bot_dodgerating = 10;
	proj.ammount = mywaittime;
	proj.ammount3 = mylevel;
	proj.ammount2 = 64; //radius
	proj.ammount4 = isscroll;
	if (mylevel >= 10) {
		proj.pushltime = time + bound(4, 4+mylevel, 20);
	} else if (mylevel >= 4) {
		proj.pushltime = time + bound(4, 4+mylevel, 10);
	} else if (mylevel >= 3) {
		proj.pushltime = time + bound(2, 2+mylevel, 10);
	} else {
		proj.pushltime = time + bound(1, 1+mylevel, 10);
	}
	proj.use = CastSpell_ChargedBolt_Explode;
	proj.think = CastSpell_ChargedBolt_Attack_Think;
	proj.nextthink = time;
	proj.team = myplayer.team;
	PROJECTILE_MAKETRIGGER(proj);
	proj.projectiledeathtype = WEP_LIGHTNINGGUN;
	setorigin(proj, myshotorg);

	proj.movetype = MOVETYPE_FLY;
	//W_SETUPPROJECTILEVELOCITY(proj, g_balance_fireball_primary);
	W_SetupProjectileVelocityEx(proj, myshotdir, v_up, myshotspeed, 0, 0, myshotspread, 0);
	proj.angles = vectoangles(proj.velocity);
	proj.touch = CastSpell_ChargedBolt_TouchExplode;
	setsize(proj, '-16 -16 -16', '16 16 16');
	proj.flags = FL_PROJECTILE;
    proj.missile_flags = MIF_SPLASH | MIF_PROXY;
    
			
	proj.pflags = PFLAGS_FULLDYNAMIC;
	proj.light_lev = 125;
	proj.color = '1 1 1';
    
	//No CSQCProjectile

	other = proj; MUTATOR_CALLHOOK(EditProjectile);
}
///////////////////////////////////
///////////////////////////////////


///////////////////////////////////
///////////////////////////////////
void CastSpell_HolyLight_Fade()
{
	self.think = CastSpell_HolyLight_Fade;
	self.nextthink = time;
	
	if (self.light_lev < 100) {
		self.effects = 0;
	}
	
	if (self.light_lev < 10) {
		self.light_lev = 0;
		self.color = '0 0 0';
		self.pflags = 0;
		self.effects = 0;
		if(self.realowner.holylightspellent == self) {
			self.realowner.holylightspellent = world;
		}
		remove(self);
	} else {
		self.light_lev = self.light_lev * (0.9 + (bound(0,self.ammount2*0.005,0.09)));
	}
}

void CastSpell_HolyLight_Think()
{
	local float myshouldcontinue;
	myshouldcontinue = 0;
	if(!self.realowner.frozen)
	if(!self.realowner.freezetag_frozen)
	if(!self.realowner.stoned)
	if(self.realowner.deadflag == DEAD_NO)
	if(self.realowner.health > 0)
	{
		myshouldcontinue = 1;
	}
	
	////////////////////////////////////////////////////////
	
	if (self.realowner.holylightspellent != self) {
		//Abandoned (somehow...)
		myshouldcontinue = 0;
	}
	
	if (myshouldcontinue) {
		//Good
	} else {
		if (self.realowner.holylightspellent == self) {
			self.realowner.holylightspellent = world;
		}
		self.realowner = world;
	}
	
	////////////////////////////////////////////////////////
	
	if (time > self.ammount3) {
		self.think = CastSpell_HolyLight_Fade;
	} else if ((self.realowner == world) || !self.realowner) {
		self.think = CastSpell_HolyLight_Fade;
	} else {
		traceline(self.realowner.origin, self.realowner.origin + '0 0 72', MOVE_NORMAL, self);
		traceline(trace_endpos, trace_endpos - '0 0 8', MOVE_NORMAL, self);
		self.origin = trace_endpos;
		setorigin(self, self.origin);
		self.think = CastSpell_HolyLight_Think;
	}
	self.nextthink = time;
}


void CastSpell_HolyLight_InitThink()
{
	self.pflags = PFLAGS_FULLDYNAMIC;
	self.light_lev = bound(150, (self.ammount2*50), 1000);
	self.color = '1 1 1';
	//self.effects = EF_BRIGHTFIELD | EF_BRIGHTLIGHT;
	//self.effects = EF_BRIGHTFIELD; //BlueOrb
	//self.effects = EF_BRIGHTLIGHT; //SeeminglyNothing
	//self.effects = EF_MUZZLEFLASH;
	self.effects = EF_BRIGHTFIELD | EF_BRIGHTLIGHT | EF_MUZZLEFLASH;
	
	self.think = CastSpell_HolyLight_Think;
	self.nextthink = time;
}
///////////////////////////////////


///////////////////////////////////

void CastSpell_FuncRain_MinderThink()
{
	if (self.subordinate5) {
		if (self.subordinate5 != world) {
			local entity e;
			e = self.subordinate5;
			remove(e);
			existantfuncrainsnow = existantfuncrainsnow - 1;
			if (existantfuncrainsnow < 0) {
				existantfuncrainsnow = 0;
			}
		}
	}
	
	print ("removing spell summoned rain or snow\n");
	
	remove(self);
}

void CastSpell_FuncRain(entity caster, entity e, float mylevel, float isscroll, float myisrain, float myraincount, float myraintime, float myrainsize)
{
						entity myfuncrain;
						entity myoldself;
						entity myfuncrainminder;
						local vector myorigin;
						myfuncrainminder = spawn();
						myfuncrain = spawn();
						
						
						//makevectors(e.v_angle);
						myfuncrain.absmax_z = e.origin_z;
						
						myorigin = e.origin;
						myorigin_z = myorigin_z - 1;
						
						traceline(myorigin, myorigin + ('1 0 0' * myrainsize), MOVE_WORLDONLY, world);
						myfuncrain.absmax_x = trace_endpos_x;
						
						traceline(myorigin, myorigin - ('1 0 0' * myrainsize), MOVE_WORLDONLY, world);
						myfuncrain.absmin_x = trace_endpos_x;
						
						traceline(myorigin, myorigin + ('0 1 0' * myrainsize), MOVE_WORLDONLY, world);
						myfuncrain.absmax_y = trace_endpos_y;
						
						traceline(myorigin, myorigin - ('0 1 0' * myrainsize), MOVE_WORLDONLY, world);
						myfuncrain.absmin_y = trace_endpos_y;
						
						traceline(e.origin, e.origin - ('0 0 1' * 256), MOVE_WORLDONLY, world);
						myfuncrain.absmin_z = trace_endpos_z;
						
						myfuncrain.subordinate4 = caster;
						myfuncrain.count = myraincount;
						
						myfuncrain.ammount3 = mylevel;
						myfuncrain.ammount4 = isscroll;
						
						myoldself = self;
						
						self = myfuncrain;
						
						self.origin = ((self.absmax+self.absmin)*.5);
						local vector mymins;
						local vector mymaxs;
						
						mymins_x = self.absmin_x - self.origin_x;
						mymins_y = self.absmin_y - self.origin_y;
						mymins_z = self.absmin_z - self.origin_z;
						
						mymaxs_x = self.absmax_x - self.origin_x;
						mymaxs_y = self.absmax_y - self.origin_y;
						mymaxs_z = self.absmax_z - self.origin_z;
						
						//print(vtos(mymins)," ",vtos(mymins), "My min-maxes before\n");
						
						setorigin(self,self.origin);
						
						
						setsize(self, mymins, mymaxs);
						
						if (myisrain) {
							self.classname = "func_rain";
							spawnfunc_func_rain();
						} else {
							self.classname = "func_snow";
							spawnfunc_func_snow();
						}
						
						//print(ftos(myrainsize), " myrainsize\n");
						//print(vtos(e.origin), " e-origin\n");		
						//print(vtos(self.mins)," ",vtos(self.maxs), "\n");
						//print(vtos(self.absmin),":",vtos(self.absmax), "\n");
						
						//print(vtos(self.size)," mysize\n");	
						self = myoldself;
						
						myfuncrainminder.subordinate5 = myfuncrain;
						myfuncrainminder.think = CastSpell_FuncRain_MinderThink;
						myfuncrainminder.nextthink = time + myraintime;

}


///////////////////////////////////
///////////////////////////////////

///////////////////////////////////
///////////////////////////////////
void CastSpell_Rosa_Petal_Explode (void)
{
	local float cleanmultip;
	local float myrosepetalcasing;
	local float myroseburndmg;
	local float myroseburntime;
	local vector myrosevelocityforce;
	
	myrosepetalcasing = 0;
	
	self.event_damage = func_null;
	self.takedamage = DAMAGE_NO;
	
	if (other != world) {
	  if (self.amnt == 1) {
	  	//Pink
		other.smell_roses = other.smell_roses + 0.03;
	  } else if (self.amnt == 2) {
	  	//White
		other.smell_roses = other.smell_roses + 0.01;
	  } else if (self.amnt == 3) { 
	  	//Black
		
		myroseburntime = 2 + (self.owner.ammount * 1.2);
		myroseburndmg = 10 + (self.owner.ammount * 10);
		self.projectiledeathtype = DEATH_FIRE;
		
		if (other == self.realowner) {
			//Do nothing
		} else if (other.takedamage == DAMAGE_AIM
		&& !other.accptcrssbwstklkbld)
		{
				Fire_AddDamage(other, self.realowner, myroseburndmg * myroseburntime, myroseburntime, self.projectiledeathtype);
				myrosepetalcasing = -1;
		} else if (other.classname == "tree" || other.classname == "bush"
		|| isPlayerOrMonsterByClassname(other)) {
			//Fallback
			Fire_AddDamage(other, self.realowner, myroseburndmg * myroseburntime, myroseburntime, self.projectiledeathtype);
			myrosepetalcasing = -1;
		} else if (other.classname == "building" && other.multitool_hitbox != world) {
				if ((random() > 0.5) && multitool_iswooden(other.multitool_hitbox.count)) {
					Fire_AddDamage(other.multitool_hitbox, self.realowner, myroseburndmg * myroseburntime, myroseburntime, DEATH_FIRE);
					myrosepetalcasing = -1;
				}
		} else if (other.accptcrssbwstklkbld) {
			if (other.multitool_doorframeent && other.multitool_doorframeent.multitool_hitbox != world) {
				if ((random() > 0.5) && multitool_iswooden(other.multitool_doorframeent.multitool_hitbox.count)) {
					Fire_AddDamage(other.multitool_doorframeent.multitool_hitbox, self.realowner, myroseburndmg * myroseburntime, myroseburntime, DEATH_FIRE);
					myrosepetalcasing = -1;
				}
			}
		}
		//print("Fire\n");
	  } else if (self.amnt == 4) { 
	  	//Black but no flame (not underground)
	  } else {
	  	//Red
		other.smell_roses = other.smell_roses + 0.02;
	  }
	  
	  
	  myrosevelocityforce = self.velocity;
	  if (other == self.realowner) {
	  	myrosevelocityforce_x = myrosevelocityforce_x * 0.01;
	  	myrosevelocityforce_y = myrosevelocityforce_y * 0.01;
	  	myrosevelocityforce_z = myrosevelocityforce_z * 0.01;
	  }
	  
	  Damage (other, self.realowner, self.realowner, 0, self.projectiledeathtype, self.origin, myrosevelocityforce);

			IncreaseSpellExpAndMaybeLVL(self.owner.ammount4,
				self.realowner,
				spell_rosa,
				exp_spell_rosa,
				1, other); 	
	}
	
	
	if (myrosepetalcasing == -1) {
		//do nothing
	} else if (autocvar_g_casings >= 2) {
		if (self.amnt == 1) {
	  		myrosepetalcasing = 65; //Pink
	  	} else if (self.amnt == 2) {
	  		myrosepetalcasing = 66; //White
	  	} else if (self.amnt == 3 || self.amnt == 4) { 
			myrosepetalcasing = 67; //Black
	  	} else { 
			myrosepetalcasing = 64; //Red
		}
		SpawnCasing (((random () * 50 + 50) * v_right) - (v_forward * (random () * 25 + 25)) - (0 * v_up), 2, vectoangles(v_forward),'0 250 0', 100, myrosepetalcasing, self);
	}
	
	remove (self);
}

void CastSpell_Rosa_Petal_TouchExplode (void)
{
	if (other != world && other.classname == "rosepetal" && other.realowner == self.realowner) {
		//Do nothing
	} else {
	PROJECTILE_TOUCH;
	CastSpell_Rosa_Petal_Explode ();
	}
}

void CastSpell_Rosa_Petal_Damage (entity inflictor, entity attacker, float damage, float deathtype, vector hitloc, vector force)
{
	if (autocvar_g_casings >= 2) {
	if (random() >= 0.75) {
		local float myrosepetalcasing;
		if (self.amnt == 1) {
	  		myrosepetalcasing = 65; //Pink
	  	} else if (self.amnt == 2) {
	  		myrosepetalcasing = 66; //White
	  	} else if (self.amnt == 3 || self.amnt == 4) { 
			myrosepetalcasing = 67; //Black
	  	} else { 
			myrosepetalcasing = 64; //Red
		}
		SpawnCasing (((random () * 50 + 50) * v_right) - (v_forward * (random () * 25 + 25)) - (0 * v_up), 2, vectoangles(v_forward),'0 250 0', 100, myrosepetalcasing, self);
	}
	}
	remove (self);
}


void CastSpell_Rosa_Petal_attack(vector myshotorigin, entity spigot, float myspeed, float mydelugetype)
{
	vector v;
	
	v = myshotorigin;
	
	entity proj;

	W_SetupShot_ProjectileSize (self, '-1 -1 -1', '1 1 1', FALSE, 2, "", CH_WEAPON_A, 0);

	w_shotdir = v_forward; // no TrueAim for grenades please
	
	//pointparticles(particleeffectnum("deluge_muzzleflash"), v, w_shotdir * 1000, 1);

	proj = spawn ();
	proj.amnt = mydelugetype;
	proj.classname = "rosepetal";
	//proj.owner = proj.realowner = self;
	proj.owner = spigot;
	proj.realowner = self.realowner;
	proj.use = CastSpell_Rosa_Petal_Explode;
	proj.think = adaptor_think2use_hittype_splash;
	proj.bot_dodge = TRUE;
	proj.bot_dodgerating = autocvar_g_vehicle_mg_deluge_machinegun_damage;
	proj.nextthink = time + 10;
	PROJECTILE_MAKETRIGGER(proj);
	proj.projectiledeathtype = DEATH_DROWN;
	setorigin(proj, v);

	//proj.glow_size = 50;
	//proj.glow_color = 45;
	proj.movetype = MOVETYPE_FLYMISSILE;

	W_SetupProjectileVelocityEx(proj, w_shotdir, v_up, myspeed, 0, 0, 0.05, FALSE);
	
	proj.touch = CastSpell_Rosa_Petal_TouchExplode;
	setsize(proj, '-1 -1 -1', '1 1 1');
	proj.takedamage = DAMAGE_YES;
	proj.damageforcescale = autocvar_g_balance_electro_secondary_damageforcescale;
	proj.health = autocvar_g_balance_electro_secondary_health;
	proj.event_damage = CastSpell_Rosa_Petal_Damage;
	proj.flags = FL_PROJECTILE;
	proj.damagedbycontents = 1;

	//proj.bouncefactor = autocvar_g_balance_electro_secondary_bouncefactor;
	//proj.bouncestop = autocvar_g_balance_electro_secondary_bouncestop;
	//proj.missile_flags = MIF_SPLASH | MIF_ARC;

	
	if (mydelugetype == 1) {
		CSQCProjectile(proj, TRUE, PROJECTILE_ROSEPETALPINK, FALSE); // no culling, it has sound
	} else if (mydelugetype == 2) {
		CSQCProjectile(proj, TRUE, PROJECTILE_ROSEPETALWHITE, FALSE); // no culling, it has sound
	} else if (mydelugetype == 3 || mydelugetype == 4) {
		CSQCProjectile(proj, TRUE, PROJECTILE_ROSEPETALBLACK, FALSE); // no culling, it has sound
	} else {
		CSQCProjectile(proj, TRUE, PROJECTILE_ROSEPETALRED, FALSE); // no culling, it has sound
	}

	other = proj; MUTATOR_CALLHOOK(EditProjectile);
}



///////////////////////////////////
void CastSpell_rosa_think (void) {
	local float myrequirementsmet;
	local vector myshotorigin;
	myrequirementsmet = 0;
	
	self.think = CastSpell_rosa_think;
	self.origin = self.realowner.origin;
	
	if(!self.realowner.frozen)
	if(!self.realowner.freezetag_frozen)
	if(!self.realowner.stoned)
	if(self.realowner.deadflag == DEAD_NO)
	if(self.realowner.health > 0) {
		myrequirementsmet = 1;
	}
	
	if (time > self.cnt) {
		myrequirementsmet = 0;
	}
	
	myshotorigin = self.origin;
	
	if (self.realowner.view_ofs_z > 0) {
		myshotorigin_z = myshotorigin_z + (self.realowner.view_ofs_z * 0.5);
	}
	
	if (myrequirementsmet) {
		local vector myorigshotorigin;
		local vector oldvf, oldvr, oldvu;
		oldvf = v_forward;
		oldvr = v_right;
		oldvu = v_up;
	
		makevectors(self.realowner.v_angle);
		
		myorigshotorigin = myshotorigin;
		//128 works, 64 works, 48 works
		traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
		myshotorigin = trace_endpos;
		
		self.velocity = self.realowner.velocity;
		self.origin = myshotorigin; //so we don't do shadows, since we're using self as a light...
		
		//traceline(myshotorigin, myshotorigin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, self.realowner);
		
		if (time > self.ammount3) {
			CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			
			if (self.ammount >= 9) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (5 + (random()*4)));
				myshotorigin = myshotorigin + (v_up * (3 + (random()*2)));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 12) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * ((5 + (random()*4)) * -1));
				myshotorigin = myshotorigin + (v_up * ((2 + (random()*3)) * -1));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 15) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * ((2 + (random()*1)) * -1));
				myshotorigin = myshotorigin + (v_up * (5 + (random()*4)));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 18) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 10));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 10));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 20) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 16));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 16));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 22) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 20));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 20));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 25) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 24));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 24));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 28) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 26));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 26));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 30) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 30));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 30));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 32) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 32));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 32));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 35) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 36));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 36));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 38) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 38));
				myshotorigin = myshotorigin + (v_up *  (((random() * 2) - 1) * 38));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 40) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 42));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 42));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 42) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 46));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 46));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			if (self.ammount >= 45) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 52));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 52));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			
			if (self.ammount >= 48) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 62));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 62));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			
			if (self.ammount >= 50) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 64));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 64));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_Rosa_Petal_attack(myshotorigin, self, 300, self.ammount5);
			}
			
			
			
			if (self.ammount <= 0) {
				self.ammount3 = time + 0.6;
			} else if (self.ammount == 1) {
				self.ammount3 = time + 0.5;
			} else if (self.ammount == 2) {
				self.ammount3 = time + 0.4;
			} else if (self.ammount == 3) {
				self.ammount3 = time + 0.3;
			} else if (self.ammount == 4) {
				self.ammount3 = time + 0.2;
			} else if (self.ammount >= 10) {
				self.ammount3 = time + 0.05;
			} else if (self.ammount >= 15) {
				self.ammount3 = time + 0.0333;
			} else if (self.ammount >= 20) {
				self.ammount3 = time + 0.025;
			} else if (self.ammount >= 25) {
				self.ammount3 = time + 0.02;
			} else if (self.ammount >= 30) {
				self.ammount3 = time + 0.0125;
			} else if (self.ammount >= 35) {
				self.ammount3 = time + 0.01;
			} else if (self.ammount >= 50) {
				self.ammount3 = time + 0.0075;
			} else if (self.ammount >= 70) {
				self.ammount3 = time + 0.005;
			} else if (self.ammount >= 80) {
				self.ammount3 = time + 0.003;
			} else if (self.ammount >= 90) {
				self.ammount3 = time + 0.002;
			} else if (self.ammount >= 100) {
				self.ammount3 = time + 0.001;
			} else {
				self.ammount3 = time + 0.1;
			}
		}
		self.velocity = '0 0 0';

		v_forward = oldvf;
		v_right = oldvr;
		v_up = oldvu;
	}
	
	if (myrequirementsmet == 0) {
		if (self.realowner.rosa_spellent == self) {
			self.realowner.rosa_spellent = world;
		}
		self.effects = 0;
		self.light_lev = 0;
		self.color = '0 0 0';
		self.pflags = 0;
		self.think = CastSpell_Cancellation_remove; //A generic remove
	}

	self.nextthink = time;
}

void CastSpell_rosa (entity player, float mytime, float mylevel, float isscroll, float myrosetype)
{
	local entity e;
	e = spawn();
	e.origin = player.origin;
	
	if (mytime < 1) {
		mytime = 1;
	}
	e.cnt = time + mytime;
	e.ammount2 = mytime+0.1;
	e.owner = player;
	e.realowner = player;
	e.ammount = mylevel; //sets the radius etc
	if (e.ammount < 1) {
		e.ammount = 1;
	}
	e.ammount4 = isscroll;
	e.ammount5 = myrosetype;
	
	e.nohitplotanalysis = 1;
	e.noaccuracyfrags = 1;

	e.think = CastSpell_rosa_think;
	e.nextthink = time;
	
	player.rosa_spellent = e;
}
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////




void CastSpell_CorvusPenna_Touch1 (void)
{
	if (other != world && other.classname == "feather" && other.realowner == self.realowner) {
		//Do nothing
	} else {
	PROJECTILE_TOUCH;
	W_CrossbowBolt_Touch1();
	}
}

void CastSpell_CorvusPenna_Damage (entity inflictor, entity attacker, float damage, float deathtype, vector hitloc, vector force)
{
	if (autocvar_g_casings >= 2) {
		local float myrosepetalcasing;
		if (self.amnt == 1) {
			//print("Drop white feather\n");
	  		myrosepetalcasing = 69; //White
	  	} else { 
			//print("Drop black feather\n");
			myrosepetalcasing = 68; //Black
		}
		SpawnCasing (((random () * 50 + 50) * v_right) - (v_forward * (random () * 25 + 25)) - (0 * v_up), 2, vectoangles(v_forward),'0 250 0', 100, myrosepetalcasing, self);
	}
	remove (self);
}


void CastSpell_CorvusPenna_attack(vector myshotorigin, entity spigot, float myspeed, float mydelugetype)
{
	vector v;
	
	v = myshotorigin;
	
	entity proj;

	W_SetupShot_ProjectileSize (self, '-1 -1 -1', '1 1 1', FALSE, 2, "", CH_WEAPON_A, 0);

	w_shotdir = v_forward; // no TrueAim for grenades please
	
	//pointparticles(particleeffectnum("deluge_muzzleflash"), v, w_shotdir * 1000, 1);

	proj = spawn ();
	proj.amnt = mydelugetype;
	proj.classname = "feather";
	//proj.owner = proj.realowner = self;
	proj.owner = spigot;
	proj.realowner = self.realowner;
	proj.use = W_CrossbowBolt_Explode;
	proj.think = W_CrossbowBolt_Think1;
	proj.cnt = time + 20;
	proj.bot_dodge = TRUE;
	proj.bot_dodgerating = autocvar_g_vehicle_mg_deluge_machinegun_damage;
	proj.nextthink = time;
	PROJECTILE_MAKETRIGGER(proj);
	proj.projectiledeathtype = DEATH_IMPALE;
	setorigin(proj, v);

	//proj.glow_size = 50;
	//proj.glow_color = 45;
	proj.movetype = MOVETYPE_FLYMISSILE;

	//print(ftos(myspeed), "\n");
	
	W_SetupProjectileVelocityEx(proj, w_shotdir, v_up, myspeed, 0, 0, 0.05, FALSE);
	
	proj.touch = CastSpell_CorvusPenna_Touch1;
	setsize(proj, '-1 -1 -1', '1 1 1');
	proj.takedamage = DAMAGE_YES;
	proj.damageforcescale = autocvar_g_balance_electro_secondary_damageforcescale;
	proj.health = autocvar_g_balance_electro_secondary_health;
	proj.event_damage = CastSpell_CorvusPenna_Damage;
	proj.flags = FL_PROJECTILE;
	proj.damagedbycontents = 1;

	//proj.bouncefactor = autocvar_g_balance_electro_secondary_bouncefactor;
	//proj.bouncestop = autocvar_g_balance_electro_secondary_bouncestop;
	//proj.missile_flags = MIF_SPLASH | MIF_ARC;

	
	
	if (mydelugetype == 1) {
		//White
		proj.ammount = 0.5; //Damage
		proj.amnt = 8;
		CSQCProjectile(proj, TRUE, PROJECTILE_FEATHERWHITE, FALSE); // no culling, it has sound
	} else {
		//Black
		proj.ammount = 2; //Damage
		proj.amnt = 7;
		CSQCProjectile(proj, TRUE, PROJECTILE_FEATHERBLACK, FALSE); // no culling, it has sound
	}

	other = proj; MUTATOR_CALLHOOK(EditProjectile);
}



///////////////////////////////////
void CastSpell_corvuspenna_think (void) {
	local float myrequirementsmet;
	local vector myshotorigin;
	myrequirementsmet = 0;
	
	self.think = CastSpell_corvuspenna_think;
	self.origin = self.realowner.origin;
	
	if(!self.realowner.frozen)
	if(!self.realowner.freezetag_frozen)
	if(!self.realowner.stoned)
	if(self.realowner.deadflag == DEAD_NO)
	if(self.realowner.health > 0) {
		myrequirementsmet = 1;
	}
	
	if (time > self.cnt) {
		myrequirementsmet = 0;
	}
	
	myshotorigin = self.origin;
	
	if (self.realowner.view_ofs_z > 0) {
		myshotorigin_z = myshotorigin_z + (self.realowner.view_ofs_z * 0.5);
	}
	
	if (myrequirementsmet) {
		local vector myorigshotorigin;
		local vector oldvf, oldvr, oldvu;
		oldvf = v_forward;
		oldvr = v_right;
		oldvu = v_up;
	
		makevectors(self.realowner.v_angle);
		
		myorigshotorigin = myshotorigin;
		//128 works, 64 works, 48 works
		traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
		myshotorigin = trace_endpos;
		
		self.velocity = self.realowner.velocity;
		self.origin = myshotorigin; //so we don't do shadows, since we're using self as a light...
		
		//traceline(myshotorigin, myshotorigin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, self.realowner);
		
		if (time > self.ammount3) {
			local float myspellspeed;
			myspellspeed = 300;
			
			if (self.ammount5 == 1) {
				//White feathers
			} else {
				//Black feathers
				if (self.ammount >= 21) {
					myspellspeed = myspellspeed + (self.ammount * 10);
				}
			}
			
			CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			
			if (self.ammount >= 9) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (5 + (random()*4)));
				myshotorigin = myshotorigin + (v_up * (3 + (random()*2)));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 12) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * ((5 + (random()*4)) * -1));
				myshotorigin = myshotorigin + (v_up * ((2 + (random()*3)) * -1));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 15) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * ((2 + (random()*1)) * -1));
				myshotorigin = myshotorigin + (v_up * (5 + (random()*4)));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 18) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 10));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 10));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 20) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 16));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 16));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 22) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 20));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 20));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 25) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 24));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 24));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 28) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 26));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 26));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 30) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 30));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 30));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 32) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 32));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 32));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 35) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 36));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 36));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 38) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 38));
				myshotorigin = myshotorigin + (v_up *  (((random() * 2) - 1) * 38));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 40) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 42));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 42));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 42) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 46));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 46));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			if (self.ammount >= 45) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 52));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 52));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 48) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 62));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 62));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 50) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 64));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 64));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 52) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 66));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 66));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 54) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 68));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 68));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 57) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 70));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 70));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 60) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 72));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 72));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 63) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 74));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 74));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 65) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 76));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 76));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 68) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 78));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 78));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 70) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 80));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 80));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 75) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 82));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 82));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 80) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 84));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 84));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 85) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 86));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 86));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 90) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 88));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 88));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 92) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 90));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 90));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 93) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 92));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 92));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 94) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 94));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 94));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 95) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 96));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 96));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 96) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 98));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 98));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 97) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 100));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 100));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 98) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 102));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 102));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 99) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 104));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 104));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			if (self.ammount >= 100) {
				myshotorigin = myorigshotorigin;
				myshotorigin = myshotorigin + (v_right * (((random() * 2) - 1) * 106));
				myshotorigin = myshotorigin + (v_up * (((random() * 2) - 1) * 106));
				traceline(myshotorigin, myshotorigin + (v_forward * 48), MOVE_NORMAL, self.realowner);
				myshotorigin = trace_endpos;
				
				myshotorigin = trace_endpos;
				CastSpell_CorvusPenna_attack(myshotorigin, self, myspellspeed, self.ammount5);
			}
			
			
			
			
			
			if (self.ammount <= 0) {
				self.ammount3 = time + 0.6;
			} else if (self.ammount == 1) {
				self.ammount3 = time + 0.5;
			} else if (self.ammount == 2) {
				self.ammount3 = time + 0.4;
			} else if (self.ammount == 3) {
				self.ammount3 = time + 0.3;
			} else if (self.ammount == 4) {
				self.ammount3 = time + 0.2;
			} else if (self.ammount >= 10) {
				self.ammount3 = time + 0.05;
			} else if (self.ammount >= 15) {
				self.ammount3 = time + 0.0333;
			} else if (self.ammount >= 20) {
				self.ammount3 = time + 0.025;
			} else if (self.ammount >= 25) {
				self.ammount3 = time + 0.02;
			} else if (self.ammount >= 30) {
				self.ammount3 = time + 0.0125;
			} else if (self.ammount >= 35) {
				self.ammount3 = time + 0.01;
			} else if (self.ammount >= 50) {
				self.ammount3 = time + 0.0075;
			} else if (self.ammount >= 70) {
				self.ammount3 = time + 0.005;
			} else if (self.ammount >= 80) {
				self.ammount3 = time + 0.003;
			} else if (self.ammount >= 90) {
				self.ammount3 = time + 0.002;
			} else if (self.ammount >= 100) {
				self.ammount3 = time + 0.001;
			} else {
				self.ammount3 = time + 0.1;
			}
		}
		self.velocity = '0 0 0';

		v_forward = oldvf;
		v_right = oldvr;
		v_up = oldvu;
	}
	
	if (myrequirementsmet == 0) {
		if (self.realowner.corvuspenna_spellent == self) {
			self.realowner.corvuspenna_spellent = world;
		}
		self.effects = 0;
		self.light_lev = 0;
		self.color = '0 0 0';
		self.pflags = 0;
		self.think = CastSpell_Cancellation_remove; //A generic remove
	}

	self.nextthink = time;
}

void CastSpell_corvuspenna (entity player, float mytime, float mylevel, float isscroll, float myrosetype)
{
	//print(ftos(mylevel),"\n");
	
	local entity e;
	e = spawn();
	e.origin = player.origin;
	
	if (mytime < 1) {
		mytime = 1;
	}
	e.cnt = time + mytime;
	e.ammount2 = mytime+0.1;
	e.owner = player;
	e.realowner = player;
	e.ammount = mylevel; //sets the radius etc
	if (e.ammount < 1) {
		e.ammount = 1;
	}
	e.ammount4 = isscroll;
	e.ammount5 = myrosetype;
	
	e.nohitplotanalysis = 1;
	e.noaccuracyfrags = 1;

	e.think = CastSpell_corvuspenna_think;
	e.nextthink = time;
	
	player.corvuspenna_spellent = e;
}
///////////////////////////////////


///////////////////////////////////
void CastSpell_magmasphere_burnstuff (entity myother, entity caster, float isscroll) 
{
	if (myother == world)
		return;
		
	if (myother == caster)
		return;
		
	if (myother == self)
		return;
	
	//Magmasphere Burns:
			local float myispombcn;
			myispombcn = isPlayerOrMonsterByClassname(myother);
			
			if (myother.classname == "tree" || myother.classname == "bush"
			|| myispombcn) {
				//This is the crossbowbolt type we are
				//print("burn!2222\n");
				if ((Fire_AddDamage(myother, self.realowner, autocvar_g_balance_torch_fire_damage * autocvar_g_balance_torch_fire_burntime, autocvar_g_balance_torch_fire_burntime, self.projectiledeathtype)
				) > 0) {
						if (myispombcn) {
							IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_magmasphere,
							exp_spell_magmasphere,
							1, other);
						} else {
							IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_magmasphere,
							exp_spell_magmasphere,
							0.1, other);
						}
					}
			} else {
				//Ballista bolt, burns things often
				if (myother.classname == "building" && myother.multitool_hitbox != world) {
						if ((Fire_AddDamage(myother.multitool_hitbox, self.realowner, autocvar_g_balance_torch_fire_damage * autocvar_g_balance_torch_fire_burntime, autocvar_g_balance_torch_fire_burntime, DEATH_FIRE)
						) > 0) {
							IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_magmasphere,
							exp_spell_magmasphere,
							1, other);
						}
				}
				else if (myother.accptcrssbwstklkbld) {
				if (myother.multitool_doorframeent && myother.multitool_doorframeent.multitool_hitbox != world) {
						if ((Fire_AddDamage(myother.multitool_doorframeent.multitool_hitbox, self.realowner, autocvar_g_balance_torch_fire_damage * autocvar_g_balance_torch_fire_burntime, autocvar_g_balance_torch_fire_burntime, DEATH_FIRE)
						) > 0) {
							IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_magmasphere,
							exp_spell_magmasphere,
							0.25, other);
						}
				}
				}
			}	
}

void CastSpell_magmasphere_touch (void) {
	if (other == world)
		return;
	
	//print("touched\n");
	
	if (other.velocity_x
	|| other.velocity_y
	|| other.velocity_z) {
		//print("velocity\n");
		self.velocity = self.velocity + (other.velocity*0.01); //Push me
		////self.avelocity = self.velocity; //doesn't work
		////self.SendFlags = TNSF_FULL_UPDATE; //doesn't work
	}
		
	if (other == self.realowner)
		return; //No burn against owner
		
	if not(Fire_IsBurning(other)) {
		Damage(other, self, self.realowner, self.ammount*30, DEATH_FIRE, '0 0 0', '0 0 0');
		
		IncreaseSpellExpAndMaybeLVL(self.amnt,
					self.realowner,
				 	spell_magmasphere,
					exp_spell_magmasphere,
					1, other);
	}
	
	CastSpell_magmasphere_burnstuff(other, self.realowner, self.amnt);
	
	if(vlen(self.velocity) != 0) {
	   if (other) {
	   	if (random() > 0.1) {
			if (isPlayerOrMonsterByClassname(other)
			|| other.flags & FL_MONSTER
			|| other.vehicle_flags & VHF_ISVEHICLE) {
			Damage(other, self, self.realowner, autocvar_g_vehicles_crush_dmg * (self.mass*(vlen((self.velocity-other.velocity)))*0.0000012), DEATH_VHCRUSH, '0 0 0', normalize(other.origin - self.origin) * autocvar_g_vehicles_crush_force);
	   	
			IncreaseSpellExpAndMaybeLVL(self.amnt,
					self.realowner,
				 	spell_magmasphere,
					exp_spell_magmasphere,
					0.1, other);
			}
		}
	   }
	}
}

.float ground_friction;
.float air_friction;
.float water_friction;
//.float buoyancy;
float movelib_deltatime;
void CastSpell_magmasphere_lightthink (void) {
	if (self.cnt == 2) {
		//print("Removing light\n");
		self.light_lev = 0;
		self.think = func_null;
		self.nextthink = 0;
		remove(self);
	} else {
		setorigin(self, self.subordinate10.origin);
		self.nextthink = time + frametime;
	}	
}

void CastSpell_magmasphere_think (void) {
	
	self.nextthink = time;

	//self.angles_y = self.angles_y + (90 * frametime); //side to side
	
	
	if (self.velocity_x
	|| self.velocity_y
	|| self.velocity_z) {
		//Looks alright
		self.angles_x += (self.velocity_x * frametime);
		self.angles_y += (self.velocity_y * frametime);
		self.angles_z += (self.velocity_z * frametime);
		
		//Looks alright also
		//self.angles_x += (self.velocity_x * frametime);
		//self.angles_y += (self.velocity_y * -1 * frametime);
		//self.angles_z += (self.velocity_z * frametime);
	
		self.angles_x = anglemods(self.angles_x);
    		self.angles_y = anglemods(self.angles_y);
    		self.angles_z = anglemods(self.angles_z);
		
		
		vector acceleration;
    		float ffriction,v_z;
		
		////movelib_startupdate();
		//////movelib_update('0 0 0', 0);
		
		movelib_deltatime = time - self.movelib_lastupdate;

		    ////////if (movelib_deltatime > 0.5)
		    ////////    movelib_deltatime = 0;

	    	self.movelib_lastupdate = time;
				
		if(self.waterlevel > 1)
		{
			ffriction = self.water_friction;
		}
		else
		{
			if(self.flags & FL_ONGROUND) {
				//print("ground\n");
				ffriction = self.ground_friction;
			} else {
				//print("air\n");
				ffriction = self.air_friction;
			}
		}
	    
	    	//self.velocity = self.velocity * (1 - movelib_deltatime * ffriction);
		self.velocity = self.velocity * (1 - frametime * ffriction);
	}
	
	if (time > self.ammount2) {
		pointparticles(particleeffectnum("EF_HUGEFLAME"), self.origin, '0 0 0', 1);
		
		self.ammount2 = time + 0.5 + (random()*2);
		
				local entity myeburnttarg;
				myeburnttarg = findradius(self.origin, (self.scale*22)+(self.ammount*16));
				while(myeburnttarg)
				{
					if (myeburnttarg != self) {
					if (myeburnttarg != world) {
					if (myeburnttarg != self.realowner) {
						//print("Burn!\n");
						CastSpell_magmasphere_burnstuff(myeburnttarg, self.realowner, self.amnt);
					}
					}
					}
					
					myeburnttarg = myeburnttarg.chain;
				}
		
		OilFire_explosion_spawnoilburnermaybe(self);
	}
	
			
	if (time < self.count) {
		//Do nothing
	} else {
		if (self.subordinate10) {
			self.subordinate10.cnt = 2;
		}
		self.solid = SOLID_NOT;
		self.think = func_null;
		self.nextthink = 0;
		remove(self);
	}
}
///////////////////////////////////


///////////////////////////////////
///////////////////////////////////

///////////////////////////////////


///////////////////////////////////


///////////////////////////////////
///////////////////////////////////
float CastSpellByNameCaseInsensitive (float isscroll, entity caster, string spellname)
{
	//This is for the "cast [spellname]" console command that a player might invoke
	//Why not put this in the CastSpellByName routine?
	//That is not just used by interactive console commands...
	//Imagine going through this whole list, not doing a simple exact string match
	//but this ... more invasive thing
	//everytime an entity want's to cast a spell..
	//So, no, we are not opting for the easy way...
	if(!strcasecmp(spellname, "agency")) {
	return(CastSpellByName(isscroll, caster, "agency"));
		} else if(!strcasecmp(spellname, "death")) {
	return(CastSpellByName(isscroll, caster, "death"));
		} else if(!strcasecmp(spellname, "drainlife")) {
	return(CastSpellByName(isscroll, caster, "drainlife"));
		} else if(!strcasecmp(spellname, "cancellation")) {
	return(CastSpellByName(isscroll, caster, "cancellation"));
		} else if(!strcasecmp(spellname, "castfromlife")) {
	return(CastSpellByName(isscroll, caster, "castfromlife"));
		} else if(!strcasecmp(spellname, "confer")) {
	return(CastSpellByName(isscroll, caster, "confer"));	
		} else if(!strcasecmp(spellname, "iceball")) {
	return(CastSpellByName(isscroll, caster, "iceball"));
		} else if(!strcasecmp(spellname, "icestar")) {
	return(CastSpellByName(isscroll, caster, "icestar"));
		} else if(!strcasecmp(spellname, "aquacaelestis")) {
	return(CastSpellByName(isscroll, caster, "aquacaelestis"));
		} else if(!strcasecmp(spellname, "nivosus")) {
	return(CastSpellByName(isscroll, caster, "nivosus"));
		} else if(!strcasecmp(spellname, "rosa")) {
	return(CastSpellByName(isscroll, caster, "rosa"));
		} else if(!strcasecmp(spellname, "corvuspenna")) {
	return(CastSpellByName(isscroll, caster, "corvuspenna"));
		} else if(!strcasecmp(spellname, "plumosus")) {
	return(CastSpellByName(isscroll, caster, "plumosus"));
		} else if(!strcasecmp(spellname, "fireball")) {
	return(CastSpellByName(isscroll, caster, "fireball"));	
		} else if(!strcasecmp(spellname, "magmasphere")) {
	return(CastSpellByName(isscroll, caster, "magmasphere"));	
		} else if(!strcasecmp(spellname, "firebolt")) {
	return(CastSpellByName(isscroll, caster, "firebolt"));	
		} else if(!strcasecmp(spellname, "firebeam")) {
	return(CastSpellByName(isscroll, caster, "firebeam"));	
		} else if(!strcasecmp(spellname, "inferno")) {
	return(CastSpellByName(isscroll, caster, "inferno"));
		} else if(!strcasecmp(spellname, "firewall")) {
	return(CastSpellByName(isscroll, caster, "firewall"));
		} else if(!strcasecmp(spellname, "lightiningwall")) {
	return(CastSpellByName(isscroll, caster, "lightiningwall"));
		} else if(!strcasecmp(spellname, "scepterofflame")) {
	return(CastSpellByName(isscroll, caster, "scepterofflame"));
		} else if(!strcasecmp(spellname, "explosion")) {
	return(CastSpellByName(isscroll, caster, "explosion"));
		} else if(!strcasecmp(spellname, "phantasmalbarrier")) {
	return(CastSpellByName(isscroll, caster, "phantasmalbarrier"));
		} else if(!strcasecmp(spellname, "raiseundead")) {
	return(CastSpellByName(isscroll, caster, "raiseundead"));
		} else if(!strcasecmp(spellname, "flameburst")) {
	return(CastSpellByName(isscroll, caster, "flameburst"));
		} else if(!strcasecmp(spellname, "firecentury")) {
	return(CastSpellByName(isscroll, caster, "firecentury"));	
		} else if(!strcasecmp(spellname, "frostbeam")) {
	return(CastSpellByName(isscroll, caster, "frostbeam"));
		} else if(!strcasecmp(spellname, "grace")) {
	return(CastSpellByName(isscroll, caster, "grace"));
		} else if(!strcasecmp(spellname, "holybolt")) {
	return(CastSpellByName(isscroll, caster, "holybolt"));
		} else if(!strcasecmp(spellname, "holylight")) {
	return(CastSpellByName(isscroll, caster, "holylight"));
		} else if(!strcasecmp(spellname, "acervilux")) {
	return(CastSpellByName(isscroll, caster, "acervilux"));
		} else if(!strcasecmp(spellname, "heal")) {
	return(CastSpellByName(isscroll, caster, "heal"));
		} else if(!strcasecmp(spellname, "repair")) {
	return(CastSpellByName(isscroll, caster, "repair"));
		} else if(!strcasecmp(spellname, "holyword")) {
	return(CastSpellByName(isscroll, caster, "holyword"));
		} else if(!strcasecmp(spellname, "extinguish")) {
	return(CastSpellByName(isscroll, caster, "extinguish"));
		} else if(!strcasecmp(spellname, "darkritual")) {
	return(CastSpellByName(isscroll, caster, "darkritual"));	
		} else if(!strcasecmp(spellname, "lightining")) {
	return(CastSpellByName(isscroll, caster, "lightining"));
		} else if(!strcasecmp(spellname, "balllightining")) {
	return(CastSpellByName(isscroll, caster, "balllightining"));
		} else if(!strcasecmp(spellname, "chainlightining")) {
	return(CastSpellByName(isscroll, caster, "chainlightining"));
		} else if(!strcasecmp(spellname, "lightiningburst")) {
	return(CastSpellByName(isscroll, caster, "lightiningburst"));
		} else if(!strcasecmp(spellname, "chargedbolt")) {
	return(CastSpellByName(isscroll, caster, "chargedbolt"));
		} else if(!strcasecmp(spellname, "lightiningstrike")) {
	return(CastSpellByName(isscroll, caster, "lightiningstrike"));
		} else if(!strcasecmp(spellname, "manashield")) {
	return(CastSpellByName(isscroll, caster, "manashield"));
		} else if(!strcasecmp(spellname, "clairvoyance")) {
	return(CastSpellByName(isscroll, caster, "clairvoyance"));
		} else if(!strcasecmp(spellname, "magicbullets")) {
	return(CastSpellByName(isscroll, caster, "magicbullets"));	
		} else if(!strcasecmp(spellname, "magicmissile")) {
	return(CastSpellByName(isscroll, caster, "magicmissile"));
		} else if(!strcasecmp(spellname, "monstertomonolith")) {
	return(CastSpellByName(isscroll, caster, "monstertomonolith"));
		} else if(!strcasecmp(spellname, "monstertomouse")) {
	return(CastSpellByName(isscroll, caster, "monstertomouse"));
		} else if(!strcasecmp(spellname, "meteor")) {
	return(CastSpellByName(isscroll, caster, "meteor"));
		} else if(!strcasecmp(spellname, "meteorshower")) {
	return(CastSpellByName(isscroll, caster, "meteorshower"));	
		} else if(!strcasecmp(spellname, "mimic")) {
	return(CastSpellByName(isscroll, caster, "mimic"));	
		} else if(!strcasecmp(spellname, "paralyse")) {
	return(CastSpellByName(isscroll, caster, "paralyse"));
		} else if(!strcasecmp(spellname, "ringoffire")) {
	return(CastSpellByName(isscroll, caster, "ringoffire"));	
		} else if(!strcasecmp(spellname, "stonecurse")) {
	return(CastSpellByName(isscroll, caster, "stonecurse"));	
		} else if(!strcasecmp(spellname, "stonerain")) {
	return(CastSpellByName(isscroll, caster, "stonerain"));
		} else if(!strcasecmp(spellname, "timesink")) {
	return(CastSpellByName(isscroll, caster, "timesink"));
		} else if(!strcasecmp(spellname, "vampyricconduit")) {
	return(CastSpellByName(isscroll, caster, "vampyricconduit"));
	}
	else
	{
		return(CastSpellByName(isscroll, caster, spellname));
	}
}
///////////////////////////////////
///////////////////////////////////

void ShalMissile();
float CastSpellByName(float isscroll, entity caster, string spellname)
{
	float effectnum;
	// arguments:
	//   effectname
	//print(ftos(caster.spell_agency)," \n");
	local float addspelltime;
	local float mylevel;
	local float castermana;
	local float addtocastermana; //For functions that wish to add to mana
	local float casterhascastfromlife;
	addtocastermana = 0;
	casterhascastfromlife = caster.hascastfromlife;
	caster.rtnvl2 = 0; 	//This var is used for when needing a second "return" value.
				//We set to 0 at begining of function
				//Now we can use it, if we don't have the spell it will stay 0
	
	//Here we set our mana, so if we are casting from health we will use that
	if (casterhascastfromlife) {
		castermana = caster.health;
	} else {
		castermana = caster.mana;
	}
	
	if(spellname == "agency")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_agency; }

		if (isscroll || caster.spell_agency > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 30)
		{
		addspelltime = 5/(caster.spell_agency*0.33);
		if not(isscroll) castermana = castermana - 30;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_agency))
			{
			makevectors(caster.v_angle);
			traceline(caster.origin, caster.origin + v_forward * 50 * mylevel, MOVE_NORMAL, caster);
				if(trace_ent != world)
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
				{
					local vector torigin;
					local vector tangles;
					local vector tv_angle;
					local vector morigin;
					local vector mangles;
					local vector mv_angle;
					torigin = trace_ent.origin;
					tangles = trace_ent.angles;
					tv_angle = trace_ent.v_angle;
					morigin = caster.origin;
					mangles = caster.angles;
					mv_angle = caster.v_angle;
					
					caster.origin = torigin;
					caster.angles = tangles;
					caster.v_angle = tv_angle;
					
					trace_ent.origin = morigin;
					trace_ent.angles = mangles;
					trace_ent.v_angle = mv_angle;
					setorigin(caster, caster.origin);
					setorigin(trace_ent, trace_ent.origin);
					
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						msg_entity = caster;
  									WriteByte (MSG_ONE, SVC_SETVIEWANGLES);
  									WriteAngle( MSG_ONE, caster.v_angle_x);
						WriteAngle( MSG_ONE, caster.v_angle_y);
  									WriteAngle( MSG_ONE, caster.v_angle_z);
					}
					
					if ((clienttype(trace_ent) == CLIENTTYPE_REAL)) {
						msg_entity = trace_ent;
  									WriteByte (MSG_ONE, SVC_SETVIEWANGLES);
  									WriteAngle( MSG_ONE, trace_ent.v_angle_x);
						WriteAngle( MSG_ONE, trace_ent.v_angle_y);
  									WriteAngle( MSG_ONE, trace_ent.v_angle_z);
					}
				}		
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}	
		}
		}
	}
	else if(spellname == "death")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_death; }

		if (isscroll || caster.spell_death > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 100)
		{
		addspelltime = 1;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_death))
			{
				local float mylevelbonus;
				mylevelbonus = 0;
				
					if (isscroll) {
						//Do nothing
					} else if (caster.hasharmed_prisoner || caster.hascommitted_depraved_act) {
							if (caster.hasharmed_prisoner >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 5000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 10)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 50)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 150)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 250)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 500)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 750)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 2000)
								mylevelbonus = mylevelbonus + 1;
					}
				
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(2048, 256 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				if(trace_ent != world)
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
				{
					if not(isscroll) castermana = castermana - 100;
					
					if (trace_ent.vuln_isundead) {
						//Undead being? Might not beable to kill with death
						if (trace_ent.vuln_isundead >= 1) {
							//No damage, Totally undead
							trace_ent.health = trace_ent.health + bound(0, trace_ent.health, mylevel + mylevelbonus + 100);
						} else if (trace_ent.vuln_isundead > random()) {
							//Not totally undead, so could kill
							//But Lucky this time: No damage
							trace_ent.health = trace_ent.health + bound(0, (trace_ent.health * trace_ent.vuln_isundead), mylevel + mylevelbonus + 100);
						} else {
							Damage(trace_ent, caster, caster, 100000, DEATH_KILL, trace_ent.origin, '0 0 0');
						}
					} else {
						Damage(trace_ent, caster, caster, 100000, DEATH_KILL, trace_ent.origin, '0 0 0');
					}
				}
			} else {
				if not(isscroll) castermana = castermana - 100;
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "drainlife")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_drainlife; }

		if (isscroll || caster.spell_drainlife > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 30)
		{
		addspelltime = 1;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_drainlife))
			{
				local float mylevelbonus;
				mylevelbonus = 0;
				
					if (isscroll) {
						//Do nothing
					} else if (caster.hasharmed_prisoner || caster.hascommitted_depraved_act) {
							if (caster.hasharmed_prisoner >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 5000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 10)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 50)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 150)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 250)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 500)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 750)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 2000)
								mylevelbonus = mylevelbonus + 1;
					}
				
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(64, 16 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				if(trace_ent != world)
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
				if (trace_ent.health > 1)
				{
					if not(isscroll) castermana = castermana - 30;
					local float rmhealth;
					rmhealth = 20 + ((mylevel+mylevelbonus)*0.25);
					
					if (trace_ent.health < rmhealth + 1)
						rmhealth = trace_ent.health - 1;
					
					trace_ent.health = trace_ent.health - rmhealth;
					
					if (trace_ent.vuln_isundead >= 1) {
						//Don't switch life with the undead: they have the opposite
						caster.health = caster.health - (rmhealth * trace_ent.vuln_isundead);
					} else if (trace_ent.vuln_isundead < 1) {
						caster.health = caster.health + rmhealth;
						caster.health = caster.health - (rmhealth * trace_ent.vuln_isundead);
					} else {
						caster.health = caster.health + rmhealth;
					}
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
						spell_drainlife,
						exp_spell_drainlife,
						1, trace_ent);  

				}
			} else {
				if not(isscroll) castermana = castermana - 30;
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "cancellation")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_cancellation; }
		
		//print(ftos(isscroll),"scroll?\n");
		
		if (isscroll || caster.spell_cancellation > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,(20 - bound(0,caster.spell_cancellation*0.15,15)) )  )
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,0.5);
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_cancellation))
			{
				spamsound (caster, CH_SHOTS, "porto/expire.ogg", VOL_BASE * 0.75, ATTN_NORM);

				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 1024+(128 * mylevel), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,(20 - bound(0,caster.spell_cancellation*0.15,15)));
				
				CastSpell_Cancellation(trace_endpos, caster, mylevel, 0.5+(0.1*mylevel), isscroll);
				
				pointparticles(particleeffectnum("EF_STARDUST"), trace_endpos, '0 0 0', (1 + floor(mylevel*0.1)));
			
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_cancellation,
					exp_spell_cancellation,
					1, world);  

			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,(20 - bound(0,caster.spell_cancellation*0.15,15)));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "castfromlife")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_castfromlife; }

		if (isscroll || caster.spell_castfromlife > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= bound(0, 20 - mylevel, 20) )
		{
			addspelltime = 10/(mylevel);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_castfromlife))
			{
				if not(isscroll) castermana = castermana - bound(0, 20 - mylevel, 20);
				caster.hascastfromlife = 1;
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_castfromlife,
					exp_spell_castfromlife,
					1, world); 
			} else {
				if not(isscroll) castermana = castermana - bound(0, 20 - mylevel, 20);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
					
		}
		}
	}
	else if(spellname == "confer")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_confer; }

		if (isscroll || caster.spell_confer > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 100)
		{
			addspelltime = 5/(mylevel);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_confer))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * 32 * mylevel, MOVE_NORMAL, caster);
				
				if(trace_ent != world)
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
				{
					if not(isscroll) castermana = castermana - 100;
					local float mhealth = caster.health;
					if (trace_ent.vuln_isundead >= 1) {
						//Bad Idea
						caster.health = (trace_ent.health * -1 * trace_ent.vuln_isundead);
					} else if (trace_ent.vuln_isundead < 1) {
						caster.health = trace_ent.health;
						caster.health = caster.health - (trace_ent.health * trace_ent.vuln_isundead);
					} else {
						caster.health = trace_ent.health;
					}
					trace_ent.health = mhealth;
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_confer,
					exp_spell_confer,
					1, trace_ent); 
				}
			} else {
				if not(isscroll) castermana = castermana - 100;
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
					
		}
		}
	}
	else if(spellname == "iceball")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_iceball; }
		
		if (isscroll || caster.spell_iceball > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (14 - bound(0,caster.spell_iceball*0.1166,11)))
		{
			addspelltime = 0.2;
			if not(isscroll) castermana = castermana - (14 - bound(0,caster.spell_iceball*0.1166,11));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_iceball))
			{
				makevectors(caster.v_angle);
				W_Iceball_Attack1();
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_iceball,
					exp_spell_iceball,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "icestar")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_icestar; }
		
		if (isscroll || caster.spell_icestar > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (85 - bound(0,caster.spell_icestar*0.375,37)))
		{
			addspelltime = 5;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_icestar))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 512 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				float esflags;
				entity ie = spawn();
				entity e = spawn();
				
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = trace_endpos;
				traceline(e.origin, e.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				esflags = trace_dphitq3surfaceflags;
				
				ie.origin = e.origin;
				traceline(ie.origin, ie.origin - ('0 0 30000' + myskytrace), MOVE_WORLDONLY, ie);
				ie.origin = trace_endpos;
				e.origin = (e.origin-((e.origin-ie.origin)*0.5)); //0.5 = Middleground //
				
				if (esflags & Q3SURFACEFLAG_SKY)
				{
					if not(isscroll) castermana = castermana - (85 - bound(0,caster.spell_icestar*0.375,37));
										
					if not (pointcontents(e.origin) == CONTENT_SOLID)
					{
						makevectors(e.v_angle);
						W_IceStar1(e, caster);
					}
					
					float	sc;
					for (sc = 0;sc < (1 + floor(mylevel*2));sc = sc + 1) {
						//e.origin = forigin + (randomvec() * 64*mylevel);
						//e.origin_z = forigin_z;
						if not (pointcontents(e.origin) == CONTENT_SOLID)
						{
							makevectors(e.v_angle);
							W_IceStar1(e, caster);
						}
					}
				}
				
				remove(e);
				remove(ie); //Forgot this before
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_icestar,
					exp_spell_icestar,
					1, world); 
			} else {
				if not(isscroll) castermana = castermana - (85 - bound(0,caster.spell_icestar*0.375,37));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "firebolt")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_firebolt; }
		
		if (isscroll || caster.spell_firebolt > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,6))
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
			
			if ((mylevel+mylevelbonus) < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, mylevel, (0.2/(mylevel/5)));
			} else {
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),0.2);
			}
			
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),6);
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_firebolt))
			{
				makevectors(caster.v_angle);
				W_Fireball_Attack2_spell(caster, isscroll, 1);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_firebolt,
					exp_spell_firebolt,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "fireball")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_fireball; }
		
		if (isscroll || caster.spell_fireball > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,(16 - bound(0,caster.spell_fireball*0.13333,13)) ) )
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
			
			if ((mylevel+mylevelbonus) < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, mylevel, (0.2/(mylevel/5)));
			} else {
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),0.2);
			}
			
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),(16 - bound(0,caster.spell_fireball*0.13333,13)));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_fireball))
			{
				makevectors(caster.v_angle);
				W_Fireball_Attack1_spell(caster, isscroll, 1);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_fireball,
					exp_spell_fireball,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "magmasphere")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_magmasphere; }
		
		if (isscroll || caster.spell_magmasphere > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,(26 - bound(0,caster.spell_magmasphere*0.13333,16)) ) )
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
			
			if ((mylevel+mylevelbonus) < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, mylevel, (0.2/(mylevel/5)));
			} else {
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),0.2);
			}
			
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),(26 - bound(0,caster.spell_magmasphere*0.13333,16)));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_magmasphere))
			{
				local vector myveca;
				local vector myvecb;
				local vector myvecc;
				local vector myvecd;
				local vector myvecdn;
				local vector myvecup;
				local float myscaletoqu = 21.3333;
				local float mymodelscalea;
				local float myradiusa;
				local float mylens;
				local float mylenutotal;
				local float mylenu;
				local float mylenfinal;
				local float mymodelscalefinal;
				entity mymgmabll;
				
				
				mymodelscalea = bound(1, (mylevel+mylevelbonus)*0.5, 15);
				myradiusa = mymodelscalea * myscaletoqu;
				//myradiusa = bound(21.3333, (mylevel+mylevelbonus)*(21.3333*0.5), 2048);
				makevectors(caster.v_angle);
				//W_Fireball_Attack1();
				//
				
				//traceline(caster.origin, caster.origin + v_forward * bound(1024, 256 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				traceline(caster.origin, caster.origin + v_forward * 64, MOVE_NORMAL, caster);
				myveca = trace_endpos;
				mymgmabll = spawn();
				mymgmabll.origin = myveca;
				traceline(myveca, myveca + v_right * myradiusa, MOVE_NORMAL, mymgmabll);
				mylens = vlen(myveca-trace_endpos);
				traceline(myveca, myveca - v_up * myradiusa, MOVE_NORMAL, mymgmabll);
				
				myvecdn = trace_endpos;
				traceline(myveca, myveca + v_up * myradiusa * 2, MOVE_NORMAL, mymgmabll);
				myvecup = trace_endpos;
				mylenutotal = vlen(myvecdn-myvecup);
				mylenu = mylenutotal * 0.5;
				
				if(mylens > mylenu) {
					mylenfinal = mylenu;
				} else {
					mylenfinal = mylens;
				}
				
				traceline(caster.origin, caster.origin + v_forward * (mylenfinal*1.34), MOVE_NORMAL, caster);
				myvecb = trace_endpos;
				traceline(myvecb, myvecb - v_up * mylenfinal, MOVE_NORMAL, mymgmabll);
				myvecc = trace_endpos;
				traceline(myvecb, myvecb + v_up * mylenfinal, MOVE_NORMAL, mymgmabll);
				myvecd = trace_endpos;
				
				if ((mylenfinal*2) > myscaletoqu*15) {
					//print("greater than\n");
					mylenfinal = myscaletoqu*15*0.5;
					//15 is max scale for models
				}
				
				mymodelscalefinal = (mylenfinal*2) / myscaletoqu;
				
				mymgmabll.origin = myvecd;
				mymgmabll.origin_z = mymgmabll.origin_z + 1;
				
				mymgmabll.scale = mymodelscalefinal;
				//print(ftos(mylenfinal),"fnl\n");
				//print(ftos(mymgmabll.scale),"scale\n");
				
				mymgmabll.skin = 1;
				
				mymgmabll.realowner = caster;
				
				mymgmabll.amnt = isscroll;
				mymgmabll.count = time+((mylevel+mylevelbonus)*30);
				mymgmabll.cnt = mylenfinal; //myradius
				mymgmabll.ammount = (mylevel+mylevelbonus);
				
				mymgmabll.touch = CastSpell_magmasphere_touch;
				mymgmabll.think = CastSpell_magmasphere_think;
				mymgmabll.nextthink = time;
				mymgmabll.effects = EF_FULLBRIGHT;
				
				//mymgmabll.avelocity = '0 300 0'; //doesn't work
				
				mymgmabll.ground_friction = 0.08;
				mymgmabll.air_friction = 0.002;
				mymgmabll.water_friction = 0.01;
				//mymgmabll.buoyancy = 0.5;
				
				local entity newmagmalight;
				newmagmalight = spawn();
				newmagmalight.pflags = PFLAGS_FULLDYNAMIC;
				newmagmalight.light_lev = 32*mymgmabll.scale;
				newmagmalight.color = '1.00 0.15 0';
				newmagmalight.style = 0;
				newmagmalight.subordinate10 = mymgmabll;
				newmagmalight.think = CastSpell_magmasphere_lightthink;
				newmagmalight.nextthink = time;
				newmagmalight.cnt = 0;
				newmagmalight.origin = mymgmabll.origin;
	
				mymgmabll.subordinate10 = newmagmalight;
				setmodel (mymgmabll, "models/sphere/cannonball.iqm");
				setorigin (mymgmabll, mymgmabll.origin);
				
				local vector mymgmins, mymgmaxs;
				mymgmins_x = mylenfinal * -1;
				mymgmins_y = mylenfinal * -1;
				mymgmins_z = mylenfinal * -1;
				mymgmaxs_x = mylenfinal;
				mymgmaxs_y = mylenfinal;
				mymgmaxs_z = mylenfinal;
				
				mymgmabll.velocity = caster.velocity;
				
				mymgmabll.canigniteflame = 1; //Item Can be used to ignite flames (for burning arrows etc)
				
				mymgmabll.solid = SOLID_BBOX;
				//mymgmabll.movetype = MOVETYPE_TOSS;
				mymgmabll.movetype = MOVETYPE_WALK;
				mymgmabll.mass = 100*mymgmabll.ammount;
				mymgmabll.gravity = 1; 
				setsize (mymgmabll, mymgmins, mymgmaxs);
				//
				
				
				if (random() > 0.5) {
					if ((mylevel+mylevelbonus) > 10) sound (caster, CH_WEAPON_A, "weapons/fireball_fire2.wav", VOL_BASE*(0.6+(random()*0.4)), ATTN_NORM);
					else sound (caster, CH_WEAPON_A, "weapons/fireball_fire2.wav", VOL_BASE*((mylevel+mylevelbonus)/10)*(0.6+(random()*0.4)), ATTN_NORM);
				} else {
					if ((mylevel+mylevelbonus) > 10) sound (caster, CH_SHOTS, "ardentryst/flame_whoosh.ogg", VOL_BASE*(0.6+(random()*0.4)), ATTN_NORM);
					else sound (caster, CH_SHOTS, "ardentryst/flame_whoosh.ogg", VOL_BASE*((mylevel+mylevelbonus)/10)*(0.6+(random()*0.4)), ATTN_NORM);
				}
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_magmasphere,
					exp_spell_magmasphere,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "firebeam")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_firebeam; }
		
		if (isscroll || caster.spell_firebeam > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,14))
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
		
			if ((mylevel+mylevelbonus) < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, mylevel, (0.2/(mylevel/5)));
			} else {
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),0.2);
			}
			
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),14);
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_firebeam))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 256 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				effectnum = particleeffectnum("fireball");

				if((mylevel+mylevelbonus) > 10) te_csqc_firearc(caster.origin,trace_endpos);
				else trailparticles(caster, effectnum, caster.origin, trace_endpos);
				
				if (random() > 0.7) {
					if ((mylevel+mylevelbonus) > 10) sound (caster, CH_WEAPON_A, "weapons/fireball_fire2.wav", VOL_BASE*(0.6+(random()*0.4)), ATTN_NORM);
					else sound (caster, CH_WEAPON_A, "weapons/fireball_fire2.wav", VOL_BASE*((mylevel+mylevelbonus)/10)*(0.6+(random()*0.4)), ATTN_NORM);
				} else {
					if ((mylevel+mylevelbonus) > 10) sound (caster, CH_SHOTS, "ardentryst/flame_whoosh.ogg", VOL_BASE*(0.6+(random()*0.4)), ATTN_NORM);
					else sound (caster, CH_SHOTS, "ardentryst/flame_whoosh.ogg", VOL_BASE*((mylevel+mylevelbonus)/10)*(0.6+(random()*0.4)), ATTN_NORM);
				}
				
				if(trace_ent != world)
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT)
				|| ((trace_ent.classname == "bldhitbx" || trace_ent.classname == "building") && multitool_iswooden(trace_ent.count))
				|| (((mylevel+mylevelbonus) >= 30) && trace_ent.abdbldcanburn && (autocvar_g_spawnmiscitemsaround_abdbld_extendeddamage >= 3))
				|| trace_ent.classname == "tree" || trace_ent.classname == "bush")
					Fire_AddDamage(trace_ent, caster, 10*(1+((mylevel+mylevelbonus)*0.2))*(100+(mylevel+mylevelbonus)), 100+(mylevel+mylevelbonus), DEATH_FIRE);
			
			
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_firebeam,
					exp_spell_firebeam,
					1, trace_ent); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "inferno")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_inferno; }
		
		if (isscroll || caster.spell_inferno > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll
		 || (caster.inferno_spellent && ( castermana >= StaffFlameReduceFor(caster, mylevel, bound(2,(mylevel*1),9.5) )  ))
		 || (castermana >= StaffFlameReduceFor(caster, mylevel, bound(20,(mylevel*10),95) )) )
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
			
			if ((mylevel+mylevelbonus) < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, mylevel, (1/(mylevel/5)));
			} else {
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),1);
			}
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_inferno))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
				
				if (caster.inferno_spellent) {
					if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus), bound(2,((mylevel+mylevelbonus)*1),9.5) );
					
					caster.inferno_spellent.cnt = 0;
					caster.inferno_spellent = world;
					
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You extinguish your inferno\n");
				} else {
					if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus), bound(20,((mylevel+mylevelbonus)*10),95) );
					
					CastSpell_EndOtherBeamSpells(caster, "inferno"); //Caster and our current spellname so we ignore our own spell
					
					CastSpell_inferno (caster, 10+((mylevel+mylevelbonus)*50), 1+(mylevel+mylevelbonus), (mylevel+mylevelbonus), isscroll);
					
					spamsound (caster, CH_SHOTS, "ardentryst/flame_whoosh.ogg", VOL_BASE, ATTN_NORM);
				}
			
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_inferno,
					exp_spell_inferno,
					1, trace_ent); 
			} else {
				if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus), bound(20,((mylevel+mylevelbonus)*10),95) );
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	
	//
	else if(spellname == "acervilux")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_acervilux; }
		
		if (isscroll || caster.spell_acervilux > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll
		 || (caster.acervilux_spellent && ( castermana >= bound(2,(mylevel*0.8),10)  ))
		 || (castermana >= bound(20,(mylevel*8),100) ) )
		{
			local float mylevelbonus;
			if (mylevel < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = (1/(mylevel/5));
			} else {
				addspelltime = 1;
			}
			
			mylevelbonus = 0;
			if (CastSpellIsUnderSky(caster)) {
				if (isscroll) {
					mylevelbonus = 1;
				} else {
					mylevelbonus = 4;
				}
			}
			
			
			
			if (caster.hascommitted_depraved_act) {
				if (caster.hascommitted_depraved_act >= 20) {
					mylevelbonus = mylevelbonus - 3;
				} else if (caster.hascommitted_depraved_act >= 10) {
					mylevelbonus = mylevelbonus - 2;
				} else if (caster.hascommitted_depraved_act >= 3) {
					mylevelbonus = mylevelbonus - 1;
				}
			} 
				
			if ((mylevel+mylevelbonus) < 0) mylevelbonus = 0;
			
			
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_acervilux))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
				
				if (caster.acervilux_spellent) {
					if not(isscroll) castermana = castermana - bound(2,(mylevel*0.8),10);
					
					caster.acervilux_spellent.cnt = 0;
					caster.acervilux_spellent = world;
					
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You dim your acervilux\n");
				} else {
					if not(isscroll) castermana = castermana - bound(20,(mylevel*8),100);
					
					CastSpell_EndOtherBeamSpells(caster, "acervilux"); //Caster and our current spellname so we ignore our own spell
					
					CastSpell_acervilux (caster, 7+((mylevel+mylevelbonus)*80), 1+(mylevel+mylevelbonus), (mylevel+mylevelbonus), isscroll);
				}
			
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_acervilux,
					exp_spell_acervilux,
					1, trace_ent); 
			} else {
				if not(isscroll) castermana = castermana - bound(20,(mylevel*8),100);
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	
	//
	else if(spellname == "rosa")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_rosa; }
		
		if (isscroll || caster.spell_rosa > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll
		 || (caster.rosa_spellent && ( castermana >= bound(1,(mylevel*0.5),10)  ))
		 || (castermana >= bound(10,(mylevel*5),100) ) )
		{
			local float mylevelbonus;
			local float myrosepetaltype;
			myrosepetaltype = 0;
			
			if (mylevel < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = (1/(mylevel/5));
			} else {
				addspelltime = 1;
			}
			
			mylevelbonus = 0;
			
			if (caster.hascommitted_depraved_act) {
				if (caster.hascommitted_depraved_act >= 3) {
					myrosepetaltype = 3;
				}
			} else if (caster.hascommitted_act_of_grace) {
				if (!caster.hasharmed_prisoner
				&& caster.hascommitted_act_of_grace >= 500) {
					myrosepetaltype = 2; //White
				} else if (caster.hascommitted_act_of_grace > 50) {
					myrosepetaltype = 1; //Pink
				}
			}
			
			if (CastSpellIsUnderSky(caster)) {
				if (myrosepetaltype == 3) {
					//Black
					myrosepetaltype = 4;
					if (isscroll) {
						mylevelbonus = -1;
					} else {
						mylevelbonus = -2;
					}
				} else if (myrosepetaltype == 2) {
					//White
					if (isscroll) {
						mylevelbonus = 2;
					} else {
						mylevelbonus = 4;
					}
				} else if (myrosepetaltype == 1) {
					//Pink
					if (isscroll) {
						mylevelbonus = 1;
					} else {
						mylevelbonus = 2;
					}
				}
			} else {
				if (myrosepetaltype == 3) {
					//Black
					if (isscroll) {
						mylevelbonus = 1;
					} else {
						mylevelbonus = 2;
					}
				} else if (myrosepetaltype == 2) {
					//White
					if (isscroll) {
						mylevelbonus = -2;
					} else {
						mylevelbonus = -3;
					}
				} else if (myrosepetaltype == 1) {
					//Pink
					if (isscroll) {
						mylevelbonus = -1;
					} else {
						mylevelbonus = -2;
					}
				}
			}
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_rosa))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
				
				if (caster.rosa_spellent) {
					if not(isscroll) castermana = castermana - bound(1,(mylevel*0.5),10);
					
					caster.rosa_spellent.cnt = 0;
					caster.rosa_spellent = world;
					
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You intermit your rosa\n");
				} else {
					if not(isscroll) castermana = castermana - bound(10,(mylevel*5),100);
					
					CastSpell_EndOtherBeamSpells(caster, "rosa"); //Caster and our current spellname so we ignore our own spell
					
					CastSpell_rosa (caster, 1+(mylevel+mylevelbonus), (mylevel+mylevelbonus), isscroll, myrosepetaltype);
				}
			
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_rosa,
					exp_spell_rosa,
					1, trace_ent); 
			} else {
				if not(isscroll) castermana = castermana - bound(10,(mylevel*8),100);
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	
	//
	else if(spellname == "corvuspenna")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_corvuspenna; }
		
		if (isscroll || caster.spell_corvuspenna > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll
		 || (caster.corvuspenna_spellent && ( castermana >= bound(1,(mylevel*0.5),10)  ))
		 || (castermana >= bound(10,(mylevel*5),100) ) )
		{
			local float mylevelbonus;
			
			if (mylevel < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = (1/(mylevel/5));
			} else {
				addspelltime = 1;
			}
			
			mylevelbonus = 0;
			
			
			if (CastSpellIsUnderSky(caster)) {
				//
			} else {
				if (isscroll) {
					mylevelbonus = 1;
				} else {
					mylevelbonus = 2;
				}
			}
			
			
			if (caster.hascommitted_depraved_act) {
				if (caster.hascommitted_depraved_act >= 10) {
					//Raven isn't that bad...
					mylevelbonus = 0;
				}
			} else if (caster.hasharmed_prisoner) {
				if (caster.hascommitted_act_of_grace >= 500) {
					mylevelbonus = mylevelbonus - 1;
				} else if (caster.hascommitted_act_of_grace > 50) {
					//
				} else {
					mylevelbonus = mylevelbonus + 1;
				}
			} else {
				if (caster.hascommitted_act_of_grace >= 500) {
					mylevelbonus = mylevelbonus - 2;
				} else if (caster.hascommitted_act_of_grace > 50) {
					mylevelbonus = mylevelbonus - 1;
				}
			}
			
			
			if ((mylevel+mylevelbonus) < 0) mylevelbonus = 0;
			
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_corvuspenna))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
				
				if (caster.corvuspenna_spellent) {
					if not(isscroll) castermana = castermana - bound(1,(mylevel*0.5),10);
					
					caster.corvuspenna_spellent.cnt = 0;
					caster.corvuspenna_spellent = world;
					
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You intermit your corvuspenna\n");
				} else {
					if not(isscroll) castermana = castermana - bound(10,(mylevel*5),100);
					
					CastSpell_EndOtherBeamSpells(caster, "corvuspenna"); //Caster and our current spellname so we ignore our own spell
					
					CastSpell_corvuspenna (caster, 1+(mylevel+mylevelbonus), (mylevel+mylevelbonus), isscroll, 0);
				}
			
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_corvuspenna,
					exp_spell_corvuspenna,
					1, trace_ent); 
			} else {
				if not(isscroll) castermana = castermana - bound(10,(mylevel*8),100);
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	
	//
	else if(spellname == "plumosus")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_plumosus; }
		
		if (isscroll || caster.spell_plumosus > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll
		 || (caster.corvuspenna_spellent && ( castermana >= bound(1,(mylevel*0.5),10)  ))
		 || (castermana >= bound(10,(mylevel*5),100) ) )
		{
			local float mylevelbonus;
			
			if (mylevel < 5) {
				//Less than level 5 (lvl 5 is what scrolls are)
				addspelltime = (1/(mylevel/5));
			} else {
				addspelltime = 1;
			}
			
			mylevelbonus = 0;
			
			if (CastSpellIsUnderSky(caster)) {
				if (isscroll) {
					mylevelbonus = 1;
				} else {
					mylevelbonus = mylevel;
				}
			}
			
			
			if (caster.hascommitted_depraved_act) {
				if (caster.hascommitted_depraved_act >= 15) {
					mylevelbonus = 0;
				} else if (caster.hascommitted_depraved_act >= 10) {
					if (random() > 0.25) {
						mylevelbonus = 0;
					}
				} else if (caster.hascommitted_depraved_act >= 5) {
					if (random() > 0.55) {
						mylevelbonus = 0;
					}
				} else if (caster.hascommitted_depraved_act >= 3) {
					if (random() > 0.75) {
						mylevelbonus = 0;
					}
				}
			} 
			
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_plumosus))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
				
				if (caster.corvuspenna_spellent) {
					if not(isscroll) castermana = castermana - bound(1,(mylevel*0.5),10);
					
					caster.corvuspenna_spellent.cnt = 0;
					caster.corvuspenna_spellent = world;
					
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You intermit your plumosus\n");
				} else {
					if not(isscroll) castermana = castermana - bound(10,(mylevel*5),100);
					
					CastSpell_EndOtherBeamSpells(caster, "corvuspenna"); //Caster and our current spellname so we ignore our own spell
					
					CastSpell_corvuspenna (caster, 1+(mylevel+mylevelbonus), (mylevel+mylevelbonus), isscroll, 1);
				}
			
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_plumosus,
					exp_spell_plumosus,
					1, trace_ent); 
			} else {
				if not(isscroll) castermana = castermana - bound(10,(mylevel*8),100);
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	
	else if(spellname == "scepterofflame")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_scepterofflame; }
		
		if (isscroll || caster.spell_scepterofflame > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel, (90 - bound(0,caster.spell_scepterofflame*0.375,37)) )  )
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
		
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_scepterofflame))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always aslong as world mins maxes not inverted somehow
				
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),6);

				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 512 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				float esflags;
				entity ie = spawn();
				entity e = spawn();
				
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = trace_endpos;
				traceline(e.origin, e.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				esflags = trace_dphitq3surfaceflags;
				
				ie.origin = e.origin;
				traceline(ie.origin, ie.origin - ('0 0 32000' + myskytrace), MOVE_WORLDONLY, ie); //Could be _NORMAL if you want it to hit roof of sc_tile blds, chose not to tho
				ie.origin = trace_endpos;
				
				if (esflags & Q3SURFACEFLAG_SKY)
				{
					if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus), (90 - bound(0,caster.spell_scepterofflame*0.375,37)));
					
					local float myextime;
					local float myexdamage;
					local float myexradius;
					myexradius = 150 + ((mylevel+mylevelbonus)*20);
					myexdamage = 30 + ((mylevel+mylevelbonus)*10);
					myextime = 5 + ((mylevel+mylevelbonus)*5);
					
					CastSpell_ScepterOfFlame_PlaceFire(myextime, myexdamage, ie.origin, caster, myexradius, vlen(e.origin-ie.origin), floor((mylevel+mylevelbonus)*0.1));
					CastSpellScepterOfFlame_AddBurnDamage (isscroll, caster, e, myexradius*0.8, floor(5+((mylevel+mylevelbonus)*0.1)));

										
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_scepterofflame,
						exp_spell_scepterofflame,
						1, world); 
				}
				
				remove(e);
				remove(ie);
				
			} else {
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),4);
				if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus), (90 - bound(0,caster.spell_scepterofflame*0.375,37)));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "firewall")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_firewall; }
		
		if (isscroll || caster.spell_firewall > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel, (28 - bound(0,caster.spell_firewall*0.14,21)) )  )
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
			
			addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),1.5);
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),(28 - bound(0,caster.spell_firewall*0.14,21)));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_firewall))
			{
				//This spell gets cheaper and more powerful the higher the level
				//A defensive spell of sorts
				makevectors(caster.v_angle);
				float	sc;
				pointparticles(particleeffectnum("fireball_muzzleflash"), caster.origin, w_shotdir, 1);
				
				local entity myoldself;
				myoldself = self;
				
				local entity mytracer;
				local float myonetileamnt;
				local float mycounter;
				local float myfires;
				local vector mystartpos;
				local vector mygoodpos;
				myfires = 5 + floor((mylevel+mylevelbonus)*0.1);
				mycounter = 0;
				myonetileamnt = 64;
				mytracer = spawn();
				mytracer.origin = caster.origin;
				traceline(mytracer.origin, mytracer.origin + v_forward * myonetileamnt, MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				traceline(mytracer.origin, mytracer.origin + '0 0 2', MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				mystartpos = trace_endpos;
				mygoodpos = trace_endpos;
				//One in front of us first
				CastSpell_Firewall_PlaceFire(0, 8+((mylevel+mylevelbonus)*2), 10+((mylevel+mylevelbonus)*0.25)+(random()*((mylevel+mylevelbonus)*0.25)), mygoodpos, caster, myonetileamnt);
				while (mycounter < myfires) {
					//Then to the right.
					traceline(mytracer.origin, mytracer.origin + '0 0 64', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin + (v_right * -4), mytracer.origin + (v_right * myonetileamnt), MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					
					//print(ftos(vlen(mytracer.origin - mygoodpos)),"\n");
					if (vlen(mytracer.origin - mygoodpos) < (myonetileamnt*0.25))
					{
						//print("Too close, hit a wall probably\n");
						mycounter = myfires + 999; //Bail outo!
					} else {
						mygoodpos = trace_endpos;
						CastSpell_Firewall_PlaceFire(0, 8+((mylevel+mylevelbonus)*2), 10+((mylevel+mylevelbonus)*0.25)+(random()*((mylevel+mylevelbonus)*0.25)), mygoodpos, caster, myonetileamnt);
						mycounter = mycounter + 1;
					}
				}
				mycounter = 0;
				mytracer.origin = mystartpos;
				while (mycounter < myfires) {
					//Then to the left
					traceline(mytracer.origin, mytracer.origin + '0 0 64', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin + (v_right * 4), mytracer.origin + (v_right * -1 * myonetileamnt), MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					if (vlen(mytracer.origin - mygoodpos) < (myonetileamnt*0.25))
					{
						//print("Too close2, hit a wall probably\n");
						mycounter = myfires + 999; //Bail outo!
					} else {
						mygoodpos = trace_endpos;
						CastSpell_Firewall_PlaceFire(0, 8+((mylevel+mylevelbonus)*2), 10+((mylevel+mylevelbonus)*0.25)+(random()*((mylevel+mylevelbonus)*0.25)), mygoodpos, caster, myonetileamnt);
						mycounter = mycounter + 1;
					}
				}
				
				remove(mytracer);
				self = myoldself;
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_firewall,
					exp_spell_firewall,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "lightiningwall")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_lightiningwall; }
		
		if (isscroll || caster.spell_lightiningwall > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (28 - bound(0,caster.spell_lightiningwall*0.14,21))  )
		{
			addspelltime = 1.5;
			if not(isscroll) castermana = castermana - (28 - bound(0,caster.spell_lightiningwall*0.14,21));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_lightiningwall))
			{
				//This spell gets cheaper and more powerful the higher the level
				//A defensive spell of sorts
				makevectors(caster.v_angle);
				float	sc;
				//pointparticles(particleeffectnum("fireball_muzzleflash"), caster.origin, w_shotdir, 1);
				
				local entity myoldself;
				myoldself = self;
				
				local entity mytracer;
				local float myonetileamnt;
				local float mycounter;
				local float myfires;
				local vector mystartpos;
				local vector mygoodpos;
				myfires = 5 + floor(mylevel*0.1);
				mycounter = 0;
				myonetileamnt = 64;
				mytracer = spawn();
				mytracer.origin = caster.origin;
				//traceline(mytracer.origin, mytracer.origin + v_forward * myonetileamnt, MOVE_NORMAL, mytracer);
				traceline(mytracer.origin, mytracer.origin + v_forward * (myonetileamnt + 48), MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				traceline(mytracer.origin, mytracer.origin + '0 0 2', MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				traceline(mytracer.origin, mytracer.origin + '0 0 8', MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				mystartpos = trace_endpos;
				mygoodpos = trace_endpos;
				//One in front of us first
				//CastSpell_Firewall_PlaceFire(0, 8+(mylevel*2), 10+(mylevel*0.25)+(random()*(mylevel*0.25)), mygoodpos, caster, myonetileamnt);
				//mygoodpos_z = mygoodpos_z + 8;
				CastSpell_BallLightining_Attack(mygoodpos, '0 0 0', 0, bound(0.05,(1/bound(1, mylevel*0.5 ,mylevel)),1), caster, bound(1, mylevel*0.5 ,mylevel), isscroll, time+0.1, 2);

				while (mycounter < myfires) {
					//Then to the right.
					traceline(mytracer.origin, mytracer.origin + '0 0 64', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin + (v_right * -4), mytracer.origin + (v_right * myonetileamnt), MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin + '0 0 8', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					
					//print(ftos(vlen(mytracer.origin - mygoodpos)),"\n");
					if (vlen(mytracer.origin - mygoodpos) < (myonetileamnt*0.25))
					{
						//print("Too close, hit a wall probably\n");
						mycounter = myfires + 999; //Bail outo!
					} else {
						mygoodpos = trace_endpos;
						//CastSpell_Firewall_PlaceFire(0, 8+(mylevel*2), 10+(mylevel*0.25)+(random()*(mylevel*0.25)), mygoodpos, caster, myonetileamnt);
						//mygoodpos_z = mygoodpos_z + 8;
						CastSpell_BallLightining_Attack(mygoodpos, '0 0 0', 0, bound(0.05,(1/bound(1, mylevel*0.5 ,mylevel)),1), caster, bound(1, mylevel*0.5 ,mylevel), isscroll, time+0.1, 2);

						mycounter = mycounter + 1;
					}
				}
				mycounter = 0;
				mytracer.origin = mystartpos;
				while (mycounter < myfires) {
					//Then to the left
					traceline(mytracer.origin, mytracer.origin + '0 0 64', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin + (v_right * 4), mytracer.origin + (v_right * -1 * myonetileamnt), MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin + '0 0 8', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					if (vlen(mytracer.origin - mygoodpos) < (myonetileamnt*0.25))
					{
						//print("Too close2, hit a wall probably\n");
						mycounter = myfires + 999; //Bail outo!
					} else {
						mygoodpos = trace_endpos;
						//CastSpell_Firewall_PlaceFire(0, 8+(mylevel*2), 10+(mylevel*0.25)+(random()*(mylevel*0.25)), mygoodpos, caster, myonetileamnt);
						//mygoodpos_z = mygoodpos_z + 8;
						CastSpell_BallLightining_Attack(mygoodpos, '0 0 0', 0, bound(0.05,(1/bound(1, mylevel*0.5 ,mylevel)),1), caster, bound(1, mylevel*0.5 ,mylevel), isscroll, time+0.1, 2);

						mycounter = mycounter + 1;
					}
				}
				
				remove(mytracer);
				self = myoldself;
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_lightiningwall,
					exp_spell_lightiningwall,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "explosion")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_explosion; }
		
		if (isscroll || caster.spell_explosion > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,(100 - bound(0,caster.spell_explosion*0.375,37)) )  )
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
			
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_explosion))
			{
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),10);

				if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),(100 - bound(0,caster.spell_explosion*0.375,37)));
				
				local float myexradius;
				myexradius = 300 + ((mylevel+mylevelbonus)*40);

				makevectors(caster.v_angle);
				traceline(caster.origin, (caster.origin + caster.view_ofs) + v_forward * bound(1024, 512 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				entity e = spawn();
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = trace_endpos;
				traceline(e.origin, e.origin - ('0 0 100' * myexradius), MOVE_WORLDONLY, e);
				
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					//print ("Hit Sky, staying\n");
					//Do nothing
				} else if(
				(pointcontents(e.origin) == CONTENT_SOLID)
				|| (pointcontents(e.origin+'1 1 1') == CONTENT_SOLID)
				|| (pointcontents(e.origin+'1 -1 1') == CONTENT_SOLID)
				|| (pointcontents(e.origin+'-1 1 1') == CONTENT_SOLID)
				|| (pointcontents(e.origin+'-1 -1 1') == CONTENT_SOLID)
				|| (pointcontents(e.origin+'1 1 -1') == CONTENT_SOLID)
				|| (pointcontents(e.origin+'1 -1 -1') == CONTENT_SOLID)
				|| (pointcontents(e.origin+'-1 1 -1') == CONTENT_SOLID)
				|| (pointcontents(e.origin+'-1 -1 -1') == CONTENT_SOLID)
				) {
						//print ("Some of Eight Corners in Solid, staying since we hit something\n");
					//Do nothing
				} else if(vlen(trace_endpos-e.origin) > myexradius) {
						//print ("Diff too great, staying\n");
					//Do nothing
				} else {
						//print ("Diff not too great, moving to down trace position\n");
					e.origin = trace_endpos;
				}
				
				if (CheckSpellNoCancel(caster, (mylevel+mylevelbonus), e.origin)) {
					//"Explo-shuns"
					local float myexdamage;
					local float myexedgedamage;
					local float myexforce;
					myexdamage = 190 + ((mylevel+mylevelbonus)*10);
					myexedgedamage = 90 + ((mylevel+mylevelbonus)*5);
					myexforce = 250 + ((mylevel+mylevelbonus)*15);
					
					spamsound (e, CH_SHOTS, "weapons/rocket_impact.wav", VOL_BASE, ATTN_NORM);

					pointparticles(particleeffectnum("explosion_big"), e.origin, '0 0 0', 1);
					
					//Add more fx later, maybe expanding cylinder too for higher levels
					modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.95, 0.05, 0.25);
					
					if ((mylevel+mylevelbonus) >= 3) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.75, 0.07, 0.4);
					}
					
					if ((mylevel+mylevelbonus) >= 5) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.4, 0.1, 0.5);
					}
					
					if ((mylevel+mylevelbonus) >= 8) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.4, 1, 1.0);
					}
					
					if ((mylevel+mylevelbonus) >= 10) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.3, 2, 2.0);
					}
					
					if ((mylevel+mylevelbonus) >= 13) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.8, 2.1, 3.0);
					}
					
					if ((mylevel+mylevelbonus) >= 15) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.75, 2.2, 4.0);
					}
					
					if ((mylevel+mylevelbonus) >= 18) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.5, 2.3, 5.0);
					}
					
					if ((mylevel+mylevelbonus) >= 20) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.5, 2.4, 6.0);
					}
					
					if ((mylevel+mylevelbonus) >= 23) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.8, 2.5, 7.0);
					}
					
					if ((mylevel+mylevelbonus) >= 25) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.75, 2.6, 8.0);
					}
					
					if ((mylevel+mylevelbonus) >= 28) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.5, 2.7, 9.0);
					}
					
					if ((mylevel+mylevelbonus) >= 30) {
						modeleffect_spawn("models/sphere/sphexp2.iqm", 0, 0, e.origin, '0 0 0', '0 0 0', '0 0 0', 0, myexradius, 0.5, 2.8, 10.0);
					}
					
					CastSpellExplosion_Mine_Damage_Tree (e, myexradius, myexdamage);
					RadiusDamage (e, caster, myexdamage, myexedgedamage, myexradius, world, myexforce, WEP_EXPLOSIVE_VEST, world);
					OilFire_explosion_spawnoilburnermaybe(e);
					CastSpellExplosion_AddBurnDamage (isscroll, caster, e, myexradius*0.8, floor(5+((mylevel+mylevelbonus)*0.1)), (mylevel+mylevelbonus));
	
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_explosion,
						exp_spell_explosion,
						1, world);
				}			
				remove(e);
			} else {
				//We'll be nicer to fumbles than taking full time
				addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),3);

				if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),(100 - bound(0,caster.spell_explosion*0.375,37)));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "raiseundead")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_raiseundead; }

		if (isscroll || caster.spell_raiseundead > 0)
		{ caster.rtnvl2 = 1; raiseundeadmarkerenabled = 1; //So we will place death markers if not allready doing so
		if (isscroll || castermana >= 50)
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
					if (isscroll) {
						//Do nothing
					} else if (caster.hasharmed_prisoner || caster.hascommitted_depraved_act) {
							if (caster.hasharmed_prisoner >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 10)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 25)
								mylevelbonus = mylevelbonus + 1;
					}
					
			addspelltime = 1+(20/(mylevel+mylevelbonus));
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_raiseundead))
			{	
				local float myraised;
				myraised = 0;
				myraised = CastSpell_RaiseUndead(caster, (mylevel+mylevelbonus));			
				if(myraised)
				{
					if not(isscroll) castermana = castermana - 50;
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_raiseundead,
						exp_spell_raiseundead,
						(5 + (2*myraised)), world); 
				} else {
					if not(isscroll) castermana = castermana - 5;
				}
			} else {
				if not(isscroll) castermana = castermana - 50;
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
					
		}
		}
	}
	else if(spellname == "phantasmalbarrier")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_phantasmalbarrier; }
		
		if (isscroll || caster.spell_phantasmalbarrier > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,(33 - bound(0,caster.spell_phantasmalbarrier*0.16666,25)) )  )
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,1.5);
			if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,(33 - bound(0,caster.spell_phantasmalbarrier*0.16666,25)));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_phantasmalbarrier))
			{
				//This spell gets cheaper and more powerful the higher the level
				//A defensive spell of sorts
				makevectors(caster.v_angle);
				float	sc;
				pointparticles(particleeffectnum("crylink_muzzleflash"), caster.origin, w_shotdir, 1);
				
				local entity myoldself;
				myoldself = self;
				
				local entity mytracer;
				local float myonetileamnt;
				local float mycounter;
				local float myphbarriers;
				local vector mystartpos;
				local vector mygoodpos;
				myphbarriers = 5 + floor(mylevel*0.1);
				mycounter = 0;
				myonetileamnt = 64;
				mytracer = spawn();
				mytracer.origin = caster.origin;
				traceline(mytracer.origin, mytracer.origin + v_forward * myonetileamnt, MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				traceline(mytracer.origin, mytracer.origin + '0 0 2', MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
				mytracer.origin = trace_endpos;
				mystartpos = trace_endpos;
				mygoodpos = trace_endpos;
				//One in front of us first
				CastSpell_PhantasmalBarrier_PlaceFire(mylevel, 8+(mylevel*2), 5+(mylevel*0.25)+(random()*(mylevel*0.25)), mygoodpos, caster, myonetileamnt);
				while (mycounter < myphbarriers) {
					//Then to the right.
					traceline(mytracer.origin, mytracer.origin + '0 0 64', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin + (v_right * -4), mytracer.origin + (v_right * myonetileamnt), MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					
					//print(ftos(vlen(mytracer.origin - mygoodpos)),"\n");
					if (vlen(mytracer.origin - mygoodpos) < (myonetileamnt*0.25))
					{
						//print("Too close, hit a wall probably\n");
						mycounter = myphbarriers + 999; //Bail outo!
					} else {
						mygoodpos = trace_endpos;
						CastSpell_PhantasmalBarrier_PlaceFire(mylevel, 8+(mylevel*2), 5+(mylevel*0.25)+(random()*(mylevel*0.25)), mygoodpos, caster, myonetileamnt);
						mycounter = mycounter + 1;
					}
				}
				mycounter = 0;
				mytracer.origin = mystartpos;
				while (mycounter < myphbarriers) {
					//Then to the left
					traceline(mytracer.origin, mytracer.origin + '0 0 64', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin + (v_right * 4), mytracer.origin + (v_right * -1 * myonetileamnt), MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					if (vlen(mytracer.origin - mygoodpos) < (myonetileamnt*0.25))
					{
						//print("Too close2, hit a wall probably\n");
						mycounter = myphbarriers + 999; //Bail outo!
					} else {
						mygoodpos = trace_endpos;
						CastSpell_PhantasmalBarrier_PlaceFire(mylevel, 8+(mylevel*2), 5+(mylevel*0.25)+(random()*(mylevel*0.25)), mygoodpos, caster, myonetileamnt);
						mycounter = mycounter + 1;
					}
				}
				
				remove(mytracer);
				self = myoldself;
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_phantasmalbarrier,
					exp_spell_phantasmalbarrier,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "timesink")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_timesink; }
		
		if ((mylevel >= 12 && caster.timesinkent.ammount3 == 1) || (!caster.timesinkent || caster.timesinkent == world)) {
		if (isscroll || caster.spell_timesink > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,(100 - bound(0,caster.spell_timesink*0.5,75)) )  )
		{
			if (mylevel >= 12) {
				addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,bound(0.01, (1.5 - (mylevel/25)), 1.5));
			} else {
				addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,1.5);
			}
			
			if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,(100 - bound(0,caster.spell_timesink*0.5,75)));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_timesink))
			{
				//This spell gets cheaper and more powerful the higher the level
				//A time manipulation spell
				
				local float myslowlevel;
				local float myminslowtime;
				
				myslowlevel = mylevel;
				myminslowtime = 0.001;
				
				if (mylevel >= 9) {
					//Speed control at level 9
					
					if(caster.BUTTON_USE) {
						myslowlevel = myslowlevel * 0.25;
						myminslowtime = myminslowtime / 0.75;
					}
					
					if(caster.BUTTON_HOOK) {
						myslowlevel = myslowlevel * 0.5;
						myminslowtime = myminslowtime / 0.5;
					}
					
					if (caster.BUTTON_CROUCH) {
						myslowlevel = myslowlevel * 0.75;
						myminslowtime = myminslowtime / 0.25;
					}
					
					if (myslowlevel < 1) {
						myslowlevel = 1;
					}
				}
				
				if (!caster.timesinkent || caster.timesinkent == world) {
					//normal cast
					CastSpell_Timesink(
					caster,
					bound(myminslowtime, 0.6 - (myslowlevel*0.02), 0.6),
					bound(0.5, (3/(mylevel*0.25)) ,3),
					mylevel * 0.5,
					mylevel);

				} else {
					//Reset
					caster.timesinkent.ammount2 = time+caster.timesinkent.cnt;
					caster.timesinkent.ammount3 = 2; //Phase
				}
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_timesink,
					exp_spell_timesink,
					1+(mylevel*0.35), world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
		}
	}
	else if(spellname == "flameburst")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_flameburst; }
		
		if (isscroll || caster.spell_flameburst > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,80))
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
		
			addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),1.5);
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),80);
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_flameburst))
			{
				makevectors(caster.v_angle);
				float	sc;
				pointparticles(particleeffectnum("fireball_muzzleflash"), caster.origin, w_shotdir, 1);
				W_SetupShot(caster, FALSE, FALSE, "weapons/fireball_fire.wav", CH_WEAPON_A, 0);
				for (sc = 0;sc < (25 + floor((mylevel+mylevelbonus)*0.5));sc = sc + 1) {
					makevectors(caster.v_angle);
					W_Flameburst1(caster, isscroll, 0.75);
					W_Flameburst2((mylevel+mylevelbonus), caster, isscroll, 0.5);
					
				}
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_flameburst,
					exp_spell_flameburst,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "firecentury")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_firecentury; }
		
		if (isscroll || caster.spell_firecentury > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel, bound(10,(mylevel*10),1000) ))
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
		
			addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),1.5);
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus), bound(10,(mylevel*10),1000) );
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_firecentury))
			{
				//makevectors(caster.v_angle); //Traces along where we are looking...
				makevectors(caster.angles); //Don't want to do it from view angles, will do from model instead, will be more straight (usually...)
				local vector cstorigin;
				local vector myendpos0, myendpos1, myendpos2, myendpos3, myendposup, myendposdown, mystartorigindown;
				local float maxtraceamnt, maxtracedistanceforspell, mylen, mylen2, myradlevels, mylevelsize, myfireballamnts;
				maxtracedistanceforspell = 2048;
				maxtraceamnt = 32 * (mylevel+mylevelbonus);
				myfireballamnts = 1+(mylevel+mylevelbonus)*2;
				
				myradlevels = 1 + floor(0.5*(mylevel+mylevelbonus));
				
				//cstorigin = caster.origin + caster.view_ofs;
				cstorigin = caster.origin;
				traceline(cstorigin, cstorigin + v_forward * bound(128, maxtraceamnt, maxtracedistanceforspell), MOVE_NORMAL, caster);
				myendpos0 = trace_endpos;
				
				traceline(cstorigin, cstorigin + v_forward * (bound(128, maxtraceamnt, maxtracedistanceforspell) * -1), MOVE_NORMAL, caster);
				myendpos1 = trace_endpos;
				
				traceline(cstorigin, cstorigin + v_right * bound(128, maxtraceamnt, maxtracedistanceforspell), MOVE_NORMAL, caster);
				myendpos2 = trace_endpos;
				
				traceline(cstorigin, cstorigin + v_right * (bound(128, maxtraceamnt, maxtracedistanceforspell) * -1), MOVE_NORMAL, caster);
				myendpos3 = trace_endpos;
				
				traceline(cstorigin, cstorigin + v_up * bound(128, maxtraceamnt, maxtracedistanceforspell), MOVE_NORMAL, caster);
				myendposup = trace_endpos;
				
				traceline(cstorigin, cstorigin + v_up * (bound(128, maxtraceamnt, maxtracedistanceforspell) * -1), MOVE_NORMAL, caster);
				myendposdown = trace_endpos;
				
				//Take shortest length
				mylen = vlen(cstorigin - myendpos0);
				mylen2 = vlen(cstorigin - myendpos1);
				
				if (mylen2 < mylen) mylen = mylen2;
				
				mylen2 = vlen(cstorigin - myendpos2);
				
				if (mylen2 < mylen) mylen = mylen2;
				
				mylen2 = vlen(cstorigin - myendpos3);
				
				if (mylen2 < mylen) mylen = mylen2;
				
				////////////////////////////
				
				local float myzzz;
				myzzz = vlen (myendposup - myendposdown);
				myzzz = myzzz - 32;
				
				mylevelsize = (myzzz / myradlevels);
				
				mystartorigindown = myendposdown;
				mystartorigindown_z = mystartorigindown_z + 32;
				

				pointparticles(particleeffectnum("fireball_muzzleflash"), caster.origin, w_shotdir, 1);
				W_SetupShot(caster, FALSE, FALSE, "weapons/fireball_fire.wav", CH_WEAPON_A, 0);
				
				
				
				
				entity myoldenself;
				entity myspawnradial;
				myoldenself = self;
				////////////////
				
				myspawnradial = spawn();
				myspawnradial.spawnradial_spawn = "W_Firecentury_Attack1_spell_dofromsavedvars";
				//myspawnradial.spawnradial_spawn = "spawnfunc_item_cells";
				myspawnradial.owner = caster;
				myspawnradial.altdeathtype_addspellexp_isscroll = isscroll;
				myspawnradial.altdeathtype_addspellexp = 1;
				myspawnradial.ammount2 = autocvar_g_balance_fireball_primary_lifetime + (mylevel+mylevelbonus);
				
				myspawnradial.spawnradial_rads = 1;
				myspawnradial.spawnradial_lvls = myradlevels;
				myspawnradial.spawnradial_originoffset = mylen;
				myspawnradial.spawnradial_lvl_offset = mylevelsize;
				myspawnradial.spawnradial_scts = myfireballamnts; 
				
				myspawnradial.spawnradial_spawn_no_solid = 1;
				myspawnradial.spawnradial_spawn_no_water = 1;
				myspawnradial.spawnradial_spawn_no_slime = 1;
				myspawnradial.spawnradial_spawn_no_sky = 1;
				
				if (myradlevels <= 5) {
					myspawnradial.spawnradial_lvl_addangle = (360/myfireballamnts * 0.5);
				} else if (myradlevels <= 9) {
					myspawnradial.spawnradial_lvl_addangle = (360/myfireballamnts * 0.333333);
				} else {
					myspawnradial.spawnradial_lvl_addangle = (360/myfireballamnts * 0.2);
				}
				myspawnradial.origin = mystartorigindown;
				//print(ftos(mylen), "mylen\n");
				setorigin(myspawnradial, myspawnradial.origin);
				self = myspawnradial;
				spawnradial_populate(0);
				////////////////
				
				self = myoldenself;
				
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_firecentury,
					exp_spell_firecentury,
					1, world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "frostbeam")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_frostbeam; }
		
		if (isscroll || caster.spell_frostbeam > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 20)
		{
		addspelltime = 0.2;
		if not(isscroll) castermana = castermana - 20;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_frostbeam))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(256, 256 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				effectnum = particleeffectnum("iceball");
				trailparticles(caster, effectnum, caster.origin, trace_endpos);
					if(trace_ent != world)
					if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
						Freeze(trace_ent, 0.05/(mylevel*0.05), 0);
						
						
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_frostbeam,
					exp_spell_frostbeam,
					1, trace_ent); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "grace")
	{
		if (!isscroll && caster.gracespellent && caster.spell_grace < 10) {
			//Only one at a time for non-scroll
		} else {
		//////////////////////
		
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_grace; }
		
		if (isscroll || caster.spell_grace > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (100 + (mylevel * 2)))
		{
			if (isscroll || (time > caster.gracespellrefire))
			{
				addspelltime = 10;
				if not(isscroll) { 
					castermana = castermana - (100 + (mylevel * 2));
					caster.gracespellrefire = time + bound(0, (2.5 * mylevel) , 60);
				}
				
				if (CheckSpellNoFumble(isscroll, caster, caster.spell_grace))
				{
					local float mylevelbonus;
					local float mygraceskin;
					
					mylevelbonus = 0;
					mygraceskin = 0;
					if (CastSpellIsUnderSky(caster)) {
						if (isscroll) {
							mylevelbonus = 1;
						} else {
							mylevelbonus = 2;
						}
						
						if (caster.hascommitted_depraved_act) {
							if (caster.hascommitted_depraved_act >= 3) {
								mylevelbonus = 0;
							}
						} else if (caster.hascommitted_act_of_grace) {
							if (!caster.hasharmed_prisoner
							&& caster.hascommitted_act_of_grace >= 1000) {
								mylevelbonus = mylevelbonus * 2;
								mylevelbonus = mylevelbonus + 2;
							} else if (!caster.hasharmed_prisoner
							&& caster.hascommitted_act_of_grace >= 500) {
								mylevelbonus = mylevelbonus + 2;
							} else if (caster.hascommitted_act_of_grace > 50) {
								mylevelbonus = mylevelbonus + 1;
							}
						}
					}
					
					if (caster.hascommitted_depraved_act >= 5) {
						mylevelbonus = floor(caster.hascommitted_depraved_act * 0.2) * -1;
					}
					
					
					if (caster.hasburned_others_to_death >= 150) {
						mylevelbonus = mylevelbonus - 3;
					} else if (caster.hasburned_others_to_death >= 100) {
						mylevelbonus = mylevelbonus - 2;
					} else if (caster.hasburned_others_to_death >= 10) {
						mylevelbonus = mylevelbonus - 1;
					}
					
					
					if (caster.hascommitted_depraved_act) {
						mygraceskin = 2;
					}
				
					if (caster.gracespellent) {
						caster.gracespellent.ammount3 = time;
						caster.gracespellent.realowner = world;
						caster.gracespellent = world;
					}
					
					if ((mylevel+mylevelbonus) < 0) mylevelbonus = 0;
					
					
					if (mygraceskin == 2) {
						//Do nothing
					} else {
						sound (caster, CH_WEAPON_A, "ardentryst/Obelisk.ogg", VOL_BASE*(0.8+(random()*0.4)), ATTN_NORM);
					}
					
					
					CastSpell_Grace(caster, (mylevel+mylevelbonus), isscroll, mygraceskin);
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
					 	spell_grace,
						exp_spell_grace,
						(1), world); 
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You fumbled the spell\n");
				}
			}
		}
		}
		
		//////////////////////
		}
	}
	else if(spellname == "vampyricconduit")
	{
		if (!isscroll && caster.vampyricconduitspellent && caster.spell_vampyricconduit < 10) {
			//Only one at a time for non-scroll
		} else {
		//////////////////////
		
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_vampyricconduit; }
		
		if (isscroll || caster.spell_vampyricconduit > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (90 + (mylevel * 2)))
		{
			if (isscroll || (time > caster.vampyricconduitspellrefire))
			{
				addspelltime = 10;
				if not(isscroll) { 
					castermana = castermana - (90 + (mylevel * 2));
					caster.vampyricconduitspellrefire = time + bound(0, (2 * mylevel) , 60);
				}
				
				if (CheckSpellNoFumble(isscroll, caster, caster.spell_vampyricconduit))
				{
					local float mylevelbonus;
					
					mylevelbonus = 0;
					if (CastSpellIsUnderSky(caster)) {
						if (isscroll) {
							mylevelbonus = -1;
						} else {
							mylevelbonus = -2;
						}
					} else {
						if (isscroll) {
							//Do nothing
						} else if (caster.hasharmed_prisoner || caster.hascommitted_depraved_act) {
							if (caster.hasharmed_prisoner >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 5000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 10)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 50)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 150)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 250)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 500)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 750)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 2000)
								mylevelbonus = mylevelbonus + 1;
						}
					}
					
					if ((mylevel+mylevelbonus) < 1) {
						mylevelbonus = 0;
					}
				
					if (caster.vampyricconduitspellent) {
						caster.vampyricconduitspellent.ammount3 = time;
						caster.vampyricconduitspellent.realowner = world;
						caster.vampyricconduitspellent = world;
					}
					
					//sound (caster, CH_WEAPON_A, "ardentryst/Obelisk.ogg", VOL_BASE*(0.8+(random()*0.4)), ATTN_NORM);
	
					CastSpell_VampyricConduit(caster, (mylevel+mylevelbonus), isscroll);
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
					 	spell_vampyricconduit,
						exp_spell_vampyricconduit,
						(1), world); 
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You fumbled the spell\n");
				}
			}
		}
		}
		
		//////////////////////
		}
	}
	
	/////////////
	
	else if(spellname == "heal")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_heal; }
		
		if (isscroll || caster.spell_heal > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (10 - bound(0,caster.spell_heal*0.25,8)) )
		{
			local float myspellworked;
			local float mylevelbonus;
			local entity mytargent;
			local vector myendpos;
				
			myspellworked = 0;
			mylevelbonus = 0;
			mytargent = world;
			if (CastSpellIsUnderSky(caster)) {
				if (isscroll) {
					if (random() > 0.62) {
						mylevelbonus = 2;
					} else {
						mylevelbonus = 1;
					}
				} else {
					mylevelbonus = 4;
				}
				
				
				if (caster.hascommitted_depraved_act) {
					if (caster.hascommitted_depraved_act >= 3) {
						mylevelbonus = 0;
					}
				} else if (caster.hascommitted_act_of_grace) {
					if (!caster.hasharmed_prisoner
					&& caster.hascommitted_act_of_grace >= 1000) {
						mylevelbonus = mylevelbonus * 2;
						mylevelbonus = mylevelbonus + 2;
					} else if (!caster.hasharmed_prisoner
					&& caster.hascommitted_act_of_grace >= 500) {
						mylevelbonus = mylevelbonus + 2;
					} else if (caster.hascommitted_act_of_grace > 50) {
						mylevelbonus = mylevelbonus + 1;
					}
				}
			}
				
			makevectors(caster.v_angle);
			local vector cstorigin;
			cstorigin = caster.origin + caster.view_ofs;
				
			traceline(cstorigin, cstorigin + v_forward * bound(128, 16 * (mylevel+mylevelbonus), 2048), MOVE_NORMAL, caster);
			//effectnum = particleeffectnum("TE_TEI_G3");
			myendpos = trace_endpos;
			
			if(trace_ent != world) {
			
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
				{
					if(!trace_ent.frozen)
					if(!trace_ent.freezetag_frozen)
					if(!trace_ent.stoned)
					if(trace_ent.deadflag == DEAD_NO)
					if(trace_ent.health > 0)
					{
						if (trace_ent.vuln_isundead) {
							//No healing of undead
						} else {
							mytargent = trace_ent;
							myspellworked = 1;
						}
							
					}
				} else if (trace_ent.classname == "tree" || trace_ent.classname == "bush") {
					if(trace_ent.vehicle_health > 0)
					{
						mytargent = trace_ent;
						myspellworked = 1;
					}
				}
			}
			
			if (mytargent == world) {
				mytargent = CastSpell_Heal_FindHealee(caster, myendpos);
				if (mytargent != world) {
					myspellworked = 1;
				}
			}
			
			if (mytargent == world) {
				mytargent = CastSpell_Heal_FindHealeeMonster(caster, myendpos);
				if (mytargent != world) {
					myspellworked = 1;
				}
			}
			
			if (mytargent == world) {
				mytargent = CastSpell_Heal_FindHealeeTree(caster, myendpos);
				if (mytargent != world) {
					myspellworked = 1;
				}
			}

			if (myspellworked) {
				addspelltime = 0.2 - bound(0,mylevel*0.0075,0.15);
				
				if not(isscroll) castermana = castermana - (10 - bound(0,caster.spell_heal*0.25,8));
				if (CheckSpellNoFumble(isscroll, caster, caster.spell_heal))
				{
					local float myhealamnt;
					local float myaddmoreexp;
					local float mymaxplayeheal;
					
					if (mylevel <= 1) {
						mymaxplayeheal = 80;
					} else if (mylevel <= 2) {
						mymaxplayeheal = 85;
					} else if (mylevel <= 3) {
						mymaxplayeheal = 90;
					} else if (mylevel <= 5) {
						mymaxplayeheal = 95;
					} else if (mylevel <= 6) {
						mymaxplayeheal = 98;
					} else {
						mymaxplayeheal = 100;
					}
					
					if (mylevel >= 10) {
						mymaxplayeheal = mymaxplayeheal + (mylevel*0.5);
					}
					
					myaddmoreexp = 0;
					myhealamnt = (random()*10) + ((mylevel*0.2)*((random()*6)+1)) + 1;
					if (mytargent.classname == "tree" || mytargent.classname == "bush") {
						mytargent.vehicle_health = mytargent.vehicle_health + myhealamnt;
					} else {
						if (trace_ent.flags & FL_CLIENT) {
							if (mytargent.health < mymaxplayeheal) {
								myhealamnt = bound(0, myhealamnt, mymaxplayeheal);
								mytargent.health = bound(mytargent.health, mytargent.health + myhealamnt, autocvar_g_balance_health_limit);
								mytargent.pauserothealth_finished = max(mytargent.pauserothealth_finished, time + autocvar_g_balance_pause_health_rot);
								caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 1;
							} else {
								caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.1;
							}
							pointparticles(particleeffectnum("healing_fx"), mytargent.origin, mytargent.velocity, 1);
						} else if (trace_ent.flags & FL_MONSTER) {
							if (mytargent.max_health > 0) {
								if (mytargent.health < mytargent.max_health) {
									mytargent.health = bound(mytargent.health, mytargent.health + myhealamnt, mytargent.max_health);
									pointparticles(particleeffectnum("healing_fx"), mytargent.origin, mytargent.velocity, 1);
									caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.05;
								}
							} else {
								if (mytargent.health < autocvar_g_balance_health_limit) {
									mytargent.health = bound(mytargent.health, mytargent.health + myhealamnt, autocvar_g_balance_health_limit);
									pointparticles(particleeffectnum("healing_fx"), mytargent.origin, mytargent.velocity, 1);
									caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.05;
								}
							}
						}
					}
					
					if (mylevel >= 7) {
						myaddmoreexp = CastSpell_Heal_AreaHeal(caster, mytargent, myendpos, mylevel, (myhealamnt*0.5));

					}
				
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
					 	spell_heal,
						exp_spell_heal,
						1+(1*myaddmoreexp), mytargent); 
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You fumbled the spell\n");
				}
			} else {
				addspelltime = 0.1 - bound(0,mylevel*0.0075,0.09);
				if not(isscroll) castermana = castermana - (4 - bound(0,caster.spell_heal*0.25,3));
				
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "Your healing spell failed\n");
			}
		}
		}
	}

	
	/////////////
	else if(spellname == "repair")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_repair; }
		
		if (isscroll || caster.spell_repair > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,15))
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,2);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_repair))
			{
				local entity mytargent;
				mytargent = world;
				makevectors(caster.v_angle);
				//print(etos(caster.enemy),"\n");
				traceline(caster.origin, caster.origin + v_forward * bound(128, 128 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
					
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_repair,
						exp_spell_repair,
						1, trace_ent);
					
					if (trace_ent != world)
					{
						mytargent = trace_ent;
						
						local float myhealamnt;
						local float myaddmoreexp;
						myaddmoreexp = 0;
						myhealamnt = (random()*100) + ((mylevel*0.4)*((random()*100)+1)) + 10;
					
						
						if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,15);
						
						if(mytargent.vehicle_flags & VHF_ISVEHICLE)
						{
							if(myhealamnt && mytargent.vehicle_health <= mytargent.tur_health)
								mytargent.vehicle_shield = min(mytargent.vehicle_shield + myhealamnt, mytargent.tur_head.tur_health);

							if(myhealamnt)
								mytargent.vehicle_health = min(mytargent.vehicle_health + myhealamnt, mytargent.tur_health);
						
							myaddmoreexp = myaddmoreexp + 2;
						}
						else if(mytargent.turrcaps_flags & TFL_TURRCAPS_ISTURRET)
						{
							if(mytargent.health  <= mytargent.tur_health && myhealamnt)
								mytargent.health = min(mytargent.health + myhealamnt, mytargent.tur_health);
							//else ..hmmm what? ammo?

							mytargent.SendFlags |= TNSF_STATUS;
							
							myaddmoreexp = myaddmoreexp + 1;
						}
						
						
						pointparticles(particleeffectnum("ammoregen_fx"), mytargent.origin, mytargent.velocity, 1);
						
						pointparticles(particleeffectnum("ammoregen_fx"), caster.origin, caster.velocity, 1);
						
						multitool_repairbuilding(mytargent, myhealamnt);
						multitool_repairbuilding(caster, 50);
						
						if (myaddmoreexp) {
							IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_repair,
							exp_spell_repair,
							myaddmoreexp, mytargent);
						}
					} else {
						if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,2);
						
						pointparticles(particleeffectnum("ammoregen_fx"), caster.origin, caster.velocity, 1);

						multitool_repairbuilding(caster, 50);
					}
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,15);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "holylight")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_holylight; }
		
		if (isscroll || caster.spell_holylight > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (5 + (mylevel)))
		{
			addspelltime = 0.2;
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_holylight))
			{
				local float mylevelbonus;
				local entity myholylight;
				
				mylevelbonus = 0;
				if (CastSpellIsUnderSky(caster)) {
					if (isscroll) {
						mylevelbonus = 1;
					} else {
						mylevelbonus = 2;
					}
				}
				
				if (caster.hascommitted_depraved_act) {
					if (caster.hascommitted_depraved_act >= 20) {
						mylevelbonus = -2;
					} else if (caster.hascommitted_depraved_act >= 10) {
						mylevelbonus = -1;
					} else if (caster.hascommitted_depraved_act >= 3) {
						mylevelbonus = 0;
					}
				} 
				
				if ((mylevel+mylevelbonus) < 0) mylevelbonus = 0;
				
				
				if (caster.holylightspellent && 
				caster.holylightspellent != world) {
					if not(isscroll) castermana = castermana - 2;
					
					if (caster.holylightspellent.realowner == caster) {
						caster.holylightspellent.realowner = world;
					}
					caster.holylightspellent = world;
					
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You dim your holylight\n");
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_holylight,
					exp_spell_holylight,
					1, world); 
				} else {
					if not(isscroll) castermana = castermana - (5 + (mylevel));
					
					myholylight = spawn();
					myholylight.origin = caster.origin;
					myholylight.ammount2 = mylevel + mylevelbonus;
					myholylight.ammount3 = time + (myholylight.ammount2 * 10);
					myholylight.amnt = isscroll;
					myholylight.think = CastSpell_HolyLight_InitThink;
					myholylight.nextthink = time;
					setorigin(myholylight, myholylight.origin);
				
					myholylight.realowner = caster;
					caster.holylightspellent = myholylight;
				
					IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_holylight,
					exp_spell_holylight,
					2, world); 
				}
			} else {
				if not(isscroll) castermana = castermana - (5 + (mylevel));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "holybolt")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_holybolt; }
		
		if (isscroll || caster.spell_holybolt > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (10 + (mylevel * 2)))
		{
			addspelltime = 0.2;
			if not(isscroll) castermana = castermana - (10 + (mylevel * 2));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_holybolt))
			{
				local float mylevelbonus;
				
				mylevelbonus = 0;
				if (CastSpellIsUnderSky(caster)) {
					if (isscroll) {
						mylevelbonus = 1;
					} else {
						mylevelbonus = 4;
					}
				}
				
				makevectors(caster.v_angle);
				local vector cstorigin;
				cstorigin = caster.origin + caster.view_ofs;
				
				traceline(cstorigin, cstorigin + v_forward * bound(1024, 256 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				effectnum = particleeffectnum("TE_TEI_G3");

				trailparticles(caster, effectnum, cstorigin, trace_endpos);
				
				if (random() > 0.5)
					sound (caster, CH_WEAPON_A, "weather/thunder_crack.wav", VOL_BASE*(0.6+(random()*0.4)), ATTN_NORM);
				else
					sound (caster, CH_WEAPON_A, "onslaught/shockwave.ogg", VOL_BASE*(0.6+(random()*0.4)), ATTN_NORM);
				
				if(trace_ent != world)
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT)
				)
				{
					if (trace_ent.vuln_isundead) {
						local vector myvec;
						FireRailgunBullet (cstorigin, cstorigin + v_forward * bound(1024, 256 * (mylevel+mylevelbonus), MAX_SHOT_DISTANCE),
						trace_ent.vuln_isundead*((mylevel+mylevelbonus)*10),
						0, 0, 0, 0, 0, DEATH_HOLYBOLT);
	
						// teamcolor / hit beam effect
						myvec = WarpZone_UnTransformOrigin(WarpZone_trace_transform, trace_endpos);
						WarpZone_TrailParticles(world, particleeffectnum("TE_TEI_G3"), cstorigin, myvec);						
						pointparticles(particleeffectnum("TE_PLASMABURN"), trace_endpos, '0 0 0', 1);

					} else {
						trace_ent.health = trace_ent.health + mylevel + mylevelbonus + 10;
						
						if (trace_ent.flags & FL_CLIENT) {
							caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.1;
						} else if (trace_ent.flags & FL_MONSTER) {
							caster.hascommitted_act_of_grace = caster.hascommitted_act_of_grace + 0.015;
						}
					}
				}
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_holybolt,
					exp_spell_holybolt,
					1, trace_ent); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "holyword")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_holyword; }
		
		if (isscroll || caster.spell_holyword > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (80 + (mylevel * 2)))
		{
			addspelltime = 7;
			if not(isscroll) castermana = castermana - (80 + (mylevel * 2));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_holyword))
			{
				local float mybonusexp, mylevelbonus;
				mybonusexp = 0;
				
				mylevelbonus = 0;
				if (CastSpellIsUnderSky(caster)) {
					if (isscroll) {
						mylevelbonus = 1;
					} else {
						mylevelbonus = 3;
					}
				}
				
				if (random() > 0.5)
					sound (caster, CH_WEAPON_A, "weather/thunder_crack.wav", VOL_BASE*(0.8+(random()*0.4)), ATTN_NORM);
				else
					sound (caster, CH_WEAPON_A, "onslaught/shockwave.ogg", VOL_BASE*(0.8+(random()*0.4)), ATTN_NORM);
				
				mybonusexp = CastSpell_HolyWord(caster, mylevel + mylevelbonus);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_holyword,
					exp_spell_holyword,
					(1 + mybonusexp), world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "extinguish")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_extinguish; }
		
		if (isscroll || caster.spell_extinguish > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (125 + (mylevel * 2)))
		{
			addspelltime = 7;
			if not(isscroll) castermana = castermana - (125 + (mylevel * 2));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_extinguish))
			{
				local float mybonusexp, mylevelbonus;
				mybonusexp = 0;
				
				mylevelbonus = 0;
				if (CastSpellIsUnderSky(caster)) {
					if (isscroll) {
						mylevelbonus = -1;
					} else {
						mylevelbonus = -2;
					}
				} else {
					if (isscroll) {
						mylevelbonus = 1;
					} else {
						mylevelbonus = 2;
						
						
						if (caster.hasharmed_prisoner || caster.hascommitted_depraved_act) {
							if (caster.hasharmed_prisoner >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hasharmed_prisoner >= 5000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 10)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 50)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 150)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 250)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 500)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 750)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 1000)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 2000)
								mylevelbonus = mylevelbonus + 1;
						}
					}
				}
					
				if ((mylevel+mylevelbonus) < 1) {
					mylevelbonus = 0;
				}
				
				mybonusexp = CastSpell_Extinguish(caster, mylevel + mylevelbonus);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_extinguish,
					exp_spell_extinguish,
					(1 + mybonusexp), world); 
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	
	else if(spellname == "darkritual")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_darkritual; }
		
		if (isscroll || caster.spell_darkritual > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (50 - bound(0,caster.spell_darkritual*1.75,30)) )
		{
			local float myspellworked;
			local float mylevelbonus;
			local entity mytargent;
			local entity mytransferee;
				
			myspellworked = 0;
			mylevelbonus = 0;
			mytargent = world;
			if (CastSpellIsUnderSky(caster)) {
				if (isscroll) {
					mylevelbonus = -2;
				} else {
					mylevelbonus = -4;
				}
			} else {
				if (isscroll) {
					mylevelbonus = 1;
				} else {
					mylevelbonus = 2;
					
					if (caster.hasharmed_prisoner || caster.hascommitted_depraved_act) {
							if (caster.hasharmed_prisoner >= 100)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 10)
								mylevelbonus = mylevelbonus + 1;
								
							if (caster.hascommitted_depraved_act >= 50)
								mylevelbonus = mylevelbonus + 1;
					}
				}
			}
			
			if ((mylevel+mylevelbonus) < 1) {
				mylevelbonus = 0;
			}
				
			makevectors(caster.v_angle);
			local vector cstorigin;
			cstorigin = caster.origin + caster.view_ofs;
				
			traceline(cstorigin, cstorigin + v_forward * bound(128, 16 * (mylevel+mylevelbonus), 2048), MOVE_NORMAL, caster);
			//effectnum = particleeffectnum("TE_TEI_G3");
			
			if(trace_ent != world) {
			
				if(trace_ent.flags & FL_CLIENT)
				{
					if(!trace_ent.frozen || trace_ent.frozen == 2)
					if(!trace_ent.freezetag_frozen)
					if(!trace_ent.stoned)
					if(trace_ent.deadflag == DEAD_NO)
					if(trace_ent.health >= 1)
					{
						if (trace_ent.handcuffed || trace_ent.prisonerlevel || trace_ent.frozen == 2) {
							//Handcuffed, a prisoner, or in paralysis
							mytargent = trace_ent;
							
							mytransferee = CastSpell_DarkRitual_FindTransferee(caster, mytargent);
							if (mytransferee != world) {
								myspellworked = 1;
							} else {
								mytargent = world;
								
								if ((clienttype(caster) == CLIENTTYPE_REAL))
									sprint(caster, "Dark Ritual requires a transferee in close proximity to the caster\n");
							}
						} else {
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Dark Ritual requires target to be chained, shackled, handcuffed, in paralysis, or a prisoner\n");
						}
					} else {
						if ((clienttype(caster) == CLIENTTYPE_REAL))
							sprint(caster, "Dark Ritual requires target to be alive and well\n");
					}
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "Dark Ritual requires a player as a target\n");
				}
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "Dark Ritual requires a target\n");
			}

			if (myspellworked) {
				addspelltime = 5;
				if not(isscroll) castermana = castermana - (50 - bound(0,(caster.spell_darkritual+mylevelbonus)*1.75,30));
				if (CheckSpellNoFumble(isscroll, caster, caster.spell_darkritual))
				{
					local float manaforcaster;
					local float manafortransferee;
					local float mytargentquality;
					local float mytargenthealth;
					local float mytargentmana;
					local float mymanaconversion;
					manaforcaster = 0;
					manafortransferee = 0;
					mytargentquality = 0;
					mymanaconversion = 0;
					mytargenthealth = mytargent.health;
					mytargentmana = mytargent.mana;
					
					if (mytargent.prisonerlevel == 3) {
						mytargentquality = mytargentquality + 2;
					}
					
					if (mytargent.frozen == 2) {
						//If is in paralysis
						//but is not handcuffed
						//and is not chained
						//and is not in a jail
						//not a very good offering
						//will accept but with penalties
						if (mytargent.handcuffed) {
							//Fine, Do Nothing: handcuffed
						} else if (mytargent.prisonerlevel == 3) {
							//Fine, Do Nothing: Chained
						} else if (mytargent.prisonerlevel == 2) {
							//Fine, Do Nothing: Jailed
						} else if (mytargent.prisonerlevel == 1) {
							mytargentquality = mytargentquality - 1;
						} else {
							mytargentquality = mytargentquality - 3;
						}
					}
						
					if (mytargent.permblinded) {
						mytargentquality = mytargentquality + 2; //yaaassss
					} else if (mytargent.stat_blinded > 90) {
						mytargentquality = mytargentquality - 1; //Somewhat Insult, damaged before in battle perhaps! And would recover!
					} else if (mytargent.stat_blinded > 80) {
						mytargentquality = mytargentquality - 1.5; //Insult, damaged before in battle perhaps! Not even that bad!
					} else if (mytargent.stat_blinded > 40) {
						mytargentquality = mytargentquality - 2; //Insult, damaged before in battle perhaps! Ditto
					} else if (mytargent.stat_blinded > 0.1) {
						mytargentquality = mytargentquality - 0.5; //Insult, damaged before in battle perhaps! But we can't really tell
					}
						
					if (mytargent.permmangled_l) {
						mytargentquality = mytargentquality + 2;
					} else if (mytargent.tempmangled_l) {
						mytargentquality = mytargentquality - 1;
					}
						
					if (mytargent.permmangled_r) {
						mytargentquality = mytargentquality + 2;
					} else if (mytargent.tempmangled_r) {
						mytargentquality = mytargentquality - 1;
					}
						
					if (mytargent.permhobbled_l) {
						mytargentquality = mytargentquality + 2;
					} else if (mytargent.temphobbled_l) {
						mytargentquality = mytargentquality - 1;
					}
						
					if (mytargent.permhobbled_r) {
						mytargentquality = mytargentquality + 2;
					} else if (mytargent.temphobbled_r) {
						mytargentquality = mytargentquality - 1;
					}
						
					//
					if (mytargent.prisoner3_suffering >= 50) {
						mytargentquality = mytargentquality + 1;
					} else if (mytargent.prisoner2_suffering >= 50) {
						mytargentquality = mytargentquality + 0.25;
					}
					
					if (mytargent.prisoner3_suffering >= 100) {
						mytargentquality = mytargentquality + 1;
					} else if (mytargent.prisoner2_suffering >= 100) {
						mytargentquality = mytargentquality + 0.25;
					}
					
					if (mytargent.prisoner3_suffering >= 500) {
						mytargentquality = mytargentquality + 1;
					} else if (mytargent.prisoner2_suffering >= 500) {
						mytargentquality = mytargentquality + 0.25;
					}
					//
					//Note prisoner3_sufferingmemory is given at 0.2 multiple
					//Note prisoner2_sufferingmemory is given at 0.1 multiple
					if (mytargent.prisoner3_sufferingmemory >= 50) {
						mytargentquality = mytargentquality + 1;
					} else if (mytargent.prisoner2_sufferingmemory >= 50) {
						mytargentquality = mytargentquality + 0.25;
					}
					
					if (mytargent.prisoner3_sufferingmemory >= 100) {
						mytargentquality = mytargentquality + 1;
					} else if (mytargent.prisoner2_sufferingmemory >= 100) {
						mytargentquality = mytargentquality + 0.25;
					}
					
					if (mytargent.prisoner3_sufferingmemory >= 500) {
						mytargentquality = mytargentquality + 1;
					} else if (mytargent.prisoner2_sufferingmemory >= 500) {
						mytargentquality = mytargentquality + 0.25;
					}
					//
					
					if (Fire_IsBurning(mytargent)) {
						mytargentquality = mytargentquality + 1;
					}
					
					if (autocvar_g_allow_friends) {
						//Doublecrossing a friend...
						if (quickIsFriendOf(caster, mytargent)) {
						if (quickIsFriendOf(mytargent, caster)) {
							mytargentquality = mytargentquality + 1;
						}
						}
					}
					
					if (mytargent.sex == SEX_MALE) {
						if (mytargent.body_phal) {
							if (mytargent.body_phal_stat == 1) {
								mytargentquality = mytargentquality + 5;
							} else if (mytargent.body_phal_stat == 2) {
								mytargentquality = mytargentquality + 2;
							} else if (mytargent.body_phal_stat == 3) {
								mytargentquality = mytargentquality + 4;
							}
						}
					} else if (mytargent.sex == SEX_FEMALE) {
						if (mytargent.age < 10)
						{
							mytargentquality = mytargentquality + 5;
						} else if (mytargent.age < 13)
						{
							mytargentquality = mytargentquality + 4;
						}
						else if (mytargent.age < 15)
						{
							mytargentquality = mytargentquality + 2;
						}
						else if (mytargent.age < 18)
						{
							mytargentquality = mytargentquality + 1;
						}
					} else if (mytargent.sex == SEX_EUNICH) {
						mytargentquality = mytargentquality + 1;
					}
					
					if (mytargent.species == SPECIES_FAE) {
						mytargentquality = mytargentquality + 1;
						mytargentquality = mytargentquality * 2;
					} else if (mytargent.species == SPECIES_HUMAN) {
						mytargentquality = mytargentquality + 1;
						mytargentquality = mytargentquality * 1;
					} else if (mytargent.species == SPECIES_ALIEN) {
						mytargentquality = mytargentquality * 0.5;
					} else if (mytargent.species == SPECIES_ANIMAL) {
						mytargentquality = mytargentquality * 0.2;
					} else if (mytargent.species == SPECIES_TAR) {
						mytargentquality = mytargentquality * 0.1;
					} else if (mytargent.species == SPECIES_SKELETON) {
						mytargentquality = mytargentquality * 0.05;
					} else if (mytargent.species == SPECIES_STONE) {
						mytargentquality = mytargentquality * 0.025;
					} else if (mytargent.species == SPECIES_INSECT) {
						mytargentquality = mytargentquality * 0.001;
					} else {
						mytargentquality = 0;
					}
					
					if (mytargentquality < 0) {
						mytargentquality = 0;
					}
					
					
					if (mytargentquality < 0.5) {
						if (mytargent.health > 0)
							mytargent.health = mytargent.health * 0.5;
						
						if (mytargent.mana > 0)
							mytargent.mana = 0;
						
						Damage(caster, caster, world, 
						(caster.health*0.99), DEATH_ROT, 
						caster.origin, 
						'0 0 0');
						
						Damage(mytransferee, world, world, 
						(mytransferee.health*0.99), DEATH_ROT, 
						mytransferee.origin, 
						'0 0 0');
						
						if ((clienttype(caster) == CLIENTTYPE_REAL))
							sprint(caster, "Your sacrifice was beyond abysmal\n");	
					} else if (mytargentquality < 1) {
						if (mytargent.health > 0)
							mytargent.health = mytargent.health * 0.5;
						
						if (mytargent.mana > 0)
							mytargent.mana = 0;
							
						Damage(caster, caster, world, 
						(caster.health*0.9), DEATH_ROT, 
						caster.origin, 
						'0 0 0');
						
						Damage(mytransferee, world, world, 
						(mytransferee.health*0.9), DEATH_ROT, 
						mytransferee.origin, 
						'0 0 0');
						
						if ((clienttype(caster) == CLIENTTYPE_REAL))
							sprint(caster, "Your sacrifice was abysmal\n");	
					} else if (mytargent.health > 0) {
						//3 or so is normal perhaps (human)
						//12 is quite good
						//17 is very good, near best human can get
						//20 is very good, best a human can get
						//34 is near best a fae can get
						//39 is best a fae can get
						
						//+6 for sufferings tho is possible so..
						//26 best for humans
						//52 is best for fae
						if (mytargentquality < 39) {
							mytargentquality = mytargentquality + mylevelbonus;
							//Could be negative...
							
							if (mytargentquality < 0) {
								mytargentquality = 0.1;
							}
						}
						
						if (mytargentquality >= 52) {
							mymanaconversion = 6.5;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was beyond record\n");
						} else if (mytargentquality >= 50) {
							mymanaconversion = 6.4;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was matchless\n");
						} else if (mytargentquality >= 46) {
							mymanaconversion = 6.3;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was peerless\n");
						} else if (mytargentquality >= 42) {
							mymanaconversion = 6.2;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was resplendent\n");
						///////////////////////////////////////////////////////////////////	
						} else if (mytargentquality >= 39) {
							mymanaconversion = 6;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was exquisite\n");
						///////////////////////////////////////////////////////////////////		
						} else if (mytargentquality >= 34) {
							mymanaconversion = 5;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was exemplar\n");
								
						} else if (mytargentquality >= 32) {
							mymanaconversion = 4.75;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was astounding\n");
								
						} else if (mytargentquality >= 30) {
							mymanaconversion = 4.5;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.02;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was outstanding\n");
								
						} else if (mytargentquality >= 28) {
							mymanaconversion = 4.25;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.03;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was exemplary\n");
								
						} else if (mytargentquality >= 24) {
							mymanaconversion = 4;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.03;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was excellent\n");
								
						} else if (mytargentquality >= 22) {
							mymanaconversion = 3.75;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.04;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was of great merit\n");
								
						} else if (mytargentquality >= 20) {
							mymanaconversion = 3.5;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.04;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was worthy of praise\n");
								
						} else if (mytargentquality >= 19) {
							mymanaconversion = 3.25;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.04;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was meritorious\n");
								
						} else if (mytargentquality >= 18) {
							mymanaconversion = 3;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.04;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was of substantial quality\n");
						
						} else if (mytargentquality >= 17) {
							mymanaconversion = 2.8;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.05;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was unimpeachable\n");
								
						} else if (mytargentquality >= 16) {
							mymanaconversion = 2.6;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.05;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was satisfying\n");
						} else if (mytargentquality >= 15) {
							mymanaconversion = 2.4;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.05;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was of some merit\n");
								
						} else if (mytargentquality >= 14) {
							mymanaconversion = 2.2;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.05;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was proper\n");
										
						} else if (mytargentquality >= 13) {
							mymanaconversion = 2;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.1;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was satisfactory\n");
								
						} else if (mytargentquality >= 12) {
							mymanaconversion = 1.8;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.1;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was commensurate\n");
								
						} else if (mytargentquality >= 11) {
							mymanaconversion = 1.6;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.1;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was suitable\n");
								
						} else if (mytargentquality >= 10) {
							mymanaconversion = 1.4;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.1;	
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was decent\n");
						
						} else if (mytargentquality >= 9) {
							mymanaconversion = 1.2;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.2;
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was acceptable\n");
								
						} else if (mytargentquality >= 8) {
							mymanaconversion = 1;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.2;
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was proportionate\n");
						} else if (mytargentquality >= 7) {
							mymanaconversion = 0.7;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.2;
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was sufficient\n");
								
						} else if (mytargentquality >= 6) {
							mymanaconversion = 0.8;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.2;
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was adequate\n");
						
						} else if (mytargentquality >= 5) {
							mymanaconversion = 0.5;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.3;
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was of middling value\n");
									
						} else if (mytargentquality >= 4) {
							mymanaconversion = 0.4;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.3;
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was barely adequate\n");
								
						} else if (mytargentquality >= 3) {
							mymanaconversion = 0.3;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.4;
								
							Damage(caster, caster, world, 
							(caster.health*0.05), DEATH_ROT, 
							caster.origin, 
							'0 0 0');
							
							Damage(mytransferee, world, world, 
							(mytransferee.health*0.025), DEATH_ROT, 
							mytransferee.origin, 
							'0 0 0');
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was inadequate\n");
						} else if (mytargentquality >= 2) {
							mymanaconversion = 0.2;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.4;
								
							Damage(caster, caster, world, 
							(caster.health*0.10), DEATH_ROT, 
							caster.origin, 
							'0 0 0');
							
							Damage(mytransferee, world, world, 
							(mytransferee.health*0.05), DEATH_ROT, 
							mytransferee.origin, 
							'0 0 0');
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was of little merit\n");				
						} else {
							mymanaconversion = 0.1;
							if (mytargent.health > 0)
								mytargent.health = mytargent.health * 0.5;
								
							Damage(caster, caster, world, 
							(caster.health*0.15), DEATH_ROT, 
							caster.origin, 
							'0 0 0');
							
							Damage(mytransferee, world, world, 
							(mytransferee.health*0.10), DEATH_ROT, 
							mytransferee.origin, 
							'0 0 0');
								
							if ((clienttype(caster) == CLIENTTYPE_REAL))
								sprint(caster, "Your sacrifice was poor\n");	
						}
						
						
						if (mytargent.mana > 0) {
								mytargent.mana = 0;
						}
						
						mytargenthealth = mytargenthealth - mytargent.health;
						
						//Caster gets most mana
						manaforcaster = manaforcaster + (mytargentmana * 0.66);
						manafortransferee = manafortransferee + (mytargentmana * 0.33);
						
						//Transferee gets most of the converted life
						manaforcaster = manaforcaster + (mytargenthealth * 0.25 * mymanaconversion);
						manafortransferee = manafortransferee + (mytargenthealth * 0.75 * mymanaconversion);
						
						addtocastermana = addtocastermana + manaforcaster;
						caster.pauserotmana_finished = max(caster.pauserotmana_finished, time + autocvar_g_balance_pause_mana_rot);
					
						caster.darkritual_mana_max = autocvar_g_balance_mana_limit * bound(1, mytargentquality, bound(5, mylevel*0.5, 50));
						mytransferee.darkritual_mana_max = autocvar_g_balance_mana_limit * bound(1, mytargentquality, bound(5, mylevel*0.5, 50));
						
						if (autocvar_sv_gameplayfix_darkritual_nomanastableadd) {
							mytransferee.mana = bound(mytransferee.mana, mytransferee.mana + manafortransferee, autocvar_g_balance_mana_limit);
						} else {
							mytransferee.mana = bound(mytransferee.mana, mytransferee.mana + manafortransferee, mytransferee.darkritual_mana_max);
						}
						mytransferee.pauserotmana_finished = max(mytransferee.pauserotmana_finished, time + autocvar_g_balance_pause_mana_rot);
					
						//Stabilize
						if (mytransferee.mana > mytransferee.darkritual_mana_stable) {
							mytransferee.darkritual_mana_stable = mytransferee.mana;
						}
					}
					
				
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
					 	spell_darkritual,
						exp_spell_darkritual,
						1*mytargentquality, mytargent); 
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You fumbled the spell\n");
				}
			} else {
				addspelltime = 1;
				if not(isscroll) castermana = castermana - (5 - bound(0,caster.spell_darkritual*.175,3));
				
				Damage(caster, caster, world, 
				(caster.health*0.05), DEATH_ROT, 
				caster.origin, 
				'0 0 0');
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "Your dark ritual failed\n");
			}
		}
		}
	}

	
	//
	else if(spellname == "lightining")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_lightining; }
		
		if (isscroll || caster.spell_lightining > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 10)
		{
			addspelltime = 0.1 + (1 - bound(0, mylevel*0.01, 1));
			if not(isscroll) castermana = castermana - 10;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_lightining))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 256 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				pointparticles(particleeffectnum("electro_muzzleflash"), caster.origin, v_forward * 1000, 1);
				
					if(trace_ent != world)
					if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
					{
						te_csqc_lightningarc(caster.origin,trace_ent.origin);
						if (mylevel > 10)
							te_csqc_lightningarc(caster.origin,trace_ent.origin);
						if (mylevel > 30)
							te_csqc_lightningarc(caster.origin,trace_ent.origin);
						if (mylevel > 50)
							te_csqc_lightningarc(caster.origin,trace_ent.origin);
						if (mylevel > 70)
							te_csqc_lightningarc(caster.origin,trace_ent.origin);
						
						pointparticles(particleeffectnum("electro_muzzleflash"), trace_ent.origin, v_forward * 1000, 1);
						spamsound (trace_ent, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);

					}
					pointparticles(particleeffectnum("electro_muzzleflash"), trace_endpos, v_forward * 1000, 1);
					
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_lightining,
						exp_spell_lightining,
						1, trace_ent); 
					
					
					te_csqc_lightningarc(caster.origin,trace_endpos);
					
					if (mylevel > 5)
						te_csqc_lightningarc(caster.origin,trace_endpos);
					if (mylevel > 25)
						te_csqc_lightningarc(caster.origin,trace_endpos);
					if (mylevel > 45)
						te_csqc_lightningarc(caster.origin,trace_endpos);
					if (mylevel > 65)
						te_csqc_lightningarc(caster.origin,trace_endpos);
					if (mylevel > 85)
						te_csqc_lightningarc(caster.origin,trace_endpos);
					if (mylevel > 95)
						te_csqc_lightningarc(caster.origin,trace_endpos);	
					
					spamsound (caster, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);
					
				lgunbeam_arcs(36 + mylevel, autocvar_g_balance_lightninggun_primary_arcrange * 4, trace_endpos, caster);
				if (mylevel > 25)
					lgunbeam_arcs(36 + mylevel, autocvar_g_balance_lightninggun_primary_arcrange * 4, trace_endpos+(randomvec()*5), caster);
				if (mylevel > 50)
					lgunbeam_arcs(36 + mylevel, autocvar_g_balance_lightninggun_primary_arcrange * 4, trace_endpos+(randomvec()*10), caster);
				if (mylevel > 75)
					lgunbeam_arcs(36 + mylevel, autocvar_g_balance_lightninggun_primary_arcrange * 4, trace_endpos+(randomvec()*15), caster);
				if (mylevel > 95)
					lgunbeam_arcs(36 + mylevel, autocvar_g_balance_lightninggun_primary_arcrange * 4, trace_endpos+(randomvec()*20), caster);

			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	//
	else if(spellname == "balllightining")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_balllightining; }
		
		if (isscroll || caster.spell_balllightining > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 28)
		{
			addspelltime = 0.2 + (1 - bound(0, mylevel*0.01, 1));
			if not(isscroll) castermana = castermana - 28;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_balllightining))
			{
				local entity mymyoldself;
				mymyoldself = self;
				makevectors(caster.v_angle);
				
				pointparticles(particleeffectnum("electro_muzzleflash"), caster.origin, v_forward * 1000, 1);
					
				self = caster;
				CastSpell_BallLightining_Attack(caster.origin+(caster.view_ofs*0.5), v_forward, bound(100, (mylevel*50), 600), bound(0.05,(1/mylevel),1), caster, mylevel, isscroll, time, 0);

				self = mymyoldself;
					
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_balllightining,
					exp_spell_balllightining,
					1, world); 
				
				spamsound (caster, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);
	
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	//
	//
	else if(spellname == "lightiningburst")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_lightiningburst; }
		
		if (isscroll || caster.spell_lightiningburst > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 95)
		{
			addspelltime = 0.5 + (1 - bound(0, mylevel*0.01, 1));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_lightiningburst))
			{
				if not(isscroll) castermana = castermana - 95;
				
				local entity mymyoldself;
				local vector mylbdir;
				local float mysc;
				mymyoldself = self;
				makevectors(caster.v_angle);
				
				pointparticles(particleeffectnum("electro_muzzleflash"), caster.origin, v_forward * 1000, 1);
					
				self = caster;
				
				
				for (mysc = 0;mysc < (bound(3,mylevel,25));mysc = mysc + 1) {
					//print (ftos(mysc),"_here\n");
					mylbdir = randomvec();
					mylbdir_z = 0;
					normalize(mylbdir);
					CastSpell_BallLightining_Attack(caster.origin+(caster.view_ofs*0.5)+(mylbdir*125), mylbdir, bound(100, (bound(1, mylevel*0.5 ,mylevel)*50), 600), bound(0.05,(1/bound(1, mylevel*0.5 ,mylevel)),1), caster, bound(1, mylevel*0.5 ,mylevel), isscroll, time+0.1, 1);
				}
				
				self = mymyoldself;
					
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_lightiningburst,
					exp_spell_lightiningburst,
					1, world); 
				
				spamsound (caster, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);
	
			} else {
				if not(isscroll) castermana = castermana - 48;
				
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	
	//
	else if(spellname == "chargedbolt")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_chargedbolt; }
		
		if (isscroll || caster.spell_chargedbolt > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 6)
		{
			addspelltime = 0.1 + (0.5 - bound(0, mylevel*0.01, 0.5));
			if not(isscroll) castermana = castermana - 6;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_chargedbolt))
			{
				local entity mymyoldself;
				local float mysc;
				local vector mylbdir;
				mymyoldself = self;
				makevectors(caster.v_angle);
				
				pointparticles(particleeffectnum("electro_muzzleflash"), caster.origin, v_forward * 1000, 1);
					
				self = caster;
				mylbdir = v_forward;
				mylbdir_z = 0;
				CastSpell_ChargedBolt_Attack(caster.origin+(caster.view_ofs*0.5), mylbdir, 300, 0, caster, mylevel, isscroll, time+0.1);

				for (mysc = 0;mysc < (bound(3,mylevel,15));mysc = mysc + 1) {
					//print (ftos(mysc),"_here\n");
					mylbdir = randomvec();
					mylbdir_z = 0;
					mylbdir_x = mylbdir_x * 0.35;
					mylbdir_y = mylbdir_y * 0.35;
					normalize(mylbdir);
					mylbdir_x = v_forward_x + mylbdir_x;
					mylbdir_y = v_forward_y + mylbdir_y;
					CastSpell_ChargedBolt_Attack(caster.origin+(caster.view_ofs*0.5)+(mylbdir*64), mylbdir, 300, 0, caster, mylevel, isscroll, time+0.1);
				}
				
				self = mymyoldself;
					
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_chargedbolt,
					exp_spell_chargedbolt,
					1, world); 
				
				spamsound (caster, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);
	
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "chainlightining")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_chainlightining; }
		
		if (isscroll || caster.spell_chainlightining > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 30)
		{
			addspelltime = 0.5 + (1 - bound(0, mylevel*0.01, 1));
			if not(isscroll) castermana = castermana - 4; //the rest later
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_chainlightining))
			{
				local float mymaxtargs, mycurrenttargs;

				mymaxtargs = 3 + (mylevel*2);
				mycurrenttargs = 0;
				makevectors(caster.v_angle);
				
				pointparticles(particleeffectnum("electro_muzzleflash"), caster.origin, v_forward * 128, 1);
				///
				local entity myeburnttarg;
				myeburnttarg = findradius(caster.origin, 128+(mylevel*64));
				while(myeburnttarg)
				{
					
					//////////
					if(myeburnttarg != world) {
					if(myeburnttarg != caster) {
					if(mycurrenttargs < mymaxtargs) {
					if((myeburnttarg.flags & FL_MONSTER) || (myeburnttarg.flags & FL_CLIENT))
					{
						//print(myeburnttarg.classname, "...", ftos(mycurrenttargs),"\n"); 
						
						te_csqc_lightningarc(caster.origin,myeburnttarg.origin);
						
						
						pointparticles(particleeffectnum("electro_muzzleflash"), myeburnttarg.origin, v_forward * 1000, 1);
						spamsound (myeburnttarg, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);

					
						pointparticles(particleeffectnum("electro_muzzleflash"), myeburnttarg.origin, v_forward * 1000, 1);
					
					
						IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_chainlightining,
							exp_spell_chainlightining,
							1, myeburnttarg); 
					
					
					
						
						spamsound (caster, CH_SHOTS, "weapons/lgbeam_fire.wav", VOL_BASE * bound(0.2, mylevel*0.01, 1), ATTN_NORM);
												
						Damage (myeburnttarg, caster, caster,
							36 + mylevel, WEP_LIGHTNINGGUN, myeburnttarg.origin,
							v_forward * autocvar_g_balance_lightninggun_primary_force + '0 0 1' * autocvar_g_balance_lightninggun_primary_force_up);
		
						mycurrenttargs = mycurrenttargs + 1;
					}
					}
					}
					}
					//////////
					
				myeburnttarg = myeburnttarg.chain;
				}
				
				if (mycurrenttargs >= 3) {
					if not(isscroll) castermana = castermana - 26;
				} else if (mycurrenttargs >= 2) {
					if not(isscroll) castermana = castermana - 18;
				} else if (mycurrenttargs >= 1) {
					if not(isscroll) castermana = castermana - 9;
				}
				
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "lightiningstrike")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_lightiningstrike; }
		
		if (isscroll || caster.spell_lightiningstrike > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (70 - bound(0,caster.spell_lightiningstrike*0.375,32)))
		{
			addspelltime = 0.3;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_lightiningstrike))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
				local vector mylsresetorigin;
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 512 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				entity e = spawn();
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = trace_endpos;
				traceline(e.origin, e.origin + (('0 0 1' * MAX_SHOT_DISTANCE) + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				mylsresetorigin = e.origin;
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
					{
						if not(isscroll) castermana = castermana - (70 - bound(0,caster.spell_lightiningstrike*0.375,32));
						makevectors(e.v_angle);
						CastSpell_LightiningStrike(e, caster, mylevel, isscroll);
						
						local float mystrikes;
						
						if (mylevel > 100) {
							mystrikes = 1 + floor((mylevel - 100)/66.5);
						} else {
							mystrikes = 1;
						}
						
						
						while (mystrikes > 0) {
							//Irregular
							if (mylevel > 10) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 5, isscroll);
							}
							if (mylevel > 15) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 7, isscroll);
							}
							if (mylevel > 20) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 10, isscroll);
							}
							if (mylevel > 25) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 13, isscroll);
							}
							if (mylevel > 30) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 15, isscroll);
							}
							if (mylevel > 40) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 20, isscroll);
							}
							if (mylevel > 50) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 30, isscroll);
							}
							if (mylevel > 55) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 33, isscroll);
							}
							if (mylevel > 60) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 35, isscroll);
							}
							if (mylevel > 70) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 40, isscroll);
							}
							if (mylevel > 80) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 45, isscroll);
							}
							if (mylevel > 90) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 50, isscroll);
							}
							if (mylevel > 92) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 52, isscroll);
							}
							if (mylevel > 95) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 53, isscroll);
							}
							if (mylevel > 99) {
								CastSpell_LightiningStrike_Overtime(mylsresetorigin, caster, 55, isscroll);
							}
						mystrikes = mystrikes - 1;
						}
					}
				}				
				remove(e);
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_lightiningstrike,
					exp_spell_lightiningstrike,
					1, world); 
			} else {
				if not(isscroll) castermana = castermana - (70 - bound(0,caster.spell_lightiningstrike*0.375,32));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "manashield")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_manashield; }
		
		if (isscroll || caster.spell_manashield > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,30))
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,3.2);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_manashield))
			{
				if (caster.hasmanashield < (time + 5)) {
					spamsound (caster, CH_SHOTS, "relics/relic_effect.wav", VOL_BASE * 0.75, ATTN_NORM);
					caster.hasmanashield = time + (mylevel * 10);
					if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,30);
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_manashield,
						exp_spell_manashield,
						1, world); 
				}		
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,30);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "clairvoyance")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_clairvoyance; }
		
		if (isscroll || caster.spell_clairvoyance > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,35))
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,3.2);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_clairvoyance))
			{
				if (caster.hasclairvoyance < (time + 5)) {
					//spamsound (caster, CH_SHOTS, "relics/relic_effect.wav", VOL_BASE * 0.75, ATTN_NORM);
					caster.hasclairvoyance = time + (mylevel * 5);
					if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,35);
					
					caster.hasclairvoyance_lvl = mylevel;
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_clairvoyance,
						exp_spell_clairvoyance,
						2 + caster.hasclairvoyance_nextcastaddexp, world); 
				
					caster.hasclairvoyance_nextcastaddexp = 0;
				} else if (mylevel >= 4) {
					//End spell
					if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,10);
					
					caster.hasclairvoyance = 0;
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_clairvoyance,
						exp_spell_clairvoyance,
						1 + caster.hasclairvoyance_nextcastaddexp, world); 
						
					caster.hasclairvoyance_nextcastaddexp = 0;
					
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You end your clairvoyance spell\n");	
				}		
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,35);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	//
	else if(spellname == "magicbullets")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_magicbullets; }
		
		if (isscroll || caster.spell_magicbullets > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,(10 + floor(mylevel*0.75)) )  )
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,0.1);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_magicbullets))
			{
				makevectors(caster.v_angle);
				
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,(10 + floor(mylevel*0.75)));
				CastSpell_MagicBullets(caster, mylevel);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_magicbullets,
					exp_spell_magicbullets,
					1, world); 
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,(10 + floor(mylevel*0.75)));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "magicmissile")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_magicmissile; }
		
		if (isscroll || caster.spell_magicmissile > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,8))
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,0.1);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_magicmissile))
			{
				makevectors(caster.v_angle);
				//print(etos(caster.enemy),"\n");
				tracebox(caster.origin, '-10 -10 -10','10 10 10', caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
					if(trace_ent != world)
					if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
					{
						caster.enemy = trace_ent;
					}
					
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_magicmissile,
						exp_spell_magicmissile,
						1, trace_ent);
					
					if (caster.enemy != world)
					{
						if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,8);
						ShalMissile();
					}
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,8);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "monstertomonolith")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_monstertomonolith; }

		if (isscroll || caster.spell_monstertomonolith > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,150))
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,30/(mylevel));
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_monstertomonolith))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * 32 * mylevel, MOVE_NORMAL, caster);
				
				if(trace_ent != world)
				if(!(trace_ent.flags & FL_CLIENT))
				if(trace_ent.flags & FL_MONSTER)
				{
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_monstertomonolith,
						exp_spell_monstertomonolith,
						1, trace_ent);
						
					if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,150);
					if(trace_ent.monsterismouse) {
						//Change back to normal to normal since using the opposite spell
						pointparticles(particleeffectnum("EF_STARDUST"), trace_ent.origin, '0 0 0', 12);

						trace_ent.scale = trace_ent.monsterismouse; //The previous, normal scale was recorded here
						trace_ent.monsterismouse = 0;
						
						//print("MNOLTH:Mouse to normal ****via Monolith\n");
						
						trace_ent.mins_x = trace_ent.mins_x * 8;
						trace_ent.mins_y = trace_ent.mins_y * 8;
						trace_ent.mins_z = trace_ent.mins_z * 8;
						trace_ent.maxs_x = trace_ent.maxs_x * 8;
						trace_ent.maxs_y = trace_ent.maxs_y * 8;
						trace_ent.maxs_z = trace_ent.maxs_z * 8;
						setsize(trace_ent, trace_ent.mins, trace_ent.maxs);
					} else if(!trace_ent.monsterismonolith) {
						//Make us immense
						pointparticles(particleeffectnum("EF_STARDUST"), trace_ent.origin, '0 0 0', 12);
						
						if (!trace_ent.scale) trace_ent.monsterismonolith = 1;
						else trace_ent.monsterismonolith = trace_ent.scale; //Record scale
						
						//print("MNOLTH:Normal to Monolith\n");
						
						if (!trace_ent.scale) trace_ent.scale = 8; //Make us huge
						else trace_ent.scale = trace_ent.scale * 8;
						
						trace_ent.mins_x = trace_ent.mins_x * 8;
						trace_ent.mins_y = trace_ent.mins_y * 8;
						trace_ent.mins_z = trace_ent.mins_z * 8;
						trace_ent.maxs_x = trace_ent.maxs_x * 8;
						trace_ent.maxs_y = trace_ent.maxs_y * 8;
						trace_ent.maxs_z = trace_ent.maxs_z * 8;
						setsize(trace_ent, trace_ent.mins, trace_ent.maxs);
					}
					//print (ftos (trace_ent.monsterismouse), "*Mouse\n");
					//print (ftos (trace_ent.monsterismonolith), "Monolith__\n");
				}
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,150);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
					
		}
		}
	}
	else if(spellname == "monstertomouse")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_monstertomouse; }

		if (isscroll || caster.spell_monstertomouse > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,50))
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,5/(mylevel));
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_monstertomouse))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * 32 * mylevel, MOVE_NORMAL, caster);
				
				if(trace_ent != world)
				if(!(trace_ent.flags & FL_CLIENT))
				if(trace_ent.flags & FL_MONSTER)
				{	
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_monstertomouse,
						exp_spell_monstertomouse,
						1, trace_ent);
								
					if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,50);
					if(trace_ent.monsterismonolith) {
						//ChangeBack to normal since using the opposite spell
						pointparticles(particleeffectnum("EF_STARDUST"), trace_ent.origin, '0 0 0', 12);
						
						trace_ent.scale = trace_ent.monsterismonolith; //The previous, normal scale was recorded here
						trace_ent.monsterismonolith = 0;
						
						//print("MOUSE: Monolith to Normal ***via Mouse**\n");
						
						trace_ent.mins_x = trace_ent.mins_x * 0.125;
						trace_ent.mins_y = trace_ent.mins_y * 0.125;
						trace_ent.mins_z = trace_ent.mins_z * 0.125;
						trace_ent.maxs_x = trace_ent.maxs_x * 0.125;
						trace_ent.maxs_y = trace_ent.maxs_y * 0.125;
						trace_ent.maxs_z = trace_ent.maxs_z * 0.125;
						setsize(trace_ent, trace_ent.mins, trace_ent.maxs);
					} else if(!trace_ent.monsterismouse) {
						//Make us small
						pointparticles(particleeffectnum("EF_STARDUST"), trace_ent.origin, '0 0 0', 12);
						
						if (!trace_ent.scale) trace_ent.monsterismouse = 1;
						else trace_ent.monsterismouse = trace_ent.scale;  //Record scale
						
						//print("MOUSE:Normal to Mouse\n");
						
						if (!trace_ent.scale) trace_ent.scale = 0.125; //make us tiny
						else trace_ent.scale = trace_ent.scale * 0.125;
						
						trace_ent.mins_x = trace_ent.mins_x * 0.125;
						trace_ent.mins_y = trace_ent.mins_y * 0.125;
						trace_ent.mins_z = trace_ent.mins_z * 0.125;
						trace_ent.maxs_x = trace_ent.maxs_x * 0.125;
						trace_ent.maxs_y = trace_ent.maxs_y * 0.125;
						trace_ent.maxs_z = trace_ent.maxs_z * 0.125;
						setsize(trace_ent, trace_ent.mins, trace_ent.maxs);
					}
					//print (ftos(trace_ent.monsterismouse), "Mouse\n");
					//print (ftos(trace_ent.monsterismonolith), "*Monolith__\n");
				}
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,50);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
					
		}
		}
	}
	else if(spellname == "meteor")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_meteor; }
		
		if (isscroll || caster.spell_meteor > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,(40 - bound(0,caster.spell_meteor*0.25,25)) )  )
		{
			addspelltime = TimeStaffFlameReduceFor(isscroll, caster, mylevel,0.3);
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_meteor))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 512 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				entity e = spawn();
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = trace_endpos;
				traceline(e.origin, e.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
					{
						if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, mylevel,(40 - bound(0,caster.spell_meteor*0.25,25)));
						makevectors(e.v_angle);
						if (myskytrace_z > 12000) {
							//For huge maps
							W_Meteor2(e, caster, time + (autocvar_g_balance_fireball_primary_lifetime * (myskytrace_z/12000)));
						} else {
							W_Meteor1(e, caster);
						}
					}
				}				
				remove(e);
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_meteor,
						exp_spell_meteor,
						1, world);
			} else {
				if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, mylevel,(40 - bound(0,caster.spell_meteor*0.25,25)));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "meteorshower")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_meteorshower; }
		
		//print(ftos(isscroll),"scroll?\n");
		
		if (isscroll || caster.spell_meteorshower > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,(90 - bound(0,caster.spell_meteorshower*0.375,37)) )  )
		{
			addspelltime = TimeStaffFlameReduceFor(isscroll, caster, mylevel,5);
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_meteorshower))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 512 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				entity e = spawn();
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = trace_endpos;
				traceline(e.origin, e.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, mylevel,(90 - bound(0,caster.spell_meteorshower*0.375,37)));

					if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
					{
						makevectors(e.v_angle);
						if (myskytrace_z > 12000) {
							//For huge maps
							W_Meteor2(e, caster, time + (autocvar_g_balance_fireball_primary_lifetime * (myskytrace_z/12000)));
						} else {
							W_Meteor1(e, caster);
						}
					}
					
					vector forigin;
					forigin = e.origin;
					float	sc;
					for (sc = 0;sc < (1 + floor(mylevel*2));sc = sc + 1) {
						e.origin = forigin + (randomvec() * 64*mylevel);
						e.origin_z = forigin_z;
						if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
						{
							makevectors(e.v_angle);
							if (myskytrace_z > 12000) {
								//For huge maps
								W_Meteor2(e, caster, time + (autocvar_g_balance_fireball_primary_lifetime * (myskytrace_z/12000)));
							} else {
								W_Meteor1(e, caster);
							}
						}
					}
				}
				
				remove(e);
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_meteorshower,
						exp_spell_meteorshower,
						1, world);

			} else {
				if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, mylevel,(90 - bound(0,caster.spell_meteorshower*0.375,37)));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "mimic")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_mimic; }
		
		if (isscroll || caster.spell_mimic > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffMagiReduceFor(caster, mylevel,50))
		{
			addspelltime = TimeStaffMagiReduceFor(isscroll, caster, mylevel,5);
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_mimic))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * 50 * mylevel, MOVE_NORMAL, caster);
				
				if(trace_ent != world)
				if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
				{
					IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_mimic,
						exp_spell_mimic,
						1, trace_ent);
				
					if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,50);
					
					if(trace_ent.stoned)
						caster.skin = trace_ent.realskin;
					else
						caster.skin = trace_ent.skin;
						
					caster.stoneskin = trace_ent.stoneskin;
					
					local vector myparorigin;
					myparorigin = caster.origin;
					myparorigin_z = myparorigin_z + (caster.mins_z * 0.95);
					pointparticles(particleeffectnum("smoke_big"), myparorigin, '0 0 0', 20);
					pointparticles(particleeffectnum("smoke_big"), caster.origin, '0 0 0', 20);
					pointparticles(particleeffectnum("smoke_ring"), myparorigin, '0 0 40', 10);
					pointparticles(particleeffectnum("EF_STARDUST"), caster.origin, '0 0 0', 2);
					pointparticles(particleeffectnum("EF_STARDUST"), myparorigin, '0 0 0', 2);
					
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						local vector mymins = caster.mins;
						local vector mymaxs = caster.maxs;
						local string myplayerskin;
						caster.playermodel = trace_ent.model;
						if (!trace_ent.stoned) {
							//Were having string errors when copying bots
							if (trace_ent.skin == 1)
								myplayerskin = "1";
							else if (trace_ent.skin == 2)
								myplayerskin = "2";
							else if (trace_ent.skin == 3)
								myplayerskin = "3";
							else if (trace_ent.skin == 4)
								myplayerskin = "4";
							else if (trace_ent.skin == 5)
								myplayerskin = "5";
							else if (trace_ent.skin == 6)
								myplayerskin = "6";
							else if (trace_ent.skin == 7)
								myplayerskin = "7";
							else if (trace_ent.skin == 8)
								myplayerskin = "8";
							else
								myplayerskin = "0";
								
							caster.playerskin = myplayerskin;
							caster.skin = 0;
						} else {
							myplayerskin = "0";
							caster.playerskin = myplayerskin;
							caster.skin = 0;
						}
						setplayermodel (caster, caster.playermodel);
						setmodel (caster, caster.playermodel);
						setsize (caster, mymins, mymaxs);
					} else {
						if (!trace_ent.stoned) {
							caster.skin = trace_ent.skin;
						} else {
							caster.skin = 0;
						}
						caster.model = trace_ent.model;
						setmodel(caster, caster.model);
					}
				}
			} else {
				if not(isscroll) castermana = castermana - StaffMagiReduceFor(caster, mylevel,50);
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
					
		}
		}
	}
	else if(spellname == "paralyse")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_paralyse; }
		
		if (isscroll || caster.spell_paralyse > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 23)
		{
			addspelltime = 2;
			
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_paralyse))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * 512, MOVE_NORMAL, caster);
					if(trace_ent != world)
					if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
					{
						IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_paralyse,
							exp_spell_paralyse,
							1, trace_ent);
						
						if not(isscroll) castermana = castermana - 23;
						Freeze(trace_ent, 0.3/(mylevel*0.1), 1);
					}
			} else {
				if not(isscroll) castermana = castermana - 23;
				if (random() < 0.1)
				{
					Freeze(trace_ent, 0.3/(caster.spell_paralyse*0.1), 1);
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You reversed the spell upon yourself!\n");
				}
				else
				{
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You fumbled the spell\n");
				}
			}
		}
		}
	}
	else if(spellname == "ringoffire")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_ringoffire; }
		
		if (isscroll || caster.spell_ringoffire > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= StaffFlameReduceFor(caster, mylevel,(28 - bound(0,caster.spell_ringoffire*0.056,14)) )  )
		{
			local float mylevelbonus;
			mylevelbonus = 0;
			
			if (isscroll) {
				//Do nothing
			} else {
				if (caster.hasburned_others_to_death >= 1000) {
					mylevelbonus = 6;
				} else if (caster.hasburned_others_to_death >= 500) {
					mylevelbonus = 5;
				} else if (caster.hasburned_others_to_death >= 250) {
					mylevelbonus = 4;
				} else if (caster.hasburned_others_to_death >= 150) {
					mylevelbonus = 3;
				} else if (caster.hasburned_others_to_death >= 100) {
					mylevelbonus = 2;
				} else if (caster.hasburned_others_to_death >= 10) {
					mylevelbonus = 1;
				}
			}
			
		
			addspelltime = TimeStaffFlameReduceFor(isscroll, caster, (mylevel+mylevelbonus),2.3);
			if not(isscroll) castermana = castermana - StaffFlameReduceFor(caster, (mylevel+mylevelbonus),(28 - bound(0,caster.spell_ringoffire*0.056,14)));
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_ringoffire))
			{
				//This spell gets cheaper and more powerful the higher the level
				//A defensive spell of sorts
				makevectors(caster.v_angle);
				float	sc;
				pointparticles(particleeffectnum("fireball_muzzleflash"), caster.origin, w_shotdir, 1);
				
				local entity myoldself;
				myoldself = self;
				
				local entity mytracer;
				local float myonetileamnt;
				local float mycounter;
				local float myfires;
				local float myradius;
				local float myminradius;
				local vector mystartpos;
				local vector mygoodpos;
				local vector mrandvec;
				myfires = 30 + floor((mylevel+mylevelbonus)*0.8);
				myradius = 256 + floor((mylevel+mylevelbonus)*0.5);
				myminradius = 192 + floor((mylevel+mylevelbonus)*0.5);
				mycounter = 0;
				myonetileamnt = 64;
				mytracer = spawn();
				while (mycounter < myfires) {
					mytracer.origin = caster.origin; //For this we always start at the center

					//Randomly Around
					mrandvec = randomvec();
					mrandvec_z = 0;
					while(vlen(caster.origin - (mytracer.origin + (mrandvec * myradius))) < myminradius)
					{
						//print(ftos(vlen(caster.origin - (mytracer.origin + (mrandvec * myradius)))),"vlen\n");
						//print("too small\n");
						mrandvec = randomvec();
						mrandvec_z = 0;
					}
					traceline(mytracer.origin, mytracer.origin + '0 0 64', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin + (mrandvec * myradius), MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					traceline(mytracer.origin, mytracer.origin - '0 0 1000', MOVE_NORMAL, mytracer);
					mytracer.origin = trace_endpos;
					mygoodpos = trace_endpos;
					CastSpell_Firewall_PlaceFire(0, 8+((mylevel+mylevelbonus)*2), 10+((mylevel+mylevelbonus)*0.25)+(random()*((mylevel+mylevelbonus)*0.25)), mygoodpos, caster, myonetileamnt);
					mycounter = mycounter + 1;
				}
				
				remove(mytracer);
				self = myoldself;
				
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
						caster,
				 		spell_ringoffire,
						exp_spell_ringoffire,
						1, world);
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "stonecurse")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_stonecurse; }
		
		if (isscroll || caster.spell_stonecurse > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= 60)
		{
			addspelltime = 2;
			if not(isscroll) castermana = castermana - 60;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_stonecurse))
			{
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * 512, MOVE_NORMAL, caster);
					if(trace_ent != world) {
						Stone(trace_ent, 0.2/mylevel); //More levels, more damage
						
						IncreaseSpellExpAndMaybeLVL(isscroll,
							caster,
				 			spell_stonecurse,
							exp_spell_stonecurse,
							1, trace_ent);
					}
			} else {
				if (random() < 0.1)
				{
					Stone(caster, 0.2*(caster.spell_stonecurse*0.01)); //Yes, not mylevel, based on your intrinsic, don't fumble a scroll with no intrinsic! You will be stone forever!
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You reversed the spell upon yourself!\n");	
				}
				else
				{
					if ((clienttype(caster) == CLIENTTYPE_REAL))
						sprint(caster, "You fumbled the spell\n");
				}
			}
		}
		}
	}
	else if(spellname == "stonerain")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_stonerain; }
		
		//print(ftos(isscroll),"scroll?\n");
		
		if (isscroll || caster.spell_stonerain > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (94 - bound(0,caster.spell_stonerain*0.75,75)))
		{
			addspelltime = 7;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_stonerain))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
				makevectors(caster.v_angle);
				traceline(caster.origin, caster.origin + v_forward * bound(1024, 512 * mylevel, MAX_SHOT_DISTANCE), MOVE_NORMAL, caster);
				
				entity e = spawn();
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = trace_endpos;
				traceline(e.origin, e.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					if not(isscroll) castermana = castermana - (94 - bound(0,caster.spell_stonerain*0.75,75));

					if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
					{
						makevectors(e.v_angle);
						if (myskytrace_z > 12000) {
							//For huge maps
							W_StoneRain2(e, caster,
							time + (autocvar_g_balance_fireball_primary_lifetime * (myskytrace_z/12000)),
							time + (autocvar_g_balance_grenadelauncher_secondary_lifetime * (myskytrace_z/12000)));
						} else {
							W_StoneRain1(e, caster);
						}
					}
					
					vector forigin;
					forigin = e.origin;
					float	sc;
					for (sc = 0;sc < (1 + floor(mylevel*2));sc = sc + 1) {
						e.origin = forigin + (randomvec() * 64*mylevel);
						e.origin_z = forigin_z;
						if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
						{
							makevectors(e.v_angle);
							if (myskytrace_z > 12000) {
								//For huge maps
								W_StoneRain2(e, caster,
								time + (autocvar_g_balance_fireball_primary_lifetime * (myskytrace_z/12000)),
								time + (autocvar_g_balance_grenadelauncher_secondary_lifetime * (myskytrace_z/12000)));
							} else {
								W_StoneRain1(e, caster);
							}
						}
					}
					
					//Now for some for later.
					local float wlevel;
					wlevel = mylevel * 2;
					while (wlevel > 0) {
						CastSpell_StoneRain_Overtime(forigin, caster, mylevel, wlevel);
						
						if (random() > 0.65)
							CastSpell_StoneRain_Overtime(forigin, caster, mylevel, wlevel);
						
						wlevel = wlevel - 1;
					}
				}
				
				remove(e);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_stonerain,
					exp_spell_stonerain,
					1, world); 

			} else {
				if not(isscroll) castermana = castermana - (94 - bound(0,caster.spell_stonerain*0.75,75));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "aquacaelestis")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_aquacaelestis; }
		
		//print(ftos(isscroll),"scroll?\n");
		
		if (isscroll || caster.spell_aquacaelestis > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (64 - bound(0,caster.spell_aquacaelestis*1.5,35)))
		{
			addspelltime = 7;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_aquacaelestis))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
				makevectors(caster.v_angle);
				
				entity e = spawn();
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				e.origin = caster.origin;
				traceline(e.origin, e.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					if not(isscroll) castermana = castermana - (64 - bound(0,caster.spell_aquacaelestis*1.5,35));

					if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
					{
						CastSpell_FuncRain(caster, e, mylevel, isscroll, 1, 200 * mylevel, 20+((bound(0,mylevel, 10))*20)+(mylevel*10), bound(1, mylevel, 10) * 256);
					}
					
					
				}
				
				remove(e);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_aquacaelestis,
					exp_spell_aquacaelestis,
					1, world); 

			} else {
				if not(isscroll) castermana = castermana - (64 - bound(0,caster.spell_aquacaelestis*1.5,35));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}
	else if(spellname == "nivosus")
	{
		if (isscroll) { mylevel = isscroll; } else { mylevel = caster.spell_nivosus; }
		
		//print(ftos(isscroll),"scroll?\n");
		
		if (isscroll || caster.spell_nivosus > 0)
		{ caster.rtnvl2 = 1;
		if (isscroll || castermana >= (54 - bound(0,caster.spell_nivosus*1.5,35)))
		{
			addspelltime = 7;
			if (CheckSpellNoFumble(isscroll, caster, caster.spell_nivosus))
			{
				local vector myskytrace;
				myskytrace = '0 0 0';
				myskytrace_z = world.maxs_z - (world.mins_z); //Like: 200-(-200) or 200-(100), positive always
				
				makevectors(caster.v_angle);
				
				entity e = spawn();
				e.mins = '-1 -1 -1';
				e.maxs = '1 1 1';
				
				e.origin = caster.origin;
				
				traceline(e.origin, e.origin + ('0 0 30000' + myskytrace), MOVE_WORLDONLY, e);
				e.origin = trace_endpos;
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					if not(isscroll) castermana = castermana - (54 - bound(0,caster.spell_nivosus*1.5,35));

					if not (pointcontents(e.origin - '0 0 1') == CONTENT_SOLID)
					{
						CastSpell_FuncRain(caster, e, mylevel, isscroll, 0, 200 * mylevel, 20+((bound(0,mylevel, 10))*20)+(mylevel*10), bound(1, mylevel, 7) * 256);
					}
					
					
				}
				
				remove(e);
				
				IncreaseSpellExpAndMaybeLVL(isscroll,
					caster,
				 	spell_nivosus,
					exp_spell_nivosus,
					1, world); 

			} else {
				if not(isscroll) castermana = castermana - (54 - bound(0,caster.spell_nivosus*1.5,35));
				if ((clienttype(caster) == CLIENTTYPE_REAL))
					sprint(caster, "You fumbled the spell\n");
			}
		}
		}
	}

	//else if(spellname == "misc")
	//{
	//	//caster.angles = caster.v_angle;
	//	print("here2\n");
	//	if (isscroll || castermana >= 100)
	//	{
	//	effectnum = particleeffectnum("TR_NEXUIZPLASMA");
	//	//W_SetupShot(caster, FALSE, FALSE, "", CH_WEAPON_A, 0);
	//	//W_SetupShot (caster, TRUE, 5, "weapons/nexfire.wav", CH_WEAPON_A, 100);
	//	makevectors(caster.v_angle);
	//	print(vtos(caster.origin)," ",vtos(caster.v_angle)," ",vtos(caster.angles),"\n");
	//	traceline(caster.origin, caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
	//	trailparticles(caster, effectnum, caster.origin, trace_endpos);
	//	print(etos(trace_ent),"\n");	
	//	}
	//}
	//print(ftos(addspelltime),"\n");
	
	//Here we apply the mana drain
	if (casterhascastfromlife) {
		caster.health = castermana;
	} else {
		caster.mana = castermana;
	}
	
	//For dark ritual etc
	if (addtocastermana) {
		if(!autocvar_sv_gameplayfix_darkritual_nomanastableadd && spellname == "darkritual") {
			if (caster.darkritual_mana_max > autocvar_g_balance_mana_limit) {
				caster.mana = bound(caster.mana, caster.mana + addtocastermana, caster.darkritual_mana_max);
			} else {
				caster.mana = bound(caster.mana, caster.mana + addtocastermana, autocvar_g_balance_mana_limit);
			}
			
			if (caster.mana > caster.darkritual_mana_stable) {
				caster.darkritual_mana_stable = caster.mana;
			}
		} else {
			caster.mana = bound(caster.mana, caster.mana + addtocastermana, autocvar_g_balance_mana_limit);
		}
	}
	
	if (isscroll)
		return(time + 0.2);
	else
		return(time + addspelltime + 0.2);
}

float CheckPrintNewLine(entity player, float counter, string prline)
{
	if (counter > 3)
	{
		sprint(player, strcat(prline,"\n"));
		return 0;
	} else
		return counter;

}

float CheckPrintNewLineEx(entity player, float counter, string prline, float mymxamnt)
{
	if (counter > mymxamnt)
	{
		sprint(player, strcat(prline,"\n"));
		return 0;
	} else
		return counter;

}

void sprint_OrConcat(.string stringtobuild, float doconcat, entity player, string mytext)
{
		if (doconcat) {			
			player.stringtobuild = strzone(strcat(player.stringtobuild, mytext));
		} else {
			sprint(player, mytext);
		}
}

float CheckPrintNewLine_OrConcat(.string stringtobuild, float doconcat, entity player, float counter, string prline)
{
	if (((counter > 3) && !doconcat)
	|| ((counter > (3 + autocvar_sv_inventory_on_show_info_lineadd)) && doconcat))
	{
		if (doconcat) {
			player.stringtobuild = strzone(strcat(player.stringtobuild, prline,"\n"));
		} else {
			sprint(player, strcat(prline,"\n"));
		}
		return 0;
	} else
		return counter;

}

float CheckPrintNewLineEx_OrConcat(.string stringtobuild, float doconcat, entity player, float counter, string prline, float mymxamnt)
{
	if (((counter > mymxamnt) && !doconcat)
	|| ((counter > (mymxamnt + autocvar_sv_inventory_on_show_info_lineadd)) && doconcat))
	{
		if (doconcat) {
			player.stringtobuild = strzone(strcat(player.stringtobuild, prline,"\n"));
		} else {
			sprint(player, strcat(prline,"\n"));
		}
		
		return 0;
	} else
		return counter;

}

void M_Item_Touch ();
//Drop Single Item
void MagicInventoryDropItem (entity player, .float ammotype, float type, string spellname, float decamount)
{
	//Type 0 = scroll, 1 = book
	if (player.ammotype >= decamount)
	{
		vector backuporigin = self.origin + ((self.mins + self.maxs) * 0.5);
		entity oldself;
	
		oldself = self;
		self = spawn();
		
		if (player.noanimdroppeditems) {
			//Do nothing
			//This is set on buildings / furnishings usually
			//Not on players/Monsters
		} else {
			self.ItemStatus |= ITS_ANIMATE1;
		}
		
		self.inventory_nopickuptill = time + 2;
		self.inventory_nopickupbytill = player;
		
		DropSpellByName(type, spellname, decamount);
		player.ammotype = player.ammotype - decamount;
		
		self.velocity = randomvec() * 175 + '0 0 325';
	
		self.gravity = 1;
		self.origin = backuporigin;
	
		self.touch = M_Item_Touch;
	
		if (autocvar_g_pickup_permitems || player.inventory_permitems)
			SUB_ItemSetToPermWhen(self, time + 20);
		else 
			SUB_SetFade(self, time + 20, 1);
	
		self = oldself;
	}
}

void DefecateIfAble (entity player)
{
	if (autocvar_sv_risque >= 0.5) {
	if (player.con_waste_solid >= 6) {
		//vector backuporigin = self.origin + ((self.mins + self.maxs) * 0.5);
		vector backuporigin = self.origin - '0 0 1';
		entity oldself;
	
		oldself = self;
		self = spawn();
		
		//////////self.ItemStatus |= ITS_ANIMATE1;
		
		if (player.con_waste_solid >= 24) {
			player.con_waste_solid = player.con_waste_solid - 24;
			player.smell_faeces = player.smell_faeces + 0.075;
			spawnfunc_item_faeces_large();
		} else if (player.con_waste_solid >= 12) {
			player.con_waste_solid = player.con_waste_solid - 12;
			player.smell_faeces = player.smell_faeces + 0.05;
			spawnfunc_item_faeces_medium();
		} else {
			player.con_waste_solid = player.con_waste_solid - 6;
			player.smell_faeces = player.smell_faeces + 0.03;
			spawnfunc_item_faeces_small();
		}
		
		self.velocity = randomvec() * 2 + '0 0 100';
		//Angles Doesnt do anything bc this is a client side entity //self.angles = player.angles + (randomvec() * 2); 
	
		self.gravity = 1;
		self.origin = backuporigin;
	
		self.touch = M_Item_Touch;
	
		if (autocvar_g_pickup_permitems)
			SUB_ItemSetToPermWhen(self, time + 20);
		else 
			SUB_SetFade(self, time + 7200, 1);
	
		self = oldself;
	}
	}
}

//The below GetIt* subroutines have to do with hard coding 
//some parameters for an attachment for the old nexuiz zym
//(Thus using the nexuiz skeleton)
//models. Perhaps this should be done as a few player.txt
//variables. It is faster to protype and check this way though
//as with gmqcc the code compiles faster than it would be to
//reload darkplaces engine each time one changed the var
//in the models/player/bla.zym.txt file.
//Newer iqm models that use the xonotic skeleton use 
//the other defaults. I probably should make some
//more txt vars for them.
float GetItModelPositionType (entity player)
{
	if (player.model == "models/player/insurrectionist.zym")
	{
		return 1;
		//Old zym models, quicker to recompile to adjust
		//than to reload dp and a .txt player file
		//Should make these a models/player/character.txt player variable though
	}
	else if (player.model == "models/player/nexus.zym")
	{
		return 2;
	}
	else if (player.model == "models/player/marine.zym")
	{
		return 1;
	}
	else if (player.model == "models/player/headhunter.zym")
	{
		return 3;
	}
	else
	{
		return 0;
	}
			
}

vector GetItModelPositionAngles (float m_pos)
{
	if (m_pos == 1 || m_pos == 2 || m_pos == 3)
	{
		return '90 90 90';
	}
	else
	{
		return '0 0 -90';
	}
}

vector GetItModelPositionOrigin (float m_pos)
{
	if (m_pos == 1) {
		return '-4.7 4 0';  // UpDown/BackForth/SideToSide yes fscked up bone  
	} else if (m_pos == 2) {
		return '-7 4.7 0';  // UpDown/BackForth/SideToSide yes fscked up bone 
	} else if (m_pos == 3) {
		return '-4.7 3 0';  // UpDown/BackForth/SideToSide yes fscked up bone 
	} else {
		return '0 -4 3';
	}
}

void SetItBloodySkinNow (entity player)
{
	switch(player.body_phal.skin) //Make sure bloody skin if exists
	{
		case 0: player.body_phal.skin = 12; break;
		case 1: player.body_phal.skin = 14; break;
		case 2: player.body_phal.skin = 13; break;
		case 3: player.body_phal.skin = 3; break;
		case 4: player.body_phal.skin = 12; break;
		case 5: player.body_phal.skin = 13; break;
		case 6: player.body_phal.skin = 14; break;
		case 7: player.body_phal.skin = 15; break;
		default: break;
	}
}

void SetItSkinIfAble (entity player)
{
	if (player.body_phal)
	{
		float select;
		select = 0;
		switch(player.skincolor)
		{
				case SKINCOLOR_NONE:        select = 0;    break;
				case SKINCOLOR_UNKNOWN:     select = 0;    break;
				case SKINCOLOR_DEATHWHITE:  select = 4;    break;
				case SKINCOLOR_WHITE:       select = 4;    break;
				case SKINCOLOR_LIGHTYELLOW: select = 4;    break;
				case SKINCOLOR_YELLOW:      select = 4;    break;
				case SKINCOLOR_REDDISH:     select = 5;    break;
				case SKINCOLOR_ORANGEBROWN: select = 5;    break;
				case SKINCOLOR_LIGHTBROWN:  select = 5;    break;
				case SKINCOLOR_BROWN:       select = 5;    break;
				case SKINCOLOR_DARKBROWN:   select = 6;    break;
				case SKINCOLOR_BLACK:       select = 6;    break;
				case SKINCOLOR_GREEN:       select = 7;    break;
				case SKINCOLOR_RED:         select = 0;    break;
				case SKINCOLOR_BLUE:        select = 0;    break;
				case SKINCOLOR_SILVER:      select = 0;    break;
				case SKINCOLOR_WHITEFUR:    select = 11;    break;
				case SKINCOLOR_BROWNFUR:    select = 9;    break;
				case SKINCOLOR_BLACKFUR:    select = 10;    break;
		}
		player.body_phal.skin = select;
		
		if (player.body_phal_stat == 1 || player.body_phal_stat == 2 || player.body_phal_stat == 3)
		{
			SetItBloodySkinNow(player);
		}
			
			local float m_pos; //Model position type		
		
			m_pos = GetItModelPositionType(player);
			
			if (m_pos == 2) //Nexus/Mulder
			{
				player.body_phal.scale = 1.75;
			}
			else if (m_pos == 3) //Headhunter
			{
				player.body_phal.scale = 1.60;
			}
			else if (player.species == SPECIES_HUMAN || player.species == SPECIES_FAE)
			{
				if (player.skincolor == SKINCOLOR_BLACK || player.skincolor == SKINCOLOR_DARKBROWN)
				{
				 	player.body_phal.scale = 1.27;
				}
				else if (player.skincolor == SKINCOLOR_BROWN || player.skincolor == SKINCOLOR_LIGHTBROWN)
				{
					player.body_phal.scale = 1.22;
				}
				else if (player.skincolor == SKINCOLOR_WHITE || player.skincolor == SKINCOLOR_DEATHWHITE)
				{
					player.body_phal.scale = 1.15;
				}

			}
			else if (player.species == SPECIES_ALIEN)
			{
				if (player.skincolor == SKINCOLOR_GREEN)
				{
				 	player.body_phal.scale = 0.8;
				}
			}
	}
}

void WhipItOutIfAble (entity player)
{
	entity oldself;
	oldself = self;
	self = player;
	
	player.getbone_phal = player_getbone_phal();
	player.getbone_phal_setpos = player_getbone_phal_setpos();
	player.getbone_phal_setangle = player_getbone_phal_setangle();
	//print(ftos(player.getbone_phal_setpos), "---pos\n");
	//print(ftos(player.getbone_phal_setangle), "---angle\n");
	
	if (player.getbone_phal_setpos) {
		player.getbone_phal_posx = player_getbone_phal_posx();
		player.getbone_phal_posy = player_getbone_phal_posy();
		player.getbone_phal_posz = player_getbone_phal_posz();
		player.getbone_phal_pos2x = player_getbone_phal_pos2x();
		player.getbone_phal_pos2y = player_getbone_phal_pos2y();
		player.getbone_phal_pos2z = player_getbone_phal_pos2z();
		//print(ftos(player.getbone_phal_posx), "-posX\n");
		//print(ftos(player.getbone_phal_posy), "-posY\n");
		//print(ftos(player.getbone_phal_posz), "-posZ\n");
	}
	
	if (player.getbone_phal_setangle) {
		player.getbone_phal_anglex = player_getbone_phal_anglex();
		player.getbone_phal_angley = player_getbone_phal_angley();
		player.getbone_phal_anglez = player_getbone_phal_anglez();
		//print(ftos(player.getbone_phal_anglex), "-angleX\n");
		//print(ftos(player.getbone_phal_angley), "-angleY\n");
		//print(ftos(player.getbone_phal_anglez), "-angleZ\n");
	}
	
	self = oldself;
	
	if ((autocvar_sv_risque >= 1) && (player.sex == SEX_MALE)
	&& (player.getbone_phal != "")
	&& (player.species == SPECIES_HUMAN || player.species == SPECIES_ALIEN || player.species == SPECIES_FAE
	|| player.species == SPECIES_ANIMAL))
	{
		float m_pos; //Model position type
		
		//print (self.model, " model\n");
		
		
		m_pos = GetItModelPositionType(player);
		
		
		if not(player.body_phal)
		{
			player.body_phal = spawn();
			player.body_phal.scale = 1;
		}
		
		player.body_phal.effects = player.effects;
		player.body_phal.colormod = player.colormod;
		player.body_phal.alpha = 1;
			
		if not(player.stoned)
		{
			SetItSkinIfAble(player);
			
			player.body_phal.stoneskin = 3;
			player.body_phal.cnt = 0;
			
			if (player.body_phal_stat == 1) {
				setmodel(player.body_phal,  "models/monsters/minotaur_bayonet_e_base.iqm");
			} else if (player.body_phal_stat == 2) {
				setmodel(player.body_phal,  "models/monsters/minotaur_bayonet_c_base.iqm");
			} else if (player.body_phal_stat == 3) {
				setmodel(player.body_phal,  "models/monsters/minotaur_bayonet_d_base.iqm");
			} else {
				setmodel(player.body_phal,  "models/monsters/minotaur_bayonet.iqm");
			}
		}
		
		if (player.getbone_phal_setangle)
		{
			player.body_phal.angles_x = player.getbone_phal_anglex;
			player.body_phal.angles_y = player.getbone_phal_angley;
			player.body_phal.angles_z = player.getbone_phal_anglez;
		} else if (m_pos >= 1)
		{
			player.body_phal.angles    = GetItModelPositionAngles(m_pos);
		}
		else
		{
			player.body_phal.angles    = '0 0 -90';
		}
		
		//print(player.getbone_phal, "\n");
		
		setattachment(player.body_phal, player, player.getbone_phal);
		
		if (player.getbone_phal_setpos)
		{
			//print("setting bone_phal position\n");
			local vector vecp;
			vecp_x = player.getbone_phal_posx;
			vecp_y = player.getbone_phal_posy;
			vecp_z = player.getbone_phal_posz;
			setorigin(player.body_phal, vecp);
		}
		else if (m_pos >= 1)
		{
			local vector vecp;
			vecp = GetItModelPositionOrigin(m_pos);
			setorigin(player.body_phal, vecp);    // UpDown/BackForth/SideToSide yes fscked up bone  
		}
		else if (player.species == SPECIES_ALIEN) //Should make a player txt varibale for this vector
		{
			setorigin(player.body_phal, '0 -3.5 2.5');    // Move attch down 16// forward 2// yes fscked up bone  
		}
		else
		{
			setorigin(player.body_phal, '0 -4 3');    // Move attch down 16// forward 2// yes fscked up bone  
		}
	}	
}

void PullItOutIfAble (entity caster)
{
	if (autocvar_sv_risque >= 1)
	{
		makevectors(caster.v_angle);
		traceline(caster.origin, caster.origin + v_forward * 128, MOVE_NORMAL, caster);
				
		if(trace_ent != world)
		if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
		{
			if(!(trace_ent.frozen == 1))
			if(!trace_ent.freezetag_frozen)
			if(!trace_ent.stoned)
			if(trace_ent.deadflag == DEAD_NO)
			if(trace_ent.health > 0)
			{
				if(trace_ent.prisonerlevel == 3)
				{
					WhipItOutIfAble(trace_ent);
				}
			}
		}
	}
}

float CasterWeaponCanCutOff (entity caster)
{
	if (caster.weaponname == "shortsword"
	|| caster.weaponname == "longsword"
	|| caster.weaponname == "armingsword"
	|| caster.weaponname == "crusadersword"
	|| caster.weaponname == "fightersword"
	|| caster.weaponname == "scimitar"
	|| caster.weaponname == "falchion"
	|| caster.weaponname == "dadao"
	|| caster.weaponname == "pudao"
	|| caster.weaponname == "bastardsword"
	|| caster.weaponname == "claymore"
	|| caster.weaponname == "flamberge"
	|| caster.weaponname == "defendersword"
	|| caster.weaponname == "rapier"
	|| caster.weaponname == "broadaxe"
	|| caster.weaponname == "waraxe"
	|| caster.weaponname == "skirmishersaxe"
	|| caster.weaponname == "battleaxe"
	|| caster.weaponname == "templaraxe"
	|| caster.weaponname == "doublebitaxe"
	|| caster.weaponname == "woodaxe"
	|| caster.weaponname == "axe"
	|| caster.weaponname == "beardedaxe"
	|| caster.weaponname == "infantryaxe"
	|| caster.weaponname == "elvenaxe"
	|| caster.weaponname == "chainsaw"
	|| caster.weaponname == "powersaw"
	|| caster.weaponname == "stoneaxe"
	|| caster.weaponname == "elvensabre"
	|| caster.weaponname == "katana"
	|| caster.weaponname == "shirasaya"
	|| caster.weaponname == "zatoichi"
	|| caster.weaponname == "odachi"
	|| caster.weaponname == "nagamaki"
	|| caster.weaponname == "elvenglaive"
	|| caster.weaponname == "spear"
	|| caster.weaponname == "yari"
	|| caster.weaponname == "poleaxe"
	|| caster.weaponname == "bardiche"
	|| caster.weaponname == "ironknife"
	|| caster.weaponname == "bowieknife"
	|| caster.weaponname == "dagger"
	|| caster.weaponname == "arkansastoothpick"
	|| caster.weaponname == "knife"
	|| (caster.weaponname == "lightsabre" && caster.lightsabre_lit)
	|| (caster.weaponname == "lightsabreii" && caster.lightsabreii_lit)
	|| (caster.weaponname == "lightsabreiv" && caster.lightsabreiv_lit)
	|| (caster.weaponname == "lightsabrexi" && caster.lightsabrexi_lit)
	)
	{
		return TRUE;
	} else {
		return FALSE;
	}
}

void CutManglePoke_DoAnimation(entity myplayer, float myanimtype)
{
	//1 cut, 2 poke
	
	local entity mypreself;
	mypreself = self;
	self = myplayer;
	if (myanimtype == 1) {
		if (self.weaponentity)
		{
			setanim(self.weaponentity, self.weaponentity.anim_fire1, TRUE, TRUE, TRUE);
		}
	} else {
		if (self.weaponentity)
		{
			setanim(self.weaponentity, self.weaponentity.anim_fire2, TRUE, TRUE, TRUE);
		}
	}
	self = mypreself;
}

void CutItOffIfAble_dosetmodel(entity mytraceent) {
	
	precache_model(mytraceent.body_phal.model);
	setmodel(mytraceent.body_phal, mytraceent.body_phal.model);
	
	//Tried to fix errors this way too: did not work any better
	////print (vtos(mytraceent.body_phal.angles), " a  ", vtos(mytraceent.body_phal.origin), " o   ", ftos(mytraceent.body_phal.tag_index), etos(mytraceent.body_phal.tag_entity), "\n");
	
	//local vector tebp_angles, tebp_origin;
	//local float tebp_scale, tebp_skin;
	//local float tebp_tag_index;
	//local entity tebp_tag_entity;
	
	//tebp_angles = mytraceent.body_phal.angles;
	//tebp_origin = mytraceent.body_phal.origin;
	//tebp_scale = mytraceent.body_phal.scale;
	//tebp_skin = mytraceent.body_phal.skin;
	//tebp_tag_index = mytraceent.body_phal.tag_index;
	//tebp_tag_entity = mytraceent.body_phal.tag_entity;
	
	//setattachment(mytraceent.body_phal, world, "");
	////
	
	//mytraceent.body_phal.angles = tebp_angles;
	//mytraceent.body_phal.origin = tebp_origin;
	//mytraceent.body_phal.scale = tebp_scale;
	//mytraceent.body_phal.skin = tebp_skin;
	//setmodel(mytraceent.body_phal, mytraceent.body_phal.model);
	//setorigin(mytraceent.body_phal, mytraceent.body_phal.origin);
	
	//setattachment(mytraceent.body_phal, mytraceent, "");
	
	//mytraceent.body_phal.tag_index = tebp_tag_index;
	//mytraceent.body_phal.tag_entity = tebp_tag_entity;
	//mytraceent.body_phal.angles = tebp_angles;
	//mytraceent.body_phal.origin = tebp_origin;
	//setorigin(mytraceent.body_phal, tebp_origin);
	
	////print (vtos(mytraceent.body_phal.angles), " a3  ", vtos(mytraceent.body_phal.origin), " o3   ", ftos(mytraceent.body_phal.tag_index), etos(mytraceent.body_phal.tag_entity), "\n");
					
}

void CutItOffIfAble (entity caster, float cuttype)
{
	if (autocvar_sv_risque >= 1)
	{
		makevectors(caster.v_angle);
		traceline(caster.origin, caster.origin + v_forward * 128, MOVE_NORMAL, caster);
				
		if(trace_ent != world)
		if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
		{
			if(!(trace_ent.frozen == 1))
			if(!trace_ent.freezetag_frozen)
			if(!trace_ent.stoned)
			if(trace_ent.deadflag == DEAD_NO)
			if(trace_ent.health > 0)
			{
				if (CasterWeaponCanCutOff(caster))
				{
				  if(trace_ent.prisonerlevel == 3)
				  {
				  	CutManglePoke_DoAnimation(caster, 1);
					
					if (trace_ent.body_phal)
					if (trace_ent.body_phal.alpha == 1)
					{
						if(trace_ent.body_phal_stat != 1) {
							if (cuttype == 1) {
								//Enu
								if ((clienttype(trace_ent) == CLIENTTYPE_REAL)) {
									sprint(trace_ent, strcat(caster.netname, " cuts off your genitals with a ", caster.weaponname,"\n"));
								}
								trace_ent.body_phal.cnt = 0;
								trace_ent.body_phal_stat = 1;
								trace_ent.body_phal.model = "models/monsters/minotaur_bayonet_e_base.iqm";
								CutItOffIfAble_dosetmodel(trace_ent);
								caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 12;
							} else if (cuttype == 2 && trace_ent.body_phal_stat != 2) {
								//Cstr
								trace_ent.body_phal.cnt = 0;
								if (trace_ent.body_phal_stat == 3)
								{
									if ((clienttype(trace_ent) == CLIENTTYPE_REAL)) {
										sprint(trace_ent, strcat(caster.netname, " cuts your balls off with a ", caster.weaponname,"\n"));
									}
									trace_ent.body_phal_stat = 1;
									trace_ent.body_phal.model = "models/monsters/minotaur_bayonet_e_base.iqm";
									CutItOffIfAble_dosetmodel(trace_ent);
								}
								else
								{
									//Cstr
									if ((clienttype(trace_ent) == CLIENTTYPE_REAL)) {
										sprint(trace_ent, strcat(caster.netname, " slices your stones away with a ", caster.weaponname,"\n"));
									}
									trace_ent.body_phal_stat = 2;
									trace_ent.body_phal.model = "models/monsters/minotaur_bayonet_c_base.iqm";
									CutItOffIfAble_dosetmodel(trace_ent);
								}
								caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 5;
							} else if (cuttype == 3 && trace_ent.body_phal_stat != 3) {
								//dock
								trace_ent.body_phal.cnt = 0;
								if (trace_ent.body_phal_stat == 2)
								{
									if ((clienttype(trace_ent) == CLIENTTYPE_REAL)) {
										sprint(trace_ent, strcat(caster.netname, " removes what was left of your genitals with a ", caster.weaponname,"\n"));
									}
									trace_ent.body_phal_stat = 1;
									trace_ent.body_phal.model = "models/monsters/minotaur_bayonet_e_base.iqm";
									CutItOffIfAble_dosetmodel(trace_ent);
									
								}
								else
								{
									//Dock
									if ((clienttype(trace_ent) == CLIENTTYPE_REAL)) {
										sprint(trace_ent, strcat(caster.netname, " slices off your bollard with a ", caster.weaponname,"\n"));
									}
									trace_ent.body_phal_stat = 3;
									trace_ent.body_phal.model = "models/monsters/minotaur_bayonet_d_base.iqm";
									CutItOffIfAble_dosetmodel(trace_ent);
								}
								caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 7;
							}
						
							if (cuttype)
							{
								float m_pos;
								
								if (caster.weapon == WEP_LIGHTSABRE || caster.weapon == WEP_LIGHTSABREII
								|| caster.weapon == WEP_LIGHTSABREIV || caster.weapon == WEP_LIGHTSABREXI) {
									Damage_DamageInfo(trace_ent.origin + '0 0 +1', 150, 150, 0, '0 0 0', caster.weapon, trace_ent.species, caster);
								} else {
									Damage_DamageInfo(trace_ent.origin + '0 0 +1', 150, 150, 0, '0 0 0', WEP_UZI, trace_ent.species, caster);
								}
								
								m_pos = GetItModelPositionType(trace_ent); //See if we are an old nexuiz model which uses a different skeleton, thus different assumptions
								
								if (trace_ent.getbone_phal_setpos)
								{
									//print("setting bone_phal 2nd position\n");
									local vector vecp;
									vecp_x = trace_ent.getbone_phal_pos2x;
									vecp_y = trace_ent.getbone_phal_pos2y;
									vecp_z = trace_ent.getbone_phal_pos2z;
									setorigin(trace_ent.body_phal, vecp);
								}
								else if (m_pos)
								{
									trace_ent.body_phal.angles    = GetItModelPositionAngles(m_pos);
								}
								else if (trace_ent.species == SPECIES_ALIEN) //Should make a player txt varibale for this vector
								{
									setorigin(trace_ent.body_phal, '0 -3.5 2.5');    // Move attch down 16// forward 2// yes fscked up bone  
								}
								else
								{
									setorigin(trace_ent.body_phal, '0 -4.5 3.4');    // Move attch down 16// forward 2// yes fscked up bone  
								}
								
								SetItBloodySkinNow(trace_ent);
							}
						}
					}
				  }
				} else {
					//You need an edged weapon, like a knife or a sword
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "You need an edged weapon to carry out this operation\n");
					}
				} 
			}
		}
	}
}

float CasterWeaponCanPokeOut (entity caster)
{
	//Things with spikes, sharp points, etc
	//StaffFlame and StaffMagi currently have a pointy crystal so they go here
	if (caster.weaponname == "shortsword"
	|| caster.weaponname == "longsword"
	|| caster.weaponname == "armingsword"
	|| caster.weaponname == "crusadersword"
	|| caster.weaponname == "fightersword"
	|| caster.weaponname == "scimitar"
	|| caster.weaponname == "falchion"
	|| caster.weaponname == "dadao"
	|| caster.weaponname == "pudao"
	|| caster.weaponname == "bastardsword"
	|| caster.weaponname == "claymore"
	|| caster.weaponname == "flamberge"
	|| caster.weaponname == "defendersword"
	|| caster.weaponname == "rapier"
	|| caster.weaponname == "broadaxe"
	|| caster.weaponname == "waraxe"
	|| caster.weaponname == "skirmishersaxe"
	|| caster.weaponname == "battleaxe"
	|| caster.weaponname == "templaraxe"
	|| caster.weaponname == "doublebitaxe"
	|| caster.weaponname == "woodaxe"
	|| caster.weaponname == "axe"
	|| caster.weaponname == "beardedaxe"
	|| caster.weaponname == "pickaxe"
	|| caster.weaponname == "infantryaxe"
	|| caster.weaponname == "elvenaxe"
	|| caster.weaponname == "stoneaxe"
	|| caster.weaponname == "spear"
	|| caster.weaponname == "warhammerspiked"
	|| caster.weaponname == "elvenhammer"
	|| caster.weaponname == "kriegshammer"
	|| caster.weaponname == "caltrop"
	|| caster.weaponname == "morgenstern"
	|| caster.weaponname == "spikedflail"
	|| caster.weaponname == "milflail"
	|| caster.weaponname == "shootingstar"
	|| caster.weaponname == "shiningstar"
	|| caster.weaponname == "spikedmace"
	|| caster.weaponname == "elvensabre"
	|| caster.weaponname == "katana"
	|| caster.weaponname == "shirasaya"
	|| caster.weaponname == "zatoichi"
	|| caster.weaponname == "odachi"
	|| caster.weaponname == "nagamaki"
	|| caster.weaponname == "elvenglaive"
	|| caster.weaponname == "yari"
	|| caster.weaponname == "poleaxe"
	|| caster.weaponname == "bardiche"
	|| caster.weaponname == "ironcrow"
	|| caster.weaponname == "warmallet"
	|| caster.weaponname == "spikedclub"
	|| caster.weaponname == "spikedcudgel"
	|| caster.weaponname == "greyironmallet"
	|| caster.weaponname == "ironknife"
	|| caster.weaponname == "bowieknife"
	|| caster.weaponname == "dagger"
	|| caster.weaponname == "arkansastoothpick"
	|| caster.weaponname == "knife"
	|| caster.weaponname == "sai"
	|| caster.weaponname == "staffflame"
	|| caster.weaponname == "staffmagi"
	|| (caster.weaponname == "lightsabre" && caster.lightsabre_lit)
	|| (caster.weaponname == "lightsabreii" && caster.lightsabreii_lit)
	|| (caster.weaponname == "lightsabreiv" && caster.lightsabreiv_lit)
	|| (caster.weaponname == "lightsabrexi" && caster.lightsabrexi_lit)
	)
	{
		return TRUE;
	} else {
		return FALSE;
	}
}

void BlindThemIfAble (entity caster)
{
		makevectors(caster.v_angle);
		traceline(caster.origin, caster.origin + v_forward * 128, MOVE_NORMAL, caster);
				
		if(trace_ent != world)
		if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
		{
			if(!(trace_ent.frozen == 1))
			if(!trace_ent.freezetag_frozen)
			if(!trace_ent.stoned)
			if(trace_ent.deadflag == DEAD_NO)
			if(trace_ent.health > 0)
			{
				if (CasterWeaponCanPokeOut(caster))
				{
				  if(trace_ent.prisonerlevel == 3)
				  {
				  	CutManglePoke_DoAnimation(caster, 2);
					
				  	makevectors(trace_ent.angles);
					if (caster.weapon == WEP_LIGHTSABRE || caster.weapon == WEP_LIGHTSABREII
					|| caster.weapon == WEP_LIGHTSABREIV || caster.weapon == WEP_LIGHTSABREXI) {
						Damage_DamageInfo(trace_ent.origin + (v_up * trace_ent.view_ofs_z), 150, 150, 0, '0 0 0', caster.weapon, trace_ent.species, caster);
					} else {
						Damage_DamageInfo(trace_ent.origin + (v_up * trace_ent.view_ofs_z), 150, 150, 0, '0 0 0', WEP_UZI, trace_ent.species, caster);
				  		//Damage_DamageInfo(trace_ent.origin + trace_ent.view_ofs, 150, 150, 0, '0 0 0', WEP_UZI, trace_ent.species, caster);
					}
					
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						if (trace_ent.permblinded) {
							sprint(caster, "Your prisoner is allready blind but you take another stab\n");
						} else {
							sprint(caster, "You permamently blind your prisoner\n");
							sprint(trace_ent, strcat(caster.netname, " has permanently blinded you using a ", caster.weaponname,"\n"));
						}
					}
					trace_ent.permblinded = 1;
					trace_ent.stat_blinded = 101;
					caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 5;
				  }
				} else {
					//You need an edged weapon, like a knife or a sword
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "You need an edged or spiked weapon to carry out this operation\n");
					}
				} 
			}
		}
}

void MangleThemIfAble (entity caster, float whichhand)
{
		makevectors(caster.v_angle);
		traceline(caster.origin, caster.origin + v_forward * 128, MOVE_NORMAL, caster);
				
		if(trace_ent != world)
		if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
		{
			if(!(trace_ent.frozen == 1))
			if(!trace_ent.freezetag_frozen)
			if(!trace_ent.stoned)
			if(trace_ent.deadflag == DEAD_NO)
			if(trace_ent.health > 0)
			{
				if (CasterWeaponCanCutOff(caster)
				|| caster.weaponname == "crowbar")
				{
				  if(trace_ent.prisonerlevel == 3)
				  {
				    CutManglePoke_DoAnimation(caster, 1);
				    
				    if not (whichhand)
				    {
				    	if (trace_ent.permmangled_l && trace_ent.permmangled_r) {
						if (random() > 0.5) {
							whichhand = 2;
						} else {
							whichhand = 1;
						}
					} else if (trace_ent.permmangled_l) {
						whichhand = 2;
					} else {
						whichhand = 1;
					}
				    }
				    
				    if (whichhand == 1) {
				    	makevectors(trace_ent.angles);
					Damage_DamageInfo(trace_ent.origin + (v_forward * 14) + (v_up * 18) + (v_right * -1 * 16), 150, 150, 0, '0 0 0', WEP_UZI, trace_ent.species, caster);
							
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						if (trace_ent.permmangled_l) {
							sprint(caster, "Your prisoner's left hand is allready mangled by you inflict another cut\n");
						} else {
							sprint(caster, "You permamently mangle the left hand your prisoner\n");
							sprint(trace_ent, strcat(caster.netname, " has permanently mangled your left hand using a ", caster.weaponname,"\n"));
						}
					}
					trace_ent.permmangled_l = 1;
					caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 2;
				    } else if (whichhand == 2) {
				    	makevectors(trace_ent.angles);
					Damage_DamageInfo(trace_ent.origin + (v_forward * 14) + (v_up * 18) + (v_right * 16), 150, 150, 0, '0 0 0', WEP_UZI, trace_ent.species, caster);
							
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						if (trace_ent.permmangled_r) {
							sprint(caster, "Your prisoner's right hand is allready mangled by you inflict another cut\n");
						} else {
							sprint(caster, "You permamently mangle the right hand your prisoner\n");
							sprint(trace_ent, strcat(caster.netname, " has permanently mangled your right hand using a ", caster.weaponname,"\n"));
						}
					}
					trace_ent.permmangled_r = 1;
					caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 2;
				    }
				  }
				} else {
					//You need an edged weapon, like a knife or a sword
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "You need an edged weapon to carry out this operation\n");
					}
				} 
			}
		}
}


void HobbleThemIfAble (entity caster, float whichfoot)
{
		makevectors(caster.v_angle);
		traceline(caster.origin, caster.origin + v_forward * 128, MOVE_NORMAL, caster);
				
		if(trace_ent != world)
		if((trace_ent.flags & FL_MONSTER) || (trace_ent.flags & FL_CLIENT))
		{
			if(!(trace_ent.frozen == 1))
			if(!trace_ent.freezetag_frozen)
			if(!trace_ent.stoned)
			if(trace_ent.deadflag == DEAD_NO)
			if(trace_ent.health > 0)
			{
				if (CasterWeaponCanCutOff(caster))
				{
				  if(trace_ent.prisonerlevel == 3)
				  {
				    CutManglePoke_DoAnimation(caster, 1);
				    
				    if not (whichfoot)
				    {
					if (trace_ent.permhobbled_l && trace_ent.permhobbled_r) {
						if (random() > 0.5) {
							whichfoot = 2;
						} else {
							whichfoot = 1;
						}
					} else if (trace_ent.permhobbled_l) {
						whichfoot = 2;
					} else {
						whichfoot = 1;
					}
				    }
				    
				    if (whichfoot == 1) {
					makevectors(trace_ent.angles);
					Damage_DamageInfo(trace_ent.origin + (v_up * trace_ent.mins_z) + (v_right * -1 * 24), 150, 150, 0, '0 0 0', WEP_UZI, trace_ent.species, caster);
							
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						if (trace_ent.permhobbled_l) {
							sprint(caster, "Your prisoner's left foot is allready hobbled by you inflict another cut\n");
						} else {
							sprint(caster, "You permamently hobble the left foot your prisoner\n");
							sprint(trace_ent, strcat(caster.netname, " has permanently hobbled your left foot using a ", caster.weaponname,"\n"));
						}
					}
					trace_ent.permhobbled_l = 1;
					caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 1;
				    } else if (whichfoot == 2) {
				    	makevectors(trace_ent.angles);
					Damage_DamageInfo(trace_ent.origin + (v_up * trace_ent.mins_z) + (v_right * 24), 150, 150, 0, '0 0 0', WEP_UZI, trace_ent.species, caster);
							
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						if (trace_ent.permhobbled_r) {
							sprint(caster, "Your prisoner's right foot is allready hobbled by you inflict another cut\n");
						} else {
							sprint(caster, "You permamently hobble the right foot your prisoner\n");
							sprint(trace_ent, strcat(caster.netname, " has permanently hobbled your right foot using a ", caster.weaponname,"\n"));
						}
					}
					trace_ent.permhobbled_r = 1;
					caster.hascommitted_depraved_act = caster.hascommitted_depraved_act + 1;
				    }
				  }
				} else {
					//You need an edged weapon, like a knife or a sword
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "You need an edged weapon to carry out this operation\n");
					}
				} 
			}
		}
}


void ErectItToggle (entity player)
{
	if (player.body_phal)
	if (!player.body_phal_stat || player.body_phal_stat == 0)
	{
		if (player.body_phal.cnt == 1)
		{
			player.body_phal.cnt = 0;
			setmodel(player.body_phal,  "models/monsters/minotaur_bayonet.iqm");		
		} else {
			player.body_phal.cnt = 1;
			setmodel(player.body_phal,  "models/monsters/minotaur_bayonet_ex.iqm");	
		}
	}	
}

void ErectItIfSet (entity player) //Doesn't Toggle
{
	if (player.body_phal)
	if (!player.body_phal_stat || player.body_phal_stat == 0)
	{
		if (player.body_phal.cnt == 1)
		{
			setmodel(player.body_phal,  "models/monsters/minotaur_bayonet_ex.iqm");			
		} else {
			setmodel(player.body_phal,  "models/monsters/minotaur_bayonet.iqm");
		}
	}	
}

void PutItBackIfAble (entity player)
{
	if (self.body_phal) {
		self.body_phal.alpha = 0.0001;
		setmodel(self.body_phal,  "null");
	}
}

void RemoveItIfNeeded (entity player)
{
	if ((autocvar_sv_risque >= 1) && (player.sex == SEX_MALE)
	&& (player.getbone_phal != "")
	&& (player.species == SPECIES_HUMAN || player.species == SPECIES_ALIEN || player.species == SPECIES_FAE 
	|| player.species == SPECIES_ANIMAL))
	{
		//Nothing doing
	} else {
		PutItBackIfAble(player);
	}
}

float MagicInventoryDropCoinIter (entity player, .float ammotype, float type, string spellname, float maxcoin)
{
	float randdrop;
	if (player.ammotype >= maxcoin) {
	  while (maxcoin > 0)
	  {
		if (maxcoin >= 100) {
			randdrop = random();
			if (randdrop > 0.83) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 20);
				maxcoin = maxcoin - 20;
			} else if (randdrop > 0.664) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 18);
				maxcoin = maxcoin - 18;
			} else if (randdrop > 0.498) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 16);
				maxcoin = maxcoin - 16;
			} else if (randdrop > 0.332) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 14);
				maxcoin = maxcoin - 14;
			} else {
				MagicInventoryDropItem(player, ammotype, type, spellname, 12);
				maxcoin = maxcoin - 12;
			}
		} else if (maxcoin >= 40) {
			randdrop = random();
			if (randdrop > 0.95) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 20);
				maxcoin = maxcoin - 20;
			} else if (randdrop > 0.9) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 19);
				maxcoin = maxcoin - 19;
			} else if (randdrop > 0.85) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 18);
				maxcoin = maxcoin - 18;
			} else if (randdrop > 0.8) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 17);
				maxcoin = maxcoin - 17;
			} else if (randdrop > 0.75) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 16);
				maxcoin = maxcoin - 16;
			} else if (randdrop > 0.7) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 15);
				maxcoin = maxcoin - 15;
			} else if (randdrop > 0.65) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 14);
				maxcoin = maxcoin - 14;
			} else if (randdrop > 0.6) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 13);
				maxcoin = maxcoin - 13;
			} else if (randdrop > 0.55) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 12);
				maxcoin = maxcoin - 12;
			} else if (randdrop > 0.5) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 11);
				maxcoin = maxcoin - 11;
			} else if (randdrop > 0.45) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 10);
				maxcoin = maxcoin - 10;
			} else if (randdrop > 0.4) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 9);
				maxcoin = maxcoin - 9;
			} else if (randdrop > 0.35) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 8);
				maxcoin = maxcoin - 8;
			} else if (randdrop > 0.3) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 7);
				maxcoin = maxcoin - 7;
			} else if (randdrop > 0.25) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 6);
				maxcoin = maxcoin - 6;
			} else if (randdrop > 0.2) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 5);
				maxcoin = maxcoin - 5;
			} else if (randdrop > 0.15) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 4);
				maxcoin = maxcoin - 4;
			} else if (randdrop > 0.1) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 3);
				maxcoin = maxcoin - 3;
			} else if (randdrop > 0.5) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 2);
				maxcoin = maxcoin - 2;
			} else {
				MagicInventoryDropItem(player, ammotype, type, spellname, 1);
				maxcoin = maxcoin - 1;
			}
		} else {
			MagicInventoryDropItem(player, ammotype, type, spellname, maxcoin);
			maxcoin = 0;
		} 
	  }
	  return(TRUE);
	}
	return(FALSE);
}	

float MagicInventoryDropGemIter (entity player, .float ammotype, float type, string spellname, float maxcoin)
{
	//Same as above but for gems (max visual is 5 gems)
	float randdrop;
	if (player.ammotype >= maxcoin) {
	  while (maxcoin > 0)
	  {
		if (maxcoin >= 25) {
			randdrop = random();
			if (randdrop > 0.4) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 5);
				maxcoin = maxcoin - 5;
			} else if (randdrop > 0.2) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 4);
				maxcoin = maxcoin - 4;
			} else {
				MagicInventoryDropItem(player, ammotype, type, spellname, 3);
				maxcoin = maxcoin - 3;
			}
		} else if (maxcoin >= 5) {
			randdrop = random();
			if (randdrop > 0.8) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 5);
				maxcoin = maxcoin - 5;
			} else if (randdrop > 0.6) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 4);
				maxcoin = maxcoin - 4;
			} else if (randdrop > 0.4) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 3);
				maxcoin = maxcoin - 3;
			} else if (randdrop > 0.2) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 2);
				maxcoin = maxcoin - 2;
			} else {
				MagicInventoryDropItem(player, ammotype, type, spellname, 1);
				maxcoin = maxcoin - 1;
			}
		} else {
			MagicInventoryDropItem(player, ammotype, type, spellname, maxcoin);
			maxcoin = 0;
		} 
	  }
	  return(TRUE);
	}
	return(FALSE);
}	

float MagicInventoryDropBullionBarIter (entity player, .float ammotype, float type, string spellname, float maxcoin)
{
	//Same as above but for bars (max visual is 8 bars)
	float randdrop;
	if (player.ammotype >= maxcoin) {
	  while (maxcoin > 0)
	  {
		if (maxcoin >= 25) {
			randdrop = random();
			if (randdrop > 0.4) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 8);
				maxcoin = maxcoin - 8;
			} else if (randdrop > 0.2) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 7);
				maxcoin = maxcoin - 7;
			} else {
				MagicInventoryDropItem(player, ammotype, type, spellname, 6);
				maxcoin = maxcoin - 6;
			}
		} else if (maxcoin >= 8) {
			randdrop = random();
			if (randdrop > 0.8) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 8);
				maxcoin = maxcoin - 8;
			} else if (randdrop > 0.6) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 7);
				maxcoin = maxcoin - 7;
			} else if (randdrop > 0.5) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 6);
				maxcoin = maxcoin - 6;
			} else if (randdrop > 0.4) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 5);
				maxcoin = maxcoin - 5;
			} else if (randdrop > 0.2) {
				MagicInventoryDropItem(player, ammotype, type, spellname, 4);
				maxcoin = maxcoin - 4;
			} else {
				MagicInventoryDropItem(player, ammotype, type, spellname, 3);
				maxcoin = maxcoin - 3;
			}
		} else {
			MagicInventoryDropItem(player, ammotype, type, spellname, maxcoin);
			maxcoin = 0;
		} 
	  }
	  return(TRUE);
	}
	return(FALSE);
}	

float ContainerTallyStorage (entity player);
void MagicInventoryPutItem (entity player, .float ammotype, float decamount, entity donee)
{
	if (player.ammotype >= decamount)
	{
		if (donee.iscontainer_storage) {
			local entity testtally;
			local float tally, doneetally;
			tally = 0;
			doneetally = 0;
			
			testtally = spawn();
			ZeroOutMagicInventory(testtally); //Just in case, do we really trust quakeC?
			
			testtally.ammotype = decamount;
			tally = ContainerTallyStorage(testtally);
			
			remove(testtally);
			
			doneetally = ContainerTallyStorage(donee);
			if (doneetally + tally >= donee.iscontainer_storage)
			{
				if ((clienttype(player) == CLIENTTYPE_REAL)) {
					sprint(player, "The container cannot fit that\n");
				}
				return;
			}
			
		}
		player.ammotype = player.ammotype - decamount;
		donee.ammotype = donee.ammotype + decamount;
		sound (donee, CH_TRIGGER, "resource/construction/con_stone_10.ogg", VOL_BASE, ATTN_NORM);
	}
}

#define CONTAINER_TALLY_STORAGE_WEAPONTINY 10
#define CONTAINER_TALLY_STORAGE_WEAPONSMALL 20
#define CONTAINER_TALLY_STORAGE_WEAPONMSMALL 30
#define CONTAINER_TALLY_STORAGE_WEAPON 40
#define CONTAINER_TALLY_STORAGE_WEAPONSMED 50
#define CONTAINER_TALLY_STORAGE_WEAPONMED 60
#define CONTAINER_TALLY_STORAGE_WEAPONBMED 70
#define CONTAINER_TALLY_STORAGE_WEAPONBIG 80
#define CONTAINER_TALLY_STORAGE_WEAPONLARGE 100
#define CONTAINER_TALLY_STORAGE_WEAPONHUGE 120
#define CONTAINER_TALLY_STORAGE_COIN 0.1
#define CONTAINER_TALLY_STORAGE_GEM 0.5

float ContainerWeaponStorageAmnt (float j)
{
	if (j == WEP_CALTROP 
	) {
		return CONTAINER_TALLY_STORAGE_WEAPONTINY;
		
			
	} else if (j == WEP_PISTOL
	|| j == WEP_BIGPISTOL
	|| j == WEP_LONGPISTOL
	|| j == WEP_LIGHTPISTOL
	|| j == WEP_FIVESEVENPISTOL
	|| j == WEP_SUNBOLT
	|| j == WEP_M9PISTOL
	|| j == WEP_M93RPISTOL
	|| j == WEP_BROWNINGHP
	|| j == WEP_LIGHTAUTO
	|| j == WEP_MAGNUM
	|| j == WEP_NAGANT1895
	|| j == WEP_WEBLEY
	|| j == WEP_WEBLEYLONG
	|| j == WEP_TARGETPISTOL
	|| j == WEP_NAVY1851REVOLVER
	|| j == WEP_R1856REVOLVER
	|| j == WEP_COLT44REVOLVER
	|| j == WEP_SCHOFIELDREVOLVER
	|| j == WEP_TT33PISTOL
	|| j == WEP_MULTITOOL
	|| j == WEP_HANDCUFFS
	|| j == WEP_SHACKLES
	|| j == WEP_IRONKNIFE
	) {
		return CONTAINER_TALLY_STORAGE_WEAPONSMALL;
		
		
	} else if (j == WEP_STONEAXE
	|| j == WEP_LARGEPISTOL
	|| j == WEP_MAUSERPISTOL
	|| j == WEP_MACHINEPISTOL
	|| j == WEP_CZSKORPION
	|| j == WEP_SVSKORPION
	|| j == WEP_CRYPISTOL
	|| j == WEP_UTILITOOL
	|| j == WEP_LASER
	|| j == WEP_MICROUZI
	|| j == WEP_FFMAGNUM
	|| j == WEP_PEPPERBOXREVOLVER
	|| j == WEP_REVOLVER
	|| j == WEP_FLINTLOCKPISTOL
	|| j == WEP_LIGHTSABRE
	|| j == WEP_LIGHTSABREII
	|| j == WEP_LIGHTSABREIV
	|| j == WEP_LIGHTSABREXI
	|| j == WEP_FLASHLIGHT
	|| j == WEP_DAGGER
	|| j == WEP_ARKANSASTOOTHPICK
	|| j == WEP_KNIFE
	|| j == WEP_BOWIEKNIFE
	|| j == WEP_SAI
	|| j == WEP_EIGHTGAUGESAWEDOFF
	|| j == WEP_TENGAUGESAWEDOFF
	) {
		return CONTAINER_TALLY_STORAGE_WEAPONMSMALL;
		//Abit less than default


	//////////////////////////////////////////////////////////////////////////////////////////////
	//Default would go here if it were a size list, it's in the else below as it is the fallback//
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	
	} else if (j == WEP_AK47
	|| j == WEP_M1897TRENCHGUN
	|| j == WEP_M1928
	|| j == WEP_M1929
	|| j == WEP_FNSCAR
	|| j == WEP_AMR18
	|| j == WEP_STYERAUG
	|| j == WEP_L85A2
	|| j == WEP_FAMAS
	|| j == WEP_SHOTGUNAUTOMAT
	|| j == WEP_SHOTGUN
	|| j == WEP_SPAS12
	|| j == WEP_CROWBAR
	|| j == WEP_IRONCROW
	|| j == WEP_KATANA
	|| j == WEP_SHIRASAYA
	|| j == WEP_ZATOICHI
	|| j == WEP_ELVENSABRE
	|| j == WEP_LONGSWORD
	|| j == WEP_ARMINGSWORD
	|| j == WEP_CRUSADERSWORD
	|| j == WEP_FALCHION
	|| j == WEP_DADAO
	|| j == WEP_PUDAO
	|| j == WEP_SCIMITAR
	|| j == WEP_BASTARDSWORD
	|| j == WEP_CLAYMORE
	|| j == WEP_DEFENDERSWORD
	|| j == WEP_HLAC
	|| j == WEP_STARBLAST
	|| j == WEP_STARLASE
	|| j == WEP_SUNBURST
	|| j == WEP_CRYLANCER
	|| j == WEP_TETSUBO
	|| j == WEP_CUDGEL
	|| j == WEP_SPIKEDCUDGEL
	|| j == WEP_MORGENSTERN
	|| j == WEP_SPIKEDMACE
	|| j == WEP_SHOOTINGSTAR
	|| j == WEP_INFANTRYAXE
	|| j == WEP_ELVENAXE
	|| j == WEP_WARMALLET
	|| j == WEP_GREYIRONMALLET
	|| j == WEP_CROSSBOWDTWR
	|| j == WEP_BAT
	) {
		//Abit greater than default
		return CONTAINER_TALLY_STORAGE_WEAPONSMED;
		
	} else if (j == WEP_GRENADE_LAUNCHER
	|| j == WEP_MORTAR
	|| j == WEP_CHAUCHAT
	|| j == WEP_SHOSHO
	|| j == WEP_ELECTRO
	|| j == WEP_SHININGSTAR
	|| j == WEP_RAPIER
	|| j == WEP_NEX
	|| j == WEP_MINSTANEX
	|| j == WEP_SKS45
	|| j == WEP_LRR
	|| j == WEP_M16VN
	|| j == WEP_M16A2
	|| j == WEP_M1903
	|| j == WEP_TANEGASHIMA
	|| j == WEP_HENRY1860RIFLE
	|| j == WEP_WINCHESTER1873RIFLE
	|| j == WEP_COLTLIGHTNING
	) {
		return CONTAINER_TALLY_STORAGE_WEAPONMED;
		
			
	} else if (j == WEP_MINE_LAYER
	|| j == WEP_EXPLOSIVE_VEST
	|| j == WEP_FIGHTERSWORD
	|| j == WEP_BROADAXE
	|| j == WEP_WARAXE
	|| j == WEP_SKIRMISHERSAXE
	|| j == WEP_BATTLEAXE
	|| j == WEP_TEMPLARAXE
	|| j == WEP_DOUBLEBITAXE
	|| j == WEP_PICKAXE
	|| j == WEP_WOODAXE
	|| j == WEP_AXE
	|| j == WEP_BEARDEDAXE
	|| j == WEP_G98
	|| j == WEP_MOSIN
	|| j == WEP_SPORTSHOTGUN
	|| j == WEP_WINCHESTER1897
	|| j == WEP_BAR1918
	|| j == WEP_MUSKET
	|| j == WEP_SHARPSRIFLE
	|| j == WEP_EIGHTGAUGESHOTGUN
	|| j == WEP_TENGAUGEDOUBLE
	|| j == WEP_SVD
	|| j == WEP_CHAINSAW
	|| j == WEP_STAFFFLAME
	|| j == WEP_STAFFMAGI
	|| j == WEP_ELVENSTAFF
	) {
		return CONTAINER_TALLY_STORAGE_WEAPONBMED;
		
			
	} else if (j == WEP_NAGAMAKI
	|| j == WEP_ELVENGLAIVE
	|| j == WEP_ODACHI
	|| j == WEP_QUARTERSTAFF
	|| j == WEP_INFANTRYSTAFF
	|| j == WEP_HMG
	|| j == WEP_RPD
	|| j == WEP_PKM
	|| j == WEP_M249PARA
	|| j == WEP_LEWISMG
	|| j == WEP_MG0815
	|| j == WEP_RIFLE
	|| j == WEP_FLAMETHROWER
	|| j == WEP_ROCKET_LAUNCHER
	|| j == WEP_DEVASTATOR
	|| j == WEP_SEEKER
	|| j == WEP_FIREBALL
	|| j == WEP_TUBA
	|| j == WEP_SUNBEAM
	|| j == WEP_BARDICHE
	|| j == WEP_BRONZECUDGEL
	) {
		return CONTAINER_TALLY_STORAGE_WEAPONBIG;
		
			
	} else if (j == WEP_SPEAR
	|| j == WEP_FLAMBERGE
	|| j == WEP_YARI
	|| j == WEP_POLEAXE
	|| j == WEP_M82RIFLE
	|| j == WEP_T17MMRIFLE
	|| j == WEP_RPG7_LAUNCHER
	|| j == WEP_RA4_LAUNCHER
	) {
		return CONTAINER_TALLY_STORAGE_WEAPONLARGE;
		
			
	} else if (j == WEP_NUKE_LAYER) {
		return CONTAINER_TALLY_STORAGE_WEAPONHUGE;
		
			
	} else {
		return CONTAINER_TALLY_STORAGE_WEAPON;
	}
}

void MagicInventoryDropByName (entity player, string mitype, string misize, string mysize, float coinamount, float isput, entity donee)
{
	if (mitype == "weapon")
	{
		local entity ewp;
		local float j;
		if (!g_minstagib)
		{
			for(j = WEP_FIRST; j <= WEP_LAST; ++j)
			{
				if(WEPSET_CONTAINS_EW(player, j))
				{
					ewp = get_weaponinfo(j);
					if(ewp.netname == misize)
					{
						if(W_IsWeaponThrowable(j))
						{
							if (j != WEP_HAGAR && j != WEP_HAGAR2) {
								if (player == self) //We only want to do this if it is a player's own action, for now
								{
									weapon_action(j, WR_GONETHINK);
									//This works for now. GONETHINK is used mostly for reseting _lit_ variables to 0
									//when a weapon is thrown currently in the w_ code. No harm in calling it once
									//here so we aren't shining flashlights that we no-longer have
									//The Hagar does some more complex things, so we are omitting it
									//from this off-handed drop
								}
							}
							
							if (isput) {
								local float proceedetoaddweapon;
								
								proceedetoaddweapon = 1;
								
								if (donee.iscontainer_storage) {
									local float doneetally;
									doneetally = 0;
									doneetally = ContainerTallyStorage(donee);
									if (doneetally + ContainerWeaponStorageAmnt(j) > donee.iscontainer_storage)
									{
										proceedetoaddweapon = 0;
										if ((clienttype(player) == CLIENTTYPE_REAL)) {
											sprint(player, "The container cannot fit the weapon\n");
										}
									}
								}
								
								if (proceedetoaddweapon) {
									WEPSET_ANDNOT_EW(player, j);
								
									W_GiveWeapon (donee, j, ewp.netname);
								
									sound (donee, CH_TRIGGER, "resource/construction/con_stone_10.ogg", VOL_BASE, ATTN_NORM);
								
									if (player.weapon == j) {
										if not(player.peaceful) W_SwitchWeapon_Force(player, w_getbestweapon(player));
									}
								}
							} else {
								W_ThrowNewWeapon(player, j, TRUE, player.origin, randomvec() * 175 + '0 0 325');
								WEPSET_ANDNOT_EW(player, j);
							
								//print(ftos(player.weapon), " x ", ftos(j), "\n");
								if (player.weapon == j) {
									if not(player.peaceful) W_SwitchWeapon_Force(player, w_getbestweapon(player));
								}
							}
						}
					}
				}
			}
		}
	}
	else if (mitype == "ammo" || mitype == "resource")
	{
		if (misize == "nails") {
			if (isput) MagicInventoryPutItem(player, ammo_nails, g_pickup_nails, donee);
			else MagicInventoryDropItem(player, ammo_nails, 6, "nails", g_pickup_nails);
		} else if (misize == "rockets") {
			if (isput) MagicInventoryPutItem(player, ammo_rockets, g_pickup_rockets, donee);
			else MagicInventoryDropItem(player, ammo_rockets, 6, "rockets", g_pickup_rockets);
		} else if (misize == "cells") {
			if (isput) MagicInventoryPutItem(player, ammo_cells, g_pickup_cells, donee);
			else MagicInventoryDropItem(player, ammo_cells, 6, "cells", g_pickup_cells);
		} else if (misize == "shells") {
			if (isput) MagicInventoryPutItem(player, ammo_shells, g_pickup_shells, donee);
			else MagicInventoryDropItem(player, ammo_shells, 6, "shells", g_pickup_shells);
		} else if (misize == "grenade") { 
			if (isput) MagicInventoryPutItem(player, grenades, 1, donee);
			else MagicInventoryDropItem(player, grenades, 6, "grenade", 1);
		} else if (misize == "flashbang") {
			if (isput) MagicInventoryPutItem(player, flashbangs, 1, donee);
			else MagicInventoryDropItem(player, flashbangs, 6, "flashbang", 1);
		} else if (misize == "smokenade") {
			if (isput) MagicInventoryPutItem(player, smokenades, 1, donee);
			else MagicInventoryDropItem(player, smokenades, 6, "smokenade", 1);
		} else if (misize == "fragnade") {
			if (isput) MagicInventoryPutItem(player, fragnades, 1, donee);
			else MagicInventoryDropItem(player, fragnades, 6, "fragnade", 1);
		} else if (misize == "atmine") {
			if (isput) MagicInventoryPutItem(player, atmines, 1, donee);
			else MagicInventoryDropItem(player, atmines, 6, "atmine", 1);
		} else if (misize == "landmine") {
			if (isput) MagicInventoryPutItem(player, landmines, 1, donee);
			else MagicInventoryDropItem(player, landmines, 6, "landmine", 1);
		}
	}
	else if (mitype == "coin" || mitype == "coins")
	{
		if (misize == "tin") {
			if (isput) MagicInventoryPutItem(player, inv_coin_tin, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_tin, 7, "tin", coinamount);
		} else if (misize == "iron") {
			if (isput) MagicInventoryPutItem(player, inv_coin_iron, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_iron, 7, "iron", coinamount);
		} else if (misize == "bronze") {
			if (isput) MagicInventoryPutItem(player, inv_coin_bronze, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_bronze, 7, "bronze", coinamount);
		} else if (misize == "copper") {
			if (isput) MagicInventoryPutItem(player, inv_coin_copper, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_copper, 7, "copper", coinamount);
		} else if (misize == "silver") {
			if (isput) MagicInventoryPutItem(player, inv_coin_silver, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_silver, 7, "silver", coinamount);
		} else if (misize == "gold") {
			if (isput) MagicInventoryPutItem(player, inv_coin_gold, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_gold, 7, "gold", coinamount);
		} else if (misize == "plat" || misize == "platinum") {
			if (isput) MagicInventoryPutItem(player, inv_coin_plat, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_plat, 7, "plat", coinamount);
		} else if (misize == "jade") {
			if (isput) MagicInventoryPutItem(player, inv_coin_jade, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_jade, 7, "jade", coinamount);
		} else if (misize == "amberium" || misize == "amber") {
			if (isput) MagicInventoryPutItem(player, inv_coin_amberium, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_amberium, 7, "amberium", coinamount);
		}
		//Faux, Fake coins
		else if (misize == "fauxtin") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_tin, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_tin, 7, "fauxtin", coinamount);
		} else if (misize == "fauxiron") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_iron, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_iron, 7, "fauxiron", coinamount);
		} else if (misize == "fauxbronze") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_bronze, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_bronze, 7, "fauxbronze", coinamount);
		} else if (misize == "fauxcopper") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_copper, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_copper, 7, "fauxcopper", coinamount);
		} else if (misize == "fauxsilver") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_silver, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_silver, 7, "fauxsilver", coinamount);
		} else if (misize == "fauxgold") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_gold, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_gold, 7, "fauxgold", coinamount);
		} else if (misize == "fauxplat" || misize == "fauxplatinum") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_plat, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_plat, 7, "fauxplat", coinamount);
		} else if (misize == "fauxjade") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_jade, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_jade, 7, "fauxjade", coinamount);
		} else if (misize == "fauxamberium" || misize == "fauxamber") {
			if (isput) MagicInventoryPutItem(player, inv_coin_f_amberium, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_f_amberium, 7, "fauxamberium", coinamount);
		}
		//Faux, Fake coins
		else if (misize == "counterfeittin") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_tin, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_tin, 7, "counterfeittin", coinamount);
		} else if (misize == "counterfeitiron") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_iron, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_iron, 7, "counterfeitiron", coinamount);
		} else if (misize == "counterfeitbronze") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_bronze, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_bronze, 7, "counterfeitbronze", coinamount);
		} else if (misize == "counterfeitcopper") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_copper, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_copper, 7, "counterfeitcopper", coinamount);
		} else if (misize == "counterfeitsilver") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_silver, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_silver, 7, "counterfeitsilver", coinamount);
		} else if (misize == "counterfeitgold") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_gold, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_gold, 7, "counterfeitgold", coinamount);
		} else if (misize == "counterfeitplat" || misize == "counterfeitplatinum") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_plat, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_plat, 7, "counterfeitplat", coinamount);
		} else if (misize == "counterfeitjade") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_jade, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_jade, 7, "counterfeitjade", coinamount);
		} else if (misize == "counterfeitamberium" || misize == "counterfeitamber") {
			if (isput) MagicInventoryPutItem(player, inv_coin_cf_amberium, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_coin_cf_amberium, 7, "counterfeitamberium", coinamount);
		}
		//Casino Tokens
		else if (misize == "casinotokenyellow" || misize == "yellowcasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_yellow, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_yellow, 7, "casinotokenyellow", coinamount);
		} else if (misize == "casinotokenblue" || misize == "bluecasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_blue, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_blue, 7, "casinotokenblue", coinamount);
		} else if (misize == "casinotokengray" || misize == "graycasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_gray, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_gray, 7, "casinotokengray", coinamount);
		} else if (misize == "casinotokenlightgreen" || misize == "lightgreencasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_lightgreen, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_lightgreen, 7, "casinotokenlightgreen", coinamount);
		} else if (misize == "casinotokenlightblue" || misize == "lightbluecasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_lightblue, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_lightblue, 7, "casinotokenlightblue", coinamount);
		} else if (misize == "casinotokenrose" || misize == "rosecasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_rose, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_rose, 7, "casinotokenrose", coinamount);
		} else if (misize == "casinotokenblack" || misize == "blackcasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_black, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_black, 7, "casinotokenblack", coinamount);
		} else if (misize == "casinotokenseabreeze" || misize == "seabreezecasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_seabreeze, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_seabreeze, 7, "casinotokenseabreeze", coinamount);
		} else if (misize == "casinotokenred" || misize == "redcasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_red, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_red, 7, "casinotokenred", coinamount);
		} else if (misize == "casinotokencyan" || misize == "cyancasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_cyan, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_cyan, 7, "casinotokencyan", coinamount);
		} else if (misize == "casinotokentan" || misize == "tancasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_tan, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_tan, 7, "casinotokentan", coinamount);
		} else if (misize == "casinotokengreen" || misize == "greencasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_green, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_green, 7, "casinotokengreen", coinamount);
		} else if (misize == "casinotokenpurple" || misize == "purplecasinotoken") {
			if (isput) MagicInventoryPutItem(player, inv_casinotoken_purple, coinamount, donee);
			else MagicInventoryDropCoinIter(player, inv_casinotoken_purple, 7, "casinotokenpurple", coinamount);
		}
	}
	else if (mitype == "gem" || mitype == "gems")
	{
		if (misize == "diamond") {
			if (isput) MagicInventoryPutItem(player, inv_gem_diamond, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_diamond, 8, "diamond", coinamount);
		} else if (misize == "jacinth") {
			if (isput) MagicInventoryPutItem(player, inv_gem_jacinth, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_jacinth, 8, "jacinth", coinamount);
		} else if (misize == "ruby") {
			if (isput) MagicInventoryPutItem(player, inv_gem_ruby, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_ruby, 8, "ruby", coinamount);
		} else if (misize == "pearl") {
			if (isput) MagicInventoryPutItem(player, inv_gem_pearl, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_pearl, 8, "pearl", coinamount);
		} else if (misize == "blackpearl") {
			if (isput) MagicInventoryPutItem(player, inv_gem_blackpearl, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_blackpearl, 8, "blackpearl", coinamount);
		} else if (misize == "peridot") {
			if (isput) MagicInventoryPutItem(player, inv_gem_peridot, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_peridot, 8, "peridot", coinamount);
		} else if (misize == "emerald") {
			if (isput) MagicInventoryPutItem(player, inv_gem_emerald, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_emerald, 8, "emerald", coinamount);
		} else if (misize == "topaz") {
			if (isput) MagicInventoryPutItem(player, inv_gem_topaz, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_topaz, 8, "topaz", coinamount);
		} else if (misize == "sapphire") {
			if (isput) MagicInventoryPutItem(player, inv_gem_sapphire, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_sapphire, 8, "sapphire", coinamount);
		} else if (misize == "chalcedony") {
			if (isput) MagicInventoryPutItem(player, inv_gem_chalcedony, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_chalcedony, 8, "chalcedony", coinamount);
		} else if (misize == "agate") {
			if (isput) MagicInventoryPutItem(player, inv_gem_agate, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_agate, 8, "agate", coinamount);
		} else if (misize == "onyx") {
			if (isput) MagicInventoryPutItem(player, inv_gem_onyx, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_onyx, 8, "onyx", coinamount);
		} else if (misize == "mithril") {
			if (isput) MagicInventoryPutItem(player, inv_gem_mithril, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_mithril, 8, "mithril", coinamount);
		} else if (misize == "amethyst") {
			if (isput) MagicInventoryPutItem(player, inv_gem_amethyst, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_amethyst, 8, "amethyst", coinamount);
		} else if (misize == "chrysoberyl") {
			if (isput) MagicInventoryPutItem(player, inv_gem_chrysoberyl, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_chrysoberyl, 8, "chrysoberyl", coinamount);
		} else if (misize == "aquamarine") {
			if (isput) MagicInventoryPutItem(player, inv_gem_aquamarine, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_aquamarine, 8, "aquamarine", coinamount);
		} else if (misize == "quartz") {
			if (isput) MagicInventoryPutItem(player, inv_gem_quartz, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_quartz, 8, "quartz", coinamount);
		} else if (misize == "tourmaline") {
			if (isput) MagicInventoryPutItem(player, inv_gem_tourmaline, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_tourmaline, 8, "tourmaline", coinamount);
		} else if (misize == "redglass") {
			if (isput) MagicInventoryPutItem(player, inv_gem_glass_r, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_glass_r, 8, "redglass", coinamount);
		} else if (misize == "greenglass") {
			if (isput) MagicInventoryPutItem(player, inv_gem_glass_g, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_glass_g, 8, "greenglass", coinamount);
		} else if (misize == "blueglass") {
			if (isput) MagicInventoryPutItem(player, inv_gem_glass_b, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_glass_b, 8, "blueglass", coinamount);
		} else if (misize == "yellowglass") {
			if (isput) MagicInventoryPutItem(player, inv_gem_glass_y, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_glass_y, 8, "yellowglass", coinamount);
		} else if (misize == "whiteglass") {
			if (isput) MagicInventoryPutItem(player, inv_gem_glass_w, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_glass_w, 8, "whiteglass", coinamount);
		}
		//Faux, fake gems
		else if (misize == "cutglassdiamond") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_diamond, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_diamond, 8, "cutglassdiamond", coinamount);
		} else if (misize == "cutglassjacinth") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_jacinth, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_jacinth, 8, "cutglassjacinth", coinamount);
		} else if (misize == "cutglassruby") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_ruby, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_ruby, 8, "cutglassruby", coinamount);
		} else if (misize == "cutglasspearl") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_pearl, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_pearl, 8, "cutglasspearl", coinamount);
		} else if (misize == "cutglassblackpearl") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_blackpearl, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_blackpearl, 8, "cutglassblackpearl", coinamount);
		} else if (misize == "cutglassperidot") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_peridot, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_peridot, 8, "cutglassperidot", coinamount);
		} else if (misize == "cutglassemerald") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_emerald, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_emerald, 8, "cutglassemerald", coinamount);
		} else if (misize == "cutglasstopaz") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_topaz, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_topaz, 8, "cutglasstopaz", coinamount);
		} else if (misize == "cutglasssapphire") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_sapphire, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_sapphire, 8, "cutglasssapphire", coinamount);
		} else if (misize == "cutglasschalcedony") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_chalcedony, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_chalcedony, 8, "cutglasschalcedony", coinamount);
		} else if (misize == "cutglassagate") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_agate, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_agate, 8, "cutglassagate", coinamount);
		} else if (misize == "cutglassonyx") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_onyx, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_onyx, 8, "cutglassonyx", coinamount);
		} else if (misize == "cutglassmithril") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_mithril, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_mithril, 8, "cutglassmithril", coinamount);
		} else if (misize == "cutglassamethyst") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_amethyst, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_amethyst, 8, "cutglassamethyst", coinamount);
		} else if (misize == "cutglasschrysoberyl") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_chrysoberyl, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_chrysoberyl, 8, "cutglasschrysoberyl", coinamount);
		} else if (misize == "cutglassaquamarine") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_aquamarine, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_aquamarine, 8, "cutglassaquamarine", coinamount);
		} else if (misize == "cutglassquartz") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_quartz, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_quartz, 8, "cutglassquartz", coinamount);
		} else if (misize == "cutglasstourmaline") {
			if (isput) MagicInventoryPutItem(player, inv_gem_f_tourmaline, coinamount, donee);
			else MagicInventoryDropGemIter(player, inv_gem_f_tourmaline, 8, "cutglasstourmaline", coinamount);
		}
	}
	else if (mitype == "bar" || mitype == "bars")
	{
		if (misize == "tin") {
			if (isput) MagicInventoryPutItem(player, inv_bar_tin, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_tin, 9, "tin", coinamount);
		} else if (misize == "iron") {
			if (isput) MagicInventoryPutItem(player, inv_bar_iron, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_iron, 9, "iron", coinamount);
		} else if (misize == "bronze") {
			if (isput) MagicInventoryPutItem(player, inv_bar_bronze, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_bronze, 9, "bronze", coinamount);
		} else if (misize == "copper") {
			if (isput) MagicInventoryPutItem(player, inv_bar_copper, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_copper, 9, "copper", coinamount);
		} else if (misize == "silver") {
			if (isput) MagicInventoryPutItem(player, inv_bar_silver, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_silver, 9, "silver", coinamount);
		} else if (misize == "gold") {
			if (isput) MagicInventoryPutItem(player, inv_bar_gold, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_gold, 9, "gold", coinamount);
		} else if (misize == "plat" || misize == "platinum") {
			if (isput) MagicInventoryPutItem(player, inv_bar_plat, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_plat, 9, "plat", coinamount);
		} else if (misize == "jade") {
			if (isput) MagicInventoryPutItem(player, inv_bar_jade, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_jade, 9, "jade", coinamount);
		} else if (misize == "amberium" || misize == "amber") {
			if (isput) MagicInventoryPutItem(player, inv_bar_amberium, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_amberium, 9, "amberium", coinamount);
		}
		//Faux
		else if (misize == "fauxtin") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_tin, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_tin, 9, "fauxtin", coinamount);
		} else if (misize == "fauxiron") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_iron, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_iron, 9, "fauxiron", coinamount);
		} else if (misize == "fauxbronze") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_bronze, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_bronze, 9, "fauxbronze", coinamount);
		} else if (misize == "fauxcopper") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_copper, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_copper, 9, "fauxcopper", coinamount);
		} else if (misize == "fauxsilver") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_silver, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_silver, 9, "fauxsilver", coinamount);
		} else if (misize == "fauxgold") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_gold, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_gold, 9, "fauxgold", coinamount);
		} else if (misize == "fauxplat" || misize == "fauxplatinum") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_plat, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_plat, 9, "fauxplat", coinamount);
		} else if (misize == "fauxjade") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_jade, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_jade, 9, "fauxjade", coinamount);
		} else if (misize == "fauxamberium" || misize == "fauxamber") {
			if (isput) MagicInventoryPutItem(player, inv_bar_f_amberium, coinamount, donee);
			else MagicInventoryDropBullionBarIter(player, inv_bar_f_amberium, 9, "fauxamberium", coinamount);
		}
	}
	else if (mitype == "misc")
	{
		if (misize == "suppressor45" || misize == "supressor45") {
			if (isput) MagicInventoryPutItem(player, inv_misc_suppressor45, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_suppressor45, 10, "suppressor45", coinamount);
		
		} else if (misize == "suppressormac10" || misize == "suppressorMac10" || misize == "suppressorMAC10"
		|| misize == "supressormac10" || misize == "supressorMac10" || misize == "supressorMAC10") {
			if (isput) MagicInventoryPutItem(player, inv_misc_suppressormac10, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_suppressormac10, 10, "suppressormac10", coinamount);
			
		} else if (misize == "suppressor9mm" || misize == "suppressor9MM"
		|| misize == "supressor9mm" || misize == "supressor9MM") {
			if (isput) MagicInventoryPutItem(player, inv_misc_suppressor9mm, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_suppressor9mm, 10, "suppressor9mm", coinamount);
		
		} else if (misize == "suppressor5n7mm" || misize == "suppressor5.7mm" || misize == "suppressor5.7MM"
		|| misize == "supressor5n7mm" || misize == "supressor5.7mm" || misize == "supressor5.7MM") {
			if (isput) MagicInventoryPutItem(player, inv_misc_suppressor5n7mm, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_suppressor5n7mm, 10, "suppressor5n7mm", coinamount);
		
		} else if (misize == "suppressorrifle" || misize == "suppressorRifle" || misize == "suppressorRIFLE"
		|| misize == "supressorrifle" || misize == "supressorRifle" || misize == "supressorRIFLE") {
			if (isput) MagicInventoryPutItem(player, inv_misc_suppressorrifle, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_suppressorrifle, 10, "suppressorrifle", coinamount);
			
		} else if (misize == "suppressorpdw" || misize == "suppressorPDW"
		|| misize == "supressorpdw" || misize == "supressorPDW") {
			if (isput) MagicInventoryPutItem(player, inv_misc_suppressorpdw, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_suppressorpdw, 10, "suppressorpdw", coinamount);
		
		} else if (misize == "cylinderr1856" || misize == "cylinderR1856" || misize == "CYLINDERR1856"
		|| misize == "cylinder1856" || misize == "cylindeR1856" || misize == "CYLINDER1856") {
			if (isput) MagicInventoryPutItem(player, inv_misc_cylinder_r1856, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_cylinder_r1856, 10, "cylinderr1856", coinamount);
		
		} else if (misize == "ak47exmag50" || misize == "AK47EXMAG50") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_ak47_50, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_ak47_50, 10, "ak47exmag50", coinamount);
		
		} else if (misize == "ak47exmag100" || misize == "AK47EXMAG100") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_ak47_100, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_ak47_100, 10, "ak47exmag100", coinamount);
		
		} else if (misize == "ak47drum75" || misize == "AK47DRUM75") {
			if (isput) MagicInventoryPutItem(player, inv_misc_drum_ak47_75, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_drum_ak47_75, 10, "ak47drum75", coinamount);
		
		} else if (misize == "ak47mag30" || misize == "AK47MAG30") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_ak47_30, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_ak47_30, 10, "ak47mag30", coinamount);
		
		
		} else if (misize == "ak74exmag45" || misize == "AK74EXMAG45") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_ak74_45, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_ak74_45, 10, "ak74exmag45", coinamount);
		} else if (misize == "ak74mag30" || misize == "AK74MAG30") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_ak74_30, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_ak74_30, 10, "ak74mag30", coinamount);
		
		} else if (misize == "styeraugexmag42" || misize == "STYERAUGEXMAG42") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_styeraug_42, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_styeraug_42, 10, "styeraugexmag42", coinamount);
		} else if (misize == "styeraugmag30" || misize == "STYERAUGMAG30") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_styeraug_30, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_styeraug_30, 10, "styeraugmag30", coinamount);
		
		
		} else if (misize == "lewisgunpanmag97" || misize == "LEWISGUNPANMAG97") {
			if (isput) MagicInventoryPutItem(player, inv_misc_panmag_lewisgun_97, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_panmag_lewisgun_97, 10, "lewisgunpanmag97", coinamount);
		} else if (misize == "lewisgunpanmag47" || misize == "LEWISGUNPANMAG47") {
			if (isput) MagicInventoryPutItem(player, inv_misc_panmag_lewisgun_47, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_panmag_lewisgun_47, 10, "lewisgunpanmag47", coinamount);
		
		
		} else if (misize == "barexmag40" || misize == "BAREXMAG40") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_bar_40, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_bar_40, 10, "barexmag40", coinamount);
		} else if (misize == "barmag20" || misize == "BARMAG20") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_bar_20, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_bar_20, 10, "barmag20", coinamount);
		
		
		} else if (misize == "m16mag20" || misize == "M16MAG20") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_m16_20, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_m16_20, 10, "m16mag20", coinamount);
		
		} else if (misize == "m16mag30" || misize == "M16MAG30") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_m16_30, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_m16_30, 10, "m16mag30", coinamount);
		
		} else if (misize == "m16betacmag" || misize == "M16BETACMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_betacmag_m16, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_betacmag_m16, 10, "m16betacmag", coinamount);
		
		} else if (misize == "lightpistolbetacmag" || misize == "LIGHTPISTOLBETACMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_betacmag_lightpistol, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_betacmag_lightpistol, 10, "lightpistolbetacmag", coinamount);
		} else if (misize == "lightpistolexmag" || misize == "LIGHTPISTOLEXMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_lightpistol, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_lightpistol, 10, "lightpistolexmag", coinamount);
		} else if (misize == "lightpistolmag" || misize == "LIGHTPISTOLMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_lightpistol, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_lightpistol, 10, "lightpistolmag", coinamount);
		} else if (misize == "lightpistoldrum" || misize == "LIGHTPISTOLBETACMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_drum_lightpistol, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_drum_lightpistol, 10, "lightpistoldrum", coinamount);
			
			
		} else if (misize == "pdwbetacmag" || misize == "PDWBETACMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_betacmag_pdw, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_betacmag_pdw, 10, "pdwbetacmag", coinamount);
		} else if (misize == "pdwexmag40" || misize == "PDWEXMAG40") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag40_pdw, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag40_pdw, 10, "pdwexmag", coinamount);
		} else if (misize == "pdwstdmag" || misize == "PDWSTDMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_stdmag_pdw, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_stdmag_pdw, 10, "pdwstdmag", coinamount);
		} else if (misize == "pdwtinymag" || misize == "PDWTINYMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_tinymag_pdw, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_tinymag_pdw, 10, "pdwtinymag", coinamount);
		} else if (misize == "pdwsmallmag" || misize == "PDWSMALLMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_smallmag_pdw, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_smallmag_pdw, 10, "pdwsmallmag", coinamount);
		
		} else if (misize == "pdwdrum" || misize == "PDWBETACMAG") {
			if (isput) MagicInventoryPutItem(player, inv_misc_drum_pdw, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_drum_pdw, 10, "pdwdrum", coinamount);
			
			
						
		} else if (misize == "uzimag20" || misize == "UZIMAG20") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_uzi_20, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_uzi_20, 10, "uzimag20", coinamount);
		
		} else if (misize == "uzimag25" || misize == "UZIMAG25") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_uzi_25, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_uzi_25, 10, "uzimag25", coinamount);
		
		} else if (misize == "uzimag32" || misize == "UZIMAG32") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_uzi_32, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_uzi_32, 10, "uzimag32", coinamount);
		
		} else if (misize == "uziexmag40" || misize == "UZIEXMAG40") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_uzi_40, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_uzi_40, 10, "uziexmag40", coinamount);
		
		} else if (misize == "uziexmag50" || misize == "UZIEXMAG50") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_uzi_50, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_uzi_50, 10, "uziexmag50", coinamount);
		
		} else if (misize == "uzidrum82" || misize == "UZIDRUM82") {
			if (isput) MagicInventoryPutItem(player, inv_misc_drum_uzi_82, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_drum_uzi_82, 10, "uzidrum82", coinamount);
		
		} else if (misize == "uziexmag106" || misize == "UZIEXMAG106") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_uzi_106, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_uzi_106, 10, "uziexmag106", coinamount);
		
		} else if (misize == "tec9mag20" || misize == "TEC9MAG20") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_tec9_20, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_tec9_20, 10, "tec9mag20", coinamount);
		
		} else if (misize == "tec9mag10" || misize == "TEC9MAG10") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_tec9_10, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_tec9_10, 10, "tec9mag10", coinamount);
		
		} else if (misize == "tec9mag32" || misize == "TEC9MAG32") {
			if (isput) MagicInventoryPutItem(player, inv_misc_mag_tec9_32, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_mag_tec9_32, 10, "tec9mag32", coinamount);
		
		} else if (misize == "tec9exmag36" || misize == "TEC9EXMAG36") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_tec9_36, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_tec9_36, 10, "tec9exmag36", coinamount);
		
		} else if (misize == "tec9exmag50" || misize == "TEC9EXMAG50") {
			if (isput) MagicInventoryPutItem(player, inv_misc_exmag_tec9_50, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_exmag_tec9_50, 10, "tec9exmag50", coinamount);
		
		} else if (misize == "tec9drum72" || misize == "TEC9DRUM72") {
			if (isput) MagicInventoryPutItem(player, inv_misc_drum_tec9_72, coinamount, donee);
			else MagicInventoryDropItem(player, inv_misc_drum_tec9_72, 10, "tec9drum72", coinamount);
			
		}
	}
	else if (mitype == "potion")
	{
		//Type 0 = scroll, 1 = book, 3/4/5 = potion (small medium large);
		if (misize == "health" || misize == "heal" || misize == "life") {
			if (mysize == "small" || mysize == "little" || mysize == "tiny") {
				if (isput) MagicInventoryPutItem(player, inv_potion_health_small, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_health_small, 3, "health", 1);
			} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
				if (isput) MagicInventoryPutItem(player, inv_potion_health_medium, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_health_medium, 4, "health", 1);
			} else if (mysize == "large" || mysize == "full" || mysize == "big") {
				if (isput) MagicInventoryPutItem(player, inv_potion_health_large, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_health_large, 5, "health", 1);
			}
		} else if (misize == "mana" || misize == "magic" || misize == "mage") {
			if (mysize == "small" || mysize == "little" || mysize == "tiny") {
				if (isput) MagicInventoryPutItem(player, inv_potion_mana_small, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_mana_small, 3, "mana", 1);
			} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
				if (isput) MagicInventoryPutItem(player, inv_potion_mana_medium, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_mana_medium, 4, "mana", 1);
			} else if (mysize == "large" || mysize == "full" || mysize == "big") {
				if (isput) MagicInventoryPutItem(player, inv_potion_mana_large, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_mana_large, 5, "mana", 1);
			}
		} else if (misize == "rejuv" || misize == "rejuvenation" || misize == "rejuvination") {
			if (mysize == "small" || mysize == "little" || mysize == "tiny") {
				if (isput) MagicInventoryPutItem(player, inv_potion_rejuv_small, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_rejuv_small, 3, "rejuv", 1);
			} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
				if (isput) MagicInventoryPutItem(player, inv_potion_rejuv_medium, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_rejuv_medium, 4, "rejuv", 1);
			} else if (mysize == "large" || mysize == "full" || mysize == "big") {
				if (isput) MagicInventoryPutItem(player, inv_potion_rejuv_large, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_rejuv_large, 5, "rejuv", 1);
			}
		} else if (misize == "vodka") {
			if (mysize == "small" || mysize == "little" || mysize == "tiny") {
				if (isput) MagicInventoryPutItem(player, inv_potion_vodka_small, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_vodka_small, 3, "vodka", 1);
			} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
				if (isput) MagicInventoryPutItem(player, inv_potion_vodka_medium, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_vodka_medium, 4, "vodka", 1);
			} else if (mysize == "large" || mysize == "full" || mysize == "big") {
				if (isput) MagicInventoryPutItem(player, inv_potion_vodka_large, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_vodka_large, 5, "vodka", 1);
			}
		} else if (misize == "merlot") {
			if (mysize == "small" || mysize == "little" || mysize == "tiny") {
				if (isput) MagicInventoryPutItem(player, inv_potion_merlot_small, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_merlot_small, 3, "merlot", 1);
			} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
				if (isput) MagicInventoryPutItem(player, inv_potion_merlot_medium, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_merlot_medium, 4, "merlot", 1);
			} else if (mysize == "large" || mysize == "full" || mysize == "big") {
				if (isput) MagicInventoryPutItem(player, inv_potion_merlot_large, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_merlot_large, 5, "merlot", 1);
			}
		} else if (misize == "ale") {
			if (mysize == "small" || mysize == "little" || mysize == "tiny") {
				if (isput) MagicInventoryPutItem(player, inv_potion_ale_small, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_ale_small, 3, "ale", 1);
			} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
				if (isput) MagicInventoryPutItem(player, inv_potion_ale_medium, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_ale_medium, 4, "ale", 1);
			} else if (mysize == "large" || mysize == "full" || mysize == "big") {
				if (isput) MagicInventoryPutItem(player, inv_potion_ale_large, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_ale_large, 5, "ale", 1);
			}
		} else if (misize == "water") {
			if (mysize == "small" || mysize == "little" || mysize == "tiny") {
				if (isput) MagicInventoryPutItem(player, inv_potion_water_small, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_water_small, 3, "water", 1);
			} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
				if (isput) MagicInventoryPutItem(player, inv_potion_water_medium, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_water_medium, 4, "water", 1);
			} else if (mysize == "large" || mysize == "full" || mysize == "big") {
				if (isput) MagicInventoryPutItem(player, inv_potion_water_large, 1, donee);
				else MagicInventoryDropItem(player, inv_potion_water_large, 5, "water", 1);
			}
		}
	}
	else if (mitype == "comestible" || mitype == "food")
	{	
		if (misize == "bellpepper") {
			if (isput) MagicInventoryPutItem(player, inv_food_bellpepper, 1, donee);
			else MagicInventoryDropItem(player, inv_food_bellpepper, 3, "bellpepper", 1);
		} else if (misize == "bread") {
			if (isput) MagicInventoryPutItem(player, inv_food_bread, 1, donee);
			else MagicInventoryDropItem(player, inv_food_bread, 3, "bread", 1);
		} else if (misize == "cheeze") {
			if (isput) MagicInventoryPutItem(player, inv_food_cheeze, 1, donee);
			else MagicInventoryDropItem(player, inv_food_cheeze, 3, "cheeze", 1);
		} else if (misize == "garlic") {
			if (isput) MagicInventoryPutItem(player, inv_food_garlic, 1, donee);
			else MagicInventoryDropItem(player, inv_food_garlic, 3, "garlic", 1);
		} else if (misize == "grapes") {
			if (isput) MagicInventoryPutItem(player, inv_food_grapes, 1, donee);
			else MagicInventoryDropItem(player, inv_food_grapes, 3, "grapes", 1);
		} else if (misize == "onion") {
			if (isput) MagicInventoryPutItem(player, inv_food_onion, 1, donee);
			else MagicInventoryDropItem(player, inv_food_onion, 3, "onion", 1);
		} else if (misize == "tomato") {
			if (isput) MagicInventoryPutItem(player, inv_food_tomato, 1, donee);
			else MagicInventoryDropItem(player, inv_food_tomato, 3, "tomato", 1);
		} else if (misize == "turkeyleg") {
			if (isput) MagicInventoryPutItem(player, inv_food_turkeyleg, 1, donee);
			else MagicInventoryDropItem(player, inv_food_turkeyleg, 3, "turkeyleg", 1);
		} else if (misize == "faeces" || misize == "feaces" || misize == "feces" || misize == "poop" || misize == "shit") {
			if (autocvar_sv_risque >= 0.5) {
				if (mysize == "small" || mysize == "little" || mysize == "tiny") {
					if (isput) MagicInventoryPutItem(player, inv_faeces_small, 1, donee);
					else MagicInventoryDropItem(player, inv_faeces_small, 3, "faeces", 1);
				} else if (mysize == "medium" || mysize == "moderate" || mysize == "half") {
					if (isput) MagicInventoryPutItem(player, inv_faeces_medium, 1, donee);
					else MagicInventoryDropItem(player, inv_faeces_medium, 4, "faeces", 1);
				} else if (mysize == "large" || mysize == "full" || mysize == "big") {
					if (isput) MagicInventoryPutItem(player, inv_faeces_large, 1, donee);
					else MagicInventoryDropItem(player, inv_faeces_large, 5, "faeces", 1);
				} else {
					if (player.inv_faeces_large >= 1) {
						if (isput) MagicInventoryPutItem(player, inv_faeces_large, 1, donee);
						else MagicInventoryDropItem(player, inv_faeces_large, 5, "faeces", 1);
					} else if (player.inv_faeces_medium >= 1) {
						if (isput) MagicInventoryPutItem(player, inv_faeces_medium, 1, donee);
						else MagicInventoryDropItem(player, inv_faeces_medium, 4, "faeces", 1);
					} else if (player.inv_faeces_small >= 1) {
						if (isput) MagicInventoryPutItem(player, inv_faeces_small, 1, donee);
						else MagicInventoryDropItem(player, inv_faeces_small, 3, "faeces", 1);
					}
				}
			}
		}
	} else if (misize == "agency") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_agency, 1, donee);
			else MagicInventoryDropItem(player, inv_book_agency, 1, "agency", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_agency, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_agency, 0, "agency", 1);
		} 
	} else if (misize == "death") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_death, 1, donee);
			else MagicInventoryDropItem(player, inv_book_death, 1, "death", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_death, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_death, 0, "death", 1);
		} 
	} else if (misize == "drainlife") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_drainlife, 1, donee);
			else MagicInventoryDropItem(player, inv_book_drainlife, 1, "drainlife", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_drainlife, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_drainlife, 0, "drainlife", 1);
		}
	} else if (misize == "cancellation") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_cancellation, 1, donee);
			else MagicInventoryDropItem(player, inv_book_cancellation, 1, "cancellation", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_cancellation, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_cancellation, 0, "cancellation", 1);
		}
	} else if (misize == "castfromlife") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_castfromlife, 1, donee);
			else MagicInventoryDropItem(player, inv_book_castfromlife, 1, "castfromlife", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_castfromlife, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_castfromlife, 0, "castfromlife", 1);
		} 
	} else if (misize == "confer") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_confer, 1, donee);
			else MagicInventoryDropItem(player, inv_book_confer, 1, "confer", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_confer, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_confer, 0, "confer", 1);
		} 
	} else if (misize == "iceball") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_iceball, 1, donee);
			else MagicInventoryDropItem(player, inv_book_iceball, 1, "iceball", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_iceball, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_iceball, 0, "iceball", 1);
		} 
	} else if (misize == "icestar") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_icestar, 1, donee);
			else MagicInventoryDropItem(player, inv_book_icestar, 1, "icestar", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_icestar, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_icestar, 0, "icestar", 1);
		}  
	} else if (misize == "aquacaelestis") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_aquacaelestis, 1, donee);
			else MagicInventoryDropItem(player, inv_book_aquacaelestis, 1, "aquacaelestis", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_aquacaelestis, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_aquacaelestis, 0, "aquacaelestis", 1);
		} 
	} else if (misize == "nivosus") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_nivosus, 1, donee);
			else MagicInventoryDropItem(player, inv_book_nivosus, 1, "nivosus", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_nivosus, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_nivosus, 0, "nivosus", 1);
		} 
	} else if (misize == "rosa") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_rosa, 1, donee);
			else MagicInventoryDropItem(player, inv_book_rosa, 1, "rosa", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_rosa, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_rosa, 0, "rosa", 1);
		} 
	} else if (misize == "corvuspenna") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_corvuspenna, 1, donee);
			else MagicInventoryDropItem(player, inv_book_corvuspenna, 1, "corvuspenna", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_corvuspenna, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_corvuspenna, 0, "corvuspenna", 1);
		} 
	} else if (misize == "plumosus") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_plumosus, 1, donee);
			else MagicInventoryDropItem(player, inv_book_plumosus, 1, "plumosus", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_plumosus, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_plumosus, 0, "plumosus", 1);
		}
	} else if (misize == "firebolt") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_firebolt, 1, donee);
			else MagicInventoryDropItem(player, inv_book_firebolt, 1, "firebolt", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_firebolt, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_firebolt, 0, "firebolt", 1);
		} 
	} else if (misize == "fireball") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_fireball, 1, donee);
			else MagicInventoryDropItem(player, inv_book_fireball, 1, "fireball", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_fireball, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_fireball, 0, "fireball", 1);
		}  
	} else if (misize == "magmasphere") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_magmasphere, 1, donee);
			else MagicInventoryDropItem(player, inv_book_magmasphere, 1, "magmasphere", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_magmasphere, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_magmasphere, 0, "magmasphere", 1);
		} 
	} else if (misize == "firebeam") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_firebeam, 1, donee);
			else MagicInventoryDropItem(player, inv_book_firebeam, 1, "firebeam", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_firebeam, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_firebeam, 0, "firebeam", 1);
		} 
	} else if (misize == "inferno") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_inferno, 1, donee);
			else MagicInventoryDropItem(player, inv_book_inferno, 1, "inferno", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_inferno, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_inferno, 0, "inferno", 1);
		} 
	} else if (misize == "firewall") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_firewall, 1, donee);
			else MagicInventoryDropItem(player, inv_book_firewall, 1, "firewall", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_firewall, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_firewall, 0, "firewall", 1);
		} 
	} else if (misize == "lightiningwall") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_lightiningwall, 1, donee);
			else MagicInventoryDropItem(player, inv_book_lightiningwall, 1, "lightiningwall", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_lightiningwall, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_lightiningwall, 0, "lightiningwall", 1);
		}
	} else if (misize == "scepterofflame") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_scepterofflame, 1, donee);
			else MagicInventoryDropItem(player, inv_book_scepterofflame, 1, "scepterofflame", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_scepterofflame, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_scepterofflame, 0, "scepterofflame", 1);
		}
	} else if (misize == "explosion") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_explosion, 1, donee);
			else MagicInventoryDropItem(player, inv_book_explosion, 1, "explosion", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_explosion, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_explosion, 0, "explosion", 1);
		}
	} else if (misize == "phantasmalbarrier") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_phantasmalbarrier, 1, donee);
			else MagicInventoryDropItem(player, inv_book_phantasmalbarrier, 1, "phantasmalbarrier", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_phantasmalbarrier, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_phantasmalbarrier, 0, "phantasmalbarrier", 1);
		}
	} else if (misize == "raiseundead") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_raiseundead, 1, donee);
			else MagicInventoryDropItem(player, inv_book_raiseundead, 1, "raiseundead", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_raiseundead, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_raiseundead, 0, "raiseundead", 1);
		}
	} else if (misize == "flameburst") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_flameburst, 1, donee);
			else MagicInventoryDropItem(player, inv_book_flameburst, 1, "flameburst", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_flameburst, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_flameburst, 0, "flameburst", 1);
		} 
	} else if (misize == "firecentury") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_firecentury, 1, donee);
			else MagicInventoryDropItem(player, inv_book_firecentury, 1, "firecentury", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_firecentury, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_firecentury, 0, "firecentury", 1);
		}
	} else if (misize == "frostbeam") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_frostbeam, 1, donee);
			else MagicInventoryDropItem(player, inv_book_frostbeam, 1, "frostbeam", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_frostbeam, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_frostbeam, 0, "frostbeam", 1);
		}
	} else if (misize == "grace") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_grace, 1, donee);
			else MagicInventoryDropItem(player, inv_book_grace, 1, "grace", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_grace, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_grace, 0, "grace", 1);
		}
	} else if (misize == "holybolt") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_holybolt, 1, donee);
			else MagicInventoryDropItem(player, inv_book_holybolt, 1, "holybolt", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_holybolt, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_holybolt, 0, "holybolt", 1);
		}
	} else if (misize == "holylight") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_holylight, 1, donee);
			else MagicInventoryDropItem(player, inv_book_holylight, 1, "holylight", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_holylight, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_holylight, 0, "holylight", 1);
		}
	} else if (misize == "acervilux") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_acervilux, 1, donee);
			else MagicInventoryDropItem(player, inv_book_acervilux, 1, "acervilux", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_acervilux, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_acervilux, 0, "acervilux", 1);
		}
	} else if (misize == "heal") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_heal, 1, donee);
			else MagicInventoryDropItem(player, inv_book_heal, 1, "heal", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_heal, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_heal, 0, "heal", 1);
		}
	} else if (misize == "repair") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_repair, 1, donee);
			else MagicInventoryDropItem(player, inv_book_repair, 1, "repair", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_repair, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_repair, 0, "repair", 1);
		} 
	} else if (misize == "holyword") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_holyword, 1, donee);
			else MagicInventoryDropItem(player, inv_book_holyword, 1, "holyword", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_holyword, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_holyword, 0, "holyword", 1);
		}   
	} else if (misize == "extinguish") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_extinguish, 1, donee);
			else MagicInventoryDropItem(player, inv_book_extinguish, 1, "extinguish", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_extinguish, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_extinguish, 0, "extinguish", 1);
		}    
	} else if (misize == "darkritual") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_darkritual, 1, donee);
			else MagicInventoryDropItem(player, inv_book_darkritual, 1, "darkritual", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_darkritual, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_darkritual, 0, "darkritual", 1);
		} 
	} else if (misize == "lightining") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_lightining, 1, donee);
			else MagicInventoryDropItem(player, inv_book_lightining, 1, "lightining", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_lightining, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_lightining, 0, "lightining", 1);
		}
	} else if (misize == "balllightining") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_balllightining, 1, donee);
			else MagicInventoryDropItem(player, inv_book_balllightining, 1, "balllightining", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_balllightining, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_balllightining, 0, "balllightining", 1);
		} 
	} else if (misize == "chainlightining") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_chainlightining, 1, donee);
			else MagicInventoryDropItem(player, inv_book_chainlightining, 1, "chainlightining", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_chainlightining, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_chainlightining, 0, "chainlightining", 1);
		}
	} else if (misize == "lightiningburst") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_lightiningburst, 1, donee);
			else MagicInventoryDropItem(player, inv_book_lightiningburst, 1, "lightiningburst", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_lightiningburst, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_lightiningburst, 0, "lightiningburst", 1);
		} 
	} else if (misize == "chargedbolt") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_chargedbolt, 1, donee);
			else MagicInventoryDropItem(player, inv_book_chargedbolt, 1, "chargedbolt", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_chargedbolt, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_chargedbolt, 0, "chargedbolt", 1);
		}
	} else if (misize == "lightiningstrike") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_lightiningstrike, 1, donee);
			else MagicInventoryDropItem(player, inv_book_lightiningstrike, 1, "lightiningstrike", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_lightiningstrike, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_lightiningstrike, 0, "lightiningstrike", 1);
		}
	} else if (misize == "manashield") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_manashield, 1, donee);
			else MagicInventoryDropItem(player, inv_book_manashield, 1, "manashield", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_manashield, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_manashield, 0, "manashield", 1);
		}  
	} else if (misize == "clairvoyance") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_clairvoyance, 1, donee);
			else MagicInventoryDropItem(player, inv_book_clairvoyance, 1, "clairvoyance", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_clairvoyance, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_clairvoyance, 0, "clairvoyance", 1);
		}
	} else if (misize == "magicbullets") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_magicbullets, 1, donee);
			else MagicInventoryDropItem(player, inv_book_magicbullets, 1, "magicbullets", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_magicbullets, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_magicbullets, 0, "magicbullets", 1);
		}
	} else if (misize == "magicmissile") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_magicmissile, 1, donee);
			else MagicInventoryDropItem(player, inv_book_magicmissile, 1, "magicmissile", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_magicmissile, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_magicmissile, 0, "magicmissile", 1);
		} 
	} else if (misize == "monstertomonolith") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_monstertomonolith, 1, donee);
			else MagicInventoryDropItem(player, inv_book_monstertomonolith, 1, "monstertomonolith", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_monstertomonolith, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_monstertomonolith, 0, "monstertomonolith", 1);
		} 
	} else if (misize == "monstertomouse") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_monstertomouse, 1, donee);
			else MagicInventoryDropItem(player, inv_book_monstertomouse, 1, "monstertomouse", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_monstertomouse, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_monstertomouse, 0, "monstertomouse", 1);
		} 
	} else if (misize == "meteor") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_meteor, 1, donee);
			else MagicInventoryDropItem(player, inv_book_meteor, 1, "meteor", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_meteor, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_meteor, 0, "meteor", 1);
		} 
	} else if (misize == "meteorshower") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_meteorshower, 1, donee);
			else MagicInventoryDropItem(player, inv_book_meteorshower, 1, "meteorshower", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_meteorshower, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_meteorshower, 0, "meteorshower", 1);
		} 
	} else if (misize == "mimic") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_mimic, 1, donee);
			else MagicInventoryDropItem(player, inv_book_mimic, 1, "mimic", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_mimic, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_mimic, 0, "mimic", 1);
		} 
	} else if (misize == "paralyse") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_paralyse, 1, donee);
			else MagicInventoryDropItem(player, inv_book_paralyse, 1, "paralyse", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_paralyse, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_paralyse, 0, "paralyse", 1);
		} 
	} else if (misize == "ringoffire") {
		if (mitype == "book") {
			if (isput) MagicInventoryPutItem(player, inv_book_ringoffire, 1, donee);
			else MagicInventoryDropItem(player, inv_book_ringoffire, 1, "ringoffire", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_ringoffire, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_ringoffire, 0, "ringoffire", 1);
		} 
	} else if (misize == "stonecurse") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_stonecurse, 1, donee);
			else MagicInventoryDropItem(player, inv_book_stonecurse, 1, "stonecurse", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_stonecurse, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_stonecurse, 0, "stonecurse", 1);
		} 
	} else if (misize == "stonerain") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_stonerain, 1, donee);
			else MagicInventoryDropItem(player, inv_book_stonerain, 1, "stonerain", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_stonerain, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_stonerain, 0, "stonerain", 1);
		}
	} else if (misize == "timesink") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_timesink, 1, donee);
			else MagicInventoryDropItem(player, inv_book_timesink, 1, "timesink", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_timesink, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_timesink, 0, "timesink", 1);
		}
	} else if (misize == "vampyricconduit") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_vampyricconduit, 1, donee);
			else MagicInventoryDropItem(player, inv_book_vampyricconduit, 1, "vampyricconduit", 1);
		} else if (mitype == "scroll") {
			if (isput) MagicInventoryPutItem(player, inv_scroll_vampyricconduit, 1, donee);
			else MagicInventoryDropItem(player, inv_scroll_vampyricconduit, 0, "vampyricconduit", 1);
		}
	//Knowledge books
	} else if (misize == "carpentry") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_know_carpentry, 1, donee);
			else MagicInventoryDropItem(player, inv_book_know_carpentry, 1, "carpentry", 1);
		} 
	} else if (misize == "mortise") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_know_mortise, 1, donee);
			else MagicInventoryDropItem(player, inv_book_know_mortise, 1, "mortise", 1);
		} 
	} else if (misize == "stonemasonry") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_know_stonemasonry, 1, donee);
			else MagicInventoryDropItem(player, inv_book_know_stonemasonry, 1, "stonemasonry", 1);
		} 
	} else if (misize == "ironworking") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_know_ironworking, 1, donee);
			else MagicInventoryDropItem(player, inv_book_know_ironworking, 1, "ironworking", 1);
		} 
	} else if (misize == "arch") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_know_arch, 1, donee);
			else MagicInventoryDropItem(player, inv_book_know_arch, 1, "arch", 1);
		} 
	} else if (misize == "welding") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_know_welding, 1, donee);
			else MagicInventoryDropItem(player, inv_book_know_welding, 1, "welding", 1);
		} 
	} else if (misize == "concrete") {
		if (mitype == "book") { 
			if (isput) MagicInventoryPutItem(player, inv_book_know_concrete, 1, donee);
			else MagicInventoryDropItem(player, inv_book_know_concrete, 1, "concrete", 1);
		} 
	}
}

void MagicInventoryPinataItem (entity player, .float ammotype, float type, string spellname)
{
	//Type 0 = scroll, 1 = book
	while (player.ammotype > 0)
	{
		vector backuporigin = self.origin + ((self.mins + self.maxs) * 0.5);
		entity oldself;
	
		oldself = self;
		self = spawn();
		
		if (player.noanimdroppeditems) {
			//Do nothing
			//This is set on buildings / furnishings usually
			//Not on players/Monsters
		} else {
			self.ItemStatus |= ITS_ANIMATE1;
		}
		
		DropSpellByName(type, spellname, 1); //The 1 only does anything for coins.
		player.ammotype = player.ammotype - 1;
		
		self.velocity = randomvec() * 175 + '0 0 325';
	
		self.gravity = 1;
		self.origin = backuporigin;
	
		self.touch = M_Item_Touch;
	
		if (autocvar_g_pickup_permitems || player.inventory_permitems)
			SUB_ItemSetToPermWhen(self, time + 20);
		else 
			SUB_SetFade(self, time + 20, 1);
	
		self = oldself;
	}
}

//ForAmmoItems, where the item is equal to many times the ammoamount (ammo containers etc, nails, rockets, etc)
//IE: Where there is not a 1:1 ratio
void MagicInventoryPinataItemByAmmount (entity player, .float ammotype, float type, string spellname, float decamount)
{
	//Type 0 = scroll, 1 = book
	while (player.ammotype >= decamount)
	{
		vector backuporigin = self.origin + ((self.mins + self.maxs) * 0.5);
		entity oldself;
	
		oldself = self;
		self = spawn();
		
		if (player.noanimdroppeditems) {
			//Do nothing
			//This is set on buildings / furnishings usually
			//Not on players/Monsters
		} else {
			self.ItemStatus |= ITS_ANIMATE1;
		}
		
		DropSpellByName(type, spellname, 1); //The 1 only does anything for coins.
		player.ammotype = player.ammotype - decamount;
		
		self.velocity = randomvec() * 175 + '0 0 325';
	
		self.gravity = 1;
		self.origin = backuporigin;
	
		self.touch = M_Item_Touch;
	
		if (autocvar_g_pickup_permitems || player.inventory_permitems)
			SUB_ItemSetToPermWhen(self, time + 20);
		else 
			SUB_SetFade(self, time + 20, 1);
	
		self = oldself;
	}
}


void MagicInventoryPinata (entity player)
{
	//Type 0 = scroll, 1 = book, 3/4/5 = potion (small medium large);
	MagicInventoryPinataItem(player, inv_potion_health_small, 3, "health");
	MagicInventoryPinataItem(player, inv_potion_health_medium, 4, "health");
	MagicInventoryPinataItem(player, inv_potion_health_large, 5, "health");
	MagicInventoryPinataItem(player, inv_potion_mana_small, 3, "mana");
	MagicInventoryPinataItem(player, inv_potion_mana_medium, 4, "mana");
	MagicInventoryPinataItem(player, inv_potion_mana_large, 5, "mana");
	MagicInventoryPinataItem(player, inv_potion_rejuv_small, 3, "rejuv");
	MagicInventoryPinataItem(player, inv_potion_rejuv_medium, 4, "rejuv");
	MagicInventoryPinataItem(player, inv_potion_rejuv_large, 5, "rejuv");
	MagicInventoryPinataItem(player, inv_potion_vodka_small, 3, "vodka");
	MagicInventoryPinataItem(player, inv_potion_vodka_medium, 4, "vodka");
	MagicInventoryPinataItem(player, inv_potion_vodka_large, 5, "vodka");
	MagicInventoryPinataItem(player, inv_potion_merlot_small, 3, "merlot");
	MagicInventoryPinataItem(player, inv_potion_merlot_medium, 4, "merlot");
	MagicInventoryPinataItem(player, inv_potion_merlot_large, 5, "merlot");
	MagicInventoryPinataItem(player, inv_potion_ale_small, 3, "ale");
	MagicInventoryPinataItem(player, inv_potion_ale_medium, 4, "ale");
	MagicInventoryPinataItem(player, inv_potion_ale_large, 5, "ale");
	MagicInventoryPinataItem(player, inv_potion_water_small, 3, "water");
	MagicInventoryPinataItem(player, inv_potion_water_medium, 4, "water");
	MagicInventoryPinataItem(player, inv_potion_water_large, 5, "water");
	
	MagicInventoryPinataItem(player, inv_food_bellpepper, 3, "bellpepper"); //Foods are always "small" for now (3)
	MagicInventoryPinataItem(player, inv_food_bread, 3, "bread"); 
	MagicInventoryPinataItem(player, inv_food_cheeze, 3, "cheeze");
	MagicInventoryPinataItem(player, inv_food_garlic, 3, "garlic"); 
	MagicInventoryPinataItem(player, inv_food_grapes, 3, "grapes"); 
	MagicInventoryPinataItem(player, inv_food_onion, 3, "onion"); 
	MagicInventoryPinataItem(player, inv_food_tomato, 3, "tomato");
	MagicInventoryPinataItem(player, inv_food_turkeyleg, 3, "turkeyleg");
	
	MagicInventoryPinataItem(player, inv_faeces_small, 3, "faeces");
	MagicInventoryPinataItem(player, inv_faeces_medium, 4, "faeces");
	MagicInventoryPinataItem(player, inv_faeces_large, 5, "faeces");
	
	MagicInventoryPinataItem(player, inv_book_agency, 1, "agency");
	MagicInventoryPinataItem(player, inv_scroll_agency, 0, "agency");
	
	MagicInventoryPinataItem(player, inv_book_death, 1, "death");
	MagicInventoryPinataItem(player, inv_scroll_death, 0, "death");
	
	MagicInventoryPinataItem(player, inv_book_drainlife, 1, "drainlife");
	MagicInventoryPinataItem(player, inv_scroll_drainlife, 0, "drainlife");
	
	MagicInventoryPinataItem(player, inv_book_cancellation, 1, "cancellation");
	MagicInventoryPinataItem(player, inv_scroll_cancellation, 0, "cancellation");
	
	MagicInventoryPinataItem(player, inv_book_castfromlife, 1, "castfromlife");
	MagicInventoryPinataItem(player, inv_scroll_castfromlife, 0, "castfromlife");
	
	MagicInventoryPinataItem(player, inv_book_confer, 1, "confer");
	MagicInventoryPinataItem(player, inv_scroll_confer, 0, "confer");
	
	MagicInventoryPinataItem(player, inv_book_iceball, 1, "iceball");
	MagicInventoryPinataItem(player, inv_scroll_iceball, 0, "iceball");
	
	MagicInventoryPinataItem(player, inv_book_icestar, 1, "icestar");
	MagicInventoryPinataItem(player, inv_scroll_icestar, 0, "icestar");
	
	MagicInventoryPinataItem(player, inv_book_aquacaelestis, 1, "aquacaelestis");
	MagicInventoryPinataItem(player, inv_scroll_aquacaelestis, 0, "aquacaelestis");
	
	MagicInventoryPinataItem(player, inv_book_nivosus, 1, "nivosus");
	MagicInventoryPinataItem(player, inv_scroll_nivosus, 0, "nivosus");
	
	MagicInventoryPinataItem(player, inv_book_rosa, 1, "rosa");
	MagicInventoryPinataItem(player, inv_scroll_rosa, 0, "rosa");
	
	MagicInventoryPinataItem(player, inv_book_corvuspenna, 1, "corvuspenna");
	MagicInventoryPinataItem(player, inv_scroll_corvuspenna, 0, "corvuspenna");
	
	MagicInventoryPinataItem(player, inv_book_plumosus, 1, "plumosus");
	MagicInventoryPinataItem(player, inv_scroll_plumosus, 0, "plumosus");
	
	MagicInventoryPinataItem(player, inv_book_firebolt, 1, "firebolt");
	MagicInventoryPinataItem(player, inv_scroll_firebolt, 0, "firebolt");
	
	MagicInventoryPinataItem(player, inv_book_fireball, 1, "fireball");
	MagicInventoryPinataItem(player, inv_scroll_fireball, 0, "fireball");
	
	MagicInventoryPinataItem(player, inv_book_fireball, 1, "magmasphere");
	MagicInventoryPinataItem(player, inv_scroll_fireball, 0, "magmasphere");
	
	MagicInventoryPinataItem(player, inv_book_firebeam, 1, "firebeam");
	MagicInventoryPinataItem(player, inv_scroll_firebeam, 0, "firebeam");
	
	MagicInventoryPinataItem(player, inv_book_inferno, 1, "inferno");
	MagicInventoryPinataItem(player, inv_scroll_inferno, 0, "inferno");
	
	MagicInventoryPinataItem(player, inv_book_firewall, 1, "firewall");
	MagicInventoryPinataItem(player, inv_scroll_firewall, 0, "firewall");
	
	MagicInventoryPinataItem(player, inv_book_lightiningwall, 1, "lightiningwall");
	MagicInventoryPinataItem(player, inv_scroll_lightiningwall, 0, "lightiningwall");
	
	MagicInventoryPinataItem(player, inv_book_scepterofflame, 1, "scepterofflame");
	MagicInventoryPinataItem(player, inv_scroll_scepterofflame, 0, "scepterofflame");
	
	MagicInventoryPinataItem(player, inv_book_explosion, 1, "explosion");
	MagicInventoryPinataItem(player, inv_scroll_explosion, 0, "explosion");
	
	MagicInventoryPinataItem(player, inv_book_phantasmalbarrier, 1, "phantasmalbarrier");
	MagicInventoryPinataItem(player, inv_scroll_phantasmalbarrier, 0, "phantasmalbarrier");
	
	MagicInventoryPinataItem(player, inv_book_raiseundead, 1, "raiseundead");
	MagicInventoryPinataItem(player, inv_scroll_raiseundead, 0, "raiseundead");
	
	MagicInventoryPinataItem(player, inv_book_flameburst, 1, "flameburst");
	MagicInventoryPinataItem(player, inv_scroll_flameburst, 0, "flameburst");
	
	MagicInventoryPinataItem(player, inv_book_flameburst, 1, "firecentury");
	MagicInventoryPinataItem(player, inv_scroll_flameburst, 0, "firecentury");
	
	MagicInventoryPinataItem(player, inv_book_frostbeam, 1, "frostbeam");
	MagicInventoryPinataItem(player, inv_scroll_frostbeam, 0, "frostbeam");
	
	MagicInventoryPinataItem(player, inv_book_grace, 1, "grace");
	MagicInventoryPinataItem(player, inv_scroll_grace, 0, "grace");
	
	MagicInventoryPinataItem(player, inv_book_holybolt, 1, "holybolt");
	MagicInventoryPinataItem(player, inv_scroll_holybolt, 0, "holybolt");
	
	MagicInventoryPinataItem(player, inv_book_holylight, 1, "holylight");
	MagicInventoryPinataItem(player, inv_scroll_holylight, 0, "holylight");
	
	MagicInventoryPinataItem(player, inv_book_acervilux, 1, "acervilux");
	MagicInventoryPinataItem(player, inv_scroll_acervilux, 0, "acervilux");
	
	MagicInventoryPinataItem(player, inv_book_heal, 1, "heal");
	MagicInventoryPinataItem(player, inv_scroll_heal, 0, "heal");
	
	MagicInventoryPinataItem(player, inv_book_repair, 1, "repair");
	MagicInventoryPinataItem(player, inv_scroll_repair, 0, "repair");
	
	MagicInventoryPinataItem(player, inv_book_holyword, 1, "holyword");
	MagicInventoryPinataItem(player, inv_scroll_holyword, 0, "holyword");
	
	MagicInventoryPinataItem(player, inv_book_extinguish, 1, "extinguish");
	MagicInventoryPinataItem(player, inv_scroll_extinguish, 0, "extinguish");
	
	MagicInventoryPinataItem(player, inv_book_darkritual, 1, "darkritual");
	MagicInventoryPinataItem(player, inv_scroll_darkritual, 0, "darkritual");
	
	MagicInventoryPinataItem(player, inv_book_lightining, 1, "lightining");
	MagicInventoryPinataItem(player, inv_scroll_lightining, 0, "lightining");
	
	MagicInventoryPinataItem(player, inv_book_balllightining, 1, "balllightining");
	MagicInventoryPinataItem(player, inv_scroll_balllightining, 0, "balllightining");
	
	MagicInventoryPinataItem(player, inv_book_chainlightining, 1, "chainlightining");
	MagicInventoryPinataItem(player, inv_scroll_chainlightining, 0, "chainlightining");
	
	MagicInventoryPinataItem(player, inv_book_lightiningburst, 1, "lightiningburst");
	MagicInventoryPinataItem(player, inv_scroll_lightiningburst, 0, "lightiningburst");
	
	MagicInventoryPinataItem(player, inv_book_chargedbolt, 1, "chargedbolt");
	MagicInventoryPinataItem(player, inv_scroll_chargedbolt, 0, "chargedbolt");
	
	MagicInventoryPinataItem(player, inv_book_lightiningstrike, 1, "lightiningstrike");
	MagicInventoryPinataItem(player, inv_scroll_lightiningstrike, 0, "lightiningstrike");
	
	MagicInventoryPinataItem(player, inv_book_manashield, 1, "manashield");
	MagicInventoryPinataItem(player, inv_scroll_manashield, 0, "manashield");
	
	MagicInventoryPinataItem(player, inv_book_clairvoyance, 1, "clairvoyance");
	MagicInventoryPinataItem(player, inv_scroll_clairvoyance, 0, "clairvoyance");
	
	MagicInventoryPinataItem(player, inv_book_magicbullets, 1, "magicbullets");
	MagicInventoryPinataItem(player, inv_scroll_magicbullets, 0, "magicbullets");
	
	MagicInventoryPinataItem(player, inv_book_magicmissile, 1, "magicmissile");
	MagicInventoryPinataItem(player, inv_scroll_magicmissile, 0, "magicmissile");
	
	MagicInventoryPinataItem(player, inv_book_monstertomouse, 1, "monstertomouse");
	MagicInventoryPinataItem(player, inv_scroll_monstertomouse, 0, "monstertomouse");
	
	MagicInventoryPinataItem(player, inv_book_monstertomonolith, 1, "monstertomonolith");
	MagicInventoryPinataItem(player, inv_scroll_monstertomonolith, 0, "monstertomonolith");
	
	MagicInventoryPinataItem(player, inv_book_meteor, 1, "meteor");
	MagicInventoryPinataItem(player, inv_scroll_meteor, 0, "meteor");
	
	MagicInventoryPinataItem(player, inv_book_meteorshower, 1, "meteorshower");
	MagicInventoryPinataItem(player, inv_scroll_meteorshower, 0, "meteorshower");
	
	MagicInventoryPinataItem(player, inv_book_mimic, 1, "mimic");
	MagicInventoryPinataItem(player, inv_scroll_mimic, 0, "mimic");
	
	MagicInventoryPinataItem(player, inv_book_paralyse, 1, "paralyse");
	MagicInventoryPinataItem(player, inv_scroll_paralyse, 0, "paralyse");
	
	MagicInventoryPinataItem(player, inv_book_ringoffire, 1, "ringoffire");
	MagicInventoryPinataItem(player, inv_scroll_ringoffire, 0, "ringoffire");
	
	MagicInventoryPinataItem(player, inv_book_stonecurse, 1, "stonecurse");
	MagicInventoryPinataItem(player, inv_scroll_stonecurse, 0, "stonecurse");
	
	MagicInventoryPinataItem(player, inv_book_stonerain, 1, "stonerain");
	MagicInventoryPinataItem(player, inv_scroll_stonerain, 0, "stonerain");
	
	MagicInventoryPinataItem(player, inv_book_timesink, 1, "timesink");
	MagicInventoryPinataItem(player, inv_scroll_timesink, 0, "timesink");
	
	MagicInventoryPinataItem(player, inv_book_vampyricconduit, 1, "vampyricconduit");
	MagicInventoryPinataItem(player, inv_scroll_vampyricconduit, 0, "vampyricconduit");
	
	//Knowlege books
	MagicInventoryPinataItem(player, inv_book_know_carpentry, 1, "carpentry");
	MagicInventoryPinataItem(player, inv_book_know_mortise, 1, "mortise");
	MagicInventoryPinataItem(player, inv_book_know_stonemasonry, 1, "stonemasonry");
	MagicInventoryPinataItem(player, inv_book_know_ironworking, 1, "ironworking");
	MagicInventoryPinataItem(player, inv_book_know_arch, 1, "arch");
	MagicInventoryPinataItem(player, inv_book_know_welding, 1, "welding");
	MagicInventoryPinataItem(player, inv_book_know_concrete, 1, "concrete");
	
	MagicInventoryPinataItem(player, grenades, 6, "grenade");
	MagicInventoryPinataItem(player, flashbangs, 6, "flashbang");
	MagicInventoryPinataItem(player, smokenades, 6, "smokenade");
	MagicInventoryPinataItem(player, fragnades, 6, "fragnade");
	MagicInventoryPinataItem(player, atmines, 6, "atmine");
	MagicInventoryPinataItem(player, landmines, 6, "landmine");
	
	//Misc
	MagicInventoryPinataItem(player, inv_misc_suppressor45, 10, "suppressor45");
	MagicInventoryPinataItem(player, inv_misc_suppressormac10, 10, "suppressormac10");
	MagicInventoryPinataItem(player, inv_misc_suppressor9mm, 10, "suppressor9mm");
	MagicInventoryPinataItem(player, inv_misc_suppressor5n7mm, 10, "suppressor5n7mm");
	MagicInventoryPinataItem(player, inv_misc_suppressorrifle, 10, "suppressorrifle");
	MagicInventoryPinataItem(player, inv_misc_suppressorpdw, 10, "suppressorpdw");
	MagicInventoryPinataItem(player, inv_misc_cylinder_r1856, 10, "cylinderr1856");
	MagicInventoryPinataItem(player, inv_misc_exmag_ak47_50, 10, "ak47exmag50");
	MagicInventoryPinataItem(player, inv_misc_exmag_ak47_100, 10, "ak47exmag100");
	MagicInventoryPinataItem(player, inv_misc_drum_ak47_75, 10, "ak47drum75");
	MagicInventoryPinataItem(player, inv_misc_mag_ak47_30, 10, "ak47mag30");
	
	MagicInventoryPinataItem(player, inv_misc_exmag_ak74_45, 10, "ak74exmag45");
	MagicInventoryPinataItem(player, inv_misc_mag_ak74_30, 10, "ak74mag30");
	
	MagicInventoryPinataItem(player, inv_misc_exmag_styeraug_42, 10, "styeraugexmag42");
	MagicInventoryPinataItem(player, inv_misc_mag_styeraug_30, 10, "styeraugmag30");
	
	MagicInventoryPinataItem(player, inv_misc_panmag_lewisgun_97, 10, "lewisgunpanmag97");
	MagicInventoryPinataItem(player, inv_misc_panmag_lewisgun_47, 10, "lewisgunpanmag47");
	
	MagicInventoryPinataItem(player, inv_misc_exmag_bar_40, 10, "barexmag40");
	MagicInventoryPinataItem(player, inv_misc_mag_bar_20, 10, "barmag20");
	
	MagicInventoryPinataItem(player, inv_misc_mag_uzi_20, 10, "uzimag20");
	MagicInventoryPinataItem(player, inv_misc_mag_uzi_25, 10, "uzimag25");
	MagicInventoryPinataItem(player, inv_misc_mag_uzi_32, 10, "uzimag32");
	MagicInventoryPinataItem(player, inv_misc_exmag_uzi_40, 10, "uziexmag40");
	MagicInventoryPinataItem(player, inv_misc_exmag_uzi_50, 10, "uziexmag50");
	MagicInventoryPinataItem(player, inv_misc_drum_uzi_82, 10, "uzidrum82");
	MagicInventoryPinataItem(player, inv_misc_exmag_uzi_106, 10, "uziexmag106");
	
	MagicInventoryPinataItem(player, inv_misc_mag_tec9_20, 10, "tec9mag20");
	MagicInventoryPinataItem(player, inv_misc_mag_tec9_10, 10, "tec9mag10");
	MagicInventoryPinataItem(player, inv_misc_mag_tec9_32, 10, "tec9mag32");
	MagicInventoryPinataItem(player, inv_misc_exmag_tec9_36, 10, "tec9exmag36");
	MagicInventoryPinataItem(player, inv_misc_exmag_tec9_50, 10, "tec9exmag50");
	MagicInventoryPinataItem(player, inv_misc_drum_tec9_72, 10, "tec9drum72");

	MagicInventoryPinataItem(player, inv_misc_mag_m16_20, 10, "m16mag20");
	MagicInventoryPinataItem(player, inv_misc_mag_m16_30, 10, "m16mag30");
	MagicInventoryPinataItem(player, inv_misc_betacmag_m16, 10, "m16betacmag");

	MagicInventoryPinataItem(player, inv_misc_betacmag_lightpistol, 10, "lightpistolbetacmag");
	MagicInventoryPinataItem(player, inv_misc_exmag_lightpistol, 10, "lightpistolexmag");
	MagicInventoryPinataItem(player, inv_misc_mag_lightpistol, 10, "lightpistolmag");
	MagicInventoryPinataItem(player, inv_misc_drum_lightpistol, 10, "lightpistoldrum");
	
	MagicInventoryPinataItem(player, inv_misc_betacmag_pdw, 10, "pdwbetacmag");
	MagicInventoryPinataItem(player, inv_misc_exmag40_pdw, 10, "pdwexmag40");
	MagicInventoryPinataItem(player, inv_misc_stdmag_pdw, 10, "pdwstdmag");
	MagicInventoryPinataItem(player, inv_misc_smallmag_pdw, 10, "pdwsmallmag");
	MagicInventoryPinataItem(player, inv_misc_tinymag_pdw, 10, "pdwtinymag");
	MagicInventoryPinataItem(player, inv_misc_drum_pdw, 10, "pdwdrum");
	
	//MagicInventoryDropCoinIter
	if (player.inv_coin_tin)      MagicInventoryDropCoinIter(player, inv_coin_tin,      7, "tin",    player.inv_coin_tin);
	if (player.inv_coin_iron)     MagicInventoryDropCoinIter(player, inv_coin_iron,     7, "iron",   player.inv_coin_iron);
	if (player.inv_coin_bronze)   MagicInventoryDropCoinIter(player, inv_coin_bronze,   7, "bronze", player.inv_coin_bronze);
	if (player.inv_coin_copper)   MagicInventoryDropCoinIter(player, inv_coin_copper,   7, "copper", player.inv_coin_copper);
	if (player.inv_coin_silver)   MagicInventoryDropCoinIter(player, inv_coin_silver,   7, "silver", player.inv_coin_silver);
	if (player.inv_coin_gold)     MagicInventoryDropCoinIter(player, inv_coin_gold,     7, "gold",   player.inv_coin_gold);
	if (player.inv_coin_plat)     MagicInventoryDropCoinIter(player, inv_coin_plat,     7, "plat",   player.inv_coin_plat);
	if (player.inv_coin_jade)     MagicInventoryDropCoinIter(player, inv_coin_jade,     7, "jade",   player.inv_coin_jade);
	if (player.inv_coin_amberium) MagicInventoryDropCoinIter(player, inv_coin_amberium, 7, "amberium", player.inv_coin_amberium);
	//Faux, Fake coins
	if (player.inv_coin_f_tin)      MagicInventoryDropCoinIter(player, inv_coin_f_tin,      7, "fauxtin",    player.inv_coin_f_tin);
	if (player.inv_coin_f_iron)     MagicInventoryDropCoinIter(player, inv_coin_f_iron,     7, "fauxiron",   player.inv_coin_f_iron);
	if (player.inv_coin_f_bronze)   MagicInventoryDropCoinIter(player, inv_coin_f_bronze,   7, "fauxbronze", player.inv_coin_f_bronze);
	if (player.inv_coin_f_copper)   MagicInventoryDropCoinIter(player, inv_coin_f_copper,   7, "fauxcopper", player.inv_coin_f_copper);
	if (player.inv_coin_f_silver)   MagicInventoryDropCoinIter(player, inv_coin_f_silver,   7, "fauxsilver", player.inv_coin_f_silver);
	if (player.inv_coin_f_gold)     MagicInventoryDropCoinIter(player, inv_coin_f_gold,     7, "fauxgold",   player.inv_coin_f_gold);
	if (player.inv_coin_f_plat)     MagicInventoryDropCoinIter(player, inv_coin_f_plat,     7, "fauxplat",   player.inv_coin_f_plat);
	if (player.inv_coin_f_jade)     MagicInventoryDropCoinIter(player, inv_coin_f_jade,     7, "fauxjade",   player.inv_coin_f_jade);
	if (player.inv_coin_f_amberium) MagicInventoryDropCoinIter(player, inv_coin_f_amberium, 7, "fauxamberium", player.inv_coin_f_amberium);
	//blatant/old counterfeit coins (cladding rubbing off, exposing inner metal, old)
	if (player.inv_coin_cf_tin)      MagicInventoryDropCoinIter(player, inv_coin_cf_tin,      7, "counterfeittin",    player.inv_coin_cf_tin);
	if (player.inv_coin_cf_iron)     MagicInventoryDropCoinIter(player, inv_coin_cf_iron,     7, "counterfeitiron",   player.inv_coin_cf_iron);
	if (player.inv_coin_cf_bronze)   MagicInventoryDropCoinIter(player, inv_coin_cf_bronze,   7, "counterfeitbronze", player.inv_coin_cf_bronze);
	if (player.inv_coin_cf_copper)   MagicInventoryDropCoinIter(player, inv_coin_cf_copper,   7, "counterfeitcopper", player.inv_coin_cf_copper);
	if (player.inv_coin_cf_silver)   MagicInventoryDropCoinIter(player, inv_coin_cf_silver,   7, "counterfeitsilver", player.inv_coin_cf_silver);
	if (player.inv_coin_cf_gold)     MagicInventoryDropCoinIter(player, inv_coin_cf_gold,     7, "counterfeitgold",   player.inv_coin_cf_gold);
	if (player.inv_coin_cf_plat)     MagicInventoryDropCoinIter(player, inv_coin_cf_plat,     7, "counterfeitplat",   player.inv_coin_cf_plat);
	if (player.inv_coin_cf_jade)     MagicInventoryDropCoinIter(player, inv_coin_cf_jade,     7, "counterfeitjade",   player.inv_coin_cf_jade);
	if (player.inv_coin_cf_amberium) MagicInventoryDropCoinIter(player, inv_coin_cf_amberium, 7, "counterfeitamberium", player.inv_coin_cf_amberium);
	//Casino Tokens
	if (player.inv_casinotoken_yellow) MagicInventoryDropCoinIter(player, inv_casinotoken_yellow, 7, "casinotokenyellow", player.inv_casinotoken_yellow);
	if (player.inv_casinotoken_blue) MagicInventoryDropCoinIter(player, inv_casinotoken_blue, 7, "casinotokenblue", player.inv_casinotoken_blue);
	if (player.inv_casinotoken_gray) MagicInventoryDropCoinIter(player, inv_casinotoken_gray, 7, "casinotokengray", player.inv_casinotoken_gray);
	if (player.inv_casinotoken_lightgreen) MagicInventoryDropCoinIter(player, inv_casinotoken_lightgreen, 7, "casinotokenlightgreen", player.inv_casinotoken_lightgreen);
	if (player.inv_casinotoken_lightblue) MagicInventoryDropCoinIter(player, inv_casinotoken_lightblue, 7, "casinotokenlightblue", player.inv_casinotoken_lightblue);
	if (player.inv_casinotoken_rose) MagicInventoryDropCoinIter(player, inv_casinotoken_rose, 7, "casinotokenrose", player.inv_casinotoken_rose);
	if (player.inv_casinotoken_black) MagicInventoryDropCoinIter(player, inv_casinotoken_black, 7, "casinotokenblack", player.inv_casinotoken_black);
	if (player.inv_casinotoken_seabreeze) MagicInventoryDropCoinIter(player, inv_casinotoken_seabreeze, 7, "casinotokenseabreeze", player.inv_casinotoken_seabreeze);
	if (player.inv_casinotoken_red) MagicInventoryDropCoinIter(player, inv_casinotoken_red, 7, "casinotokenred", player.inv_casinotoken_red);
	if (player.inv_casinotoken_cyan) MagicInventoryDropCoinIter(player, inv_casinotoken_cyan, 7, "casinotokencyan", player.inv_casinotoken_cyan);
	if (player.inv_casinotoken_tan) MagicInventoryDropCoinIter(player, inv_casinotoken_tan, 7, "casinotokentan", player.inv_casinotoken_tan);
	if (player.inv_casinotoken_green) MagicInventoryDropCoinIter(player, inv_casinotoken_green, 7, "casinotokengreen", player.inv_casinotoken_green);
	if (player.inv_casinotoken_purple) MagicInventoryDropCoinIter(player, inv_casinotoken_purple, 7, "casinotokenpurple", player.inv_casinotoken_purple);
	//Bars
	if (player.inv_bar_tin)      MagicInventoryDropBullionBarIter(player, inv_bar_tin,      9, "tin",    player.inv_bar_tin);
	if (player.inv_bar_iron)     MagicInventoryDropBullionBarIter(player, inv_bar_iron,     9, "iron",   player.inv_bar_iron);
	if (player.inv_bar_bronze)   MagicInventoryDropBullionBarIter(player, inv_bar_bronze,   9, "bronze", player.inv_bar_bronze);
	if (player.inv_bar_copper)   MagicInventoryDropBullionBarIter(player, inv_bar_copper,   9, "copper", player.inv_bar_copper);
	if (player.inv_bar_silver)   MagicInventoryDropBullionBarIter(player, inv_bar_silver,   9, "silver", player.inv_bar_silver);
	if (player.inv_bar_gold)     MagicInventoryDropBullionBarIter(player, inv_bar_gold,     9, "gold",   player.inv_bar_gold);
	if (player.inv_bar_plat)     MagicInventoryDropBullionBarIter(player, inv_bar_plat,     9, "plat",   player.inv_bar_plat);
	if (player.inv_bar_jade)     MagicInventoryDropBullionBarIter(player, inv_bar_jade,     9, "jade",   player.inv_bar_jade);
	if (player.inv_bar_amberium) MagicInventoryDropBullionBarIter(player, inv_bar_amberium, 9, "amberium", player.inv_bar_amberium);
	//Faux, Fake Bars
	if (player.inv_bar_f_tin)      MagicInventoryDropBullionBarIter(player, inv_bar_f_tin,      9, "fauxtin",    player.inv_bar_f_tin);
	if (player.inv_bar_f_iron)     MagicInventoryDropBullionBarIter(player, inv_bar_f_iron,     9, "fauxiron",   player.inv_bar_f_iron);
	if (player.inv_bar_f_bronze)   MagicInventoryDropBullionBarIter(player, inv_bar_f_bronze,   9, "fauxbronze", player.inv_bar_f_bronze);
	if (player.inv_bar_f_copper)   MagicInventoryDropBullionBarIter(player, inv_bar_f_copper,   9, "fauxcopper", player.inv_bar_f_copper);
	if (player.inv_bar_f_silver)   MagicInventoryDropBullionBarIter(player, inv_bar_f_silver,   9, "fauxsilver", player.inv_bar_f_silver);
	if (player.inv_bar_f_gold)     MagicInventoryDropBullionBarIter(player, inv_bar_f_gold,     9, "fauxgold",   player.inv_bar_f_gold);
	if (player.inv_bar_f_plat)     MagicInventoryDropBullionBarIter(player, inv_bar_f_plat,     9, "fauxplat",   player.inv_bar_f_plat);
	if (player.inv_bar_f_jade)     MagicInventoryDropBullionBarIter(player, inv_bar_f_jade,     9, "fauxjade",   player.inv_bar_f_jade);
	if (player.inv_bar_f_amberium) MagicInventoryDropBullionBarIter(player, inv_bar_f_amberium, 9, "fauxamberium", player.inv_bar_f_amberium);
	//Gems
	if (player.inv_gem_diamond)   MagicInventoryDropGemIter(player, inv_gem_diamond,      8, "diamond",    player.inv_gem_diamond);
	if (player.inv_gem_jacinth)   MagicInventoryDropGemIter(player, inv_gem_jacinth,      8, "jacinth",    player.inv_gem_jacinth);
	if (player.inv_gem_ruby)      MagicInventoryDropGemIter(player, inv_gem_ruby,         8, "ruby",    player.inv_gem_ruby);
	if (player.inv_gem_pearl)      MagicInventoryDropGemIter(player, inv_gem_pearl,         8, "pearl",    player.inv_gem_pearl);
	if (player.inv_gem_blackpearl)      MagicInventoryDropGemIter(player, inv_gem_blackpearl,         8, "blackpearl",    player.inv_gem_blackpearl);
	if (player.inv_gem_peridot)   MagicInventoryDropGemIter(player, inv_gem_peridot,      8, "peridot",    player.inv_gem_peridot);
	if (player.inv_gem_emerald)   MagicInventoryDropGemIter(player, inv_gem_emerald,      8, "emerald",    player.inv_gem_emerald);
	if (player.inv_gem_topaz)     MagicInventoryDropGemIter(player, inv_gem_topaz,      8, "topaz",    player.inv_gem_topaz);
	if (player.inv_gem_sapphire)  MagicInventoryDropGemIter(player, inv_gem_sapphire,      8, "sapphire",    player.inv_gem_sapphire);
	if (player.inv_gem_chalcedony)   MagicInventoryDropGemIter(player, inv_gem_chalcedony,      8, "chalcedony",    player.inv_gem_chalcedony);
	if (player.inv_gem_agate)   MagicInventoryDropGemIter(player, inv_gem_agate,      8, "agate",    player.inv_gem_agate);
	if (player.inv_gem_onyx)   MagicInventoryDropGemIter(player, inv_gem_onyx,      8, "onyx",    player.inv_gem_onyx);
	if (player.inv_gem_mithril)   MagicInventoryDropGemIter(player, inv_gem_mithril,      8, "mithril",    player.inv_gem_mithril);
	if (player.inv_gem_amethyst)   MagicInventoryDropGemIter(player, inv_gem_amethyst,      8, "amethyst",    player.inv_gem_amethyst);
	if (player.inv_gem_chrysoberyl)   MagicInventoryDropGemIter(player, inv_gem_chrysoberyl,      8, "chrysoberyl",    player.inv_gem_chrysoberyl);
	if (player.inv_gem_aquamarine)   MagicInventoryDropGemIter(player, inv_gem_aquamarine,      8, "aquamarine",    player.inv_gem_aquamarine);
	if (player.inv_gem_quartz)   MagicInventoryDropGemIter(player, inv_gem_quartz,      8, "quartz",    player.inv_gem_quartz);
	if (player.inv_gem_tourmaline)   MagicInventoryDropGemIter(player, inv_gem_tourmaline,      8, "tourmaline",    player.inv_gem_tourmaline);
	if (player.inv_gem_glass_r)   MagicInventoryDropGemIter(player, inv_gem_glass_r,      8, "redglass",    player.inv_gem_glass_r);
	if (player.inv_gem_glass_g)   MagicInventoryDropGemIter(player, inv_gem_glass_g,      8, "greenglass",    player.inv_gem_glass_g);
	if (player.inv_gem_glass_b)   MagicInventoryDropGemIter(player, inv_gem_glass_b,      8, "blueglass",    player.inv_gem_glass_b);
	if (player.inv_gem_glass_y)   MagicInventoryDropGemIter(player, inv_gem_glass_y,      8, "yellowglass",    player.inv_gem_glass_y);
	if (player.inv_gem_glass_w)   MagicInventoryDropGemIter(player, inv_gem_glass_w,      8, "whiteglass",    player.inv_gem_glass_w);
	//Faux gems
	if (player.inv_gem_f_diamond)   MagicInventoryDropGemIter(player, inv_gem_f_diamond,      8, "cutglassdiamond",    player.inv_gem_f_diamond);
	if (player.inv_gem_f_jacinth)   MagicInventoryDropGemIter(player, inv_gem_f_jacinth,      8, "cutglassjacinth",    player.inv_gem_f_jacinth);
	if (player.inv_gem_f_ruby)      MagicInventoryDropGemIter(player, inv_gem_f_ruby,         8, "cutglassruby",    player.inv_gem_f_ruby);
	if (player.inv_gem_f_pearl)      MagicInventoryDropGemIter(player, inv_gem_f_pearl,         8, "cutglasspearl",    player.inv_gem_f_pearl);
	if (player.inv_gem_f_blackpearl)      MagicInventoryDropGemIter(player, inv_gem_f_blackpearl,         8, "cutglassblackpearl",    player.inv_gem_f_blackpearl);
	if (player.inv_gem_f_peridot)   MagicInventoryDropGemIter(player, inv_gem_f_peridot,      8, "cutglassperidot",    player.inv_gem_f_peridot);
	if (player.inv_gem_f_emerald)   MagicInventoryDropGemIter(player, inv_gem_f_emerald,      8, "cutglassemerald",    player.inv_gem_f_emerald);
	if (player.inv_gem_f_topaz)     MagicInventoryDropGemIter(player, inv_gem_f_topaz,      8, "cutglasstopaz",    player.inv_gem_f_topaz);
	if (player.inv_gem_f_sapphire)  MagicInventoryDropGemIter(player, inv_gem_f_sapphire,      8, "cutglasssapphire",    player.inv_gem_f_sapphire);
	if (player.inv_gem_f_chalcedony)   MagicInventoryDropGemIter(player, inv_gem_f_chalcedony,      8, "cutglasschalcedony",    player.inv_gem_f_chalcedony);
	if (player.inv_gem_f_agate)   MagicInventoryDropGemIter(player, inv_gem_f_agate,      8, "cutglassagate",    player.inv_gem_f_agate);
	if (player.inv_gem_f_onyx)   MagicInventoryDropGemIter(player, inv_gem_f_onyx,      8, "cutglassonyx",    player.inv_gem_f_onyx);
	if (player.inv_gem_f_mithril)   MagicInventoryDropGemIter(player, inv_gem_f_mithril,      8, "cutglassmithril",    player.inv_gem_f_mithril);
	if (player.inv_gem_f_amethyst)   MagicInventoryDropGemIter(player, inv_gem_f_amethyst,      8, "cutglassamethyst",    player.inv_gem_f_amethyst);
	if (player.inv_gem_f_chrysoberyl)   MagicInventoryDropGemIter(player, inv_gem_f_chrysoberyl,      8, "cutglasschrysoberyl",    player.inv_gem_f_chrysoberyl);
	if (player.inv_gem_f_aquamarine)   MagicInventoryDropGemIter(player, inv_gem_f_aquamarine,      8, "cutglassaquamarine",    player.inv_gem_f_aquamarine);
	if (player.inv_gem_f_quartz)   MagicInventoryDropGemIter(player, inv_gem_f_quartz,      8, "cutglassquartz",    player.inv_gem_f_quartz);
	if (player.inv_gem_f_tourmaline)   MagicInventoryDropGemIter(player, inv_gem_f_tourmaline,      8, "cutglasstourmaline",    player.inv_gem_f_tourmaline);
}

void MagicInventoryPinataNadesOnly (entity player)
{
	MagicInventoryPinataItem(player, grenades, 6, "grenade");
	MagicInventoryPinataItem(player, flashbangs, 6, "flashbang");
	MagicInventoryPinataItem(player, smokenades, 6, "smokenade");
	MagicInventoryPinataItem(player, fragnades, 6, "fragnade");
	MagicInventoryPinataItem(player, atmines, 6, "atmine");
	MagicInventoryPinataItem(player, landmines, 6, "landmine");
}

void ZeroOutMagicInventory (entity player)
{
	player.inv_book_agency = 0;
	player.inv_scroll_agency = 0;
	player.inv_book_death = 0;
	player.inv_scroll_death = 0;
	player.inv_book_drainlife = 0;
	player.inv_scroll_drainlife = 0;
	player.inv_book_cancellation = 0;
	player.inv_scroll_cancellation = 0;
	player.inv_book_castfromlife = 0;
	player.inv_scroll_castfromlife = 0;
	player.inv_book_confer = 0;
	player.inv_scroll_confer = 0;
	player.inv_book_iceball = 0;
	player.inv_scroll_iceball = 0;
	player.inv_book_icestar = 0;
	player.inv_scroll_icestar = 0;
	player.inv_book_aquacaelestis = 0;
	player.inv_scroll_aquacaelestis = 0;
	player.inv_book_nivosus = 0;
	player.inv_scroll_nivosus = 0;
	player.inv_book_rosa = 0;
	player.inv_scroll_rosa = 0;
	player.inv_book_corvuspenna = 0;
	player.inv_scroll_corvuspenna = 0;
	player.inv_book_plumosus = 0;
	player.inv_scroll_plumosus = 0;
	player.inv_book_firebolt = 0;
	player.inv_scroll_firebolt = 0;
	player.inv_book_fireball = 0;
	player.inv_scroll_fireball = 0;
	player.inv_book_magmasphere = 0;
	player.inv_scroll_magmasphere = 0;
	player.inv_book_firebeam = 0;
	player.inv_scroll_firebeam = 0;
	player.inv_book_inferno = 0;
	player.inv_scroll_inferno = 0;
	player.inv_book_firewall = 0;
	player.inv_scroll_firewall = 0;
	player.inv_book_lightiningwall = 0;
	player.inv_scroll_lightiningwall = 0;
	player.inv_book_scepterofflame = 0;
	player.inv_scroll_scepterofflame = 0;
	player.inv_book_explosion = 0;
	player.inv_scroll_explosion = 0;
	player.inv_book_phantasmalbarrier = 0;
	player.inv_scroll_phantasmalbarrier = 0;
	player.inv_book_raiseundead = 0;
	player.inv_scroll_raiseundead = 0;
	player.inv_book_flameburst = 0;
	player.inv_scroll_flameburst = 0;
	player.inv_book_firecentury = 0;
	player.inv_scroll_firecentury = 0;
	player.inv_book_frostbeam = 0;
	player.inv_scroll_frostbeam = 0;
	player.inv_book_grace = 0;
	player.inv_scroll_grace = 0;
	player.inv_book_holybolt = 0;
	player.inv_scroll_holybolt = 0;
	player.inv_book_holylight = 0;
	player.inv_scroll_holylight = 0;
	player.inv_book_acervilux = 0;
	player.inv_scroll_acervilux = 0;
	player.inv_book_heal = 0;
	player.inv_scroll_heal = 0;
	player.inv_book_repair = 0;
	player.inv_scroll_repair = 0;
	player.inv_book_holyword = 0;
	player.inv_scroll_holyword = 0;
	player.inv_book_extinguish = 0;
	player.inv_scroll_extinguish = 0;
	player.inv_book_darkritual = 0;
	player.inv_scroll_darkritual = 0;
	player.inv_book_lightining = 0;
	player.inv_scroll_lightining = 0;
	player.inv_book_balllightining = 0;
	player.inv_scroll_balllightining = 0;
	player.inv_book_chainlightining = 0;
	player.inv_scroll_chainlightining = 0;
	player.inv_book_lightiningburst = 0;
	player.inv_scroll_lightiningburst = 0;
	player.inv_book_chargedbolt = 0;
	player.inv_scroll_chargedbolt = 0;
	player.inv_book_lightiningstrike = 0;
	player.inv_scroll_lightiningstrike = 0;
	player.inv_book_manashield = 0;
	player.inv_scroll_manashield = 0;
	player.inv_book_clairvoyance = 0;
	player.inv_scroll_clairvoyance = 0;
	player.inv_book_magicbullets = 0;
	player.inv_scroll_magicbullets = 0;
	player.inv_book_magicmissile = 0;
	player.inv_scroll_magicmissile = 0;
	player.inv_book_monstertomouse = 0;
	player.inv_scroll_monstertomouse = 0;
	player.inv_book_monstertomonolith = 0;
	player.inv_scroll_monstertomonolith = 0;
	player.inv_book_meteor = 0;
	player.inv_scroll_meteor = 0;
	player.inv_book_meteorshower = 0;
	player.inv_scroll_meteorshower = 0;
	player.inv_book_mimic = 0;
	player.inv_scroll_mimic = 0;
	player.inv_book_paralyse = 0;
	player.inv_scroll_paralyse = 0;
	player.inv_book_ringoffire = 0;
	player.inv_scroll_ringoffire = 0;
	player.inv_book_stonecurse = 0;
	player.inv_scroll_stonecurse = 0;
	player.inv_book_stonerain = 0;
	player.inv_scroll_stonerain = 0;
	player.inv_book_timesink = 0;
	player.inv_scroll_timesink = 0;
	player.inv_book_vampyricconduit = 0;
	player.inv_scroll_vampyricconduit = 0;

	//Knowledge books
	player.inv_book_know_carpentry = 0;
	player.inv_book_know_mortise = 0;
	player.inv_book_know_stonemasonry = 0;
	player.inv_book_know_ironworking = 0;
	player.inv_book_know_arch = 0;
	player.inv_book_know_welding = 0;
	player.inv_book_know_concrete = 0;
	
	player.inv_potion_health_small = 0;
	player.inv_potion_health_medium = 0;
	player.inv_potion_health_large = 0;
	player.inv_potion_mana_small = 0;
	player.inv_potion_mana_medium = 0;
	player.inv_potion_mana_large = 0;
	player.inv_potion_rejuv_small = 0;
	player.inv_potion_rejuv_medium = 0;
	player.inv_potion_rejuv_large = 0;
	player.inv_potion_vodka_small = 0;
	player.inv_potion_vodka_medium = 0;
	player.inv_potion_vodka_large = 0;
	player.inv_potion_merlot_small = 0;
	player.inv_potion_merlot_medium = 0;
	player.inv_potion_merlot_large = 0;
	player.inv_potion_ale_small = 0;
	player.inv_potion_ale_medium = 0;
	player.inv_potion_ale_large = 0;
	player.inv_potion_water_small = 0;
	player.inv_potion_water_medium = 0;
	player.inv_potion_water_large = 0;
	player.inv_food_bellpepper = 0;
	player.inv_food_bread = 0;
	player.inv_food_cheeze = 0;
	player.inv_food_garlic = 0;
	player.inv_food_grapes = 0;
	player.inv_food_onion = 0;
	player.inv_food_tomato = 0;
	player.inv_food_turkeyleg = 0;
	player.inv_faeces_small = 0;
	player.inv_faeces_medium = 0;
	player.inv_faeces_large = 0;
	
	player.inv_misc_suppressor45 = 0;
	player.inv_misc_suppressormac10 = 0;
	player.inv_misc_suppressor9mm = 0;
	player.inv_misc_suppressor5n7mm = 0;
	player.inv_misc_suppressorrifle = 0;
	player.inv_misc_suppressorpdw = 0;
	player.inv_misc_cylinder_r1856 = 0;
	player.inv_misc_exmag_ak47_50 = 0;
	player.inv_misc_exmag_ak47_100 = 0;
	player.inv_misc_drum_ak47_75 = 0;
	player.inv_misc_mag_ak47_30 = 0;
	
	player.inv_misc_mag_ak74_30 = 0;
	player.inv_misc_exmag_ak74_45 = 0;
	
	player.inv_misc_mag_styeraug_30 = 0;
	player.inv_misc_exmag_styeraug_42 = 0;
	
	player.inv_misc_panmag_lewisgun_47 = 0;
	player.inv_misc_panmag_lewisgun_97 = 0;
	
	player.inv_misc_mag_bar_20 = 0;
	player.inv_misc_exmag_bar_40 = 0;
	
	player.inv_misc_mag_uzi_20 = 0;
	player.inv_misc_mag_uzi_25 = 0;
	player.inv_misc_mag_uzi_32 = 0; 
	player.inv_misc_exmag_uzi_40 = 0; 
	player.inv_misc_exmag_uzi_50 = 0; 
	player.inv_misc_drum_uzi_82 = 0; 
	player.inv_misc_exmag_uzi_106 = 0; 
	
	player.inv_misc_mag_tec9_20 = 0;
	player.inv_misc_mag_tec9_10 = 0;
	player.inv_misc_mag_tec9_32 = 0; 
	player.inv_misc_exmag_tec9_36 = 0; 
	player.inv_misc_exmag_tec9_50 = 0; 
	player.inv_misc_drum_tec9_72 = 0; 

	player.inv_misc_mag_m16_20 = 0;
	player.inv_misc_mag_m16_30 = 0;
	player.inv_misc_betacmag_m16 = 0;
	
	player.inv_misc_betacmag_lightpistol = 0;
	player.inv_misc_exmag_lightpistol = 0;
	player.inv_misc_mag_lightpistol = 0;
	player.inv_misc_drum_lightpistol = 0;
	
	player.inv_misc_betacmag_pdw = 0;
	player.inv_misc_exmag40_pdw = 0;
	player.inv_misc_stdmag_pdw = 0;
	player.inv_misc_smallmag_pdw = 0;
	player.inv_misc_tinymag_pdw = 0;
	player.inv_misc_drum_pdw = 0;

	player.inv_coin_tin = 0;
	player.inv_coin_iron = 0;
	player.inv_coin_bronze = 0;
	player.inv_coin_copper = 0;
	player.inv_coin_silver = 0;
	player.inv_coin_gold = 0;
	player.inv_coin_plat = 0;
	player.inv_coin_jade = 0;
	player.inv_coin_amberium = 0;
	
	player.inv_coin_f_tin = 0;
	player.inv_coin_f_iron = 0;
	player.inv_coin_f_bronze = 0;
	player.inv_coin_f_copper = 0;
	player.inv_coin_f_silver = 0;
	player.inv_coin_f_gold = 0;
	player.inv_coin_f_plat = 0;
	player.inv_coin_f_jade = 0;
	player.inv_coin_f_amberium = 0;
	
	player.inv_coin_cf_tin = 0;
	player.inv_coin_cf_iron = 0;
	player.inv_coin_cf_bronze = 0;
	player.inv_coin_cf_copper = 0;
	player.inv_coin_cf_silver = 0;
	player.inv_coin_cf_gold = 0;
	player.inv_coin_cf_plat = 0;
	player.inv_coin_cf_jade = 0;
	player.inv_coin_cf_amberium = 0;
	
	player.inv_casinotoken_yellow = 0;
	player.inv_casinotoken_blue = 0;
	player.inv_casinotoken_gray = 0;
	player.inv_casinotoken_lightgreen = 0;
	player.inv_casinotoken_lightblue = 0;
	player.inv_casinotoken_rose = 0;
	player.inv_casinotoken_black = 0;
	player.inv_casinotoken_seabreeze = 0;	
	player.inv_casinotoken_red = 0;
	player.inv_casinotoken_cyan = 0;
	player.inv_casinotoken_tan = 0;
	player.inv_casinotoken_green = 0;
	player.inv_casinotoken_purple = 0;

	player.inv_bar_tin = 0;
	player.inv_bar_iron = 0;
	player.inv_bar_bronze = 0;
	player.inv_bar_copper = 0;
	player.inv_bar_silver = 0;
	player.inv_bar_gold = 0;
	player.inv_bar_plat = 0;
	player.inv_bar_jade = 0;
	player.inv_bar_amberium = 0;
	
	player.inv_bar_f_tin = 0;
	player.inv_bar_f_iron = 0;
	player.inv_bar_f_bronze = 0;
	player.inv_bar_f_copper = 0;
	player.inv_bar_f_silver = 0;
	player.inv_bar_f_gold = 0;
	player.inv_bar_f_plat = 0;
	player.inv_bar_f_jade = 0;
	player.inv_bar_f_amberium = 0;
	
	player.inv_gem_diamond = 0;
	player.inv_gem_jacinth = 0;
	player.inv_gem_ruby = 0;
	player.inv_gem_pearl = 0;
	player.inv_gem_blackpearl = 0;
	player.inv_gem_peridot = 0;
	player.inv_gem_emerald = 0;
	player.inv_gem_topaz = 0;
	player.inv_gem_sapphire = 0;
	player.inv_gem_chalcedony = 0;
	player.inv_gem_agate = 0;
	player.inv_gem_onyx = 0;
	player.inv_gem_mithril = 0;
	player.inv_gem_amethyst = 0;
	player.inv_gem_chrysoberyl = 0;
	player.inv_gem_aquamarine = 0;
	player.inv_gem_quartz = 0;
	player.inv_gem_tourmaline = 0;
	player.inv_gem_glass_r = 0;
	player.inv_gem_glass_g = 0;
	player.inv_gem_glass_b = 0;
	player.inv_gem_glass_y = 0;
	player.inv_gem_glass_w = 0;
	
	player.inv_gem_f_diamond = 0;
	player.inv_gem_f_jacinth = 0;
	player.inv_gem_f_ruby = 0;
	player.inv_gem_f_pearl = 0;
	player.inv_gem_f_blackpearl = 0;
	player.inv_gem_f_peridot = 0;
	player.inv_gem_f_emerald = 0;
	player.inv_gem_f_topaz = 0;
	player.inv_gem_f_sapphire = 0;
	player.inv_gem_f_chalcedony = 0;
	player.inv_gem_f_agate = 0;
	player.inv_gem_f_onyx = 0;
	player.inv_gem_f_mithril = 0;
	player.inv_gem_f_amethyst = 0;
	player.inv_gem_f_chrysoberyl = 0;
	player.inv_gem_f_aquamarine = 0;
	player.inv_gem_f_quartz = 0;
	player.inv_gem_f_tourmaline = 0;
	
	player.inv_gem = 0; //Catchall
	player.inv_bar = 0; //Catchall
	player.inv_coin = 0; //Catchall used for setting coin amnt on map placed coins, zeroing out anyway. Not used for player tho
}


void RemoveStartSpells (entity player)
{
	//Maybe the ifs are unnecessary since these will be null if not used
	if (player.start_spell_agency) {
		player.spell_agency = player.spell_agency - player.start_spell_agency;
		player.start_spell_agency = 0;
	} 
	
	if (player.start_spell_death) {
		player.spell_death = player.spell_death - player.start_spell_death;
		player.start_spell_death = 0;
	} 
	
	if (player.start_spell_drainlife) {
		player.spell_drainlife = player.spell_drainlife - player.start_spell_drainlife;
		player.start_spell_drainlife = 0;
	} 
	
	if (player.start_spell_cancellation) {
		player.spell_cancellation = player.spell_cancellation - player.start_spell_cancellation;
		player.start_spell_cancellation = 0;
	}
	
	if (player.start_spell_castfromlife) {
		player.spell_castfromlife = player.spell_castfromlife - player.start_spell_castfromlife;
	 	player.start_spell_castfromlife = 0;
	}
	
	if (player.start_spell_confer) {
		player.spell_confer = player.spell_confer - player.start_spell_confer;
	 	player.start_spell_confer = 0;
	} 
	
	if (player.start_spell_iceball) {
		player.spell_iceball = player.spell_iceball - player.start_spell_iceball;
		player.start_spell_iceball = 0;
	} 
	
	if (player.start_spell_icestar) {
		player.spell_icestar = player.spell_icestar - player.start_spell_icestar;
		player.start_spell_icestar = 0;
	}  
	
	if (player.start_spell_aquacaelestis) {
		player.spell_aquacaelestis = player.spell_aquacaelestis - player.start_spell_aquacaelestis;
		player.start_spell_aquacaelestis = 0;
	}  
	
	if (player.start_spell_nivosus) {
		player.spell_nivosus = player.spell_nivosus - player.start_spell_nivosus;
		player.start_spell_nivosus = 0;
	}   
	
	if (player.start_spell_rosa) {
		player.spell_rosa = player.spell_rosa - player.start_spell_rosa;
		player.start_spell_rosa = 0;
	}   
	
	if (player.start_spell_corvuspenna) {
		player.spell_corvuspenna = player.spell_corvuspenna - player.start_spell_corvuspenna;
		player.start_spell_corvuspenna = 0;
	}   
	
	if (player.start_spell_plumosus) {
		player.spell_plumosus = player.spell_plumosus - player.start_spell_plumosus;
		player.start_spell_plumosus = 0;
	}
	
	if (player.start_spell_firebolt) {
		player.spell_firebolt = player.spell_firebolt - player.start_spell_firebolt;
		player.start_spell_firebolt = 0;
	} 
	
	if (player.start_spell_fireball) {
		player.spell_fireball = player.spell_fireball - player.start_spell_fireball;
		player.start_spell_fireball = 0;
	}  
	
	if (player.start_spell_magmasphere) {
		player.spell_magmasphere = player.spell_magmasphere - player.start_spell_magmasphere;
		player.start_spell_magmasphere = 0;
	}
	
	if (player.start_spell_firebeam) { player.spell_firebeam = player.spell_firebeam - player.start_spell_firebeam;
		player.start_spell_firebeam = 0;
	}  
	
	if (player.start_spell_inferno) { player.spell_inferno = player.spell_inferno - player.start_spell_inferno;
		player.start_spell_inferno = 0;
	} 
	
	if (player.start_spell_firewall) { player.spell_firewall = player.spell_firewall - player.start_spell_firewall; 
		player.start_spell_firewall = 0;
	} 
	
	if (player.start_spell_lightiningwall) { player.spell_lightiningwall = player.spell_lightiningwall - player.start_spell_lightiningwall; 
		player.start_spell_lightiningwall = 0;
	}
	
	if (player.start_spell_scepterofflame) { player.spell_scepterofflame = player.spell_scepterofflame - player.start_spell_scepterofflame; 
		player.start_spell_scepterofflame = 0;
	}
	
	if (player.start_spell_explosion) { player.spell_explosion = player.spell_explosion - player.start_spell_explosion; 
		player.start_spell_explosion = 0;
	}
	
	if (player.start_spell_phantasmalbarrier) { player.spell_phantasmalbarrier = player.spell_phantasmalbarrier - player.start_spell_phantasmalbarrier; 
		player.start_spell_phantasmalbarrier = 0;
	} 
	
	if (player.start_spell_raiseundead) { player.spell_raiseundead = player.spell_raiseundead - player.start_spell_raiseundead;
		player.start_spell_raiseundead = 0;
	} 
	
	if (player.start_spell_flameburst) { player.spell_flameburst = player.spell_flameburst - player.start_spell_flameburst;
		player.start_spell_flameburst = 0;
	}  
	
	if (player.start_spell_firecentury) { player.spell_firecentury = player.spell_firecentury - player.start_spell_firecentury;
		player.start_spell_firecentury = 0;
	}
	
	if (player.start_spell_frostbeam) { player.spell_frostbeam = player.spell_frostbeam - player.start_spell_frostbeam;
		player.start_spell_frostbeam = 0;
	} 
	
	if (player.start_spell_grace) { player.spell_grace = player.spell_grace - player.start_spell_grace;
		player.start_spell_grace = 0;
	} 
	
	if (player.start_spell_holybolt) { player.spell_holybolt = player.spell_holybolt - player.start_spell_holybolt;
		player.start_spell_holybolt = 0;
	} 
	
	if (player.start_spell_holylight) { player.spell_holylight = player.spell_holylight - player.start_spell_holylight;
		player.start_spell_holylight = 0;
	}
	
	if (player.start_spell_acervilux) { player.spell_acervilux = player.spell_acervilux - player.start_spell_acervilux;
		player.start_spell_acervilux = 0;
	}
	
	if (player.start_spell_heal) { player.spell_heal = player.spell_heal - player.start_spell_heal;
		player.start_spell_heal = 0;
	} 
	
	if (player.start_spell_repair) { player.spell_repair = player.spell_repair - player.start_spell_repair;
		player.start_spell_repair = 0;
	} 
	
	if (player.start_spell_holyword) { player.spell_holyword = player.spell_holyword - player.start_spell_holyword;
		player.start_spell_holyword = 0;
	} 
	
	if (player.start_spell_extinguish) { player.spell_extinguish = player.spell_extinguish - player.start_spell_extinguish;
		player.start_spell_extinguish = 0;
	} 
	
	if (player.start_spell_darkritual) { player.spell_darkritual = player.spell_darkritual - player.start_spell_darkritual;
		player.start_spell_darkritual = 0;
	}
	
	if (player.start_spell_lightining) { player.spell_lightining = player.spell_lightining - player.start_spell_lightining; 
		player.start_spell_lightining = 0;
	}
		
	if (player.start_spell_balllightining) { player.spell_balllightining = player.spell_balllightining - player.start_spell_balllightining; 
		player.start_spell_balllightining = 0;
	} 
	
	if (player.start_spell_chainlightining) { player.spell_chainlightining = player.spell_chainlightining - player.start_spell_chainlightining; 
		player.start_spell_chainlightining = 0;
	}  
		
	if (player.start_spell_lightiningburst) { player.spell_lightiningburst = player.spell_lightiningburst - player.start_spell_lightiningburst; 
		player.start_spell_lightiningburst = 0;
	} 
	
	if (player.start_spell_chargedbolt) { player.spell_chargedbolt = player.spell_chargedbolt - player.start_spell_chargedbolt; 
		player.start_spell_chargedbolt = 0;
	} 
	
	if (player.start_spell_lightiningstrike) { player.spell_lightiningstrike = player.spell_lightiningstrike - player.start_spell_lightiningstrike; 
		player.start_spell_lightiningstrike = 0;
	}
	
	if (player.start_spell_monstertomonolith) { player.spell_monstertomonolith = player.spell_monstertomonolith - player.start_spell_monstertomonolith;
		player.start_spell_monstertomonolith = 0;
	} 
	
	if (player.start_spell_monstertomouse) { player.spell_monstertomouse = player.spell_monstertomouse - player.start_spell_monstertomouse;
		player.start_spell_monstertomouse = 0;
	} 
	
	if (player.start_spell_manashield) { player.spell_manashield = player.spell_manashield - player.start_spell_manashield;
		player.start_spell_manashield = 0;
	}  
	
	if (player.start_spell_clairvoyance) { player.spell_clairvoyance = player.spell_clairvoyance - player.start_spell_clairvoyance;
		player.start_spell_clairvoyance = 0;
	}
	
	if (player.start_spell_magicbullets) { player.spell_magicbullets = player.spell_magicbullets - player.start_spell_magicbullets;
		player.start_spell_magicbullets = 0;
	}
	
	if (player.start_spell_magicmissile) { player.spell_magicmissile = player.spell_magicmissile - player.start_spell_magicmissile;
		player.start_spell_magicmissile = 0;
	} 
	
	if (player.start_spell_meteor) { player.spell_meteor = player.spell_meteor - player.start_spell_meteor;
		player.start_spell_meteor = 0;
	} 
	
	if (player.start_spell_meteorshower) { player.spell_meteorshower = player.spell_meteorshower - player.start_spell_meteorshower;
		player.start_spell_meteorshower = 0;
	} 
	
	if (player.start_spell_mimic) { player.spell_mimic = player.spell_mimic - player.start_spell_mimic;	
		player.start_spell_mimic = 0;
	} 
	
	if (player.start_spell_paralyse) { player.spell_paralyse = player.spell_paralyse - player.start_spell_paralyse;
		player.start_spell_paralyse = 0;
	} 
	
	if (player.start_spell_ringoffire) { player.spell_ringoffire = player.spell_ringoffire - player.start_spell_ringoffire;
		player.start_spell_ringoffire = 0;
	} 
	
	if (player.start_spell_stonecurse) {
		player.spell_stonecurse = player.spell_stonecurse - player.start_spell_stonecurse;
		player.start_spell_stonecurse = 0;
	}
	
	if (player.start_spell_stonerain) {
		player.spell_stonerain = player.spell_stonerain - player.start_spell_stonerain;
		player.start_spell_stonerain = 0;
	}
	
	if (player.start_spell_timesink) {
		player.spell_timesink = player.spell_timesink - player.start_spell_timesink;
		player.start_spell_timesink = 0;
	}
	
	if (player.start_spell_vampyricconduit) {
		player.spell_vampyricconduit = player.spell_vampyricconduit - player.start_spell_vampyricconduit;
		player.start_spell_vampyricconduit = 0;
	}
	
	//Knowledge
	if (player.start_knowledge_carpentry) {
		player.knowledge_carpentry = player.knowledge_carpentry - player.start_knowledge_carpentry;
		player.start_knowledge_carpentry = 0;
	}
	
	if (player.start_knowledge_mortise) {
		player.knowledge_mortise = player.knowledge_mortise - player.start_knowledge_mortise;
		player.start_knowledge_mortise = 0;
	}
	
	if (player.start_knowledge_stonemasonry) {
		player.knowledge_stonemasonry = player.knowledge_stonemasonry - player.start_knowledge_stonemasonry;
		player.start_knowledge_stonemasonry = 0;
	}
	
	if (player.start_knowledge_ironworking) {
		player.knowledge_ironworking = player.knowledge_ironworking - player.start_knowledge_ironworking;
		player.start_knowledge_ironworking = 0;
	}
	
	if (player.start_knowledge_arch) {
		player.knowledge_arch = player.knowledge_arch - player.start_knowledge_arch;
		player.start_knowledge_arch = 0;
	}
	
	if (player.start_knowledge_welding) {
		player.knowledge_welding = player.knowledge_welding - player.start_knowledge_welding;
		player.start_knowledge_welding = 0;
	}
	
	if (player.start_knowledge_concrete) {
		player.knowledge_concrete = player.knowledge_concrete - player.start_knowledge_concrete;
		player.start_knowledge_concrete = 0;
	}
	
}

float GiveStartSpells_NrmlzLvl (entity e, .float fld)
{
	if (e.fld < 0) {
		print("is negative, boosting\n");
		return (e.fld * -1);
	}
	
	return 0;
}

void GiveStartSpells (entity player)
{
	//Maybe the ifs are unnecessary since these will be null if not used
	local float nrmlzlvl;
	nrmlzlvl = 0;
	
	if (autocvar_g_start_spell_agency) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_agency);
		player.spell_agency = player.spell_agency + nrmlzlvl + autocvar_g_start_spell_agency;
		player.start_spell_agency = player.start_spell_agency + nrmlzlvl + autocvar_g_start_spell_agency;
	}

	if (autocvar_g_start_spell_death) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_drainlife);
		player.spell_death = player.spell_death + nrmlzlvl + autocvar_g_start_spell_death;
		player.start_spell_death = player.start_spell_death + nrmlzlvl + autocvar_g_start_spell_death;

	}

	if (autocvar_g_start_spell_drainlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_drainlife);
		player.spell_drainlife = player.spell_drainlife + nrmlzlvl + autocvar_g_start_spell_drainlife;
		player.start_spell_drainlife = player.start_spell_drainlife + nrmlzlvl + autocvar_g_start_spell_drainlife;
	}
	
	if (autocvar_g_start_spell_cancellation) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_cancellation);
		player.spell_cancellation = player.spell_cancellation + nrmlzlvl + autocvar_g_start_spell_cancellation;
		player.start_spell_cancellation = player.start_spell_cancellation + nrmlzlvl + autocvar_g_start_spell_cancellation;
	}

	if (autocvar_g_start_spell_castfromlife) {
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_castfromlife); 
		player.spell_castfromlife = player.spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_castfromlife;
		player.start_spell_castfromlife = player.start_spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_castfromlife;
	}
	
	if (autocvar_g_start_spell_confer) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_confer);
		player.spell_confer = player.spell_confer + nrmlzlvl + autocvar_g_start_spell_confer;
		player.start_spell_confer = player.start_spell_confer + nrmlzlvl + autocvar_g_start_spell_confer;
	}

	if (autocvar_g_start_spell_iceball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_iceball);
		player.spell_iceball = player.spell_iceball + nrmlzlvl + autocvar_g_start_spell_iceball;
		player.start_spell_iceball = player.start_spell_iceball + nrmlzlvl + autocvar_g_start_spell_iceball;
	}

	if (autocvar_g_start_spell_icestar) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_icestar);
		player.spell_icestar = player.spell_icestar + nrmlzlvl + autocvar_g_start_spell_icestar;
		player.start_spell_icestar = player.start_spell_icestar + nrmlzlvl + autocvar_g_start_spell_icestar;
	}

	if (autocvar_g_start_spell_aquacaelestis) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_aquacaelestis);
		player.spell_aquacaelestis = player.spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_aquacaelestis;
		player.start_spell_aquacaelestis = player.start_spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_aquacaelestis;
	}

	if (autocvar_g_start_spell_nivosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_nivosus);
		player.spell_nivosus = player.spell_nivosus + nrmlzlvl + autocvar_g_start_spell_nivosus;
		player.start_spell_nivosus = player.start_spell_nivosus + nrmlzlvl + autocvar_g_start_spell_nivosus;
	}

	if (autocvar_g_start_spell_rosa) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_rosa);
		player.spell_rosa = player.spell_rosa + nrmlzlvl + autocvar_g_start_spell_rosa;
		player.start_spell_rosa = player.start_spell_rosa + nrmlzlvl + autocvar_g_start_spell_rosa;
	}

	if (autocvar_g_start_spell_corvuspenna) {
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_corvuspenna); 
		player.spell_corvuspenna = player.spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_corvuspenna;
		player.start_spell_corvuspenna = player.start_spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_corvuspenna;
	}

	if (autocvar_g_start_spell_plumosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player,spell_plumosus );
		player.spell_plumosus = player.spell_plumosus + nrmlzlvl + autocvar_g_start_spell_plumosus;
		player.start_spell_plumosus = player.start_spell_plumosus + nrmlzlvl + autocvar_g_start_spell_plumosus;
	}

	if (autocvar_g_start_spell_firebolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebolt);
		player.spell_firebolt = player.spell_firebolt + nrmlzlvl + autocvar_g_start_spell_firebolt;
		player.start_spell_firebolt = player.start_spell_firebolt + nrmlzlvl + autocvar_g_start_spell_firebolt;
	}

	if (autocvar_g_start_spell_fireball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_fireball);
		player.spell_fireball = player.spell_fireball + nrmlzlvl + autocvar_g_start_spell_fireball;
		player.start_spell_fireball = player.start_spell_fireball + nrmlzlvl + autocvar_g_start_spell_fireball;
	}

	if (autocvar_g_start_spell_magmasphere) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magmasphere);
		player.spell_magmasphere = player.spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_magmasphere;
		player.start_spell_magmasphere = player.start_spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_magmasphere;
	}

	if (autocvar_g_start_spell_firebeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebeam);
		player.spell_firebeam = player.spell_firebeam + nrmlzlvl + autocvar_g_start_spell_firebeam;
		player.start_spell_firebeam = player.start_spell_firebeam + nrmlzlvl + autocvar_g_start_spell_firebeam;
	}

	if (autocvar_g_start_spell_inferno) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_inferno);
		player.spell_inferno = player.spell_inferno + nrmlzlvl + autocvar_g_start_spell_inferno;
		player.start_spell_inferno = player.start_spell_inferno + nrmlzlvl + autocvar_g_start_spell_inferno;
	}

	if (autocvar_g_start_spell_firewall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firewall);
		player.spell_firewall = player.spell_firewall + nrmlzlvl + autocvar_g_start_spell_firewall;
		player.start_spell_firewall = player.start_spell_firewall + nrmlzlvl + autocvar_g_start_spell_firewall;
	}

	if (autocvar_g_start_spell_lightiningwall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningwall);
		player.spell_lightiningwall = player.spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_lightiningwall;
		player.start_spell_lightiningwall = player.start_spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_lightiningwall;
	}
	
	if (autocvar_g_start_spell_scepterofflame) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_scepterofflame);
		player.spell_scepterofflame = player.spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_scepterofflame;
		player.start_spell_scepterofflame = player.start_spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_scepterofflame;
	}
	
	if (autocvar_g_start_spell_explosion) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_explosion);
		player.spell_explosion = player.spell_explosion + nrmlzlvl + autocvar_g_start_spell_explosion;
		player.start_spell_explosion = player.start_spell_explosion + nrmlzlvl + autocvar_g_start_spell_explosion;
	}
	
	if (autocvar_g_start_spell_phantasmalbarrier) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_phantasmalbarrier);
		player.spell_phantasmalbarrier = player.spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_phantasmalbarrier;
		player.start_spell_phantasmalbarrier = player.start_spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_phantasmalbarrier;
	}

	if (autocvar_g_start_spell_raiseundead) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_raiseundead);
		player.spell_raiseundead = player.spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_raiseundead;
		player.start_spell_raiseundead = player.start_spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_raiseundead;
	}

	if (autocvar_g_start_spell_flameburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_flameburst);
		player.spell_flameburst = player.spell_flameburst + nrmlzlvl + autocvar_g_start_spell_flameburst;
		player.start_spell_flameburst = player.start_spell_flameburst + nrmlzlvl + autocvar_g_start_spell_flameburst;
	}

	if (autocvar_g_start_spell_firecentury) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firecentury);
		player.spell_firecentury = player.spell_firecentury + nrmlzlvl + autocvar_g_start_spell_firecentury;
		player.start_spell_firecentury = player.start_spell_firecentury + nrmlzlvl + autocvar_g_start_spell_firecentury;
	}

	if (autocvar_g_start_spell_frostbeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_frostbeam);
		player.spell_frostbeam = player.spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_frostbeam;
		player.start_spell_frostbeam = player.start_spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_frostbeam;
	}

	if (autocvar_g_start_spell_grace) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_grace);
		player.spell_grace = player.spell_grace + nrmlzlvl + autocvar_g_start_spell_grace;
		player.start_spell_grace = player.start_spell_grace + nrmlzlvl + autocvar_g_start_spell_grace;
	}

	if (autocvar_g_start_spell_holybolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holybolt);
		player.spell_holybolt = player.spell_holybolt + nrmlzlvl + autocvar_g_start_spell_holybolt;
		player.start_spell_holybolt = player.start_spell_holybolt + nrmlzlvl + autocvar_g_start_spell_holybolt;
	}

	if (autocvar_g_start_spell_holylight) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holylight);
		player.spell_holylight = player.spell_holylight + nrmlzlvl + autocvar_g_start_spell_holylight;
		player.start_spell_holylight = player.start_spell_holylight + nrmlzlvl + autocvar_g_start_spell_holylight;
	}

	if (autocvar_g_start_spell_acervilux) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_acervilux);
		player.spell_acervilux = player.spell_acervilux + nrmlzlvl + autocvar_g_start_spell_acervilux;
		player.start_spell_acervilux = player.start_spell_acervilux + nrmlzlvl + autocvar_g_start_spell_acervilux;
	}

	if (autocvar_g_start_spell_heal) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_heal);
		player.spell_heal = player.spell_heal + nrmlzlvl + autocvar_g_start_spell_heal;
		player.start_spell_heal = player.start_spell_heal + nrmlzlvl + autocvar_g_start_spell_heal;
	}
	
	if (autocvar_g_start_spell_repair) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_repair);
		player.spell_repair = player.spell_repair + nrmlzlvl + autocvar_g_start_spell_repair;
		player.start_spell_repair = player.start_spell_repair + nrmlzlvl + autocvar_g_start_spell_repair;
	}
	
	if (autocvar_g_start_spell_holyword) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holyword);
		player.spell_holyword = player.spell_holyword + nrmlzlvl + autocvar_g_start_spell_holyword;
		player.start_spell_holyword = player.start_spell_holyword + nrmlzlvl + autocvar_g_start_spell_holyword;
	}
	
	if (autocvar_g_start_spell_extinguish) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_extinguish);
		player.spell_extinguish = player.spell_extinguish + nrmlzlvl + autocvar_g_start_spell_extinguish;
		player.start_spell_extinguish = player.start_spell_extinguish + nrmlzlvl + autocvar_g_start_spell_extinguish;
	}
	
	if (autocvar_g_start_spell_darkritual) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_darkritual);
		player.spell_darkritual = player.spell_darkritual + nrmlzlvl + autocvar_g_start_spell_darkritual;
		player.start_spell_darkritual = player.start_spell_darkritual + nrmlzlvl + autocvar_g_start_spell_darkritual;
	}

	if (autocvar_g_start_spell_lightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightining);
		player.spell_lightining = player.spell_lightining + nrmlzlvl + autocvar_g_start_spell_lightining; 
		player.start_spell_lightining = player.start_spell_lightining + nrmlzlvl + autocvar_g_start_spell_lightining;
	}
	
	if (autocvar_g_start_spell_balllightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_balllightining);
		player.spell_balllightining = player.spell_balllightining + nrmlzlvl + autocvar_g_start_spell_balllightining;
		player.start_spell_balllightining = player.start_spell_balllightining + nrmlzlvl + autocvar_g_start_spell_balllightining;
	}

	if (autocvar_g_start_spell_chainlightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chainlightining);
		player.spell_chainlightining = player.spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_chainlightining; 
		player.start_spell_chainlightining = player.start_spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_chainlightining;
	}
	
	if (autocvar_g_start_spell_lightiningburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningburst);
		player.spell_lightiningburst = player.spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_lightiningburst;
		player.start_spell_lightiningburst = player.start_spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_lightiningburst;
	}

	if (autocvar_g_start_spell_chargedbolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chargedbolt);
		player.spell_chargedbolt = player.spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_chargedbolt; 
		player.start_spell_chargedbolt = player.start_spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_chargedbolt;
	}
	
	if (autocvar_g_start_spell_lightiningstrike) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningstrike);
		player.spell_lightiningstrike = player.spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_lightiningstrike; 
		player.start_spell_lightiningstrike = player.start_spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_lightiningstrike;
	}

	if (autocvar_g_start_spell_monstertomonolith) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomonolith);
		player.spell_monstertomonolith = player.spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_monstertomonolith;
		player.start_spell_monstertomonolith = player.start_spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_monstertomonolith;
	}

	if (autocvar_g_start_spell_monstertomouse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomouse);
		player.spell_monstertomouse = player.spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_monstertomouse;
		player.start_spell_monstertomouse = player.start_spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_monstertomouse;
	}
	
	if (autocvar_g_start_spell_manashield) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_manashield);
		player.spell_manashield = player.spell_manashield + nrmlzlvl + autocvar_g_start_spell_manashield;
		player.start_spell_manashield = player.start_spell_manashield + nrmlzlvl + autocvar_g_start_spell_manashield;
	}
	
	if (autocvar_g_start_spell_clairvoyance) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_clairvoyance);
		player.spell_clairvoyance = player.spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_clairvoyance;
		player.start_spell_clairvoyance = player.start_spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_clairvoyance;
	}
	
	if (autocvar_g_start_spell_magicbullets) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicbullets);
		player.spell_magicbullets = player.spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_magicbullets;
		player.start_spell_magicbullets = player.start_spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_magicbullets;
	}

	if (autocvar_g_start_spell_magicmissile) {
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicmissile); 
		player.spell_magicmissile = player.spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_magicmissile;
		player.start_spell_magicmissile = player.start_spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_magicmissile;
	}

	if (autocvar_g_start_spell_meteor) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteor);
		player.spell_meteor = player.spell_meteor + nrmlzlvl + autocvar_g_start_spell_meteor;
		player.start_spell_meteor = player.start_spell_meteor + nrmlzlvl + autocvar_g_start_spell_meteor;
	}

	if (autocvar_g_start_spell_meteorshower) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteorshower);
		player.spell_meteorshower = player.spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_meteorshower;
		player.start_spell_meteorshower = player.start_spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_meteorshower;
	}

	if (autocvar_g_start_spell_mimic) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_mimic);
		player.spell_mimic = player.spell_mimic + nrmlzlvl + autocvar_g_start_spell_mimic;	
		player.start_spell_mimic = player.start_spell_mimic + nrmlzlvl + autocvar_g_start_spell_mimic;
	}

	if (autocvar_g_start_spell_paralyse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_paralyse);
		player.spell_paralyse = player.spell_paralyse + nrmlzlvl + autocvar_g_start_spell_paralyse;
		player.start_spell_paralyse = player.start_spell_paralyse + nrmlzlvl + autocvar_g_start_spell_paralyse;
	}

	if (autocvar_g_start_spell_ringoffire) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_ringoffire);
		player.spell_ringoffire = player.spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_ringoffire;
		player.start_spell_ringoffire = player.start_spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_ringoffire;
	}

	if (autocvar_g_start_spell_stonecurse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonecurse);
		player.spell_stonecurse = player.spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_stonecurse;
		player.start_spell_stonecurse = player.start_spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_stonecurse;
	}
	
	if (autocvar_g_start_spell_stonerain) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonerain);
		player.spell_stonerain = player.spell_stonerain + nrmlzlvl + autocvar_g_start_spell_stonerain;
		player.start_spell_stonerain = player.start_spell_stonerain + nrmlzlvl + autocvar_g_start_spell_stonerain;
	}
	
	if (autocvar_g_start_spell_timesink) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_timesink);
		player.spell_timesink = player.spell_timesink + nrmlzlvl + autocvar_g_start_spell_timesink;
		player.start_spell_timesink = player.start_spell_timesink + nrmlzlvl + autocvar_g_start_spell_timesink;
	}
	
	if (autocvar_g_start_spell_vampyricconduit) {
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_vampyricconduit); 
		player.spell_vampyricconduit = player.spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_vampyricconduit;
		player.start_spell_vampyricconduit = player.start_spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_vampyricconduit;
	}
	
	//Knowledge
	if (autocvar_g_start_knowledge_carpentry) { 
		player.knowledge_carpentry = player.knowledge_carpentry + autocvar_g_start_knowledge_carpentry;
		player.start_knowledge_carpentry = player.start_knowledge_carpentry + autocvar_g_start_knowledge_carpentry;
	}
	
	if (autocvar_g_start_knowledge_mortise) { 
		player.knowledge_mortise = player.knowledge_mortise + autocvar_g_start_knowledge_mortise;
		player.start_knowledge_mortise = player.start_knowledge_mortise + autocvar_g_start_knowledge_mortise;
	}
	
	if (autocvar_g_start_knowledge_stonemasonry) { 
		player.knowledge_stonemasonry = player.knowledge_stonemasonry + autocvar_g_start_knowledge_stonemasonry;
		player.start_knowledge_stonemasonry = player.start_knowledge_stonemasonry + autocvar_g_start_knowledge_stonemasonry;
	}
	
	if (autocvar_g_start_knowledge_ironworking) { 
		player.knowledge_ironworking = player.knowledge_ironworking + autocvar_g_start_knowledge_ironworking;
		player.start_knowledge_ironworking = player.start_knowledge_ironworking + autocvar_g_start_knowledge_ironworking;
	}
	
	if (autocvar_g_start_knowledge_arch) { 
		player.knowledge_arch = player.knowledge_arch + autocvar_g_start_knowledge_arch;
		player.start_knowledge_arch = player.start_knowledge_arch + autocvar_g_start_knowledge_arch;
	}
	
	if (autocvar_g_start_knowledge_welding) { 
		player.knowledge_welding = player.knowledge_welding + autocvar_g_start_knowledge_welding;
		player.start_knowledge_welding = player.start_knowledge_welding + autocvar_g_start_knowledge_welding;
	}
	
	if (autocvar_g_start_knowledge_concrete) { 
		player.knowledge_concrete = player.knowledge_concrete + autocvar_g_start_knowledge_concrete;
		player.start_knowledge_concrete = player.start_knowledge_concrete + autocvar_g_start_knowledge_concrete;
	}
	
}

void GiveStartSpells_team1 (entity player)
{
	//Maybe the ifs are unnecessary since these will be null if not used
	local float nrmlzlvl;
	nrmlzlvl = 0;

	if (autocvar_g_start_spell_team1_agency) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_agency);
		player.spell_agency = player.spell_agency + nrmlzlvl + autocvar_g_start_spell_team1_agency;
		player.start_spell_agency = player.start_spell_agency + nrmlzlvl + autocvar_g_start_spell_team1_agency;
	}

	if (autocvar_g_start_spell_team1_death) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_death);
		player.spell_death = player.spell_death + nrmlzlvl + autocvar_g_start_spell_team1_death;
		player.start_spell_death = player.start_spell_death + nrmlzlvl + autocvar_g_start_spell_team1_death;

	}

	if (autocvar_g_start_spell_team1_drainlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_drainlife);
		player.spell_drainlife = player.spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team1_drainlife;
		player.start_spell_drainlife = player.start_spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team1_drainlife;
	}
	
	if (autocvar_g_start_spell_team1_cancellation) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_cancellation);
		player.spell_cancellation = player.spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team1_cancellation;
		player.start_spell_cancellation = player.start_spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team1_cancellation;
	}
	
	if (autocvar_g_start_spell_team1_castfromlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_castfromlife);
		player.spell_castfromlife = player.spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team1_castfromlife;
		player.start_spell_castfromlife = player.start_spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team1_castfromlife;
	}

	if (autocvar_g_start_spell_team1_confer) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_confer);
		player.spell_confer = player.spell_confer + nrmlzlvl + autocvar_g_start_spell_team1_confer;
		player.start_spell_confer = player.start_spell_confer + nrmlzlvl + autocvar_g_start_spell_team1_confer;
	}

	if (autocvar_g_start_spell_team1_iceball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_iceball);
		player.spell_iceball = player.spell_iceball + nrmlzlvl + autocvar_g_start_spell_team1_iceball;
		player.start_spell_iceball = player.start_spell_iceball + nrmlzlvl + autocvar_g_start_spell_team1_iceball;
	}

	if (autocvar_g_start_spell_team1_icestar) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_icestar);
		player.spell_icestar = player.spell_icestar + nrmlzlvl + autocvar_g_start_spell_team1_icestar;
		player.start_spell_icestar = player.start_spell_icestar + nrmlzlvl + autocvar_g_start_spell_team1_icestar;
	}

	if (autocvar_g_start_spell_team1_aquacaelestis) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_aquacaelestis);
		player.spell_aquacaelestis = player.spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team1_aquacaelestis;
		player.start_spell_aquacaelestis = player.start_spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team1_aquacaelestis;
	}

	if (autocvar_g_start_spell_team1_nivosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_nivosus);
		player.spell_nivosus = player.spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team1_nivosus;
		player.start_spell_nivosus = player.start_spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team1_nivosus;
	}

	if (autocvar_g_start_spell_team1_rosa) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_rosa);
		player.spell_rosa = player.spell_rosa + nrmlzlvl + autocvar_g_start_spell_team1_rosa;
		player.start_spell_rosa = player.start_spell_rosa + nrmlzlvl + autocvar_g_start_spell_team1_rosa;
	}

	if (autocvar_g_start_spell_team1_corvuspenna) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_corvuspenna);
		player.spell_corvuspenna = player.spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team1_corvuspenna;
		player.start_spell_corvuspenna = player.start_spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team1_corvuspenna;
	}

	if (autocvar_g_start_spell_team1_plumosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_plumosus);
		player.spell_plumosus = player.spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team1_plumosus;
		player.start_spell_plumosus = player.start_spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team1_plumosus;
	}

	if (autocvar_g_start_spell_team1_firebolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebolt);
		player.spell_firebolt = player.spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team1_firebolt;
		player.start_spell_firebolt = player.start_spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team1_firebolt;
	}

	if (autocvar_g_start_spell_team1_fireball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_fireball);
		player.spell_fireball = player.spell_fireball + nrmlzlvl + autocvar_g_start_spell_team1_fireball;
		player.start_spell_fireball = player.start_spell_fireball + nrmlzlvl + autocvar_g_start_spell_team1_fireball;
	}

	if (autocvar_g_start_spell_team1_magmasphere) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magmasphere);
		player.spell_magmasphere = player.spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team1_magmasphere;
		player.start_spell_magmasphere = player.start_spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team1_magmasphere;
	}

	if (autocvar_g_start_spell_team1_firebeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebeam);
		player.spell_firebeam = player.spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team1_firebeam;
		player.start_spell_firebeam = player.start_spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team1_firebeam;
	}

	if (autocvar_g_start_spell_team1_inferno) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_inferno);
		player.spell_inferno = player.spell_inferno + nrmlzlvl + autocvar_g_start_spell_team1_inferno;
		player.start_spell_inferno = player.start_spell_inferno + nrmlzlvl + autocvar_g_start_spell_team1_inferno;
	}

	if (autocvar_g_start_spell_team1_firewall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firewall);
		player.spell_firewall = player.spell_firewall + nrmlzlvl + autocvar_g_start_spell_team1_firewall;
		player.start_spell_firewall = player.start_spell_firewall + nrmlzlvl + autocvar_g_start_spell_team1_firewall;
	}

	if (autocvar_g_start_spell_team1_lightiningwall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningwall);
		player.spell_lightiningwall = player.spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team1_lightiningwall;
		player.start_spell_lightiningwall = player.start_spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team1_lightiningwall;
	}
	
	if (autocvar_g_start_spell_team1_scepterofflame) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_scepterofflame);
		player.spell_scepterofflame = player.spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team1_scepterofflame;
		player.start_spell_scepterofflame = player.start_spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team1_scepterofflame;
	}
	
	if (autocvar_g_start_spell_team1_explosion) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_explosion);
		player.spell_explosion = player.spell_explosion + nrmlzlvl + autocvar_g_start_spell_team1_explosion;
		player.start_spell_explosion = player.start_spell_explosion + nrmlzlvl + autocvar_g_start_spell_team1_explosion;
	}
	
	if (autocvar_g_start_spell_team1_phantasmalbarrier) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_phantasmalbarrier);
		player.spell_phantasmalbarrier = player.spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team1_phantasmalbarrier;
		player.start_spell_phantasmalbarrier = player.start_spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team1_phantasmalbarrier;
	}

	if (autocvar_g_start_spell_team1_raiseundead) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_raiseundead);
		player.spell_raiseundead = player.spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team1_raiseundead;
		player.start_spell_raiseundead = player.start_spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team1_raiseundead;
	}

	if (autocvar_g_start_spell_team1_flameburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_flameburst);
		player.spell_flameburst = player.spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team1_flameburst;
		player.start_spell_flameburst = player.start_spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team1_flameburst;
	}

	if (autocvar_g_start_spell_team1_firecentury) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firecentury);
		player.spell_firecentury = player.spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team1_firecentury;
		player.start_spell_firecentury = player.start_spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team1_firecentury;
	}

	if (autocvar_g_start_spell_team1_frostbeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_frostbeam);
		player.spell_frostbeam = player.spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team1_frostbeam;
		player.start_spell_frostbeam = player.start_spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team1_frostbeam;
	}

	if (autocvar_g_start_spell_team1_grace) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_grace);
		player.spell_grace = player.spell_grace + nrmlzlvl + autocvar_g_start_spell_team1_grace;
		player.start_spell_grace = player.start_spell_grace + nrmlzlvl + autocvar_g_start_spell_team1_grace;
	}

	if (autocvar_g_start_spell_team1_holybolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holybolt);
		player.spell_holybolt = player.spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team1_holybolt;
		player.start_spell_holybolt = player.start_spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team1_holybolt;
	}

	if (autocvar_g_start_spell_team1_holylight) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holylight);
		player.spell_holylight = player.spell_holylight + nrmlzlvl + autocvar_g_start_spell_team1_holylight;
		player.start_spell_holylight = player.start_spell_holylight + nrmlzlvl + autocvar_g_start_spell_team1_holylight;
	}

	if (autocvar_g_start_spell_team1_acervilux) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_acervilux);
		player.spell_acervilux = player.spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team1_acervilux;
		player.start_spell_acervilux = player.start_spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team1_acervilux;
	}
	
	if (autocvar_g_start_spell_team1_heal) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_heal);
		player.spell_heal = player.spell_heal + nrmlzlvl + autocvar_g_start_spell_team1_heal;
		player.start_spell_heal = player.start_spell_heal + nrmlzlvl + autocvar_g_start_spell_team1_heal;
	}
	
	if (autocvar_g_start_spell_team1_repair) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_repair);
		player.spell_repair = player.spell_repair + nrmlzlvl + autocvar_g_start_spell_team1_repair;
		player.start_spell_repair = player.start_spell_repair + nrmlzlvl + autocvar_g_start_spell_team1_repair;
	}
	
	if (autocvar_g_start_spell_team1_holyword) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holyword);
		player.spell_holyword = player.spell_holyword + nrmlzlvl + autocvar_g_start_spell_team1_holyword;
		player.start_spell_holyword = player.start_spell_holyword + nrmlzlvl + autocvar_g_start_spell_team1_holyword;
	}
	
	if (autocvar_g_start_spell_team1_extinguish) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_extinguish);
		player.spell_extinguish = player.spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team1_extinguish;
		player.start_spell_extinguish = player.start_spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team1_extinguish;
	}
	
	if (autocvar_g_start_spell_team1_darkritual) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_darkritual);
		player.spell_darkritual = player.spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team1_darkritual;
		player.start_spell_darkritual = player.start_spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team1_darkritual;
	}

	if (autocvar_g_start_spell_team1_lightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightining);
		player.spell_lightining = player.spell_lightining + nrmlzlvl + autocvar_g_start_spell_team1_lightining; 
		player.start_spell_lightining = player.start_spell_lightining + nrmlzlvl + autocvar_g_start_spell_team1_lightining;
	}
	
	if (autocvar_g_start_spell_team1_balllightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_balllightining);
		player.spell_balllightining = player.spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team1_balllightining;
		player.start_spell_balllightining = player.start_spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team1_balllightining;
	}

	if (autocvar_g_start_spell_team1_chainlightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chainlightining);
		player.spell_chainlightining = player.spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team1_chainlightining; 
		player.start_spell_chainlightining = player.start_spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team1_chainlightining;
	}
	
	if (autocvar_g_start_spell_team1_lightiningburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningburst);
		player.spell_lightiningburst = player.spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team1_lightiningburst;
		player.start_spell_lightiningburst = player.start_spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team1_lightiningburst;
	}

	if (autocvar_g_start_spell_team1_chargedbolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chargedbolt);
		player.spell_chargedbolt = player.spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team1_chargedbolt; 
		player.start_spell_chargedbolt = player.start_spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team1_chargedbolt;
	}
	
	if (autocvar_g_start_spell_team1_lightiningstrike) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningstrike);
		player.spell_lightiningstrike = player.spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team1_lightiningstrike; 
		player.start_spell_lightiningstrike = player.start_spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team1_lightiningstrike;
	}

	if (autocvar_g_start_spell_team1_monstertomonolith) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomonolith);
		player.spell_monstertomonolith = player.spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team1_monstertomonolith;
		player.start_spell_monstertomonolith = player.start_spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team1_monstertomonolith;
	}

	if (autocvar_g_start_spell_team1_monstertomouse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomouse);
		player.spell_monstertomouse = player.spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team1_monstertomouse;
		player.start_spell_monstertomouse = player.start_spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team1_monstertomouse;
	}
	
	if (autocvar_g_start_spell_team1_manashield) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_manashield);
		player.spell_manashield = player.spell_manashield + nrmlzlvl + autocvar_g_start_spell_team1_manashield;
		player.start_spell_manashield = player.start_spell_manashield + nrmlzlvl + autocvar_g_start_spell_team1_manashield;
	}
	
	if (autocvar_g_start_spell_team1_clairvoyance) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_clairvoyance);
		player.spell_clairvoyance = player.spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team1_clairvoyance;
		player.start_spell_clairvoyance = player.start_spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team1_clairvoyance;
	}
	
	if (autocvar_g_start_spell_team1_magicbullets) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicbullets);
		player.spell_magicbullets = player.spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team1_magicbullets;
		player.start_spell_magicbullets = player.start_spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team1_magicbullets;
	}

	if (autocvar_g_start_spell_team1_magicmissile) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicmissile);
		player.spell_magicmissile = player.spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team1_magicmissile;
		player.start_spell_magicmissile = player.start_spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team1_magicmissile;
	}

	if (autocvar_g_start_spell_team1_meteor) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteor);
		player.spell_meteor = player.spell_meteor + nrmlzlvl + autocvar_g_start_spell_team1_meteor;
		player.start_spell_meteor = player.start_spell_meteor + nrmlzlvl + autocvar_g_start_spell_team1_meteor;
	}

	if (autocvar_g_start_spell_team1_meteorshower) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteorshower);
		player.spell_meteorshower = player.spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team1_meteorshower;
		player.start_spell_meteorshower = player.start_spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team1_meteorshower;
	}

	if (autocvar_g_start_spell_team1_mimic) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_mimic);
		player.spell_mimic = player.spell_mimic + nrmlzlvl + autocvar_g_start_spell_team1_mimic;	
		player.start_spell_mimic = player.start_spell_mimic + nrmlzlvl + autocvar_g_start_spell_team1_mimic;
	}

	if (autocvar_g_start_spell_team1_paralyse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_paralyse);
		player.spell_paralyse = player.spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team1_paralyse;
		player.start_spell_paralyse = player.start_spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team1_paralyse;
	}

	if (autocvar_g_start_spell_team1_ringoffire) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_ringoffire);
		player.spell_ringoffire = player.spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team1_ringoffire;
		player.start_spell_ringoffire = player.start_spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team1_ringoffire;
	}

	if (autocvar_g_start_spell_team1_stonecurse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonecurse);
		player.spell_stonecurse = player.spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team1_stonecurse;
		player.start_spell_stonecurse = player.start_spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team1_stonecurse;
	}
	
	if (autocvar_g_start_spell_team1_stonerain) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonerain);
		player.spell_stonerain = player.spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team1_stonerain;
		player.start_spell_stonerain = player.start_spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team1_stonerain;
	}
	
	if (autocvar_g_start_spell_team1_timesink) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_timesink);
		player.spell_timesink = player.spell_timesink + nrmlzlvl + autocvar_g_start_spell_team1_timesink;
		player.start_spell_timesink = player.start_spell_timesink + nrmlzlvl + autocvar_g_start_spell_team1_timesink;
	}
	
	if (autocvar_g_start_spell_team1_vampyricconduit) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_vampyricconduit);
		player.spell_vampyricconduit = player.spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team1_vampyricconduit;
		player.start_spell_vampyricconduit = player.start_spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team1_vampyricconduit;
	}
	
	//Knowledge
	if (autocvar_g_start_knowledge_team1_carpentry) { 
		player.knowledge_carpentry = player.knowledge_carpentry + autocvar_g_start_knowledge_team1_carpentry;
		player.start_knowledge_carpentry = player.start_knowledge_carpentry + autocvar_g_start_knowledge_team1_carpentry;
	}
	
	if (autocvar_g_start_knowledge_team1_mortise) { 
		player.knowledge_mortise = player.knowledge_mortise + autocvar_g_start_knowledge_team1_mortise;
		player.start_knowledge_mortise = player.start_knowledge_mortise + autocvar_g_start_knowledge_team1_mortise;
	}
	
	if (autocvar_g_start_knowledge_team1_stonemasonry) { 
		player.knowledge_stonemasonry = player.knowledge_stonemasonry + autocvar_g_start_knowledge_team1_stonemasonry;
		player.start_knowledge_stonemasonry = player.start_knowledge_stonemasonry + autocvar_g_start_knowledge_team1_stonemasonry;
	}
	
	if (autocvar_g_start_knowledge_team1_ironworking) { 
		player.knowledge_ironworking = player.knowledge_ironworking + autocvar_g_start_knowledge_team1_ironworking;
		player.start_knowledge_ironworking = player.start_knowledge_ironworking + autocvar_g_start_knowledge_team1_ironworking;
	}
	
	if (autocvar_g_start_knowledge_team1_arch) { 
		player.knowledge_arch = player.knowledge_arch + autocvar_g_start_knowledge_team1_arch;
		player.start_knowledge_arch = player.start_knowledge_arch + autocvar_g_start_knowledge_team1_arch;
	}
	
	if (autocvar_g_start_knowledge_team1_welding) { 
		player.knowledge_welding = player.knowledge_welding + autocvar_g_start_knowledge_team1_welding;
		player.start_knowledge_welding = player.start_knowledge_welding + autocvar_g_start_knowledge_team1_welding;
	}
	
	if (autocvar_g_start_knowledge_team1_concrete) { 
		player.knowledge_concrete = player.knowledge_concrete + autocvar_g_start_knowledge_team1_concrete;
		player.start_knowledge_concrete = player.start_knowledge_concrete + autocvar_g_start_knowledge_team1_concrete;
	}
	
}

void GiveStartSpells_team2 (entity player)
{
	//Maybe the ifs are unnecessary since these will be null if not used
	local float nrmlzlvl;
	nrmlzlvl = 0;
	
	if (autocvar_g_start_spell_team2_agency) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_agency);
		player.spell_agency = player.spell_agency + nrmlzlvl + autocvar_g_start_spell_team2_agency;
		player.start_spell_agency = player.start_spell_agency + nrmlzlvl + autocvar_g_start_spell_team2_agency;
	}

	if (autocvar_g_start_spell_team2_death) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_death);
		player.spell_death = player.spell_death + nrmlzlvl + autocvar_g_start_spell_team2_death;
		player.start_spell_death = player.start_spell_death + nrmlzlvl + autocvar_g_start_spell_team2_death;

	}

	if (autocvar_g_start_spell_team2_drainlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_drainlife);
		player.spell_drainlife = player.spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team2_drainlife;
		player.start_spell_drainlife = player.start_spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team2_drainlife;
	}
	
	if (autocvar_g_start_spell_team2_cancellation) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_cancellation);
		player.spell_cancellation = player.spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team2_cancellation;
		player.start_spell_cancellation = player.start_spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team2_cancellation;
	}
	
	if (autocvar_g_start_spell_team2_castfromlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_castfromlife);
		player.spell_castfromlife = player.spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team2_castfromlife;
		player.start_spell_castfromlife = player.start_spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team2_castfromlife;
	}

	if (autocvar_g_start_spell_team2_confer) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_confer);
		player.spell_confer = player.spell_confer + nrmlzlvl + autocvar_g_start_spell_team2_confer;
		player.start_spell_confer = player.start_spell_confer + nrmlzlvl + autocvar_g_start_spell_team2_confer;
	}

	if (autocvar_g_start_spell_team2_iceball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_iceball);
		player.spell_iceball = player.spell_iceball + nrmlzlvl + autocvar_g_start_spell_team2_iceball;
		player.start_spell_iceball = player.start_spell_iceball + nrmlzlvl + autocvar_g_start_spell_team2_iceball;
	}

	if (autocvar_g_start_spell_team2_icestar) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_icestar);
		player.spell_icestar = player.spell_icestar + nrmlzlvl + autocvar_g_start_spell_team2_icestar;
		player.start_spell_icestar = player.start_spell_icestar + nrmlzlvl + autocvar_g_start_spell_team2_icestar;
	}
	
	if (autocvar_g_start_spell_team2_aquacaelestis) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_aquacaelestis);
		player.spell_aquacaelestis = player.spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team2_aquacaelestis;
		player.start_spell_aquacaelestis = player.start_spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team2_aquacaelestis;
	}

	if (autocvar_g_start_spell_team2_nivosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_nivosus);
		player.spell_nivosus = player.spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team2_nivosus;
		player.start_spell_nivosus = player.start_spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team2_nivosus;
	}

	if (autocvar_g_start_spell_team2_rosa) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_rosa);
		player.spell_rosa = player.spell_rosa + nrmlzlvl + autocvar_g_start_spell_team2_rosa;
		player.start_spell_rosa = player.start_spell_rosa + nrmlzlvl + autocvar_g_start_spell_team2_rosa;
	}

	if (autocvar_g_start_spell_team2_corvuspenna) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_corvuspenna);
		player.spell_corvuspenna = player.spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team2_corvuspenna;
		player.start_spell_corvuspenna = player.start_spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team2_corvuspenna;
	}

	if (autocvar_g_start_spell_team2_plumosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_plumosus);
		player.spell_plumosus = player.spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team2_plumosus;
		player.start_spell_plumosus = player.start_spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team2_plumosus;
	}

	if (autocvar_g_start_spell_team2_firebolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebolt);
		player.spell_firebolt = player.spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team2_firebolt;
		player.start_spell_firebolt = player.start_spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team2_firebolt;
	}

	if (autocvar_g_start_spell_team2_fireball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_fireball);
		player.spell_fireball = player.spell_fireball + nrmlzlvl + autocvar_g_start_spell_team2_fireball;
		player.start_spell_fireball = player.start_spell_fireball + nrmlzlvl + autocvar_g_start_spell_team2_fireball;
	}

	if (autocvar_g_start_spell_team2_magmasphere) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magmasphere);
		player.spell_magmasphere = player.spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team2_magmasphere;
		player.start_spell_magmasphere = player.start_spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team2_magmasphere;
	}

	if (autocvar_g_start_spell_team2_firebeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebeam);
		player.spell_firebeam = player.spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team2_firebeam;
		player.start_spell_firebeam = player.start_spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team2_firebeam;
	}

	if (autocvar_g_start_spell_team2_inferno) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_inferno);
		player.spell_inferno = player.spell_inferno + nrmlzlvl + autocvar_g_start_spell_team2_inferno;
		player.start_spell_inferno = player.start_spell_inferno + nrmlzlvl + autocvar_g_start_spell_team2_inferno;
	}

	if (autocvar_g_start_spell_team2_firewall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firewall);
		player.spell_firewall = player.spell_firewall + nrmlzlvl + autocvar_g_start_spell_team2_firewall;
		player.start_spell_firewall = player.start_spell_firewall + nrmlzlvl + autocvar_g_start_spell_team2_firewall;
	}

	if (autocvar_g_start_spell_team2_lightiningwall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningwall);
		player.spell_lightiningwall = player.spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team2_lightiningwall;
		player.start_spell_lightiningwall = player.start_spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team2_lightiningwall;
	}
	
	if (autocvar_g_start_spell_team2_scepterofflame) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_scepterofflame);
		player.spell_scepterofflame = player.spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team2_scepterofflame;
		player.start_spell_scepterofflame = player.start_spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team2_scepterofflame;
	}
	
	if (autocvar_g_start_spell_team2_explosion) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_explosion);
		player.spell_explosion = player.spell_explosion + nrmlzlvl + autocvar_g_start_spell_team2_explosion;
		player.start_spell_explosion = player.start_spell_explosion + nrmlzlvl + autocvar_g_start_spell_team2_explosion;
	}
	
	if (autocvar_g_start_spell_team2_phantasmalbarrier) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_phantasmalbarrier);
		player.spell_phantasmalbarrier = player.spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team2_phantasmalbarrier;
		player.start_spell_phantasmalbarrier = player.start_spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team2_phantasmalbarrier;
	}

	if (autocvar_g_start_spell_team2_raiseundead) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_raiseundead);
		player.spell_raiseundead = player.spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team2_raiseundead;
		player.start_spell_raiseundead = player.start_spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team2_raiseundead;
	}

	if (autocvar_g_start_spell_team2_flameburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_flameburst);
		player.spell_flameburst = player.spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team2_flameburst;
		player.start_spell_flameburst = player.start_spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team2_flameburst;
	}

	if (autocvar_g_start_spell_team2_firecentury) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firecentury);
		player.spell_firecentury = player.spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team2_firecentury;
		player.start_spell_firecentury = player.start_spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team2_firecentury;
	}

	if (autocvar_g_start_spell_team2_frostbeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_frostbeam);
		player.spell_frostbeam = player.spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team2_frostbeam;
		player.start_spell_frostbeam = player.start_spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team2_frostbeam;
	}
	
	if (autocvar_g_start_spell_team2_grace) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_grace);
		player.spell_grace = player.spell_grace + nrmlzlvl + autocvar_g_start_spell_team2_grace;
		player.start_spell_grace = player.start_spell_grace + nrmlzlvl + autocvar_g_start_spell_team2_grace;
	}

	if (autocvar_g_start_spell_team2_holybolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holybolt);
		player.spell_holybolt = player.spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team2_holybolt;
		player.start_spell_holybolt = player.start_spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team2_holybolt;
	}
	
	if (autocvar_g_start_spell_team2_holylight) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holylight);
		player.spell_holylight = player.spell_holylight + nrmlzlvl + autocvar_g_start_spell_team2_holylight;
		player.start_spell_holylight = player.start_spell_holylight + nrmlzlvl + autocvar_g_start_spell_team2_holylight;
	}

	if (autocvar_g_start_spell_team2_acervilux) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_acervilux);
		player.spell_acervilux = player.spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team2_acervilux;
		player.start_spell_acervilux = player.start_spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team2_acervilux;
	}
	
	if (autocvar_g_start_spell_team2_heal) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_heal);
		player.spell_heal = player.spell_heal + nrmlzlvl + autocvar_g_start_spell_team2_heal;
		player.start_spell_heal = player.start_spell_heal + nrmlzlvl + autocvar_g_start_spell_team2_heal;
	}
	
	if (autocvar_g_start_spell_team2_repair) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_repair);
		player.spell_repair = player.spell_repair + nrmlzlvl + autocvar_g_start_spell_team2_repair;
		player.start_spell_repair = player.start_spell_repair + nrmlzlvl + autocvar_g_start_spell_team2_repair;
	}
	
	if (autocvar_g_start_spell_team2_holyword) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holyword);
		player.spell_holyword = player.spell_holyword + nrmlzlvl + autocvar_g_start_spell_team2_holyword;
		player.start_spell_holyword = player.start_spell_holyword + nrmlzlvl + autocvar_g_start_spell_team2_holyword;
	}
	
	if (autocvar_g_start_spell_team2_extinguish) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_extinguish);
		player.spell_extinguish = player.spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team2_extinguish;
		player.start_spell_extinguish = player.start_spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team2_extinguish;
	}
	
	if (autocvar_g_start_spell_team2_darkritual) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_darkritual);
		player.spell_darkritual = player.spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team2_darkritual;
		player.start_spell_darkritual = player.start_spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team2_darkritual;
	}

	if (autocvar_g_start_spell_team2_lightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightining);
		player.spell_lightining = player.spell_lightining + nrmlzlvl + autocvar_g_start_spell_team2_lightining; 
		player.start_spell_lightining = player.start_spell_lightining + nrmlzlvl + autocvar_g_start_spell_team2_lightining;
	}
	
	if (autocvar_g_start_spell_team2_balllightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_balllightining);
		player.spell_balllightining = player.spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team2_balllightining;
		player.start_spell_balllightining = player.start_spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team2_balllightining;
	}

	if (autocvar_g_start_spell_team2_chainlightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chainlightining);
		player.spell_chainlightining = player.spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team2_chainlightining; 
		player.start_spell_chainlightining = player.start_spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team2_chainlightining;
	}
	
	if (autocvar_g_start_spell_team2_lightiningburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningburst);
		player.spell_lightiningburst = player.spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team2_lightiningburst;
		player.start_spell_lightiningburst = player.start_spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team2_lightiningburst;
	}

	if (autocvar_g_start_spell_team2_chargedbolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chargedbolt);
		player.spell_chargedbolt = player.spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team2_chargedbolt; 
		player.start_spell_chargedbolt = player.start_spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team2_chargedbolt;
	}
	
	if (autocvar_g_start_spell_team2_lightiningstrike) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningstrike);
		player.spell_lightiningstrike = player.spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team2_lightiningstrike; 
		player.start_spell_lightiningstrike = player.start_spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team2_lightiningstrike;
	}

	if (autocvar_g_start_spell_team2_monstertomonolith) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomonolith);
		player.spell_monstertomonolith = player.spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team2_monstertomonolith;
		player.start_spell_monstertomonolith = player.start_spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team2_monstertomonolith;
	}

	if (autocvar_g_start_spell_team2_monstertomouse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomouse);
		player.spell_monstertomouse = player.spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team2_monstertomouse;
		player.start_spell_monstertomouse = player.start_spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team2_monstertomouse;
	}
	
	if (autocvar_g_start_spell_team2_manashield) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_manashield);
		player.spell_manashield = player.spell_manashield + nrmlzlvl + autocvar_g_start_spell_team2_manashield;
		player.start_spell_manashield = player.start_spell_manashield + nrmlzlvl + autocvar_g_start_spell_team2_manashield;
	}
	
	if (autocvar_g_start_spell_team2_clairvoyance) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_clairvoyance);
		player.spell_clairvoyance = player.spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team2_clairvoyance;
		player.start_spell_clairvoyance = player.start_spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team2_clairvoyance;
	}
	
	if (autocvar_g_start_spell_team2_magicbullets) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicbullets);
		player.spell_magicbullets = player.spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team2_magicbullets;
		player.start_spell_magicbullets = player.start_spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team2_magicbullets;
	}

	if (autocvar_g_start_spell_team2_magicmissile) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicmissile);
		player.spell_magicmissile = player.spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team2_magicmissile;
		player.start_spell_magicmissile = player.start_spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team2_magicmissile;
	}

	if (autocvar_g_start_spell_team2_meteor) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteor);
		player.spell_meteor = player.spell_meteor + nrmlzlvl + autocvar_g_start_spell_team2_meteor;
		player.start_spell_meteor = player.start_spell_meteor + nrmlzlvl + autocvar_g_start_spell_team2_meteor;
	}

	if (autocvar_g_start_spell_team2_meteorshower) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteorshower);
		player.spell_meteorshower = player.spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team2_meteorshower;
		player.start_spell_meteorshower = player.start_spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team2_meteorshower;
	}

	if (autocvar_g_start_spell_team2_mimic) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_mimic);
		player.spell_mimic = player.spell_mimic + nrmlzlvl + autocvar_g_start_spell_team2_mimic;	
		player.start_spell_mimic = player.start_spell_mimic + nrmlzlvl + autocvar_g_start_spell_team2_mimic;
	}

	if (autocvar_g_start_spell_team2_paralyse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_paralyse);
		player.spell_paralyse = player.spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team2_paralyse;
		player.start_spell_paralyse = player.start_spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team2_paralyse;
	}

	if (autocvar_g_start_spell_team2_ringoffire) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_ringoffire);
		player.spell_ringoffire = player.spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team2_ringoffire;
		player.start_spell_ringoffire = player.start_spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team2_ringoffire;
	}

	if (autocvar_g_start_spell_team2_stonecurse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonecurse);
		player.spell_stonecurse = player.spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team2_stonecurse;
		player.start_spell_stonecurse = player.start_spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team2_stonecurse;
	}
	
	if (autocvar_g_start_spell_team2_stonerain) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonerain);
		player.spell_stonerain = player.spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team2_stonerain;
		player.start_spell_stonerain = player.start_spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team2_stonerain;
	}
	
	if (autocvar_g_start_spell_team2_timesink) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_timesink);
		player.spell_timesink = player.spell_timesink + nrmlzlvl + autocvar_g_start_spell_team2_timesink;
		player.start_spell_timesink = player.start_spell_timesink + nrmlzlvl + autocvar_g_start_spell_team2_timesink;
	}
	
	if (autocvar_g_start_spell_team2_vampyricconduit) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_vampyricconduit);
		player.spell_vampyricconduit = player.spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team2_vampyricconduit;
		player.start_spell_vampyricconduit = player.start_spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team2_vampyricconduit;
	}
	
	//Knowledge
	if (autocvar_g_start_knowledge_team2_carpentry) { 
		player.knowledge_carpentry = player.knowledge_carpentry + autocvar_g_start_knowledge_team2_carpentry;
		player.start_knowledge_carpentry = player.start_knowledge_carpentry + autocvar_g_start_knowledge_team2_carpentry;
	}
	
	if (autocvar_g_start_knowledge_team2_mortise) { 
		player.knowledge_mortise = player.knowledge_mortise + autocvar_g_start_knowledge_team2_mortise;
		player.start_knowledge_mortise = player.start_knowledge_mortise + autocvar_g_start_knowledge_team2_mortise;
	}
	
	if (autocvar_g_start_knowledge_team2_stonemasonry) { 
		player.knowledge_stonemasonry = player.knowledge_stonemasonry + autocvar_g_start_knowledge_team2_stonemasonry;
		player.start_knowledge_stonemasonry = player.start_knowledge_stonemasonry + autocvar_g_start_knowledge_team2_stonemasonry;
	}
	
	if (autocvar_g_start_knowledge_team2_ironworking) { 
		player.knowledge_ironworking = player.knowledge_ironworking + autocvar_g_start_knowledge_team2_ironworking;
		player.start_knowledge_ironworking = player.start_knowledge_ironworking + autocvar_g_start_knowledge_team2_ironworking;
	}
	
	if (autocvar_g_start_knowledge_team2_arch) { 
		player.knowledge_arch = player.knowledge_arch + autocvar_g_start_knowledge_team2_arch;
		player.start_knowledge_arch = player.start_knowledge_arch + autocvar_g_start_knowledge_team2_arch;
	}
	
	if (autocvar_g_start_knowledge_team2_welding) { 
		player.knowledge_welding = player.knowledge_welding + autocvar_g_start_knowledge_team2_welding;
		player.start_knowledge_welding = player.start_knowledge_welding + autocvar_g_start_knowledge_team2_welding;
	}
	
	if (autocvar_g_start_knowledge_team2_concrete) { 
		player.knowledge_concrete = player.knowledge_concrete + autocvar_g_start_knowledge_team2_concrete;
		player.start_knowledge_concrete = player.start_knowledge_concrete + autocvar_g_start_knowledge_team2_concrete;
	}
	
}

void GiveStartSpells_team3 (entity player)
{
	//Maybe the ifs are unnecessary since these will be null if not used
	local float nrmlzlvl;
	nrmlzlvl = 0;
	
	if (autocvar_g_start_spell_team3_agency) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_agency);
		player.spell_agency = player.spell_agency + nrmlzlvl + autocvar_g_start_spell_team3_agency;
		player.start_spell_agency = player.start_spell_agency + nrmlzlvl + autocvar_g_start_spell_team3_agency;
	}

	if (autocvar_g_start_spell_team3_death) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_death);
		player.spell_death = player.spell_death + nrmlzlvl + autocvar_g_start_spell_team3_death;
		player.start_spell_death = player.start_spell_death + nrmlzlvl + autocvar_g_start_spell_team3_death;

	}

	if (autocvar_g_start_spell_team3_drainlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_drainlife);
		player.spell_drainlife = player.spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team3_drainlife;
		player.start_spell_drainlife = player.start_spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team3_drainlife;
	}
	
	if (autocvar_g_start_spell_team3_cancellation) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_cancellation);
		player.spell_cancellation = player.spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team3_cancellation;
		player.start_spell_cancellation = player.start_spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team3_cancellation;
	}
	
	if (autocvar_g_start_spell_team3_castfromlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_castfromlife);
		player.spell_castfromlife = player.spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team3_castfromlife;
		player.start_spell_castfromlife = player.start_spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team3_castfromlife;
	}

	if (autocvar_g_start_spell_team3_confer) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_confer);
		player.spell_confer = player.spell_confer + nrmlzlvl + autocvar_g_start_spell_team3_confer;
		player.start_spell_confer = player.start_spell_confer + nrmlzlvl + autocvar_g_start_spell_team3_confer;
	}

	if (autocvar_g_start_spell_team3_iceball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_iceball);
		player.spell_iceball = player.spell_iceball + nrmlzlvl + autocvar_g_start_spell_team3_iceball;
		player.start_spell_iceball = player.start_spell_iceball + nrmlzlvl + autocvar_g_start_spell_team3_iceball;
	}

	if (autocvar_g_start_spell_team3_icestar) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_icestar);
		player.spell_icestar = player.spell_icestar + nrmlzlvl + autocvar_g_start_spell_team3_icestar;
		player.start_spell_icestar = player.start_spell_icestar + nrmlzlvl + autocvar_g_start_spell_team3_icestar;
	}
	
	if (autocvar_g_start_spell_team3_aquacaelestis) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_aquacaelestis);
		player.spell_aquacaelestis = player.spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team3_aquacaelestis;
		player.start_spell_aquacaelestis = player.start_spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team3_aquacaelestis;
	}

	if (autocvar_g_start_spell_team3_nivosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_nivosus);
		player.spell_nivosus = player.spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team3_nivosus;
		player.start_spell_nivosus = player.start_spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team3_nivosus;
	}

	if (autocvar_g_start_spell_team3_rosa) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_rosa);
		player.spell_rosa = player.spell_rosa + nrmlzlvl + autocvar_g_start_spell_team3_rosa;
		player.start_spell_rosa = player.start_spell_rosa + nrmlzlvl + autocvar_g_start_spell_team3_rosa;
	}

	if (autocvar_g_start_spell_team3_corvuspenna) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_corvuspenna);
		player.spell_corvuspenna = player.spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team3_corvuspenna;
		player.start_spell_corvuspenna = player.start_spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team3_corvuspenna;
	}

	if (autocvar_g_start_spell_team3_plumosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_plumosus);
		player.spell_plumosus = player.spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team3_plumosus;
		player.start_spell_plumosus = player.start_spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team3_plumosus;
	}

	if (autocvar_g_start_spell_team3_firebolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebolt);
		player.spell_firebolt = player.spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team3_firebolt;
		player.start_spell_firebolt = player.start_spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team3_firebolt;
	}

	if (autocvar_g_start_spell_team3_fireball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_fireball);
		player.spell_fireball = player.spell_fireball + nrmlzlvl + autocvar_g_start_spell_team3_fireball;
		player.start_spell_fireball = player.start_spell_fireball + nrmlzlvl + autocvar_g_start_spell_team3_fireball;
	}

	if (autocvar_g_start_spell_team3_magmasphere) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magmasphere);
		player.spell_magmasphere = player.spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team3_magmasphere;
		player.start_spell_magmasphere = player.start_spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team3_magmasphere;
	}

	if (autocvar_g_start_spell_team3_firebeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebeam);
		player.spell_firebeam = player.spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team3_firebeam;
		player.start_spell_firebeam = player.start_spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team3_firebeam;
	}

	if (autocvar_g_start_spell_team3_inferno) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_inferno);
		player.spell_inferno = player.spell_inferno + nrmlzlvl + autocvar_g_start_spell_team3_inferno;
		player.start_spell_inferno = player.start_spell_inferno + nrmlzlvl + autocvar_g_start_spell_team3_inferno;
	}

	if (autocvar_g_start_spell_team3_firewall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firewall);
		player.spell_firewall = player.spell_firewall + nrmlzlvl + autocvar_g_start_spell_team3_firewall;
		player.start_spell_firewall = player.start_spell_firewall + nrmlzlvl + autocvar_g_start_spell_team3_firewall;
	}

	if (autocvar_g_start_spell_team3_lightiningwall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningwall);
		player.spell_lightiningwall = player.spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team3_lightiningwall;
		player.start_spell_lightiningwall = player.start_spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team3_lightiningwall;
	}
	
	if (autocvar_g_start_spell_team3_scepterofflame) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_scepterofflame);
		player.spell_scepterofflame = player.spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team3_scepterofflame;
		player.start_spell_scepterofflame = player.start_spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team3_scepterofflame;
	}
	
	if (autocvar_g_start_spell_team3_explosion) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_explosion);
		player.spell_explosion = player.spell_explosion + nrmlzlvl + autocvar_g_start_spell_team3_explosion;
		player.start_spell_explosion = player.start_spell_explosion + nrmlzlvl + autocvar_g_start_spell_team3_explosion;
	}
	
	if (autocvar_g_start_spell_team3_phantasmalbarrier) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_phantasmalbarrier);
		player.spell_phantasmalbarrier = player.spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team3_phantasmalbarrier;
		player.start_spell_phantasmalbarrier = player.start_spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team3_phantasmalbarrier;
	}

	if (autocvar_g_start_spell_team3_raiseundead) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_raiseundead);
		player.spell_raiseundead = player.spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team3_raiseundead;
		player.start_spell_raiseundead = player.start_spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team3_raiseundead;
	}

	if (autocvar_g_start_spell_team3_flameburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_flameburst);
		player.spell_flameburst = player.spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team3_flameburst;
		player.start_spell_flameburst = player.start_spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team3_flameburst;
	}

	if (autocvar_g_start_spell_team3_firecentury) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firecentury);
		player.spell_firecentury = player.spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team3_firecentury;
		player.start_spell_firecentury = player.start_spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team3_firecentury;
	}

	if (autocvar_g_start_spell_team3_frostbeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_frostbeam);
		player.spell_frostbeam = player.spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team3_frostbeam;
		player.start_spell_frostbeam = player.start_spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team3_frostbeam;
	}

	if (autocvar_g_start_spell_team3_grace) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_grace);
		player.spell_grace = player.spell_grace + nrmlzlvl + autocvar_g_start_spell_team3_grace;
		player.start_spell_grace = player.start_spell_grace + nrmlzlvl + autocvar_g_start_spell_team3_grace;
	}

	if (autocvar_g_start_spell_team3_holybolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holybolt);
		player.spell_holybolt = player.spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team3_holybolt;
		player.start_spell_holybolt = player.start_spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team3_holybolt;
	}
	
	if (autocvar_g_start_spell_team3_holylight) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holylight);
		player.spell_holylight = player.spell_holylight + nrmlzlvl + autocvar_g_start_spell_team3_holylight;
		player.start_spell_holylight = player.start_spell_holylight + nrmlzlvl + autocvar_g_start_spell_team3_holylight;
	}

	if (autocvar_g_start_spell_team3_acervilux) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_acervilux);
		player.spell_acervilux = player.spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team3_acervilux;
		player.start_spell_acervilux = player.start_spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team3_acervilux;
	}

	if (autocvar_g_start_spell_team3_heal) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_heal);
		player.spell_heal = player.spell_heal + nrmlzlvl + autocvar_g_start_spell_team3_heal;
		player.start_spell_heal = player.start_spell_heal + nrmlzlvl + autocvar_g_start_spell_team3_heal;
	}
	
	if (autocvar_g_start_spell_team3_repair) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_repair);
		player.spell_repair = player.spell_repair + nrmlzlvl + autocvar_g_start_spell_team3_repair;
		player.start_spell_repair = player.start_spell_repair + nrmlzlvl + autocvar_g_start_spell_team3_repair;
	}
	
	if (autocvar_g_start_spell_team3_holyword) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holyword);
		player.spell_holyword = player.spell_holyword + nrmlzlvl + autocvar_g_start_spell_team3_holyword;
		player.start_spell_holyword = player.start_spell_holyword + nrmlzlvl + autocvar_g_start_spell_team3_holyword;
	}
	
	if (autocvar_g_start_spell_team3_extinguish) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_extinguish);
		player.spell_extinguish = player.spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team3_extinguish;
		player.start_spell_extinguish = player.start_spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team3_extinguish;
	}
	
	if (autocvar_g_start_spell_team3_darkritual) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_darkritual);
		player.spell_darkritual = player.spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team3_darkritual;
		player.start_spell_darkritual = player.start_spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team3_darkritual;
	}

	if (autocvar_g_start_spell_team3_lightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightining);
		player.spell_lightining = player.spell_lightining + nrmlzlvl + autocvar_g_start_spell_team3_lightining; 
		player.start_spell_lightining = player.start_spell_lightining + nrmlzlvl + autocvar_g_start_spell_team3_lightining;
	}
	
	if (autocvar_g_start_spell_team3_balllightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_balllightining);
		player.spell_balllightining = player.spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team3_balllightining;
		player.start_spell_balllightining = player.start_spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team3_balllightining;
	}

	if (autocvar_g_start_spell_team3_chainlightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chainlightining);
		player.spell_chainlightining = player.spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team3_chainlightining; 
		player.start_spell_chainlightining = player.start_spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team3_chainlightining;
	}
	
	if (autocvar_g_start_spell_team3_lightiningburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningburst);
		player.spell_lightiningburst = player.spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team3_lightiningburst;
		player.start_spell_lightiningburst = player.start_spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team3_lightiningburst;
	}

	if (autocvar_g_start_spell_team3_chargedbolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chargedbolt);
		player.spell_chargedbolt = player.spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team3_chargedbolt; 
		player.start_spell_chargedbolt = player.start_spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team3_chargedbolt;
	}
	
	if (autocvar_g_start_spell_team3_lightiningstrike) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningstrike);
		player.spell_lightiningstrike = player.spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team3_lightiningstrike; 
		player.start_spell_lightiningstrike = player.start_spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team3_lightiningstrike;
	}

	if (autocvar_g_start_spell_team3_monstertomonolith) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomonolith);
		player.spell_monstertomonolith = player.spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team3_monstertomonolith;
		player.start_spell_monstertomonolith = player.start_spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team3_monstertomonolith;
	}

	if (autocvar_g_start_spell_team3_monstertomouse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomouse);
		player.spell_monstertomouse = player.spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team3_monstertomouse;
		player.start_spell_monstertomouse = player.start_spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team3_monstertomouse;
	}
	
	if (autocvar_g_start_spell_team3_manashield) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_manashield);
		player.spell_manashield = player.spell_manashield + nrmlzlvl + autocvar_g_start_spell_team3_manashield;
		player.start_spell_manashield = player.start_spell_manashield + nrmlzlvl + autocvar_g_start_spell_team3_manashield;
	}
	
	if (autocvar_g_start_spell_team3_clairvoyance) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_clairvoyance);
		player.spell_clairvoyance = player.spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team3_clairvoyance;
		player.start_spell_clairvoyance = player.start_spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team3_clairvoyance;
	}
	
	if (autocvar_g_start_spell_team3_magicbullets) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicbullets);
		player.spell_magicbullets = player.spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team3_magicbullets;
		player.start_spell_magicbullets = player.start_spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team3_magicbullets;
	}
	
	if (autocvar_g_start_spell_team3_magicmissile) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicmissile);
		player.spell_magicmissile = player.spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team3_magicmissile;
		player.start_spell_magicmissile = player.start_spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team3_magicmissile;
	}

	if (autocvar_g_start_spell_team3_meteor) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteor);
		player.spell_meteor = player.spell_meteor + nrmlzlvl + autocvar_g_start_spell_team3_meteor;
		player.start_spell_meteor = player.start_spell_meteor + nrmlzlvl + autocvar_g_start_spell_team3_meteor;
	}

	if (autocvar_g_start_spell_team3_meteorshower) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteorshower);
		player.spell_meteorshower = player.spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team3_meteorshower;
		player.start_spell_meteorshower = player.start_spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team3_meteorshower;
	}

	if (autocvar_g_start_spell_team3_mimic) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_mimic);
		player.spell_mimic = player.spell_mimic + nrmlzlvl + autocvar_g_start_spell_team3_mimic;	
		player.start_spell_mimic = player.start_spell_mimic + nrmlzlvl + autocvar_g_start_spell_team3_mimic;
	}

	if (autocvar_g_start_spell_team3_paralyse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_paralyse);
		player.spell_paralyse = player.spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team3_paralyse;
		player.start_spell_paralyse = player.start_spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team3_paralyse;
	}

	if (autocvar_g_start_spell_team3_ringoffire) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_ringoffire);
		player.spell_ringoffire = player.spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team3_ringoffire;
		player.start_spell_ringoffire = player.start_spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team3_ringoffire;
	}

	if (autocvar_g_start_spell_team3_stonecurse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonecurse);
		player.spell_stonecurse = player.spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team3_stonecurse;
		player.start_spell_stonecurse = player.start_spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team3_stonecurse;
	}
	
	if (autocvar_g_start_spell_team3_stonerain) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonerain);
		player.spell_stonerain = player.spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team3_stonerain;
		player.start_spell_stonerain = player.start_spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team3_stonerain;
	}
	
	if (autocvar_g_start_spell_team3_timesink) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_timesink);
		player.spell_timesink = player.spell_timesink + nrmlzlvl + autocvar_g_start_spell_team3_timesink;
		player.start_spell_timesink = player.start_spell_timesink + nrmlzlvl + autocvar_g_start_spell_team3_timesink;
	}
	
	if (autocvar_g_start_spell_team3_vampyricconduit) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_vampyricconduit);
		player.spell_vampyricconduit = player.spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team3_vampyricconduit;
		player.start_spell_vampyricconduit = player.start_spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team3_vampyricconduit;
	}
	
	//Knowledge
	if (autocvar_g_start_knowledge_team3_carpentry) { 
		player.knowledge_carpentry = player.knowledge_carpentry + autocvar_g_start_knowledge_team3_carpentry;
		player.start_knowledge_carpentry = player.start_knowledge_carpentry + autocvar_g_start_knowledge_team3_carpentry;
	}
	
	if (autocvar_g_start_knowledge_team3_mortise) { 
		player.knowledge_mortise = player.knowledge_mortise + autocvar_g_start_knowledge_team3_mortise;
		player.start_knowledge_mortise = player.start_knowledge_mortise + autocvar_g_start_knowledge_team3_mortise;
	}
	
	if (autocvar_g_start_knowledge_team3_stonemasonry) { 
		player.knowledge_stonemasonry = player.knowledge_stonemasonry + autocvar_g_start_knowledge_team3_stonemasonry;
		player.start_knowledge_stonemasonry = player.start_knowledge_stonemasonry + autocvar_g_start_knowledge_team3_stonemasonry;
	}
	
	if (autocvar_g_start_knowledge_team3_ironworking) { 
		player.knowledge_ironworking = player.knowledge_ironworking + autocvar_g_start_knowledge_team3_ironworking;
		player.start_knowledge_ironworking = player.start_knowledge_ironworking + autocvar_g_start_knowledge_team3_ironworking;
	}
	
	if (autocvar_g_start_knowledge_team3_arch) { 
		player.knowledge_arch = player.knowledge_arch + autocvar_g_start_knowledge_team3_arch;
		player.start_knowledge_arch = player.start_knowledge_arch + autocvar_g_start_knowledge_team3_arch;
	}
	
	if (autocvar_g_start_knowledge_team3_welding) { 
		player.knowledge_welding = player.knowledge_welding + autocvar_g_start_knowledge_team3_welding;
		player.start_knowledge_welding = player.start_knowledge_welding + autocvar_g_start_knowledge_team3_welding;
	}
	
	if (autocvar_g_start_knowledge_team3_concrete) { 
		player.knowledge_concrete = player.knowledge_concrete + autocvar_g_start_knowledge_team3_concrete;
		player.start_knowledge_concrete = player.start_knowledge_concrete + autocvar_g_start_knowledge_team3_concrete;
	}
	
}

void GiveStartSpells_team4 (entity player)
{
	//Maybe the ifs are unnecessary since these will be null if not used
	local float nrmlzlvl;
	nrmlzlvl = 0;
	
	if (autocvar_g_start_spell_team4_agency) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_agency);
		player.spell_agency = player.spell_agency + nrmlzlvl + autocvar_g_start_spell_team4_agency;
		player.start_spell_agency = player.start_spell_agency + nrmlzlvl + autocvar_g_start_spell_team4_agency;
	}

	if (autocvar_g_start_spell_team4_death) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_death);
		player.spell_death = player.spell_death + nrmlzlvl + autocvar_g_start_spell_team4_death;
		player.start_spell_death = player.start_spell_death + nrmlzlvl + autocvar_g_start_spell_team4_death;

	}

	if (autocvar_g_start_spell_team4_drainlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_drainlife);
		player.spell_drainlife = player.spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team4_drainlife;
		player.start_spell_drainlife = player.start_spell_drainlife + nrmlzlvl + autocvar_g_start_spell_team4_drainlife;
	}
	
	if (autocvar_g_start_spell_team4_cancellation) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_cancellation);
		player.spell_cancellation = player.spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team4_cancellation;
		player.start_spell_cancellation = player.start_spell_cancellation + nrmlzlvl + autocvar_g_start_spell_team4_cancellation;
	}
	
	if (autocvar_g_start_spell_team4_castfromlife) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_castfromlife);
		player.spell_castfromlife = player.spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team4_castfromlife;
		player.start_spell_castfromlife = player.start_spell_castfromlife + nrmlzlvl + autocvar_g_start_spell_team4_castfromlife;
	}

	if (autocvar_g_start_spell_team4_confer) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_confer);
		player.spell_confer = player.spell_confer + nrmlzlvl + autocvar_g_start_spell_team4_confer;
		player.start_spell_confer = player.start_spell_confer + nrmlzlvl + autocvar_g_start_spell_team4_confer;
	}

	if (autocvar_g_start_spell_team4_iceball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_iceball);
		player.spell_iceball = player.spell_iceball + nrmlzlvl + autocvar_g_start_spell_team4_iceball;
		player.start_spell_iceball = player.start_spell_iceball + nrmlzlvl + autocvar_g_start_spell_team4_iceball;
	}

	if (autocvar_g_start_spell_team4_icestar) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_icestar);
		player.spell_icestar = player.spell_icestar + nrmlzlvl + autocvar_g_start_spell_team4_icestar;
		player.start_spell_icestar = player.start_spell_icestar + nrmlzlvl + autocvar_g_start_spell_team4_icestar;
	}
	
	if (autocvar_g_start_spell_team4_aquacaelestis) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_aquacaelestis);
		player.spell_aquacaelestis = player.spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team4_aquacaelestis;
		player.start_spell_aquacaelestis = player.start_spell_aquacaelestis + nrmlzlvl + autocvar_g_start_spell_team4_aquacaelestis;
	}

	if (autocvar_g_start_spell_team4_nivosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_nivosus);
		player.spell_nivosus = player.spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team4_nivosus;
		player.start_spell_nivosus = player.start_spell_nivosus + nrmlzlvl + autocvar_g_start_spell_team4_nivosus;
	}

	if (autocvar_g_start_spell_team4_rosa) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_rosa);
		player.spell_rosa = player.spell_rosa + nrmlzlvl + autocvar_g_start_spell_team4_rosa;
		player.start_spell_rosa = player.start_spell_rosa + nrmlzlvl + autocvar_g_start_spell_team4_rosa;
	}

	if (autocvar_g_start_spell_team4_corvuspenna) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_corvuspenna);
		player.spell_corvuspenna = player.spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team4_corvuspenna;
		player.start_spell_corvuspenna = player.start_spell_corvuspenna + nrmlzlvl + autocvar_g_start_spell_team4_corvuspenna;
	}

	if (autocvar_g_start_spell_team4_plumosus) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_plumosus);
		player.spell_plumosus = player.spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team4_plumosus;
		player.start_spell_plumosus = player.start_spell_plumosus + nrmlzlvl + autocvar_g_start_spell_team4_plumosus;
	}

	if (autocvar_g_start_spell_team4_firebolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebolt);
		player.spell_firebolt = player.spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team4_firebolt;
		player.start_spell_firebolt = player.start_spell_firebolt + nrmlzlvl + autocvar_g_start_spell_team4_firebolt;
	}

	if (autocvar_g_start_spell_team4_fireball) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_fireball);
		player.spell_fireball = player.spell_fireball + nrmlzlvl + autocvar_g_start_spell_team4_fireball;
		player.start_spell_fireball = player.start_spell_fireball + nrmlzlvl + autocvar_g_start_spell_team4_fireball;
	}

	if (autocvar_g_start_spell_team4_magmasphere) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magmasphere);
		player.spell_magmasphere = player.spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team4_magmasphere;
		player.start_spell_magmasphere = player.start_spell_magmasphere + nrmlzlvl + autocvar_g_start_spell_team4_magmasphere;
	}

	if (autocvar_g_start_spell_team4_firebeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firebeam);
		player.spell_firebeam = player.spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team4_firebeam;
		player.start_spell_firebeam = player.start_spell_firebeam + nrmlzlvl + autocvar_g_start_spell_team4_firebeam;
	}

	if (autocvar_g_start_spell_team4_inferno) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_inferno);
		player.spell_inferno = player.spell_inferno + nrmlzlvl + autocvar_g_start_spell_team4_inferno;
		player.start_spell_inferno = player.start_spell_inferno + nrmlzlvl + autocvar_g_start_spell_team4_inferno;
	}

	if (autocvar_g_start_spell_team4_firewall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firewall);
		player.spell_firewall = player.spell_firewall + nrmlzlvl + autocvar_g_start_spell_team4_firewall;
		player.start_spell_firewall = player.start_spell_firewall + nrmlzlvl + autocvar_g_start_spell_team4_firewall;
	}

	if (autocvar_g_start_spell_team4_lightiningwall) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningwall);
		player.spell_lightiningwall = player.spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team4_lightiningwall;
		player.start_spell_lightiningwall = player.start_spell_lightiningwall + nrmlzlvl + autocvar_g_start_spell_team4_lightiningwall;
	}
	
	if (autocvar_g_start_spell_team4_scepterofflame) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_scepterofflame);
		player.spell_scepterofflame = player.spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team4_scepterofflame;
		player.start_spell_scepterofflame = player.start_spell_scepterofflame + nrmlzlvl + autocvar_g_start_spell_team4_scepterofflame;
	}
	
	if (autocvar_g_start_spell_team4_explosion) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_explosion);
		player.spell_explosion = player.spell_explosion + nrmlzlvl + autocvar_g_start_spell_team4_explosion;
		player.start_spell_explosion = player.start_spell_explosion + nrmlzlvl + autocvar_g_start_spell_team4_explosion;
	}
	
	if (autocvar_g_start_spell_team4_phantasmalbarrier) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_phantasmalbarrier);
		player.spell_phantasmalbarrier = player.spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team4_phantasmalbarrier;
		player.start_spell_phantasmalbarrier = player.start_spell_phantasmalbarrier + nrmlzlvl + autocvar_g_start_spell_team4_phantasmalbarrier;
	}

	if (autocvar_g_start_spell_team4_raiseundead) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_raiseundead);
		player.spell_raiseundead = player.spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team4_raiseundead;
		player.start_spell_raiseundead = player.start_spell_raiseundead + nrmlzlvl + autocvar_g_start_spell_team4_raiseundead;
	}

	if (autocvar_g_start_spell_team4_flameburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_flameburst);
		player.spell_flameburst = player.spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team4_flameburst;
		player.start_spell_flameburst = player.start_spell_flameburst + nrmlzlvl + autocvar_g_start_spell_team4_flameburst;
	}

	if (autocvar_g_start_spell_team4_firecentury) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_firecentury);
		player.spell_firecentury = player.spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team4_firecentury;
		player.start_spell_firecentury = player.start_spell_firecentury + nrmlzlvl + autocvar_g_start_spell_team4_firecentury;
	}

	if (autocvar_g_start_spell_team4_frostbeam) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_frostbeam);
		player.spell_frostbeam = player.spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team4_frostbeam;
		player.start_spell_frostbeam = player.start_spell_frostbeam + nrmlzlvl + autocvar_g_start_spell_team4_frostbeam;
	}

	if (autocvar_g_start_spell_team4_grace) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_grace);
		player.spell_grace = player.spell_grace + nrmlzlvl + autocvar_g_start_spell_team4_grace;
		player.start_spell_grace = player.start_spell_grace + nrmlzlvl + autocvar_g_start_spell_team4_grace;
	}

	if (autocvar_g_start_spell_team4_holybolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holybolt);
		player.spell_holybolt = player.spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team4_holybolt;
		player.start_spell_holybolt = player.start_spell_holybolt + nrmlzlvl + autocvar_g_start_spell_team4_holybolt;
	}
	
	if (autocvar_g_start_spell_team4_holylight) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holylight);
		player.spell_holylight = player.spell_holylight + nrmlzlvl + autocvar_g_start_spell_team4_holylight;
		player.start_spell_holylight = player.start_spell_holylight + nrmlzlvl + autocvar_g_start_spell_team4_holylight;
	}

	if (autocvar_g_start_spell_team4_acervilux) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_acervilux);
		player.spell_acervilux = player.spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team4_acervilux;
		player.start_spell_acervilux = player.start_spell_acervilux + nrmlzlvl + autocvar_g_start_spell_team4_acervilux;
	}
	
	if (autocvar_g_start_spell_team4_heal) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_heal);
		player.spell_heal = player.spell_heal + nrmlzlvl + autocvar_g_start_spell_team4_heal;
		player.start_spell_heal = player.start_spell_heal + nrmlzlvl + autocvar_g_start_spell_team4_heal;
	}
	
	if (autocvar_g_start_spell_team4_repair) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_repair);
		player.spell_repair = player.spell_repair + nrmlzlvl + autocvar_g_start_spell_team4_repair;
		player.start_spell_repair = player.start_spell_repair + nrmlzlvl + autocvar_g_start_spell_team4_repair;
	}
	
	if (autocvar_g_start_spell_team4_holyword) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_holyword);
		player.spell_holyword = player.spell_holyword + nrmlzlvl + autocvar_g_start_spell_team4_holyword;
		player.start_spell_holyword = player.start_spell_holyword + nrmlzlvl + autocvar_g_start_spell_team4_holyword;
	}
	
	if (autocvar_g_start_spell_team4_extinguish) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_extinguish);
		player.spell_extinguish = player.spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team4_extinguish;
		player.start_spell_extinguish = player.start_spell_extinguish + nrmlzlvl + autocvar_g_start_spell_team4_extinguish;
	}
	
	if (autocvar_g_start_spell_team4_darkritual) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_darkritual);
		player.spell_darkritual = player.spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team4_darkritual;
		player.start_spell_darkritual = player.start_spell_darkritual + nrmlzlvl + autocvar_g_start_spell_team4_darkritual;
	}

	if (autocvar_g_start_spell_team4_lightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightining);
		player.spell_lightining = player.spell_lightining + nrmlzlvl + autocvar_g_start_spell_team4_lightining; 
		player.start_spell_lightining = player.start_spell_lightining + nrmlzlvl + autocvar_g_start_spell_team4_lightining;
	}
	
	if (autocvar_g_start_spell_team4_balllightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_balllightining);
		player.spell_balllightining = player.spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team4_balllightining;
		player.start_spell_balllightining = player.start_spell_balllightining + nrmlzlvl + autocvar_g_start_spell_team4_balllightining;
	}
	
	if (autocvar_g_start_spell_team4_lightiningburst) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningburst);
		player.spell_lightiningburst = player.spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team4_lightiningburst;
		player.start_spell_lightiningburst = player.start_spell_lightiningburst + nrmlzlvl + autocvar_g_start_spell_team4_lightiningburst;
	}

	if (autocvar_g_start_spell_team4_chargedbolt) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chargedbolt);
		player.spell_chargedbolt = player.spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team4_chargedbolt; 
		player.start_spell_chargedbolt = player.start_spell_chargedbolt + nrmlzlvl + autocvar_g_start_spell_team4_chargedbolt;
	}

	if (autocvar_g_start_spell_team4_chainlightining) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_chainlightining);
		player.spell_chainlightining = player.spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team4_chainlightining; 
		player.start_spell_chainlightining = player.start_spell_chainlightining + nrmlzlvl + autocvar_g_start_spell_team4_chainlightining;
	}
	
	if (autocvar_g_start_spell_team4_lightiningstrike) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_lightiningstrike);
		player.spell_lightiningstrike = player.spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team4_lightiningstrike; 
		player.start_spell_lightiningstrike = player.start_spell_lightiningstrike + nrmlzlvl + autocvar_g_start_spell_team4_lightiningstrike;
	}

	if (autocvar_g_start_spell_team4_monstertomonolith) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomonolith);
		player.spell_monstertomonolith = player.spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team4_monstertomonolith;
		player.start_spell_monstertomonolith = player.start_spell_monstertomonolith + nrmlzlvl + autocvar_g_start_spell_team4_monstertomonolith;
	}

	if (autocvar_g_start_spell_team4_monstertomouse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_monstertomouse);
		player.spell_monstertomouse = player.spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team4_monstertomouse;
		player.start_spell_monstertomouse = player.start_spell_monstertomouse + nrmlzlvl + autocvar_g_start_spell_team4_monstertomouse;
	}
	
	if (autocvar_g_start_spell_team4_manashield) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_manashield);
		player.spell_manashield = player.spell_manashield + nrmlzlvl + autocvar_g_start_spell_team4_manashield;
		player.start_spell_manashield = player.start_spell_manashield + nrmlzlvl + autocvar_g_start_spell_team4_manashield;
	}
	
	if (autocvar_g_start_spell_team4_clairvoyance) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_clairvoyance);
		player.spell_clairvoyance = player.spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team4_clairvoyance;
		player.start_spell_clairvoyance = player.start_spell_clairvoyance + nrmlzlvl + autocvar_g_start_spell_team4_clairvoyance;
	}
	
	if (autocvar_g_start_spell_team4_magicbullets) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicbullets);
		player.spell_magicbullets = player.spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team4_magicbullets;
		player.start_spell_magicbullets = player.start_spell_magicbullets + nrmlzlvl + autocvar_g_start_spell_team4_magicbullets;
	}

	if (autocvar_g_start_spell_team4_magicmissile) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_magicmissile);
		player.spell_magicmissile = player.spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team4_magicmissile;
		player.start_spell_magicmissile = player.start_spell_magicmissile + nrmlzlvl + autocvar_g_start_spell_team4_magicmissile;
	}

	if (autocvar_g_start_spell_team4_meteor) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteor);
		player.spell_meteor = player.spell_meteor + nrmlzlvl + autocvar_g_start_spell_team4_meteor;
		player.start_spell_meteor = player.start_spell_meteor + nrmlzlvl + autocvar_g_start_spell_team4_meteor;
	}

	if (autocvar_g_start_spell_team4_meteorshower) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_meteorshower);
		player.spell_meteorshower = player.spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team4_meteorshower;
		player.start_spell_meteorshower = player.start_spell_meteorshower + nrmlzlvl + autocvar_g_start_spell_team4_meteorshower;
	}

	if (autocvar_g_start_spell_team4_mimic) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_mimic);
		player.spell_mimic = player.spell_mimic + nrmlzlvl + autocvar_g_start_spell_team4_mimic;	
		player.start_spell_mimic = player.start_spell_mimic + nrmlzlvl + autocvar_g_start_spell_team4_mimic;
	}

	if (autocvar_g_start_spell_team4_paralyse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_paralyse);
		player.spell_paralyse = player.spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team4_paralyse;
		player.start_spell_paralyse = player.start_spell_paralyse + nrmlzlvl + autocvar_g_start_spell_team4_paralyse;
	}

	if (autocvar_g_start_spell_team4_ringoffire) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_ringoffire);
		player.spell_ringoffire = player.spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team4_ringoffire;
		player.start_spell_ringoffire = player.start_spell_ringoffire + nrmlzlvl + autocvar_g_start_spell_team4_ringoffire;
	}

	if (autocvar_g_start_spell_team4_stonecurse) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonecurse);
		player.spell_stonecurse = player.spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team4_stonecurse;
		player.start_spell_stonecurse = player.start_spell_stonecurse + nrmlzlvl + autocvar_g_start_spell_team4_stonecurse;
	}
	
	if (autocvar_g_start_spell_team4_stonerain) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_stonerain);
		player.spell_stonerain = player.spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team4_stonerain;
		player.start_spell_stonerain = player.start_spell_stonerain + nrmlzlvl + autocvar_g_start_spell_team4_stonerain;
	}
	
	if (autocvar_g_start_spell_team4_timesink) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_timesink);
		player.spell_timesink = player.spell_timesink + nrmlzlvl + autocvar_g_start_spell_team4_timesink;
		player.start_spell_timesink = player.start_spell_timesink + nrmlzlvl + autocvar_g_start_spell_team4_timesink;
	}
	
	if (autocvar_g_start_spell_team4_vampyricconduit) { 
		nrmlzlvl = GiveStartSpells_NrmlzLvl(player, spell_vampyricconduit);
		player.spell_vampyricconduit = player.spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team4_vampyricconduit;
		player.start_spell_vampyricconduit = player.start_spell_vampyricconduit + nrmlzlvl + autocvar_g_start_spell_team4_vampyricconduit;
	}
	
	//Knowledge
	if (autocvar_g_start_knowledge_team4_carpentry) { 
		player.knowledge_carpentry = player.knowledge_carpentry + autocvar_g_start_knowledge_team4_carpentry;
		player.start_knowledge_carpentry = player.start_knowledge_carpentry + autocvar_g_start_knowledge_team4_carpentry;
	}
	
	if (autocvar_g_start_knowledge_team4_mortise) { 
		player.knowledge_mortise = player.knowledge_mortise + autocvar_g_start_knowledge_team4_mortise;
		player.start_knowledge_mortise = player.start_knowledge_mortise + autocvar_g_start_knowledge_team4_mortise;
	}
	
	if (autocvar_g_start_knowledge_team4_stonemasonry) { 
		player.knowledge_stonemasonry = player.knowledge_stonemasonry + autocvar_g_start_knowledge_team4_stonemasonry;
		player.start_knowledge_stonemasonry = player.start_knowledge_stonemasonry + autocvar_g_start_knowledge_team4_stonemasonry;
	}
	
	if (autocvar_g_start_knowledge_team4_ironworking) { 
		player.knowledge_ironworking = player.knowledge_ironworking + autocvar_g_start_knowledge_team4_ironworking;
		player.start_knowledge_ironworking = player.start_knowledge_ironworking + autocvar_g_start_knowledge_team4_ironworking;
	}
	
	if (autocvar_g_start_knowledge_team4_arch) { 
		player.knowledge_arch = player.knowledge_arch + autocvar_g_start_knowledge_team4_arch;
		player.start_knowledge_arch = player.start_knowledge_arch + autocvar_g_start_knowledge_team4_arch;
	}
	
	if (autocvar_g_start_knowledge_team4_welding) { 
		player.knowledge_welding = player.knowledge_welding + autocvar_g_start_knowledge_team4_welding;
		player.start_knowledge_welding = player.start_knowledge_welding + autocvar_g_start_knowledge_team4_welding;
	}
	
	if (autocvar_g_start_knowledge_team4_concrete) { 
		player.knowledge_concrete = player.knowledge_concrete + autocvar_g_start_knowledge_team4_concrete;
		player.start_knowledge_concrete = player.start_knowledge_concrete + autocvar_g_start_knowledge_team4_concrete;
	}
}


float WealthTallyCoins (entity player)
{
	local float tallyamnt;
	tallyamnt = 0;
	
	tallyamnt = tallyamnt + (player.inv_coin_tin * VALUE_COIN_TIN);
	tallyamnt = tallyamnt + (player.inv_coin_iron * VALUE_COIN_IRON);
	tallyamnt = tallyamnt + (player.inv_coin_bronze * VALUE_COIN_BRONZE);
	tallyamnt = tallyamnt + (player.inv_coin_copper * VALUE_COIN_COPPER);
	tallyamnt = tallyamnt + (player.inv_coin_silver * VALUE_COIN_SILVER);
	tallyamnt = tallyamnt + (player.inv_coin_gold * VALUE_COIN_GOLD);
	tallyamnt = tallyamnt + (player.inv_coin_plat * VALUE_COIN_PLAT);
	tallyamnt = tallyamnt + (player.inv_coin_jade * VALUE_COIN_JADE);
	tallyamnt = tallyamnt + (player.inv_coin_amberium * VALUE_COIN_AMBERIUM);
	
	return tallyamnt;
}

float WealthTallyBars (entity player)
{
	local float tallyamnt;
	tallyamnt = 0;
	
	tallyamnt = tallyamnt + (player.inv_bar_tin * VALUE_COIN_TIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_iron * VALUE_COIN_IRON * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_bronze * VALUE_COIN_BRONZE * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_copper * VALUE_COIN_COPPER * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_silver * VALUE_COIN_SILVER * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_gold * VALUE_COIN_GOLD * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_plat * VALUE_COIN_PLAT * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_jade * VALUE_COIN_JADE * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_amberium * VALUE_COIN_AMBERIUM * 1000);
	
	return tallyamnt;
}

float WealthTallyGems (entity player)
{	
	local float tallyamnt;
	tallyamnt = 0;
	
	tallyamnt = tallyamnt + (player.inv_gem_diamond * VALUE_GEM_DIAMOND);
	tallyamnt = tallyamnt + (player.inv_gem_jacinth * VALUE_GEM_JACINTH);
	tallyamnt = tallyamnt + (player.inv_gem_ruby * VALUE_GEM_RUBY);
	tallyamnt = tallyamnt + (player.inv_gem_pearl * VALUE_GEM_PEARL);
	tallyamnt = tallyamnt + (player.inv_gem_blackpearl * VALUE_GEM_BLACKPEARL);
	tallyamnt = tallyamnt + (player.inv_gem_peridot * VALUE_GEM_PERIDOT);
	tallyamnt = tallyamnt + (player.inv_gem_emerald * VALUE_GEM_EMERALD);
	tallyamnt = tallyamnt + (player.inv_gem_topaz * VALUE_GEM_TOPAZ);
	tallyamnt = tallyamnt + (player.inv_gem_sapphire * VALUE_GEM_SAPPHIRE);
	tallyamnt = tallyamnt + (player.inv_gem_chalcedony * VALUE_GEM_CHALCEDONY);
	tallyamnt = tallyamnt + (player.inv_gem_agate * VALUE_GEM_AGATE);
	tallyamnt = tallyamnt + (player.inv_gem_onyx * VALUE_GEM_ONYX);
	tallyamnt = tallyamnt + (player.inv_gem_mithril * VALUE_GEM_MITHRIL);
	tallyamnt = tallyamnt + (player.inv_gem_amethyst * VALUE_GEM_AMETHYST);
	tallyamnt = tallyamnt + (player.inv_gem_chrysoberyl * VALUE_GEM_CHRYSOBERYL);
	tallyamnt = tallyamnt + (player.inv_gem_aquamarine * VALUE_GEM_AQUAMARINE);
	tallyamnt = tallyamnt + (player.inv_gem_quartz * VALUE_GEM_QUARTZ);
	tallyamnt = tallyamnt + (player.inv_gem_tourmaline * VALUE_GEM_TOURMALINE);
	tallyamnt = tallyamnt + (player.inv_gem_glass_r * VALUE_GEM_GLASS_R);
	tallyamnt = tallyamnt + (player.inv_gem_glass_g * VALUE_GEM_GLASS_G);
	tallyamnt = tallyamnt + (player.inv_gem_glass_b * VALUE_GEM_GLASS_B);
	tallyamnt = tallyamnt + (player.inv_gem_glass_y * VALUE_GEM_GLASS_Y);
	tallyamnt = tallyamnt + (player.inv_gem_glass_w * VALUE_GEM_GLASS_W);

	return tallyamnt;
}

float WealthTally (entity player)
{
	local float tallyamnt;
	tallyamnt = 0;
	tallyamnt = WealthTallyCoins(player) + WealthTallyGems(player) + WealthTallyBars(player);
	
	return tallyamnt;
}


vector WealthTally_FormatPGS (entity player)
{
	vector myreturn;
	local float plata;
	local float golda;
	local float silvera;
	local float tallyamnt;
	local float remainderamnt;
	plata = 0;
	golda = 0;
	silvera = 0;
	remainderamnt = 0;
	tallyamnt = 0;
	tallyamnt = WealthTally(player);
	
	remainderamnt = mod(tallyamnt, VALUE_COIN_PLAT);
	plata = (tallyamnt - remainderamnt)/VALUE_COIN_PLAT;
	
	tallyamnt = remainderamnt;
	
	
	remainderamnt = mod(tallyamnt, VALUE_COIN_GOLD);
	golda = (tallyamnt - remainderamnt)/VALUE_COIN_GOLD;
	
	tallyamnt = remainderamnt;
	
	//remainderamnt = mod(tallyamnt, VALUE_COIN_SILVER);
	//silver = tallyamnt - remainderamnt;
	silvera = tallyamnt/VALUE_COIN_SILVER;
	
	
	myreturn_x = plata;
	myreturn_y = golda;
	myreturn_z = silvera;
	return myreturn;
}

vector WealthTally_FormatPGSc (entity player)
{
	player.rtnvl2 = 0;	//This var is used for when needing a second "return" value.
				//We set to 0 at begining of function
	vector myreturn;
	local float plata;
	local float golda;
	local float silvera;
	local float coppera;
	local float tallyamnt;
	local float remainderamnt;
	plata = 0;
	golda = 0;
	silvera = 0;
	coppera = 0;
	remainderamnt = 0;
	tallyamnt = 0;
	tallyamnt = WealthTally(player);
	
	remainderamnt = mod(tallyamnt, VALUE_COIN_PLAT);
	plata = (tallyamnt - remainderamnt)/VALUE_COIN_PLAT;
	
	tallyamnt = remainderamnt;
	
	
	remainderamnt = mod(tallyamnt, VALUE_COIN_GOLD);
	golda = (tallyamnt - remainderamnt)/VALUE_COIN_GOLD;
	
	tallyamnt = remainderamnt;
	
	remainderamnt = mod(tallyamnt, VALUE_COIN_SILVER);
	silvera = (tallyamnt - remainderamnt)/VALUE_COIN_SILVER;
	
	tallyamnt = remainderamnt;
	
	//remainderamnt = mod(tallyamnt, VALUE_COIN_SILVER);
	//silver = tallyamnt - remainderamnt;
	coppera = tallyamnt/VALUE_COIN_COPPER;
	
	
	myreturn_x = plata;
	myreturn_y = golda;
	myreturn_z = silvera;
	player.rtnvl2 = coppera;
	return myreturn;
}


float ContainerTallyStorage (entity player)
{
	local float tallyamnt;
	tallyamnt = 0;
	tallyamnt = tallyamnt + (player.inv_book_agency * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_agency * 4);
	tallyamnt = tallyamnt + (player.inv_book_death * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_death * 4);
	tallyamnt = tallyamnt + (player.inv_book_drainlife * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_drainlife * 4);
	tallyamnt = tallyamnt + (player.inv_book_cancellation * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_cancellation * 4);
	tallyamnt = tallyamnt + (player.inv_book_castfromlife * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_castfromlife * 4);
	tallyamnt = tallyamnt + (player.inv_book_confer * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_confer * 4);
	tallyamnt = tallyamnt + (player.inv_book_iceball * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_iceball * 4);
	tallyamnt = tallyamnt + (player.inv_book_icestar * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_icestar * 4);
	tallyamnt = tallyamnt + (player.inv_book_aquacaelestis * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_aquacaelestis * 4);
	tallyamnt = tallyamnt + (player.inv_book_nivosus * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_nivosus * 4);
	tallyamnt = tallyamnt + (player.inv_book_rosa * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_rosa * 4);
	tallyamnt = tallyamnt + (player.inv_book_corvuspenna * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_corvuspenna * 4);
	tallyamnt = tallyamnt + (player.inv_book_plumosus * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_plumosus * 4);
	tallyamnt = tallyamnt + (player.inv_book_firebolt * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_firebolt * 4);
	tallyamnt = tallyamnt + (player.inv_book_fireball * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_fireball * 4);
	tallyamnt = tallyamnt + (player.inv_book_magmasphere * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_magmasphere * 4);
	tallyamnt = tallyamnt + (player.inv_book_firebeam * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_firebeam * 4);
	tallyamnt = tallyamnt + (player.inv_book_inferno * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_inferno * 4);
	tallyamnt = tallyamnt + (player.inv_book_firewall * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_firewall * 4);
	tallyamnt = tallyamnt + (player.inv_book_lightiningwall * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_lightiningwall * 4);
	tallyamnt = tallyamnt + (player.inv_book_scepterofflame * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_scepterofflame * 4);
	tallyamnt = tallyamnt + (player.inv_book_explosion * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_explosion * 4);
	tallyamnt = tallyamnt + (player.inv_book_phantasmalbarrier * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_phantasmalbarrier * 4);
	tallyamnt = tallyamnt + (player.inv_book_raiseundead * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_raiseundead * 4);
	tallyamnt = tallyamnt + (player.inv_book_flameburst * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_flameburst * 4);
	tallyamnt = tallyamnt + (player.inv_book_firecentury * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_firecentury * 4);
	tallyamnt = tallyamnt + (player.inv_book_frostbeam * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_frostbeam * 4);
	tallyamnt = tallyamnt + (player.inv_book_grace * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_grace * 4);
	tallyamnt = tallyamnt + (player.inv_book_holybolt * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_holybolt * 4);
	tallyamnt = tallyamnt + (player.inv_book_holylight * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_holylight * 4);
	tallyamnt = tallyamnt + (player.inv_book_acervilux * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_acervilux * 4);
	tallyamnt = tallyamnt + (player.inv_book_heal * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_heal * 4);
	tallyamnt = tallyamnt + (player.inv_book_repair * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_repair * 4);
	tallyamnt = tallyamnt + (player.inv_book_holyword * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_holyword * 4);
	tallyamnt = tallyamnt + (player.inv_book_extinguish * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_extinguish * 4);
	tallyamnt = tallyamnt + (player.inv_book_darkritual * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_darkritual * 4);
	tallyamnt = tallyamnt + (player.inv_book_lightining * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_lightining * 4);
	tallyamnt = tallyamnt + (player.inv_book_balllightining * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_balllightining * 4);
	tallyamnt = tallyamnt + (player.inv_book_chainlightining * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_chainlightining * 4);
	tallyamnt = tallyamnt + (player.inv_book_lightiningburst * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_lightiningburst * 4);
	tallyamnt = tallyamnt + (player.inv_book_chargedbolt * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_chargedbolt * 4);
	tallyamnt = tallyamnt + (player.inv_book_lightiningstrike * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_lightiningstrike * 4);
	tallyamnt = tallyamnt + (player.inv_book_manashield * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_manashield * 4);
	tallyamnt = tallyamnt + (player.inv_book_clairvoyance * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_clairvoyance * 4);
	tallyamnt = tallyamnt + (player.inv_book_magicbullets * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_magicbullets * 4);
	tallyamnt = tallyamnt + (player.inv_book_magicmissile * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_magicmissile * 4);
	tallyamnt = tallyamnt + (player.inv_book_monstertomouse * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_monstertomouse * 4);
	tallyamnt = tallyamnt + (player.inv_book_monstertomonolith * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_monstertomonolith * 4);
	tallyamnt = tallyamnt + (player.inv_book_meteor * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_meteor * 4);
	tallyamnt = tallyamnt + (player.inv_book_meteorshower * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_meteorshower * 4);
	tallyamnt = tallyamnt + (player.inv_book_mimic * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_mimic * 4);
	tallyamnt = tallyamnt + (player.inv_book_paralyse * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_paralyse * 4);
	tallyamnt = tallyamnt + (player.inv_book_ringoffire * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_ringoffire * 4);
	tallyamnt = tallyamnt + (player.inv_book_stonecurse * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_stonecurse * 4);
	tallyamnt = tallyamnt + (player.inv_book_stonerain * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_stonerain * 4);
	tallyamnt = tallyamnt + (player.inv_book_timesink * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_timesink * 4);
	tallyamnt = tallyamnt + (player.inv_book_vampyricconduit * 10);
	tallyamnt = tallyamnt + (player.inv_scroll_vampyricconduit * 4);
	//Knowledge books
	tallyamnt = tallyamnt + (player.inv_book_know_carpentry * 10);
	tallyamnt = tallyamnt + (player.inv_book_know_mortise * 10);
	tallyamnt = tallyamnt + (player.inv_book_know_stonemasonry * 10);
	tallyamnt = tallyamnt + (player.inv_book_know_ironworking * 10);
	tallyamnt = tallyamnt + (player.inv_book_know_arch * 10);
	tallyamnt = tallyamnt + (player.inv_book_know_welding * 10);
	tallyamnt = tallyamnt + (player.inv_book_know_concrete * 10);
	
	tallyamnt = tallyamnt + (player.inv_potion_health_small * 2);
	tallyamnt = tallyamnt + (player.inv_potion_health_medium * 4);
	tallyamnt = tallyamnt + (player.inv_potion_health_large * 6);
	tallyamnt = tallyamnt + (player.inv_potion_mana_small * 2);
	tallyamnt = tallyamnt + (player.inv_potion_mana_medium * 4);
	tallyamnt = tallyamnt + (player.inv_potion_mana_large * 6);
	tallyamnt = tallyamnt + (player.inv_potion_rejuv_small * 2);
	tallyamnt = tallyamnt + (player.inv_potion_rejuv_medium * 4);
	tallyamnt = tallyamnt + (player.inv_potion_rejuv_large * 6);
	tallyamnt = tallyamnt + (player.inv_potion_vodka_small * 2);
	tallyamnt = tallyamnt + (player.inv_potion_vodka_medium * 4);
	tallyamnt = tallyamnt + (player.inv_potion_vodka_large * 6);
	tallyamnt = tallyamnt + (player.inv_potion_merlot_small * 2);
	tallyamnt = tallyamnt + (player.inv_potion_merlot_medium * 4);
	tallyamnt = tallyamnt + (player.inv_potion_merlot_large * 6);
	tallyamnt = tallyamnt + (player.inv_potion_ale_small * 2);
	tallyamnt = tallyamnt + (player.inv_potion_ale_medium * 4);
	tallyamnt = tallyamnt + (player.inv_potion_ale_large * 6);
	tallyamnt = tallyamnt + (player.inv_potion_water_small * 2);
	tallyamnt = tallyamnt + (player.inv_potion_water_medium * 4);
	tallyamnt = tallyamnt + (player.inv_potion_water_large * 6);
	tallyamnt = tallyamnt + (player.inv_food_bellpepper * 6);
	tallyamnt = tallyamnt + (player.inv_food_bread * 6);
	tallyamnt = tallyamnt + (player.inv_food_cheeze * 6);
	tallyamnt = tallyamnt + (player.inv_food_garlic * 4);
	tallyamnt = tallyamnt + (player.inv_food_grapes * 6);
	tallyamnt = tallyamnt + (player.inv_food_onion * 4);
	tallyamnt = tallyamnt + (player.inv_food_tomato * 4);
	tallyamnt = tallyamnt + (player.inv_food_turkeyleg * 6);
	tallyamnt = tallyamnt + (player.inv_faeces_small * 2);
	tallyamnt = tallyamnt + (player.inv_faeces_medium * 4);
	tallyamnt = tallyamnt + (player.inv_faeces_large * 6);
	
	tallyamnt = tallyamnt + (player.grenades * 6);
	tallyamnt = tallyamnt + (player.flashbangs * 6);
	tallyamnt = tallyamnt + (player.smokenades * 6);
	tallyamnt = tallyamnt + (player.fragnades * 6);
	tallyamnt = tallyamnt + (player.landmines * 8);
	tallyamnt = tallyamnt + (player.atmines * 15);
	
	tallyamnt = tallyamnt + (player.ammo_nails * 0.1);
	tallyamnt = tallyamnt + (player.ammo_rockets * 2);
	tallyamnt = tallyamnt + (player.ammo_cells * 1);
	tallyamnt = tallyamnt + (player.ammo_shells * 0.2);
	
	tallyamnt = tallyamnt + (player.inv_misc_suppressor45 * 6);
	tallyamnt = tallyamnt + (player.inv_misc_suppressormac10 * 12);
	tallyamnt = tallyamnt + (player.inv_misc_suppressor9mm * 4);
	tallyamnt = tallyamnt + (player.inv_misc_suppressor5n7mm * 4);
	tallyamnt = tallyamnt + (player.inv_misc_suppressorrifle * 10);
	tallyamnt = tallyamnt + (player.inv_misc_suppressorpdw * 5);
	tallyamnt = tallyamnt + (player.inv_misc_cylinder_r1856 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_ak47_50 * 12);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_ak47_100 * 14);
	tallyamnt = tallyamnt + (player.inv_misc_drum_ak47_75 * 12);
	tallyamnt = tallyamnt + (player.inv_misc_mag_ak47_30 * 10);
	
	tallyamnt = tallyamnt + (player.inv_misc_exmag_ak74_45 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_ak74_30 * 10);
	
	tallyamnt = tallyamnt + (player.inv_misc_exmag_styeraug_42 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_styeraug_30 * 10);
	
	tallyamnt = tallyamnt + (player.inv_misc_exmag_bar_40 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_bar_20 * 10);
	
	tallyamnt = tallyamnt + (player.inv_misc_panmag_lewisgun_47 * 14);
	tallyamnt = tallyamnt + (player.inv_misc_panmag_lewisgun_97 * 16);
	
	tallyamnt = tallyamnt + (player.inv_misc_mag_uzi_20 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_uzi_25 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_uzi_32 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_uzi_40 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_uzi_50 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_drum_uzi_82 * 12);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_uzi_106 * 12);
	
	tallyamnt = tallyamnt + (player.inv_misc_mag_tec9_20 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_tec9_10 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_tec9_32 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_tec9_36 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_tec9_50 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_drum_tec9_72 * 12);

	tallyamnt = tallyamnt + (player.inv_misc_mag_m16_20 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_m16_30 * 10);
	tallyamnt = tallyamnt + (player.inv_misc_betacmag_m16 * 12);
	
	tallyamnt = tallyamnt + (player.inv_misc_betacmag_lightpistol * 12);
	tallyamnt = tallyamnt + (player.inv_misc_drum_lightpistol * 10);
	tallyamnt = tallyamnt + (player.inv_misc_exmag_lightpistol * 10);
	tallyamnt = tallyamnt + (player.inv_misc_mag_lightpistol * 8);
	
	tallyamnt = tallyamnt + (player.inv_misc_betacmag_pdw * 12);
	tallyamnt = tallyamnt + (player.inv_misc_drum_pdw * 12);
	tallyamnt = tallyamnt + (player.inv_misc_exmag40_pdw * 10);
	tallyamnt = tallyamnt + (player.inv_misc_stdmag_pdw * 10);
	tallyamnt = tallyamnt + (player.inv_misc_smallmag_pdw * 8);
	tallyamnt = tallyamnt + (player.inv_misc_tinymag_pdw * 8);

	tallyamnt = tallyamnt + (player.inv_coin_tin * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_iron * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_bronze * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_copper * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_silver * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_gold * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_plat * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_jade * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_amberium * CONTAINER_TALLY_STORAGE_COIN);
	
	tallyamnt = tallyamnt + (player.inv_coin_f_tin * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_iron * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_bronze * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_copper * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_silver * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_gold * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_plat * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_jade * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_f_amberium * CONTAINER_TALLY_STORAGE_COIN);
	
	tallyamnt = tallyamnt + (player.inv_coin_cf_tin * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_iron * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_bronze * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_copper * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_silver * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_gold * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_plat * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_jade * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_coin_cf_amberium * CONTAINER_TALLY_STORAGE_COIN);
	
	tallyamnt = tallyamnt + (player.inv_casinotoken_yellow * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_blue * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_gray * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_lightgreen * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_lightblue * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_rose * CONTAINER_TALLY_STORAGE_COIN);	
	tallyamnt = tallyamnt + (player.inv_casinotoken_black * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_seabreeze * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_red * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_cyan * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_tan * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_green * CONTAINER_TALLY_STORAGE_COIN);
	tallyamnt = tallyamnt + (player.inv_casinotoken_purple * CONTAINER_TALLY_STORAGE_COIN);
	
	tallyamnt = tallyamnt + (player.inv_bar_tin * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_iron * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_bronze * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_copper * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_silver * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_gold * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_plat * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_jade * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_amberium * CONTAINER_TALLY_STORAGE_COIN * 1000);
	
	tallyamnt = tallyamnt + (player.inv_bar_f_tin * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_iron * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_bronze * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_copper * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_silver * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_gold * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_plat * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_jade * CONTAINER_TALLY_STORAGE_COIN * 1000);
	tallyamnt = tallyamnt + (player.inv_bar_f_amberium * CONTAINER_TALLY_STORAGE_COIN * 1000);
	
	tallyamnt = tallyamnt + (player.inv_gem_diamond * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_jacinth * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_ruby * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_pearl * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_blackpearl * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_peridot * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_emerald * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_topaz * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_sapphire * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_chalcedony * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_agate * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_onyx * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_mithril * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_amethyst * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_chrysoberyl * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_aquamarine * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_quartz * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_tourmaline * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_glass_r * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_glass_g * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_glass_b * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_glass_y * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_glass_w * CONTAINER_TALLY_STORAGE_GEM);
	
	tallyamnt = tallyamnt + (player.inv_gem_f_diamond * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_jacinth * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_ruby * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_pearl * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_blackpearl * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_peridot * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_emerald * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_topaz * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_sapphire * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_chalcedony * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_agate * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_onyx * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_mithril * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_amethyst * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_chrysoberyl * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_aquamarine * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_quartz * CONTAINER_TALLY_STORAGE_GEM);
	tallyamnt = tallyamnt + (player.inv_gem_f_tourmaline * CONTAINER_TALLY_STORAGE_GEM);

	tallyamnt = tallyamnt + player.inv_coin; //Catchall used for setting coin amnt on map placed coins, tallying anyway. Not used for player tho

	float j;
	for(j = WEP_FIRST; j <= WEP_LAST; ++j)
	{
		if(WEPSET_CONTAINS_EW(player, j))
			tallyamnt = tallyamnt + ContainerWeaponStorageAmnt(j);
	}
	
	return tallyamnt;
}

void ContainerAllInventoryPinata (entity container) {
	local entity mypreviousself;
	local vector myvloc;
	
	if (container.noanimdroppeditems) {
		myvloc = (randomvec() * 16 + '0 0 128');
	} else {
		myvloc = (randomvec() * 175 + '0 0 325');
	}
	
	mypreviousself = self;
	self = container;
		MagicInventoryPinata(self);
		
		MagicInventoryPinataItemByAmmount(self, ammo_nails, 6, "nails", g_pickup_nails);
		MagicInventoryPinataItemByAmmount(self, ammo_rockets, 6, "rockets", g_pickup_rockets);
		MagicInventoryPinataItemByAmmount(self, ammo_cells, 6, "cells", g_pickup_cells);
		MagicInventoryPinataItemByAmmount(self, ammo_shells, 6, "shells", g_pickup_shells);
		
		float j;
		for(j = WEP_FIRST; j <= WEP_LAST; ++j)
		{
			if(WEPSET_CONTAINS_EW(self, j))
				if(W_IsWeaponThrowable(j))
					W_ThrowNewWeapon(self, j, FALSE, self.origin, myvloc);
		}
	self = mypreviousself;
}

void CmdPrintInventoryOfTo (entity player, entity invreader, float doconcat, .string mystring)
{
	local string prline;
	local float counter;
	prline = "   ";
	counter = 0;
	if ((clienttype(invreader) == CLIENTTYPE_REAL))
	{
		sprint_OrConcat(mystring, doconcat, invreader, "Books:\n");
		if (player.inv_book_agency)
		{
			prline = strcat(prline, "   ^xF61", ftos(player.inv_book_agency)," Agency^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_acervilux)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_book_acervilux)," AcerviLux^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_aquacaelestis)
		{
			prline = strcat(prline, "   ^x99C", ftos(player.inv_book_aquacaelestis)," AquaCaelestis^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_balllightining)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_book_balllightining)," BallLightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_darkritual)
		{
			prline = strcat(prline, "   ^x000", ftos(player.inv_book_darkritual)," DarkRitual^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_death)
		{
			prline = strcat(prline, "   ^x000", ftos(player.inv_book_death)," Death^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_drainlife)
		{
			prline = strcat(prline, "   ^xF0F", ftos(player.inv_book_drainlife)," Drainlife^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_cancellation)
		{
			prline = strcat(prline, "   ^x111", ftos(player.inv_book_cancellation)," Cancellation^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_castfromlife)
		{
			prline = strcat(prline, "   ^x901", ftos(player.inv_book_castfromlife)," CastFromLife^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_chainlightining)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_book_chainlightining)," ChainLightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_chargedbolt)
		{
			prline = strcat(prline, "   ^x13E", ftos(player.inv_book_chargedbolt)," ChargedBolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_clairvoyance)
		{
			prline = strcat(prline, "   ^xF0C", ftos(player.inv_book_clairvoyance)," Clairvoyance^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_confer)
		{
			prline = strcat(prline, "   ^xFF0", ftos(player.inv_book_confer)," Confer^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_corvuspenna)
		{
			prline = strcat(prline, "   ^x222", ftos(player.inv_book_corvuspenna)," CorvusPenna^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_iceball)
		{
			prline = strcat(prline, "   ^x00F", ftos(player.inv_book_iceball)," Iceball^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_icestar)
		{
			prline = strcat(prline, "   ^x07F", ftos(player.inv_book_icestar)," IceStar^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_inferno)
		{
			prline = strcat(prline, "   ^xF40", ftos(player.inv_book_inferno)," Inferno^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_explosion)
		{
			prline = strcat(prline, "   ^xF51", ftos(player.inv_book_explosion)," Explosion^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_extinguish)
		{
			prline = strcat(prline, "   ^x000", ftos(player.inv_book_extinguish)," Extinguish^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_firebolt)
		{
			prline = strcat(prline, "   ^xF70", ftos(player.inv_book_firebolt)," Firebolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_fireball)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_book_fireball)," Fireball^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_firebeam)
		{
			prline = strcat(prline, "   ^xF41", ftos(player.inv_book_firebeam)," Firebeam^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_firewall)
		{
			prline = strcat(prline, "   ^xF20", ftos(player.inv_book_firewall)," FireWall^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_firecentury)
		{
			prline = strcat(prline, "   ^xF50", ftos(player.inv_book_firecentury)," FireCentury^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_flameburst)
		{
			prline = strcat(prline, "   ^xF20", ftos(player.inv_book_flameburst)," Flameburst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_frostbeam)
		{
			prline = strcat(prline, "   ^x0FF", ftos(player.inv_book_frostbeam)," Frostbeam^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_grace)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_book_grace)," Grace^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_heal)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_book_heal)," Heal^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_holybolt)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_book_holybolt)," HolyBolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_holylight)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_book_holylight)," HolyLight^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_holyword)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_book_holyword)," HolyWord^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_lightining)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_book_lightining)," Lightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_lightiningburst)
		{
			prline = strcat(prline, "   ^x24F", ftos(player.inv_book_lightiningburst)," LightiningBurst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_lightiningstrike)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_book_lightiningstrike)," LightiningStrike^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_lightiningwall)
		{
			prline = strcat(prline, "   ^x25F", ftos(player.inv_book_lightiningwall)," LightiningWall^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_magmasphere)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_book_magmasphere)," MagmaSphere^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_manashield)
		{
			prline = strcat(prline, "   ^x80F", ftos(player.inv_book_manashield)," ManaShield^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_magicbullets)
		{
			prline = strcat(prline, "   ^x93F", ftos(player.inv_book_magicbullets)," MagicBullets^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_magicmissile)
		{
			prline = strcat(prline, "   ^x90F", ftos(player.inv_book_magicmissile)," MagicMissile^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_monstertomonolith)
		{
			prline = strcat(prline, "   ^xA99", ftos(player.inv_book_monstertomonolith)," MonsterToMonolith^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_monstertomouse)
		{
			prline = strcat(prline, "   ^xA99", ftos(player.inv_book_monstertomouse)," MonsterToMouse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_meteor)
		{
			prline = strcat(prline, "   ^x710", ftos(player.inv_book_meteor)," Meteor^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_meteorshower)
		{
			prline = strcat(prline, "   ^x730", ftos(player.inv_book_meteorshower)," MeteorShower^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_mimic)
		{
			prline = strcat(prline, "   ^x70F", ftos(player.inv_book_mimic)," Mimic^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_nivosus)
		{
			prline = strcat(prline, "   ^xAAA", ftos(player.inv_book_nivosus)," Nivosus^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_paralyse)
		{
			prline = strcat(prline, "   ^x0F0", ftos(player.inv_book_paralyse)," Paralyse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_phantasmalbarrier)
		{
			prline = strcat(prline, "   ^x90F", ftos(player.inv_book_phantasmalbarrier)," PhantasmalBarrier^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_plumosus)
		{
			prline = strcat(prline, "   ^xDDD", ftos(player.inv_book_plumosus)," Plumosus^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_raiseundead)
		{
			prline = strcat(prline, "   ^xA99", ftos(player.inv_book_raiseundead)," RaiseUndead^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_repair)
		{
			prline = strcat(prline, "   ^x90F", ftos(player.inv_book_repair)," Repair^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_ringoffire)
		{
			prline = strcat(prline, "   ^xF20", ftos(player.inv_book_ringoffire)," RingOfFire^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_rosa)
		{
			prline = strcat(prline, "   ^xF09", ftos(player.inv_book_rosa)," Rosa^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_scepterofflame)
		{
			prline = strcat(prline, "   ^xF30", ftos(player.inv_book_scepterofflame)," ScepterOfFlame^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_stonecurse)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_book_stonecurse)," StoneCurse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_stonerain)
		{
			prline = strcat(prline, "   ^xBAA", ftos(player.inv_book_stonerain)," StoneRain^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_timesink)
		{
			prline = strcat(prline, "   ^x80A", ftos(player.inv_book_timesink)," Timesink^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_vampyricconduit)
		{
			prline = strcat(prline, "   ^x800", ftos(player.inv_book_vampyricconduit)," VampyricConduit^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//Knowledge books
		if (player.inv_book_know_carpentry)
		{
			prline = strcat(prline, "   ", ftos(player.inv_book_know_carpentry)," Carpentry^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_know_mortise)
		{
			prline = strcat(prline, "   ", ftos(player.inv_book_know_mortise)," Mortise^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_know_stonemasonry)
		{
			prline = strcat(prline, "   ", ftos(player.inv_book_know_stonemasonry)," StoneMasonry^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_know_arch)
		{
			prline = strcat(prline, "   ", ftos(player.inv_book_know_arch)," Arch^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_know_ironworking)
		{
			prline = strcat(prline, "   ", ftos(player.inv_book_know_ironworking)," IronWorking^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_know_welding)
		{
			prline = strcat(prline, "   ", ftos(player.inv_book_know_welding)," Welding^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_book_know_concrete)
		{
			prline = strcat(prline, "   ", ftos(player.inv_book_know_concrete)," Concrete^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Scrolls:\n");
		if (player.inv_scroll_agency)
		{
			prline = strcat(prline, "   ^xF61", ftos(player.inv_scroll_agency)," agency^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_acervilux)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_scroll_acervilux)," acervilux^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_aquacaelestis)
		{
			prline = strcat(prline, "   ^x99C", ftos(player.inv_scroll_aquacaelestis)," aquacaelestis^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_balllightining)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_scroll_balllightining)," balllightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_darkritual)
		{
			prline = strcat(prline, "   ^x000", ftos(player.inv_scroll_darkritual)," darkritual^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_death)
		{
			prline = strcat(prline, "   ^x000", ftos(player.inv_scroll_death)," death^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_drainlife)
		{
			prline = strcat(prline, "   ^xF0F", ftos(player.inv_scroll_drainlife)," drainlife^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_cancellation)
		{
			prline = strcat(prline, "   ^x111", ftos(player.inv_scroll_cancellation)," cancellation^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_castfromlife)
		{
			prline = strcat(prline, "   ^x901", ftos(player.inv_scroll_castfromlife)," castfromlife^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_chainlightining)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_scroll_chainlightining)," chainlightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_chargedbolt)
		{
			prline = strcat(prline, "   ^x13E", ftos(player.inv_scroll_chargedbolt)," chargedbolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_clairvoyance)
		{
			prline = strcat(prline, "   ^xF0C", ftos(player.inv_scroll_clairvoyance)," clairvoyance^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_confer)
		{
			prline = strcat(prline, "   ^xFF0", ftos(player.inv_scroll_confer)," confer^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_corvuspenna)
		{
			prline = strcat(prline, "   ^x222", ftos(player.inv_scroll_corvuspenna)," corvuspenna^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_iceball)
		{
			prline = strcat(prline, "   ^x00F", ftos(player.inv_scroll_iceball)," iceball^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_icestar)
		{
			prline = strcat(prline, "   ^x07F", ftos(player.inv_scroll_icestar)," icestar^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_inferno)
		{
			prline = strcat(prline, "   ^xF40", ftos(player.inv_scroll_inferno)," inferno^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_explosion)
		{
			prline = strcat(prline, "   ^xF51", ftos(player.inv_scroll_explosion)," explosion^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_extinguish)
		{
			prline = strcat(prline, "   ^x000", ftos(player.inv_scroll_extinguish)," extinguish^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_firebolt)
		{
			prline = strcat(prline, "   ^xF70", ftos(player.inv_scroll_firebolt)," firebolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_fireball)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_scroll_fireball)," fireball^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_firebeam)
		{
			prline = strcat(prline, "   ^xF41", ftos(player.inv_scroll_firebeam)," firebeam^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_firewall)
		{
			prline = strcat(prline, "   ^xF20", ftos(player.inv_scroll_firewall)," firewall^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_firecentury)
		{
			prline = strcat(prline, "   ^xF50", ftos(player.inv_scroll_firecentury)," firecentury^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_flameburst)
		{
			prline = strcat(prline, "   ^xF20", ftos(player.inv_scroll_flameburst)," flameburst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_frostbeam)
		{
			prline = strcat(prline, "   ^x0FF", ftos(player.inv_scroll_frostbeam)," frostbeam^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_grace)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_scroll_grace)," grace^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_heal)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_scroll_heal)," heal^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_holybolt)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_scroll_holybolt)," holybolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_holylight)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_scroll_holylight)," holylight^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_holyword)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_scroll_holyword)," holyword^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_lightining)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_scroll_lightining)," lightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_lightiningburst)
		{
			prline = strcat(prline, "   ^x24F", ftos(player.inv_scroll_lightiningburst)," lightiningburst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_lightiningstrike)
		{
			prline = strcat(prline, "   ^x04F", ftos(player.inv_scroll_lightiningstrike)," lightiningstrike^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_lightiningwall)
		{
			prline = strcat(prline, "   ^x25F", ftos(player.inv_scroll_lightiningwall)," lightiningwall^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_magmasphere)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_scroll_magmasphere)," magmasphere^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_manashield)
		{
			prline = strcat(prline, "   ^x80F", ftos(player.inv_scroll_manashield)," manashield^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_magicbullets)
		{
			prline = strcat(prline, "   ^x93F", ftos(player.inv_scroll_magicbullets)," magicbullets^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_magicmissile)
		{
			prline = strcat(prline, "   ^x90F", ftos(player.inv_scroll_magicmissile)," magicmissile^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_monstertomouse)
		{
			prline = strcat(prline, "   ^xA99", ftos(player.inv_scroll_monstertomouse)," monstertomouse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_monstertomonolith)
		{
			prline = strcat(prline, "   ^xA99", ftos(player.inv_scroll_monstertomonolith)," monstertomonolith^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_meteor)
		{
			prline = strcat(prline, "   ^x710", ftos(player.inv_scroll_meteor)," meteor^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_meteorshower)
		{
			prline = strcat(prline, "   ^x730", ftos(player.inv_scroll_meteorshower)," meteorshower^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_mimic)
		{
			prline = strcat(prline, "   ^x70F", ftos(player.inv_scroll_mimic)," mimic^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_nivosus)
		{
			prline = strcat(prline, "   ^xAAA", ftos(player.inv_scroll_nivosus)," nivosus^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_paralyse)
		{
			prline = strcat(prline, "   ^x0F0", ftos(player.inv_scroll_paralyse)," paralyse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_phantasmalbarrier)
		{
			prline = strcat(prline, "   ^x90F", ftos(player.inv_scroll_phantasmalbarrier)," phantasmalbarrier^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_plumosus)
		{
			prline = strcat(prline, "   ^xDDD", ftos(player.inv_scroll_plumosus)," plumosus^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_raiseundead)
		{
			prline = strcat(prline, "   ^xA99", ftos(player.inv_scroll_raiseundead)," raiseundead^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_repair)
		{
			prline = strcat(prline, "   ^x90F", ftos(player.inv_scroll_repair)," repair^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_ringoffire)
		{
			prline = strcat(prline, "   ^xF20", ftos(player.inv_scroll_ringoffire)," ringoffire^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_rosa)
		{
			prline = strcat(prline, "   ^xF09", ftos(player.inv_scroll_rosa)," rosa^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_scepterofflame)
		{
			prline = strcat(prline, "   ^xF30", ftos(player.inv_scroll_scepterofflame)," scepterofflame^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_stonecurse)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_scroll_stonecurse)," stonecurse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_stonerain)
		{
			prline = strcat(prline, "   ^xBAA", ftos(player.inv_scroll_stonerain)," stonerain^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_timesink)
		{
			prline = strcat(prline, "   ^x80A", ftos(player.inv_scroll_timesink)," timesink^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_scroll_vampyricconduit)
		{
			prline = strcat(prline, "   ^x800", ftos(player.inv_scroll_vampyricconduit)," vampyricconduit^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Potions:\n");
		if (player.inv_potion_health_large)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_potion_health_large)," health large^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_health_medium)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_potion_health_medium)," health medium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_health_small)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_potion_health_small)," health small^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_mana_large)
		{
			prline = strcat(prline, "   ^x30F", ftos(player.inv_potion_mana_large)," mana large^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_mana_medium)
		{
			prline = strcat(prline, "   ^x30F", ftos(player.inv_potion_mana_medium)," mana medium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_mana_small)
		{
			prline = strcat(prline, "   ^x30F", ftos(player.inv_potion_mana_small)," mana small^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_rejuv_large)
		{
			prline = strcat(prline, "   ^xFF0", ftos(player.inv_potion_rejuv_large)," rejuvenation large^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_rejuv_medium)
		{
			prline = strcat(prline, "   ^xFF0", ftos(player.inv_potion_rejuv_medium)," rejuvenation medium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_rejuv_small)
		{
			prline = strcat(prline, "   ^xFF0", ftos(player.inv_potion_rejuv_small)," rejuvenation small^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//
		if (player.inv_potion_vodka_large)
		{
			prline = strcat(prline, "   ^xCCC", ftos(player.inv_potion_vodka_large)," vodka large^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_vodka_medium)
		{
			prline = strcat(prline, "   ^xCCC", ftos(player.inv_potion_vodka_medium)," vodka medium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_vodka_small)
		{
			prline = strcat(prline, "   ^xCCC", ftos(player.inv_potion_vodka_small)," vodka small^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//
		if (player.inv_potion_merlot_large)
		{
			prline = strcat(prline, "   ^xF06", ftos(player.inv_potion_merlot_large)," merlot large^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_merlot_medium)
		{
			prline = strcat(prline, "   ^xF06", ftos(player.inv_potion_merlot_medium)," merlot medium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_merlot_small)
		{
			prline = strcat(prline, "   ^xF06", ftos(player.inv_potion_merlot_small)," merlot small^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//
		if (player.inv_potion_ale_large)
		{
			prline = strcat(prline, "   ^xFD2", ftos(player.inv_potion_ale_large)," ale large^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_ale_medium)
		{
			prline = strcat(prline, "   ^xFD2", ftos(player.inv_potion_ale_medium)," ale medium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_ale_small)
		{
			prline = strcat(prline, "   ^xFD2", ftos(player.inv_potion_ale_small)," ale small^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//
		if (player.inv_potion_water_large)
		{
			prline = strcat(prline, "   ^x25F", ftos(player.inv_potion_water_large)," water large^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_water_medium)
		{
			prline = strcat(prline, "   ^x25F", ftos(player.inv_potion_water_medium)," water medium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_potion_water_small)
		{
			prline = strcat(prline, "   ^x25F", ftos(player.inv_potion_water_small)," water small^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Comestibles:\n");
		if (player.inv_food_bellpepper)
		{
			prline = strcat(prline, "   ^x090", ftos(player.inv_food_bellpepper)," bellpepper^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_food_bread)
		{
			prline = strcat(prline, "   ^x995", ftos(player.inv_food_bread)," bread^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_food_cheeze)
		{
			prline = strcat(prline, "   ^xCC0", ftos(player.inv_food_cheeze)," cheeze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_food_garlic)
		{
			prline = strcat(prline, "   ^xCCC", ftos(player.inv_food_garlic)," garlic^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_food_grapes)
		{
			prline = strcat(prline, "   ^xB09", ftos(player.inv_food_grapes)," grapes^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_food_onion)
		{
			prline = strcat(prline, "   ^xCC9", ftos(player.inv_food_onion)," onion^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_food_tomato)
		{
			prline = strcat(prline, "   ^xE22", ftos(player.inv_food_tomato)," tomato^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_food_turkeyleg)
		{
			prline = strcat(prline, "   ^xC92", ftos(player.inv_food_turkeyleg)," turkeyleg^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//
		if (player.inv_faeces_large)
		{
			if (autocvar_sv_risque >= 0.5) {
				prline = strcat(prline, "   ^x420", ftos(player.inv_faeces_large)," faeces large^7");
				counter ++;
				counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
				if not(counter) prline = "   ";
			}
		}
		if (player.inv_faeces_medium)
		{
			if (autocvar_sv_risque >= 0.5) {
				prline = strcat(prline, "   ^x420", ftos(player.inv_faeces_medium)," faeces medium^7");
				counter ++;
				counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
				if not(counter) prline = "   ";
			}
		}
		if (player.inv_faeces_small)
		{
			if (autocvar_sv_risque >= 0.5) {
				prline = strcat(prline, "   ^x420", ftos(player.inv_faeces_small)," faeces small^7");
				counter ++;
				counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
				if not(counter) prline = "   ";
			}
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Resources:\n");
		if (player.multitool_ammocurrent)
		{
			prline = strcat(prline, "   ^x000", ftos(player.multitool_ammocurrent)," converted nails^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.multitool_ammocurrentr)
		{
			prline = strcat(prline, "   ^xE00", ftos(player.multitool_ammocurrentr)," converted rockets^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.multitool_ammocurrentc)
		{
			prline = strcat(prline, "   ^x30D", ftos(player.multitool_ammocurrentc)," converted cells^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.ammo_nails)
		{
			prline = strcat(prline, "   ^xFF7", ftos(player.ammo_nails)," nails^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.ammo_rockets)
		{
			prline = strcat(prline, "   ^xF41", ftos(player.ammo_rockets)," rockets^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.ammo_cells)
		{
			prline = strcat(prline, "   ^x70F", ftos(player.ammo_cells)," cells^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.ammo_shells)
		{
			prline = strcat(prline, "   ^x750", ftos(player.ammo_shells)," shells^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.ammo_fuel)
		{
			prline = strcat(prline, "   ^x443", ftos(player.ammo_fuel)," fuel^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (g_nades) {
			if (player.grenades)
			{
				if (player.nadeselected == 0 || !player.nadeselected) {
					prline = strcat(prline, "   ^x4F4", ftos(player.grenades)," [grenades]^7");
				} else {
					prline = strcat(prline, "   ^x4F4", ftos(player.grenades)," grenades^7");
				}
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
			}
			
			if (player.fragnades)
			{
				if (player.nadeselected == 5) {
				prline = strcat(prline, "   ^x2A2", ftos(player.fragnades)," [fragnades]^7");
				} else {
				prline = strcat(prline, "   ^x2A2", ftos(player.fragnades)," fragnades^7");
				}
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
			}
			
			if (player.flashbangs)
			{
				if (player.nadeselected == 1) {
				prline = strcat(prline, "   ^xF4F", ftos(player.flashbangs)," [flashbangs]^7");
				} else {
				prline = strcat(prline, "   ^xF4F", ftos(player.flashbangs)," flashbangs^7");
				}
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
			}
			
			if (player.smokenades)
			{
				if (player.nadeselected == 2) {
				prline = strcat(prline, "   ^x444", ftos(player.smokenades)," [smokenades]^7");
				} else {
				prline = strcat(prline, "   ^x444", ftos(player.smokenades)," smokenades^7");
				}
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
			}
			
			if (player.landmines)
			{
				if (player.nadeselected == 3) {
				prline = strcat(prline, "   ^xF20", ftos(player.landmines)," [landmines]^7");
				} else {
				prline = strcat(prline, "   ^xF20", ftos(player.landmines)," landmines^7");
				}
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
			}
			
			if (player.atmines)
			{
				if (player.nadeselected == 4) {
				prline = strcat(prline, "   ^xF90", ftos(player.atmines)," [ATmines]^7");
				} else {
				prline = strcat(prline, "   ^xF90", ftos(player.atmines)," ATmines^7");
				}
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
			}
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Bars:\n");
		if (player.inv_bar_tin)
		{
			prline = strcat(prline, "   ^x777", ftos(player.inv_bar_tin)," tin^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_iron)
		{
			prline = strcat(prline, "   ^x111", ftos(player.inv_bar_iron)," iron^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_bronze)
		{
			prline = strcat(prline, "   ^x650", ftos(player.inv_bar_bronze)," bronze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_copper)
		{
			prline = strcat(prline, "   ^xf80", ftos(player.inv_bar_copper)," copper^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_silver)
		{
			prline = strcat(prline, "   ^xaaa", ftos(player.inv_bar_silver)," silver^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_gold)
		{
			prline = strcat(prline, "   ^xff0", ftos(player.inv_bar_gold)," gold^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_plat)
		{
			prline = strcat(prline, "   ^xfff", ftos(player.inv_bar_plat)," plat^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_jade)
		{
			prline = strcat(prline, "   ^x2f4", ftos(player.inv_bar_jade)," jade^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_amberium)
		{
			prline = strcat(prline, "   ^xc90", ftos(player.inv_bar_amberium)," amberium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//Faux, Fake bars
		if (player.inv_bar_f_tin)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_tin)," fauxtin^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_iron)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_iron)," fauxiron^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_bronze)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_bronze)," fauxbronze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_copper)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_copper)," fauxcopper^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_silver)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_silver)," fauxsilver^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_gold)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_gold)," fauxgold^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_plat)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_plat)," fauxplat^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_jade)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_jade)," fauxjade^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_bar_f_amberium)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_bar_f_amberium)," fauxamberium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Coins:\n");
		if (player.inv_coin_tin)
		{
			prline = strcat(prline, "   ^x777", ftos(player.inv_coin_tin)," tin^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_iron)
		{
			prline = strcat(prline, "   ^x111", ftos(player.inv_coin_iron)," iron^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_bronze)
		{
			prline = strcat(prline, "   ^x650", ftos(player.inv_coin_bronze)," bronze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_copper)
		{
			prline = strcat(prline, "   ^xf80", ftos(player.inv_coin_copper)," copper^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_silver)
		{
			prline = strcat(prline, "   ^xaaa", ftos(player.inv_coin_silver)," silver^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_gold)
		{
			prline = strcat(prline, "   ^xff0", ftos(player.inv_coin_gold)," gold^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_plat)
		{
			prline = strcat(prline, "   ^xfff", ftos(player.inv_coin_plat)," plat^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_jade)
		{
			prline = strcat(prline, "   ^x2f4", ftos(player.inv_coin_jade)," jade^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_amberium)
		{
			prline = strcat(prline, "   ^xc90", ftos(player.inv_coin_amberium)," amberium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//casino tokens
		if (player.inv_casinotoken_yellow)
		{
			prline = strcat(prline, "   ^xAA0", ftos(player.inv_casinotoken_yellow)," casinotokenyellow^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_blue)
		{
			prline = strcat(prline, "   ^x00A", ftos(player.inv_casinotoken_blue)," casinotokenblue^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_gray)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_casinotoken_gray)," casinotokengray^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_lightgreen)
		{
			prline = strcat(prline, "   ^xCF8", ftos(player.inv_casinotoken_lightgreen)," casinotokenlightgreen^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_lightblue)
		{
			prline = strcat(prline, "   ^xAAF", ftos(player.inv_casinotoken_lightblue)," casinotokenlightblue^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_rose)
		{
			prline = strcat(prline, "   ^xF09", ftos(player.inv_casinotoken_rose)," casinotokenrose^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_black)
		{
			prline = strcat(prline, "   ^x000", ftos(player.inv_casinotoken_black)," casinotokenblack^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_seabreeze)
		{
			prline = strcat(prline, "   ^x0FA", ftos(player.inv_casinotoken_seabreeze)," casinotokenseabreeze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_red)
		{
			prline = strcat(prline, "   ^xA00", ftos(player.inv_casinotoken_red)," casinotokenred^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_cyan)
		{
			prline = strcat(prline, "   ^x0AA", ftos(player.inv_casinotoken_cyan)," casinotokencyan^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_tan)
		{
			prline = strcat(prline, "   ^x840", ftos(player.inv_casinotoken_tan)," casinotokentan^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_green)
		{
			prline = strcat(prline, "   ^x0A0", ftos(player.inv_casinotoken_green)," casinotokengreen^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_casinotoken_purple)
		{
			prline = strcat(prline, "   ^x60A", ftos(player.inv_casinotoken_purple)," casinotokenpurple^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//Faux, Fake coins
		if (player.inv_coin_f_tin)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_tin)," fauxtin^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_iron)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_iron)," fauxiron^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_bronze)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_bronze)," fauxbronze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_copper)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_copper)," fauxcopper^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_silver)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_silver)," fauxsilver^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_gold)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_gold)," fauxgold^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_plat)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_plat)," fauxplat^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_jade)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_jade)," fauxjade^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_f_amberium)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_f_amberium)," fauxamberium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		//blatant/old counterfeit coins (cladding rubbing off, exposing inner metal, old)
		if (player.inv_coin_cf_tin)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_tin)," counterfeittin^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_iron)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_iron)," counterfeitiron^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_bronze)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_bronze)," counterfeitbronze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_copper)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_copper)," counterfeitcopper^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_silver)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_silver)," counterfeitsilver^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_gold)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_gold)," counterfeitgold^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_plat)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_plat)," counterfeitplat^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_jade)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_jade)," counterfeitjade^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_coin_cf_amberium)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_coin_cf_amberium)," counterfeitamberium^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Gems:\n");
		if (player.inv_gem_mithril)
		{
			prline = strcat(prline, "   ^xDDF", ftos(player.inv_gem_mithril)," mithril^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_diamond)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_gem_diamond)," diamond^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_ruby)
		{
			prline = strcat(prline, "   ^xF00", ftos(player.inv_gem_ruby)," ruby^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_emerald)
		{
			prline = strcat(prline, "   ^x0F0", ftos(player.inv_gem_emerald)," emerald^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_sapphire)
		{
			prline = strcat(prline, "   ^x00F", ftos(player.inv_gem_sapphire)," sapphire^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_pearl)
		{
			prline = strcat(prline, "   ^xFFF", ftos(player.inv_gem_pearl)," pearl^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_blackpearl)
		{
			prline = strcat(prline, "   ^x111", ftos(player.inv_gem_blackpearl)," blackpearl^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_amethyst)
		{
			prline = strcat(prline, "   ^xF0F", ftos(player.inv_gem_amethyst)," amethyst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_aquamarine)
		{
			prline = strcat(prline, "   ^x0DF", ftos(player.inv_gem_aquamarine)," aquamarine^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_quartz)
		{
			prline = strcat(prline, "   ^xFCC", ftos(player.inv_gem_quartz)," quartz^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_tourmaline)
		{
			prline = strcat(prline, "   ^xAF0", ftos(player.inv_gem_tourmaline)," tourmaline^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_chrysoberyl)
		{
			prline = strcat(prline, "   ^xFFB", ftos(player.inv_gem_chrysoberyl)," chrysoberyl^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_chalcedony)
		{
			prline = strcat(prline, "   ^xAAF", ftos(player.inv_gem_chalcedony)," chalcedony^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_topaz)
		{
			prline = strcat(prline, "   ^xFF0", ftos(player.inv_gem_topaz)," topaz^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_peridot)
		{
			prline = strcat(prline, "   ^x8F0", ftos(player.inv_gem_peridot)," peridot^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_jacinth)
		{
			prline = strcat(prline, "   ^xFA0", ftos(player.inv_gem_jacinth)," jacinth^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_onyx)
		{
			prline = strcat(prline, "   ^x111", ftos(player.inv_gem_onyx)," onyx^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_agate)
		{
			prline = strcat(prline, "   ^xFA9", ftos(player.inv_gem_agate)," agate^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		
		if (player.inv_gem_glass_w)
		{
			prline = strcat(prline, "   ^x999", ftos(player.inv_gem_glass_w)," whiteglass^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_glass_r)
		{
			prline = strcat(prline, "   ^x900", ftos(player.inv_gem_glass_r)," redglass^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_glass_g)
		{
			prline = strcat(prline, "   ^x090", ftos(player.inv_gem_glass_g)," greenglass^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_glass_b)
		{
			prline = strcat(prline, "   ^x009", ftos(player.inv_gem_glass_b)," blueglass^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_glass_y)
		{
			prline = strcat(prline, "   ^x990", ftos(player.inv_gem_glass_y)," yellowglass^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		
		if (player.inv_gem_f_mithril)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_mithril)," cutglassmithril^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_diamond)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_diamond)," cutglassdiamond^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_ruby)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_ruby)," cutglassruby^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_emerald)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_emerald)," cutglassemerald^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_sapphire)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_sapphire)," cutglasssapphire^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_pearl)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_pearl)," cutglasspearl^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_blackpearl)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_blackpearl)," cutglassblackpearl^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_amethyst)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_amethyst)," cutglassamethyst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_aquamarine)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_aquamarine)," cutglassaquamarine^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_quartz)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_quartz)," cutglassquartz^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_tourmaline)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_tourmaline)," cutglasstourmaline^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_chrysoberyl)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_chrysoberyl)," cutglasschrysoberyl^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_chalcedony)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_chalcedony)," cutglasschalcedony^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_topaz)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_topaz)," cutglasstopaz^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_peridot)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_peridot)," cutglassperidot^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_jacinth)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_jacinth)," cutglassjacinth^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_onyx)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_onyx)," cutglassonyx^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_gem_f_agate)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_gem_f_agate)," cutglassagate^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Misc:\n");
		
		
		if (player.inv_misc_mag_ak47_30)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_ak47_30)," ak47mag30^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_ak47_50)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_ak47_50)," ak47exmag50^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_drum_ak47_75)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_drum_ak47_75)," ak47drum75^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_ak47_100)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_ak47_100)," ak47exmag100^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_ak74_30)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_ak74_30)," ak74mag30^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_ak74_45)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_ak74_45)," ak74exmag45^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_bar_20)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_bar_20)," barmag20^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_bar_40)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_bar_40)," barexmag40^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_panmag_lewisgun_47)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_panmag_lewisgun_47)," lewisgunpanmag47^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_panmag_lewisgun_97)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_panmag_lewisgun_97)," lewisgunpanmag97^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_lightpistol)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_lightpistol)," lightpistolmag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_lightpistol)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_lightpistol)," lightpistolexmag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_drum_lightpistol)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_drum_lightpistol)," lightpistoldrum^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_betacmag_lightpistol)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_betacmag_lightpistol)," lightpistolbetacmag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_tinymag_pdw)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_tinymag_pdw)," pdwtinymag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_smallmag_pdw)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_smallmag_pdw)," pdwsmallmag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_stdmag_pdw)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_stdmag_pdw)," pdwstdmag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag40_pdw)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag40_pdw)," pdwexmag40^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_drum_pdw)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_drum_pdw)," pdwdrum^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_betacmag_pdw)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_betacmag_pdw)," pdwbetacmag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_m16_20)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_m16_20)," m16mag20^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_m16_30)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_m16_30)," m16mag30^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_betacmag_m16)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_betacmag_m16)," m16betacmag^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_styeraug_30)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_styeraug_30)," styeraugmag30^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_styeraug_42)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_styeraug_42)," styeraugexmag42^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_cylinder_r1856)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_cylinder_r1856)," cylinderR1856^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_suppressor45)
		{
			prline = strcat(prline, "   ^x999", ftos(player.inv_misc_suppressor45)," suppressor45^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_suppressormac10)
		{
			prline = strcat(prline, "   ^x444", ftos(player.inv_misc_suppressormac10)," suppressorMAC10^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_suppressor9mm)
		{
			prline = strcat(prline, "   ^x222", ftos(player.inv_misc_suppressor9mm)," suppressor9MM^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_suppressor5n7mm)
		{
			prline = strcat(prline, "   ^x222", ftos(player.inv_misc_suppressor5n7mm)," suppressor5.7MM^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_suppressorrifle)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_suppressorrifle)," suppressorRIFLE^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_suppressorpdw)
		{
			prline = strcat(prline, "   ^x222", ftos(player.inv_misc_suppressorpdw)," suppressorPDW^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_uzi_20)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_uzi_20)," uzimag20^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_uzi_25)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_uzi_25)," uzimag25^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_uzi_32)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_uzi_32)," uzimag32^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_uzi_40)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_uzi_40)," uziexmag40^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_uzi_50)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_uzi_50)," uziexmag50^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_drum_uzi_82)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_drum_uzi_82)," uzidrum82^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_uzi_106)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_uzi_106)," uziexmag106^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_tec9_20)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_tec9_20)," tec9mag20^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_tec9_10)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_tec9_10)," tec9mag10^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_mag_tec9_32)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_mag_tec9_32)," tec9mag32^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_tec9_36)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_tec9_36)," tec9exmag36^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_exmag_tec9_50)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_exmag_tec9_50)," tec9exmag50^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.inv_misc_drum_tec9_72)
		{
			prline = strcat(prline, "   ^x888", ftos(player.inv_misc_drum_tec9_72)," tec9drum72^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, invreader, "Weapons:\n");
		local entity ewp;
		float i;
		float j;
		for(j = WEP_FIRST; j <= WEP_LAST; ++j)
		{
			if(WEPSET_CONTAINS_EW(player, j))
			{
				ewp = get_weaponinfo(j);
				prline = strcat(prline, "   ^x770", ewp.netname," ^7");
				counter ++;
				counter = CheckPrintNewLine_OrConcat(mystring, doconcat, invreader, counter, prline);
				if not(counter) prline = "   ";
			}
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, invreader, strcat(prline,"\n"));
		}
	}
}

void CmdPrintInventory (entity player, float doconcat, .string mystring)
{
	local string prline;
	local float counter;
	CmdPrintInventoryOfTo(player, player, doconcat, mystring);
	if ((clienttype(player) == CLIENTTYPE_REAL))
	{
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, player, "Personal Knowledge:\n");
		if (player.spell_agency > 0)
		{
			prline = strcat(prline, "   ^xF61LvL:", ftos(player.spell_agency)," Agency^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_acervilux > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_acervilux)," AcerviLux^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_aquacaelestis > 0)
		{
			prline = strcat(prline, "   ^x99CLvL:", ftos(player.spell_aquacaelestis)," AquaCaelestis^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_balllightining > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_balllightining)," BallLightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_darkritual > 0)
		{
			prline = strcat(prline, "   ^x000LvL:", ftos(player.spell_darkritual)," DarkRitual^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_death > 0)
		{
			prline = strcat(prline, "   ^x000LvL:", ftos(player.spell_death)," Death^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_drainlife > 0)
		{
			prline = strcat(prline, "   ^xF0FLvL:", ftos(player.spell_drainlife)," Drainlife^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_cancellation > 0)
		{
			prline = strcat(prline, "   ^x111LvL:", ftos(player.spell_cancellation)," Cancellation^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_castfromlife > 0)
		{
			prline = strcat(prline, "   ^x901LvL:", ftos(player.spell_castfromlife)," CastFromLife^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_chainlightining > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_chainlightining)," ChainLightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_chargedbolt > 0)
		{
			prline = strcat(prline, "   ^x13ELvL:", ftos(player.spell_chargedbolt)," ChargedBolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_clairvoyance > 0)
		{
			prline = strcat(prline, "   ^xF0CLvL:", ftos(player.spell_clairvoyance)," Clairvoyance^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_confer > 0)
		{
			prline = strcat(prline, "   ^xFF0LvL:", ftos(player.spell_confer)," Confer^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_corvuspenna > 0)
		{
			prline = strcat(prline, "   ^x222LvL:", ftos(player.spell_corvuspenna)," CorvusPenna^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_iceball > 0)
		{
			prline = strcat(prline, "   ^x00FLvL:", ftos(player.spell_iceball)," Iceball^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_icestar > 0)
		{
			prline = strcat(prline, "   ^x07FLvL:", ftos(player.spell_icestar)," IceStar^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_inferno > 0)
		{
			prline = strcat(prline, "   ^xF40LvL:", ftos(player.spell_inferno)," Inferno^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_explosion > 0)
		{
			prline = strcat(prline, "   ^xF51LvL:", ftos(player.spell_explosion)," Explosion^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_extinguish > 0)
		{
			prline = strcat(prline, "   ^x000LvL:", ftos(player.spell_extinguish)," Extinguish^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firebolt > 0)
		{
			prline = strcat(prline, "   ^xF70LvL:", ftos(player.spell_firebolt)," Firebolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_fireball > 0)
		{
			prline = strcat(prline, "   ^xF00LvL:", ftos(player.spell_fireball)," Fireball^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firebeam > 0)
		{
			prline = strcat(prline, "   ^xF41LvL:", ftos(player.spell_firebeam)," Firebeam^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firewall > 0)
		{
			prline = strcat(prline, "   ^xF20LvL:", ftos(player.spell_firewall)," FireWall^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firecentury > 0)
		{
			prline = strcat(prline, "   ^xF50LvL:", ftos(player.spell_firecentury)," FireCentury^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_flameburst > 0)
		{
			prline = strcat(prline, "   ^xF20LvL:", ftos(player.spell_flameburst)," Flameburst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_frostbeam > 0)
		{
			prline = strcat(prline, "   ^x0FFLvL:", ftos(player.spell_frostbeam)," Frostbeam^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_grace > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_grace)," Grace^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_heal > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_heal)," Heal^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_holybolt > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_holybolt)," HolyBolt^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_holylight > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_holylight)," HolyLight^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_holyword > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_holyword)," HolyWord^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightining > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_lightining)," Lightining^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightiningburst > 0)
		{
			prline = strcat(prline, "   ^x24FLvL:", ftos(player.spell_lightiningburst)," LightiningBurst^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightiningstrike > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_lightiningstrike)," LightiningStrike^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightiningwall > 0)
		{
			prline = strcat(prline, "   ^x25FLvL:", ftos(player.spell_lightiningwall)," LightiningWall^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_magmasphere > 0)
		{
			prline = strcat(prline, "   ^xF00LvL:", ftos(player.spell_magmasphere)," MagmaSphere^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_manashield > 0)
		{
			prline = strcat(prline, "   ^x80FLvL:", ftos(player.spell_manashield)," ManaShield^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_magicbullets > 0)
		{
			prline = strcat(prline, "   ^x93FLvL:", ftos(player.spell_magicbullets)," MagicBullets^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_magicmissile > 0)
		{
			prline = strcat(prline, "   ^x90FLvL:", ftos(player.spell_magicmissile)," MagicMissile^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_monstertomonolith > 0)
		{
			prline = strcat(prline, "   ^xA99LvL:", ftos(player.spell_monstertomonolith)," MonsterToMonolith^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_monstertomouse > 0)
		{
			prline = strcat(prline, "   ^xA99LvL:", ftos(player.spell_monstertomouse)," MonsterToMouse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_meteor > 0)
		{
			prline = strcat(prline, "   ^x710LvL:", ftos(player.spell_meteor)," Meteor^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_meteorshower > 0)
		{
			prline = strcat(prline, "   ^x730LvL:", ftos(player.spell_meteorshower)," MeteorShower^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_mimic > 0)
		{
			prline = strcat(prline, "   ^x70FLvL:", ftos(player.spell_mimic)," Mimic^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_nivosus > 0)
		{
			prline = strcat(prline, "   ^xAAALvL:", ftos(player.spell_nivosus)," Nivosus^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_paralyse > 0)
		{
			prline = strcat(prline, "   ^x0F0LvL:", ftos(player.spell_paralyse)," Paralyse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_phantasmalbarrier > 0)
		{
			prline = strcat(prline, "   ^x90FLvL:", ftos(player.spell_phantasmalbarrier)," PhantasmalBarrier^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_plumosus > 0)
		{
			prline = strcat(prline, "   ^xDDDLvL:", ftos(player.spell_plumosus)," Plumosus^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_raiseundead > 0)
		{
			prline = strcat(prline, "   ^xA99LvL:", ftos(player.spell_raiseundead)," RaiseUndead^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_repair > 0)
		{
			prline = strcat(prline, "   ^x90FLvL:", ftos(player.spell_repair)," Repair^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_ringoffire > 0)
		{
			prline = strcat(prline, "   ^xF20LvL:", ftos(player.spell_ringoffire)," RingOfFire^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_rosa > 0)
		{
			prline = strcat(prline, "   ^xF09LvL:", ftos(player.spell_rosa)," Rosa^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_scepterofflame > 0)
		{
			prline = strcat(prline, "   ^xF30LvL:", ftos(player.spell_scepterofflame)," ScepterOfFlame^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_stonecurse > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_stonecurse)," StoneCurse^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_stonerain > 0)
		{
			prline = strcat(prline, "   ^xBAALvL:", ftos(player.spell_stonerain)," StoneRain^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_timesink > 0)
		{
			prline = strcat(prline, "   ^x80ALvL:", ftos(player.spell_timesink)," Timesink^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_vampyricconduit > 0)
		{
			prline = strcat(prline, "   ^x800LvL:", ftos(player.spell_vampyricconduit)," VampyricConduit^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		//Knowlege
		if (player.knowledge_carpentry)
		{
			prline = strcat(prline, "   ^xBA9Gnosis:", ftos(player.knowledge_carpentry)," Carpentry^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.knowledge_mortise)
		{
			prline = strcat(prline, "   ^xBA9Gnosis:", ftos(player.knowledge_mortise)," Mortise^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.knowledge_stonemasonry)
		{
			prline = strcat(prline, "   ^xBB9Gnosis:", ftos(player.knowledge_stonemasonry)," StoneMasonry^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.knowledge_arch)
		{
			prline = strcat(prline, "   ^xBB9Gnosis:", ftos(player.knowledge_arch)," Arch^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.knowledge_ironworking)
		{
			prline = strcat(prline, "   ^x999Gnosis:", ftos(player.knowledge_ironworking)," IronWorking^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.knowledge_welding)
		{
			prline = strcat(prline, "   ^xCCCGnosis:", ftos(player.knowledge_welding)," Welding^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.knowledge_concrete)
		{
			prline = strcat(prline, "   ^xAAAGnosis:", ftos(player.knowledge_concrete)," Concrete^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, player, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, player, "Personal Constitution:\n");
		if (player.health)
		{
			prline = strcat(prline, "   ^x900", ftos(player.health)," health^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (ambient_temperature)
		{
			prline = strcat(prline, "   ^x888", ftos(floor(player.bodycoretemp)),"^x333oC/^x888", ftos(floor(((player.bodycoretemp*1.8)+32))),"^x333oF ^x888temperature^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_alcohol)
		{
			prline = strcat(prline, "   ^x000", ftos(player.con_alcohol)," alcohol^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_fiber)
		{
			prline = strcat(prline, "   ^x000", ftos(player.con_fiber)," fiber^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_protein)
		{
			prline = strcat(prline, "   ^x000", ftos(player.con_protein)," protein^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_starch)
		{
			prline = strcat(prline, "   ^x000", ftos(player.con_starch)," starch^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_sugar)
		{
			prline = strcat(prline, "   ^x000", ftos(player.con_sugar)," sugar^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_water)
		{
			prline = strcat(prline, "   ^x000", ftos(player.con_water)," water^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_filler)
		{
			prline = strcat(prline, "   ^x000", ftos(player.con_filler)," filler^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_waste_liquid)
		{
			prline = strcat(prline, "   ^x220", ftos(player.con_waste_liquid)," waste liquid^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.con_waste_solid)
		{
			prline = strcat(prline, "   ^x210", ftos(player.con_waste_solid)," waste solid^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint_OrConcat(mystring, doconcat, player, strcat(prline,"\n"));
		}
		
		/////////
		prline = "   ";
		counter = 0;
		sprint_OrConcat(mystring, doconcat, player, "Personal Odors:\n");
		if (player.smell_acrid)
		{
			prline = strcat(prline, "   ^x012", ftos(player.smell_acrid)," acrid^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_alcohol)
		{
			prline = strcat(prline, "   ^x111", ftos(player.smell_alcohol)," alchol^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_bodyodor)
		{
			prline = strcat(prline, "   ^x320", ftos(player.smell_bodyodor)," bodyodor^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_cheeze)
		{
			prline = strcat(prline, "   ^x330", ftos(player.smell_cheeze)," cheeze^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_earthy)
		{
			prline = strcat(prline, "   ^x310", ftos(player.smell_earthy)," earthy^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_faeces)
		{
			prline = strcat(prline, "   ^x210", ftos(player.smell_faeces)," faeces^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_garlic)
		{
			prline = strcat(prline, "   ^x322", ftos(player.smell_garlic)," garlic^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_urine)
		{
			prline = strcat(prline, "   ^x110", ftos(player.smell_urine)," urine^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_roses)
		{
			prline = strcat(prline, "   ^x411", ftos(player.smell_roses)," roses^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.smell_rottingflesh)
		{
			prline = strcat(prline, "   ^x431", ftos(player.smell_rottingflesh)," rottingflesh^7");
			counter ++;
			counter = CheckPrintNewLine_OrConcat(mystring, doconcat, player, counter, prline);
			if not(counter) prline = "   ";
		}
		
		if (counter) {
			sprint_OrConcat(mystring, doconcat, player, strcat(prline,"\n"));
		}
		
		if (player.iscontainer_storage) {
			local float tally;
			tally = ContainerTallyStorage(player);
			if (tally >= player.iscontainer_storage) {
				sprint_OrConcat(mystring, doconcat, player, strcat("Your inventory is full. You have a max storage of ^x555",
				ftos(player.iscontainer_storage),"^7\n"));
			} else {
				sprint_OrConcat(mystring, doconcat, player, strcat("Your remaining inventory space is: ^x555", ftos(player.iscontainer_storage-tally),"^7 of ^x555",
				ftos(player.iscontainer_storage),"^7\n"));
			}
		}
		
		local vector mywealthtally;
		mywealthtally = '0 0 0';
		
		//mywealthtally = WealthTally_FormatPGS(player);
		//if (mywealthtally != '0 0 0') {
		//	sprint_OrConcat(mystring, doconcat, player, strcat("Your coins and gems are equal in wealth to\n     ^x111[^xfff",
		//	ftos(mywealthtally_x)," plat^7^x111, ^xff0",
		//	ftos(mywealthtally_y)," gold^7^x111, and ^xaaa",
		//	ftos(mywealthtally_z)," silver^7^x111]^7\n"));
		//}
		
		player.rtnvl2 = 0; //This var is used for when needing a second "return" value.
		mywealthtally = WealthTally_FormatPGSc(player);
		if ((mywealthtally != '0 0 0') || (player.rtnvl2 != 0)) {
			sprint_OrConcat(mystring, doconcat, player, strcat("Your coins and gems are equal in wealth to\n     ^x111[^xfff",
			ftos(mywealthtally_x)," plat^7^x111, ^xff0",
			ftos(mywealthtally_y)," gold^7^x111, ^xaaa",
			ftos(mywealthtally_z)," silver^7"));
			sprint_OrConcat(mystring, doconcat, player, strcat("^x111, and ^xf80",
			ftos(player.rtnvl2)," copper^7^x111]^7\n"));
		}
		player.rtnvl2 = 0;
		
		if (player.peaceful == 1) {
			sprint_OrConcat(mystring, doconcat, player, "^x0C2You are peaceful^7\n");
		}
		
		if (player.hasmanashield > time) {
			sprint_OrConcat(mystring, doconcat, player, "^x80FYou are protected by mana shield^7\n");
		}
		
		if (player.hasclairvoyance > time) {
			sprint_OrConcat(mystring, doconcat, player, "^xF0CYour mind sees what others perceive^7\n");
		}
		
		if (player.hascastfromlife) {
			sprint_OrConcat(mystring, doconcat, player, "^x901You are casting from life points^7\n");
		}
		 
		if (player.stoned) {
			sprint_OrConcat(mystring, doconcat, player, "^xBBBYou are made of stone^7\n");
		}
		
		//frozen == 1 is ice (2 is paralysis)
		if ((player.frozen == 1) || player.freezetag_frozen) {
			sprint_OrConcat(mystring, doconcat, player, "^x04BYou are encased in ice^7\n");
		}
		
		if (player.frozen == 2) {
			sprint_OrConcat(mystring, doconcat, player, "^x5B0You are paralysed^7\n");
		}  
		
		if (player.permblinded) {
			sprint_OrConcat(mystring, doconcat, player, "^x900You have been permanently blinded^7\n");
		} else if (player.stat_blinded > 90) {
			sprint_OrConcat(mystring, doconcat, player, "^x111You have been temporarily blinded^7\n");
		} else if (player.stat_blinded > 80) {
			sprint_OrConcat(mystring, doconcat, player, "^x222Your vision is greatly impared^7\n");
		} else if (player.stat_blinded > 40) {
			sprint_OrConcat(mystring, doconcat, player, "^x444Your are recovering from temporarily being blinded^7\n");
		}
		
		if (player.tempdisorientated) {
			sprint_OrConcat(mystring, doconcat, player, "^x888You are disorientated^7\n");
		} 
		
		if (player.handcuffed == 1) {
			sprint_OrConcat(mystring, doconcat, player, "^x555You are shackled^7\n");
		} 
		
		if (player.prisonerlevel == 1) {
			sprint_OrConcat(mystring, doconcat, player, "^x333You are a prisoner^7\n");
		} else if (player.prisonerlevel == 2) {
			sprint_OrConcat(mystring, doconcat, player, "^x333You are a jailed prisoner^7\n");
		} else if (player.prisonerlevel == 3) {
			sprint_OrConcat(mystring, doconcat, player, "^x333You are a chained prisoner^7\n");
		}
		
		float mytempisdamage;
		mytempisdamage = 0;
		
		if (player.tempmovementimpared) {
			sprint_OrConcat(mystring, doconcat, player, "^xA00An injury impares your movement^7\n");
			mytempisdamage = 1;
		}
		
		if (player.permmangled_l && player.permmangled_r) {
			sprint_OrConcat(mystring, doconcat, player, "^x900Both your hands have been permanently mangled^7\n");
		} else if (player.tempmangled_l && player.tempmangled_r) {
			sprint_OrConcat(mystring, doconcat, player, "^x900Both your hands have been mangled^7\n");
			mytempisdamage = 1;
		} else {
		
			if (player.permmangled_l) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your left hand has permanently been mangled^7\n");
			} else if (player.tempmangled_l) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your left hand has been mangled^7\n");
				mytempisdamage = 1;
			}
			
			if (player.permmangled_r) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your right hand has permanently been mangled^7\n");
			} else if (player.tempmangled_r) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your right hand has been mangled^7\n");
				mytempisdamage = 1;
			}
		}
		
		if (player.permhobbled_l && player.permhobbled_r) {
			sprint_OrConcat(mystring, doconcat, player, "^x900Both your feet have been permanently hobbled^7\n");
		} else if (player.temphobbled_l && player.temphobbled_r) {
			sprint_OrConcat(mystring, doconcat, player, "^x900Both your feet have been hobbled^7\n");
			mytempisdamage = 1;
		} else {
			if (player.permhobbled_l) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your left foot has been permanently hobbled^7\n");
			} else if (player.temphobbled_l) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your left foot has been hobbled^7\n");
				mytempisdamage = 1;
			}
			
			if (player.permhobbled_r) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your right foot has been permanently hobbled^7\n");
			} else if (player.temphobbled_r) {
				sprint_OrConcat(mystring, doconcat, player, "^x900Your right foot has been hobbled^7\n");
				mytempisdamage = 1;
			}
		}
		
		if (mytempisdamage == 1) {
			if (!player.tempmanhoblocked) {
			if (player.tempmanhobheal_nexttime > time){
				sprint_OrConcat(mystring, doconcat, player, strcat("You are in the process of healing mangled or hobbled appendages: ^xF00", ftos(player.tempmanhobheal_nexttime-time),
				"^7 seconds remaining\n"));
			}
			}
			
			if (!player.tempmvmntimprdlocked) {
			if (player.tempmvmntimprdheal_nexttime > time){
				sprint_OrConcat(mystring, doconcat, player, strcat("You are in the process of healing an injury that impares your movements: ^xF00", ftos(player.tempmvmntimprdheal_nexttime-time),
				"^7 seconds remaining\n"));
			}
			}
		}
		
		if (player.body_phal_stat == 1) {
			sprint_OrConcat(mystring, doconcat, player, "^x900Your genitals have been completely removed, you are a eunich^7\n");
		} else if (player.body_phal_stat == 2) {
			sprint_OrConcat(mystring, doconcat, player, "^x900Your balls have been cut off, you are castrated^7\n");
		} else if (player.body_phal_stat == 3) {
			sprint_OrConcat(mystring, doconcat, player, "^x900Your phallus has been cut off, your stones are all that is left of your genitallia^7\n");
		}
		
		if (player.hasburned_others_to_death >= 1) {
			if (player.hasburned_others_to_death >= 1000) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xFA0You are a pyromancer, burning away countless souls: ", ftos(player.hasburned_others_to_death),"^7\n"));
			} else if (player.hasburned_others_to_death >= 500) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xF90You see the world as kindling: ", ftos(player.hasburned_others_to_death),"^7\n"));
			} else if (player.hasburned_others_to_death >= 250) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xF90You cleanse the realm by flame: ", ftos(player.hasburned_others_to_death),"^7\n"));
			} else if (player.hasburned_others_to_death >= 100) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xF80You are adept at punisment by fire: ", ftos(player.hasburned_others_to_death),"^7\n"));
			} else if (player.hasburned_others_to_death >= 30) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xF70You walk the path of flame: ", ftos(player.hasburned_others_to_death),"^7\n"));
			} else if (player.hasburned_others_to_death >= 10) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xF60You have begun on your path of conquest by fire: ", ftos(player.hasburned_others_to_death),"^7\n"));
			} else if (player.hasburned_others_to_death >= 1) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xF50You have burned others to death: ", ftos(player.hasburned_others_to_death),"^7\n"));
			}
		}
		
		if (player.hasharmed_prisoner) {
			if (player.hascommitted_depraved_act) {
				//Instead print below
			} else {
				sprint_OrConcat(mystring, doconcat, player, "^xAAAYou have harmed prisoners^7\n");
			}
		}
		
		if (player.hascommitted_depraved_act) {
			if (player.hascommitted_depraved_act >= 100) {
				sprint_OrConcat(mystring, doconcat, player, "^x200You have fallen into an endless pit of depravity, as if a demon^7\n");
			} else if (player.hascommitted_depraved_act >= 50) {
				sprint_OrConcat(mystring, doconcat, player, "^x400You have fallen into a blackened sea into depravity, your soul forever tainted^7\n");
			} else if (player.hascommitted_depraved_act >= 10) {
				sprint_OrConcat(mystring, doconcat, player, "^x600You have fallen deeply into depravity^7\n");
			} else {
				sprint_OrConcat(mystring, doconcat, player, "^x900You have fallen into depravity^7\n");
			}
		} else if (player.hascommitted_act_of_grace) {
			if ((!player.hasharmed_prisoner) && player.hascommitted_act_of_grace >= 1000) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xFFFYou have performed exhaustless acts of grace, you are peerless in your nobility: ", ftos(player.hascommitted_act_of_grace),"^7\n"));
			} else if ((!player.hasharmed_prisoner) && player.hascommitted_act_of_grace >= 500) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xFFFYou have performed luxuriant acts of grace, your magnanimity shines as such: ", ftos(player.hascommitted_act_of_grace),"^7\n"));
			} else if (player.hascommitted_act_of_grace >= 50) {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xFCCYou have performed considerable acts of grace, which measure: ", ftos(player.hascommitted_act_of_grace),"^7\n"));
			} else {
				sprint_OrConcat(mystring, doconcat, player, strcat("^xCFCYou have performed acts of grace, which measure: ", ftos(player.hascommitted_act_of_grace),"^7\n"));
			}
		}
		
		if (player.health <= 0) {
			sprint_OrConcat(mystring, doconcat, player, "^x111You are dead^7\n");
		}
	}
}

void CmdPrintSpellStats (entity player)
{
	local string prline;
	local float counter;
	local float expneeded;
	expneeded = 0;
	if ((clienttype(player) == CLIENTTYPE_REAL))
	{
		/////////
		prline = "   ";
		counter = 0;
		sprint(player, "Spell Stats: Spell Level, Current Experience Within Current LvL, Experience Needed For Next Spell LvL\n");
		if (player.spell_agency > 0)
		{
			prline = strcat(prline, "   ^xF61LvL:", ftos(player.spell_agency)," Agency");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_agency)));
			expneeded = CalcSpellExpForNextLVL(player, spell_agency);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_acervilux > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_acervilux)," AcerviLux");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_acervilux)));
			expneeded = CalcSpellExpForNextLVL(player, spell_acervilux);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_aquacaelestis > 0)
		{
			prline = strcat(prline, "   ^x99CLvL:", ftos(player.spell_aquacaelestis)," AquaCaelestis");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_aquacaelestis)));
			expneeded = CalcSpellExpForNextLVL(player, spell_aquacaelestis);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_balllightining > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_balllightining)," BallLightining");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_balllightining)));
			expneeded = CalcSpellExpForNextLVL(player, spell_balllightining);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_darkritual > 0)
		{
			prline = strcat(prline, "   ^x000LvL:", ftos(player.spell_darkritual)," DarkRitual");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_darkritual)));
			expneeded = CalcSpellExpForNextLVL(player, spell_darkritual);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_death > 0)
		{
			prline = strcat(prline, "   ^x000LvL:", ftos(player.spell_death)," Death");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_death)));
			expneeded = CalcSpellExpForNextLVL(player, spell_death);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_drainlife > 0)
		{
			prline = strcat(prline, "   ^xF0FLvL:", ftos(player.spell_drainlife)," Drainlife");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_drainlife)));
			expneeded = CalcSpellExpForNextLVL(player, spell_drainlife);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_cancellation > 0)
		{
			prline = strcat(prline, "   ^x111LvL:", ftos(player.spell_cancellation)," Cancellation");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_cancellation)));
			expneeded = CalcSpellExpForNextLVL(player, spell_cancellation);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_castfromlife > 0)
		{
			prline = strcat(prline, "   ^x901LvL:", ftos(player.spell_castfromlife)," CastFromLife");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_castfromlife)));
			expneeded = CalcSpellExpForNextLVL(player, spell_castfromlife);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_chainlightining > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_chainlightining)," ChainLightining");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_chainlightining)));
			expneeded = CalcSpellExpForNextLVL(player, spell_chainlightining);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_chargedbolt > 0)
		{
			prline = strcat(prline, "   ^x13ELvL:", ftos(player.spell_chargedbolt)," ChargedBolt");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_chargedbolt)));
			expneeded = CalcSpellExpForNextLVL(player, spell_chargedbolt);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_clairvoyance > 0)
		{
			prline = strcat(prline, "   ^xF0CLvL:", ftos(player.spell_clairvoyance)," Clairvoyance");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_clairvoyance)));
			expneeded = CalcSpellExpForNextLVL(player, spell_clairvoyance);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_confer > 0)
		{
			prline = strcat(prline, "   ^xFF0LvL:", ftos(player.spell_confer)," Confer");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_confer)));
			expneeded = CalcSpellExpForNextLVL(player, spell_confer);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_corvuspenna > 0)
		{
			prline = strcat(prline, "   ^x222LvL:", ftos(player.spell_corvuspenna)," CorvusPenna");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_corvuspenna)));
			expneeded = CalcSpellExpForNextLVL(player, spell_corvuspenna);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_iceball > 0)
		{
			prline = strcat(prline, "   ^x00FLvL:", ftos(player.spell_iceball)," Iceball");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_iceball)));
			expneeded = CalcSpellExpForNextLVL(player, spell_iceball);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_icestar > 0)
		{
			prline = strcat(prline, "   ^x07FLvL:", ftos(player.spell_icestar)," IceStar");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_icestar)));
			expneeded = CalcSpellExpForNextLVL(player, spell_icestar);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_inferno > 0)
		{
			prline = strcat(prline, "   ^xF40LvL:", ftos(player.spell_inferno)," Inferno");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_inferno)));
			expneeded = CalcSpellExpForNextLVL(player, spell_inferno);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_explosion > 0)
		{
			prline = strcat(prline, "   ^xF51LvL:", ftos(player.spell_explosion)," Explosion");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_explosion)));
			expneeded = CalcSpellExpForNextLVL(player, spell_explosion);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_extinguish > 0)
		{
			prline = strcat(prline, "   ^x000LvL:", ftos(player.spell_extinguish)," Extinguish");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_extinguish)));
			expneeded = CalcSpellExpForNextLVL(player, spell_extinguish);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firebolt > 0)
		{
			prline = strcat(prline, "   ^xF70LvL:", ftos(player.spell_firebolt)," Firebolt");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_firebolt)));
			expneeded = CalcSpellExpForNextLVL(player, spell_firebolt);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_fireball > 0)
		{
			prline = strcat(prline, "   ^xF00LvL:", ftos(player.spell_fireball)," Fireball");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_fireball)));
			expneeded = CalcSpellExpForNextLVL(player, spell_fireball);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firebeam > 0)
		{
			prline = strcat(prline, "   ^xF41LvL:", ftos(player.spell_firebeam)," Firebeam");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_firebeam)));
			expneeded = CalcSpellExpForNextLVL(player, spell_firebeam);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firewall > 0)
		{
			prline = strcat(prline, "   ^xF20LvL:", ftos(player.spell_firewall)," FireWall");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_firewall)));
			expneeded = CalcSpellExpForNextLVL(player, spell_firewall);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_firecentury > 0)
		{
			prline = strcat(prline, "   ^xF50LvL:", ftos(player.spell_firecentury)," FireCentury");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_firecentury)));
			expneeded = CalcSpellExpForNextLVL(player, spell_firecentury);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_flameburst > 0)
		{
			prline = strcat(prline, "   ^xF20LvL:", ftos(player.spell_flameburst)," Flameburst");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_flameburst)));
			expneeded = CalcSpellExpForNextLVL(player, spell_flameburst);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_frostbeam > 0)
		{
			prline = strcat(prline, "   ^x0FFLvL:", ftos(player.spell_frostbeam)," Frostbeam");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_frostbeam)));
			expneeded = CalcSpellExpForNextLVL(player, spell_frostbeam);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_grace > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_grace)," Grace");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_grace)));
			expneeded = CalcSpellExpForNextLVL(player, spell_grace);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_heal > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_heal)," Heal");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_heal)));
			expneeded = CalcSpellExpForNextLVL(player, spell_heal);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_holybolt > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_holybolt)," HolyBolt");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_holybolt)));
			expneeded = CalcSpellExpForNextLVL(player, spell_holybolt);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_holylight > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_holylight)," HolyLight");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_holylight)));
			expneeded = CalcSpellExpForNextLVL(player, spell_holylight);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_holyword > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_holyword)," HolyWord");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_holyword)));
			expneeded = CalcSpellExpForNextLVL(player, spell_holyword);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightining > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_lightining)," Lightining");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_lightining)));
			expneeded = CalcSpellExpForNextLVL(player, spell_lightining);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightiningburst > 0)
		{
			prline = strcat(prline, "   ^x24FLvL:", ftos(player.spell_lightiningburst)," LightiningBurst");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_lightiningburst)));
			expneeded = CalcSpellExpForNextLVL(player, spell_lightiningburst);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightiningstrike > 0)
		{
			prline = strcat(prline, "   ^x04FLvL:", ftos(player.spell_lightiningstrike)," LightiningStrike");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_lightiningstrike)));
			expneeded = CalcSpellExpForNextLVL(player, spell_lightiningstrike);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_lightiningwall > 0)
		{
			prline = strcat(prline, "   ^x25FLvL:", ftos(player.spell_lightiningwall)," LightiningWall");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_lightiningwall)));
			expneeded = CalcSpellExpForNextLVL(player, spell_lightiningwall);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_magmasphere > 0)
		{
			prline = strcat(prline, "   ^xF00LvL:", ftos(player.spell_magmasphere)," MagmaSphere");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_magmasphere)));
			expneeded = CalcSpellExpForNextLVL(player, spell_magmasphere);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_manashield > 0)
		{
			prline = strcat(prline, "   ^x80FLvL:", ftos(player.spell_manashield)," ManaShield");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_manashield)));
			expneeded = CalcSpellExpForNextLVL(player, spell_manashield);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_magicbullets > 0)
		{
			prline = strcat(prline, "   ^x93FLvL:", ftos(player.spell_magicbullets)," MagicBullets");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_magicbullets)));
			expneeded = CalcSpellExpForNextLVL(player, spell_magicbullets);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_magicmissile > 0)
		{
			prline = strcat(prline, "   ^x90FLvL:", ftos(player.spell_magicmissile)," MagicMissile");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_magicmissile)));
			expneeded = CalcSpellExpForNextLVL(player, spell_magicmissile);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_monstertomonolith > 0)
		{
			prline = strcat(prline, "   ^xA99LvL:", ftos(player.spell_monstertomonolith)," MonsterToMonolith");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_monstertomonolith)));
			expneeded = CalcSpellExpForNextLVL(player, spell_monstertomonolith);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_monstertomouse > 0)
		{
			prline = strcat(prline, "   ^xA99LvL:", ftos(player.spell_monstertomouse)," MonsterToMouse");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_monstertomouse)));
			expneeded = CalcSpellExpForNextLVL(player, spell_monstertomouse);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_meteor > 0)
		{
			prline = strcat(prline, "   ^x710LvL:", ftos(player.spell_meteor)," Meteor");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_meteor)));
			expneeded = CalcSpellExpForNextLVL(player, spell_meteor);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_meteorshower > 0)
		{
			prline = strcat(prline, "   ^x730LvL:", ftos(player.spell_meteorshower)," MeteorShower");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_meteorshower)));
			expneeded = CalcSpellExpForNextLVL(player, spell_meteorshower);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_mimic > 0)
		{
			prline = strcat(prline, "   ^x70FLvL:", ftos(player.spell_mimic)," Mimic");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_mimic)));
			expneeded = CalcSpellExpForNextLVL(player, spell_mimic);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_nivosus > 0)
		{
			prline = strcat(prline, "   ^xAAALvL:", ftos(player.spell_nivosus)," Nivosus");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_nivosus)));
			expneeded = CalcSpellExpForNextLVL(player, spell_nivosus);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_paralyse > 0)
		{
			prline = strcat(prline, "   ^x0F0LvL:", ftos(player.spell_paralyse)," Paralyse");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_paralyse)));
			expneeded = CalcSpellExpForNextLVL(player, spell_paralyse);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_phantasmalbarrier > 0)
		{
			prline = strcat(prline, "   ^x90FLvL:", ftos(player.spell_phantasmalbarrier)," PhantasmalBarrier");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_phantasmalbarrier)));
			expneeded = CalcSpellExpForNextLVL(player, spell_phantasmalbarrier);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_plumosus > 0)
		{
			prline = strcat(prline, "   ^xDDDLvL:", ftos(player.spell_plumosus)," Plumosus");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_plumosus)));
			expneeded = CalcSpellExpForNextLVL(player, spell_plumosus);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_raiseundead > 0)
		{
			prline = strcat(prline, "   ^xA99LvL:", ftos(player.spell_raiseundead)," RaiseUndead");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_raiseundead)));
			expneeded = CalcSpellExpForNextLVL(player, spell_raiseundead);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_repair > 0)
		{
			prline = strcat(prline, "   ^x90FLvL:", ftos(player.spell_repair)," Repair");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_repair)));
			expneeded = CalcSpellExpForNextLVL(player, spell_repair);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_ringoffire > 0)
		{
			prline = strcat(prline, "   ^xF20LvL:", ftos(player.spell_ringoffire)," RingOfFire");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_ringoffire)));
			expneeded = CalcSpellExpForNextLVL(player, spell_ringoffire);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_rosa > 0)
		{
			prline = strcat(prline, "   ^xF09LvL:", ftos(player.spell_rosa)," Rosa");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_rosa)));
			expneeded = CalcSpellExpForNextLVL(player, spell_rosa);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_scepterofflame > 0)
		{
			prline = strcat(prline, "   ^xF30LvL:", ftos(player.spell_scepterofflame)," ScepterOfFlame");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_scepterofflame)));
			expneeded = CalcSpellExpForNextLVL(player, spell_scepterofflame);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_stonecurse > 0)
		{
			prline = strcat(prline, "   ^xFFFLvL:", ftos(player.spell_stonecurse)," StoneCurse");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_stonecurse)));
			expneeded = CalcSpellExpForNextLVL(player, spell_stonecurse);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_stonerain > 0)
		{
			prline = strcat(prline, "   ^xBAALvL:", ftos(player.spell_stonerain)," StoneRain");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_stonerain)));
			expneeded = CalcSpellExpForNextLVL(player, spell_stonerain);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_timesink > 0)
		{
			prline = strcat(prline, "   ^x80ALvL:", ftos(player.spell_timesink)," Timesink");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_timesink)));
			expneeded = CalcSpellExpForNextLVL(player, spell_timesink);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (player.spell_vampyricconduit > 0)
		{
			prline = strcat(prline, "   ^x800LvL:", ftos(player.spell_vampyricconduit)," VampyricConduit");
			prline = strcat(prline, "   Exp:", ftos(floor(player.exp_spell_vampyricconduit)));
			expneeded = CalcSpellExpForNextLVL(player, spell_vampyricconduit);
			prline = strcat(prline, "   Needed:", ftos(floor(expneeded)),"^7");
			expneeded = 0;
			
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint(player, prline,"\n");
		}
	}
}

//WorldInventory
void CmdPrintWorldInventory (entity player)
{
	local string prline;
	local float counter;
	prline = "   ";
	counter = 0;
	if ((clienttype(player) == CLIENTTYPE_REAL))
	{
		prline = "   ";
		counter = 0;
		if (ambient_temperature && ambient_temperature_entitywithinlimits(player)) {
			if (ambient_temperature >= 300) {
				sprint(player, strcat("Ambient Temperature:  ^xF80",
				ftos(floor(ambient_temperature)),"^x333oC/^xF80",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else if (ambient_temperature >= 100) {
				sprint(player, strcat("Ambient Temperature:  ^x800",
				ftos(floor(ambient_temperature)),"^x333oC/^x800",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else if (ambient_temperature >= 40) {
				sprint(player, strcat("Ambient Temperature:  ^x880",
				ftos(floor(ambient_temperature)),"^x333oC/^x880",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else if (ambient_temperature >= 20) {
				sprint(player, strcat("Ambient Temperature:  ^x080",
				ftos(floor(ambient_temperature)),"^x333oC/^x080",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else if (ambient_temperature <= -200) {
				sprint(player, strcat("Ambient Temperature:  ^xFFF",
				ftos(floor(ambient_temperature)),"^x333oC/^xFFF",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else if (ambient_temperature <= -100) {
				sprint(player, strcat("Ambient Temperature:  ^xDDF",
				ftos(floor(ambient_temperature)),"^x333oC/^xDDF",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else if (ambient_temperature <= -40) {
				sprint(player, strcat("Ambient Temperature:  ^x448",
				ftos(floor(ambient_temperature)),"^x333oC/^x448",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else if (ambient_temperature <= 0) {
				sprint(player, strcat("Ambient Temperature:  ^x008",
				ftos(floor(ambient_temperature)),"^x333oC/^x008",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));	
			} else if (ambient_temperature <= 10) {
				sprint(player, strcat("Ambient Temperature:  ^x088",
				ftos(floor(ambient_temperature)),"^x333oC/^x088",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			} else {
				sprint(player, strcat("Ambient Temperature:  ^x888",
				ftos(floor(ambient_temperature)),"^x333oC/^x888",
				ftos(floor(((ambient_temperature*1.8)+32))),"^x333oF^7\n"));
			}
		}
		
		sprint(player, strcat("World Resources:  ^x100", ftos(floor(current_crude_world)),"/",ftos(capacity_crude_world)," crude"));
		sprint(player, strcat("   ^x005",ftos(current_energy_world),"/",ftos(capacity_energy_world)," energy"));
		sprint(player, strcat("   ^xFD5",ftos(current_food_grain_world),"/",ftos(capacity_food_grain_world)," grain"));
		sprint(player, strcat("   ^x050",ftos(current_food_greens_world),"/",ftos(capacity_food_greens_world)," greens"));
		sprint(player, strcat("   ^x507",ftos(current_food_grapes_world),"/",ftos(capacity_food_grapes_world)," grapes"));
		sprint(player, strcat("   ^x999",ftos(current_housing_world),"/",ftos(capacity_housing_world)," housing\n"));
		if (resource_nails_world)
		{
			prline = strcat(prline, "   ^x000", ftos(resource_nails_world)," resource nails^7");
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (resource_rockets_world)
		{
			prline = strcat(prline, "   ^xE00", ftos(resource_rockets_world)," resource rockets^7");
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (resource_cells_world)
		{
			prline = strcat(prline, "   ^x30D", ftos(resource_cells_world)," resource cells^7");
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (resource_shells_world)
		{
			prline = strcat(prline, "   ^x750", ftos(resource_shells_world)," resource shells^7");
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (resource_fuel_world)
		{
			prline = strcat(prline, "   ^x443", ftos(resource_fuel_world)," resource fuel^7");
			counter ++;
			counter = CheckPrintNewLine(player, counter, prline);
			if not(counter) prline = "   ";
		}
		if (counter) {
			sprint(player, prline,"\n");
		}
		
		if (teamplay)
		{
		/////////
		prline = "   ";
		counter = 0;
			if (player.team == COLOR_TEAM1)
			{
				sprint(player, strcat("^xF00Team 1 Resources:  ^x100", ftos(floor(current_crude_team1)),"/",ftos(capacity_crude_team1)," crude"));
				sprint(player, strcat("   ^x005",ftos(current_energy_team1),"/",ftos(capacity_energy_team1)," energy"));
				sprint(player, strcat("   ^xFD5",ftos(current_food_grain_team1),"/",ftos(capacity_food_grain_team1)," grain"));
				sprint(player, strcat("   ^x050",ftos(current_food_greens_team1),"/",ftos(capacity_food_greens_team1)," greens"));
				sprint(player, strcat("   ^x507",ftos(current_food_grapes_team1),"/",ftos(capacity_food_grapes_team1)," grapes"));
				sprint(player, strcat("   ^x999",ftos(current_housing_team1),"/",ftos(capacity_housing_team1)," housing\n"));

				if (resource_nails_team1)
				{
					prline = strcat(prline, "   ^x000", ftos(resource_nails_team1)," converted nails^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_rockets_team1)
				{
					prline = strcat(prline, "   ^xE00", ftos(resource_rockets_team1)," converted rockets^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_cells_team1)
				{
					prline = strcat(prline, "   ^x30D", ftos(resource_cells_team1)," converted cells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_shells_team1)
				{
					prline = strcat(prline, "   ^x750", ftos(resource_shells_team1)," converted shells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_fuel_team1)
				{
					prline = strcat(prline, "   ^x443", ftos(resource_fuel_team1)," converted fuel^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_nails_team1)
				{
					prline = strcat(prline, "   ^x999", ftos(resource_forgeparts_nails_team1)," forgeparts-nail^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_rockets_team1)
				{
					prline = strcat(prline, "   ^xE99", ftos(resource_forgeparts_rockets_team1)," forgeparts-rocket^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_cells_team1)
				{
					prline = strcat(prline, "   ^xC9D", ftos(resource_forgeparts_cells_team1)," forgeparts-cell^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
			} else if (player.team == COLOR_TEAM2)
			{
				sprint(player, strcat("^x00FTeam 2 Resources:  ^x100", ftos(floor(current_crude_team2)),"/",ftos(capacity_crude_team2)," crude"));
				sprint(player, strcat("   ^x005",ftos(current_energy_team2),"/",ftos(capacity_energy_team2)," energy"));
				sprint(player, strcat("   ^xFD5",ftos(current_food_grain_team2),"/",ftos(capacity_food_grain_team2)," grain"));
				sprint(player, strcat("   ^x050",ftos(current_food_greens_team2),"/",ftos(capacity_food_greens_team2)," greens"));
				sprint(player, strcat("   ^x507",ftos(current_food_grapes_team2),"/",ftos(capacity_food_grapes_team2)," grapes"));
				sprint(player, strcat("   ^x999",ftos(current_housing_team2),"/",ftos(capacity_housing_team2)," housing\n"));

				if (resource_nails_team2)
				{
					prline = strcat(prline, "   ^x000", ftos(resource_nails_team2)," converted nails^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_rockets_team2)
				{
					prline = strcat(prline, "   ^xE00", ftos(resource_rockets_team2)," converted rockets^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_cells_team2)
				{
					prline = strcat(prline, "   ^x30D", ftos(resource_cells_team2)," converted cells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_shells_team2)
				{
					prline = strcat(prline, "   ^x750", ftos(resource_shells_team2)," converted shells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_fuel_team2)
				{
					prline = strcat(prline, "   ^x443", ftos(resource_fuel_team2)," converted fuel^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_nails_team2)
				{
					prline = strcat(prline, "   ^x999", ftos(resource_forgeparts_nails_team2)," forgeparts-nail^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_rockets_team2)
				{
					prline = strcat(prline, "   ^xE99", ftos(resource_forgeparts_rockets_team2)," forgeparts-rocket^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_cells_team2)
				{
					prline = strcat(prline, "   ^xC9D", ftos(resource_forgeparts_cells_team2)," forgeparts-cell^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
			} else if (player.team == COLOR_TEAM3)
			{
				sprint(player, strcat("^xFF0Team 3 Resources:  ^x100", ftos(floor(current_crude_team3)),"/",ftos(capacity_crude_team3)," crude"));
				sprint(player, strcat("   ^x005",ftos(current_energy_team3),"/",ftos(capacity_energy_team3)," energy"));
				sprint(player, strcat("   ^xFD5",ftos(current_food_grain_team3),"/",ftos(capacity_food_grain_team3)," grain"));
				sprint(player, strcat("   ^x050",ftos(current_food_greens_team3),"/",ftos(capacity_food_greens_team3)," greens"));
				sprint(player, strcat("   ^x507",ftos(current_food_grapes_team3),"/",ftos(capacity_food_grapes_team3)," grapes"));
				sprint(player, strcat("   ^x999",ftos(current_housing_team3),"/",ftos(capacity_housing_team3)," housing\n"));

				if (resource_nails_team3)
				{
					prline = strcat(prline, "   ^x000", ftos(resource_nails_team3)," converted nails^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_rockets_team3)
				{
					prline = strcat(prline, "   ^xE00", ftos(resource_rockets_team3)," converted rockets^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_cells_team3)
				{
					prline = strcat(prline, "   ^x30D", ftos(resource_cells_team3)," converted cells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_shells_team3)
				{
					prline = strcat(prline, "   ^x750", ftos(resource_shells_team3)," converted shells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_fuel_team3)
				{
					prline = strcat(prline, "   ^x443", ftos(resource_fuel_team3)," converted fuel^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_nails_team3)
				{
					prline = strcat(prline, "   ^x999", ftos(resource_forgeparts_nails_team3)," forgeparts-nail^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_rockets_team3)
				{
					prline = strcat(prline, "   ^xE99", ftos(resource_forgeparts_rockets_team3)," forgeparts-rocket^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_cells_team3)
				{
					prline = strcat(prline, "   ^xC9D", ftos(resource_forgeparts_cells_team3)," forgeparts-cell^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
			} else if (player.team == COLOR_TEAM4)
			{
				sprint(player, strcat("^x0FFTeam 4 Resources:  ^x100", ftos(floor(current_crude_team4)),"/",ftos(capacity_crude_team4)," crude"));
				sprint(player, strcat("   ^x005",ftos(current_energy_team4),"/",ftos(capacity_energy_team4)," energy"));
				sprint(player, strcat("   ^xFD5",ftos(current_food_grain_team4),"/",ftos(capacity_food_grain_team4)," grain"));
				sprint(player, strcat("   ^x050",ftos(current_food_greens_team4),"/",ftos(capacity_food_greens_team4)," greens"));
				sprint(player, strcat("   ^x507",ftos(current_food_grapes_team4),"/",ftos(capacity_food_grapes_team4)," grapes"));
				sprint(player, strcat("   ^x999",ftos(current_housing_team4),"/",ftos(capacity_housing_team4)," housing\n"));

				if (resource_nails_team4)
				{
					prline = strcat(prline, "   ^x000", ftos(resource_nails_team4)," converted nails^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_rockets_team4)
				{
					prline = strcat(prline, "   ^xE00", ftos(resource_rockets_team4)," converted rockets^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_cells_team4)
				{
					prline = strcat(prline, "   ^x30D", ftos(resource_cells_team4)," converted cells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_shells_team4)
				{
					prline = strcat(prline, "   ^x750", ftos(resource_shells_team4)," converted shells^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_fuel_team4)
				{
					prline = strcat(prline, "   ^x443", ftos(resource_fuel_team4)," converted fuel^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_nails_team4)
				{
					prline = strcat(prline, "   ^x999", ftos(resource_forgeparts_nails_team4)," forgeparts-nail^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_rockets_team4)
				{
					prline = strcat(prline, "   ^xE99", ftos(resource_forgeparts_rockets_team4)," forgeparts-rocket^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
				if (resource_forgeparts_cells_team4)
				{
					prline = strcat(prline, "   ^xC9D", ftos(resource_forgeparts_cells_team4)," forgeparts-cell^7");
					counter ++;
					counter = CheckPrintNewLine(player, counter, prline);
					if not(counter) prline = "   ";
				}
			} 
			
			
			
			if (counter) {
				sprint(player, prline,"\n");
			}
		}
		
		//
		local entity fneb;
		local float myplclr;
		if (numberoflocalenergybatterys || numberoflocaloiltanks || numberoflocalchemplants || numberoflocalmunitionsfactories || numberoflocalforgebuildings) {
			myplclr = 0;
			
			fneb = findradius(self.origin, 4096);
  			while(fneb)
  			{
			    if (fneb.islocalresourceprovider) {
				if ( (teamplay && (player.team == fneb.subordinate4.team))
				|| (!teamplay && (player == fneb.subordinate4.realowner)) )
				{
				///////////////////////////////////////
				///////////////////////////////////////
				/////////
				prline = ""; //Nothing for here
				counter = 0;
				if (fneb.classname == "lclenrgybatt") {
					if (myplclr) {
						sprint(player, "^x048LocalEnergyBattery:");
						myplclr = 0;
					} else {
						sprint(player, "^x0BFLocalEnergyBattery:");
						myplclr = 1;
					}
				} else if (fneb.classname == "lcloiltank") {
					if (myplclr) {
						sprint(player, "^x333LocalOilTank:");
						myplclr = 0;
					} else {
						sprint(player, "^x000LocalOilTank:");
						myplclr = 1;
					}
				} else if (fneb.classname == "lclchemplant") {
					if (myplclr) {
						sprint(player, "^x0F9LocalChemicalPlant:");
						myplclr = 0;
					} else {
						sprint(player, "^xFF0LocalChemicalPlant:");
						myplclr = 1;
					}
				} else if (fneb.classname == "lclmuntnsftry") {
					if (myplclr) {
						sprint(player, "^xA00LocalMunitionsFactory:");
						myplclr = 0;
					} else {
						sprint(player, "^x700LocalMunitionsFactory:");
						myplclr = 1;
					}
				} else if (fneb.classname == "lclforgen") {
					if (myplclr) {
						sprint(player, "^x777LocalForgeN:");
						myplclr = 0;
					} else {
						sprint(player, "^x333LocalForgeN:");
						myplclr = 1;
					}
				} else if (fneb.classname == "lclforger") {
					if (myplclr) {
						sprint(player, "^x700LocalForgeR:");
						myplclr = 0;
					} else {
						sprint(player, "^x300LocalForgeR:");
						myplclr = 1;
					}
				} else if (fneb.classname == "lclforgec") {
					if (myplclr) {
						sprint(player, "^x007LocalForgeE:");
						myplclr = 0;
					} else {
						sprint(player, "^x003LocalForgeE:");
						myplclr = 1;
					}
				} else if (fneb.classname == "lclforgehmmr") {
					if (myplclr) {
						sprint(player, "^x444Local^x700Hammer^x444Forge:");
						myplclr = 0;
					} else {
						sprint(player, "^x000Local^x300Hammer^x000Forge:");
						myplclr = 1;
					}
				} else {
					if (myplclr) {
						sprint(player, "^x555Local Resource:");
						myplclr = 0;
					} else {
						sprint(player, "^x111Local Resource:");
						myplclr = 1;
					}
				}
				
				if (fneb.capacity_crude_local) {
					sprint(player, strcat("   ^x100",ftos(floor(fneb.current_crude_local)),"/",ftos(fneb.capacity_crude_local)," crude"));
					counter ++;
				}
				if (fneb.capacity_energy_local) {
					sprint(player, strcat("   ^x005",ftos(fneb.current_energy_local),"/",ftos(fneb.capacity_energy_local)," energy"));
					counter ++;
				}
				if (fneb.capacity_food_grain_local) {
					sprint(player, strcat("   ^xFD5",ftos(fneb.current_food_grain_local),"/",ftos(fneb.capacity_food_grain_local)," grain"));
					counter ++;
				}
				if (fneb.capacity_food_greens_local) {
					sprint(player, strcat("   ^x050",ftos(fneb.current_food_greens_local),"/",ftos(fneb.capacity_food_greens_local)," greens"));
					counter ++;
				}
				if (fneb.capacity_food_grapes_local) {
					sprint(player, strcat("   ^x507",ftos(fneb.current_food_grapes_local),"/",ftos(fneb.capacity_food_grapes_local)," grapes"));
					counter ++;
				}
				if (fneb.capacity_housing_local) {
					sprint(player, strcat("   ^x999",ftos(fneb.current_housing_local),"/",ftos(fneb.capacity_housing_local)," housing"));
					counter ++;
				}
				
				if (counter >= 6) {
					sprint(player, "^7\n");
					counter = 0;
				}
				
				
				if (fneb.resource_nails_local)
				{
					prline = strcat(prline, "   ^x000", ftos(fneb.resource_nails_local)," converted nails^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				if (fneb.resource_rockets_local)
				{
					prline = strcat(prline, "   ^xE00", ftos(fneb.resource_rockets_local)," converted rockets^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				if (fneb.resource_cells_local)
				{
					prline = strcat(prline, "   ^x30D", ftos(fneb.resource_cells_local)," converted cells^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				if (fneb.resource_shells_local)
				{
					prline = strcat(prline, "   ^x750", ftos(fneb.resource_shells_local)," converted shells^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				if (fneb.resource_fuel_local)
				{
					prline = strcat(prline, "   ^x443", ftos(fneb.resource_fuel_local)," converted fuel^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				
				if (fneb.resource_forgeparts_nails_local)
				{
					prline = strcat(prline, "   ^x999", ftos(fneb.resource_forgeparts_nails_local)," forgeparts-nail^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				if (fneb.resource_forgeparts_rockets_local)
				{
					prline = strcat(prline, "   ^xE99", ftos(fneb.resource_forgeparts_rockets_local)," forgeparts-rocket^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				if (fneb.resource_forgeparts_cells_local)
				{
					prline = strcat(prline, "   ^xC9D", ftos(fneb.resource_forgeparts_cells_local)," forgeparts-cell^7");
					counter ++;
					counter = CheckPrintNewLineEx(player, counter, prline, 6);
					if not(counter) prline = "   ";
				}
				
				sprint(player, prline,"^7\n");
				///////////////////////////////////////
				///////////////////////////////////////
				}
			    }
				
			    fneb = fneb.chain;
			}
		}
		//
		
	}
}

void CmdPrintChangeSeatQuery (entity player, entity myvehicletoquery)
{
				sprint(player, strcat("^x7C0Pilot  :[^7", myvehicletoquery.owner.netname,"^x7C0]^7     "));
				if(myvehicletoquery.gun1 && myvehicletoquery.gun1.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  1:[^7", myvehicletoquery.gunner1.netname,"^x0C0]^7     \n"));
				} else if(myvehicletoquery.gun0 && myvehicletoquery.gun0.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  1:[^7", myvehicletoquery.gunner1.netname,"^x0C0]^7     \n"));
				}
				
				if(myvehicletoquery.gun2 && myvehicletoquery.gun2.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  2:[^7", myvehicletoquery.gunner2.netname,"^x0C0]^7     "));
				} else if(myvehicletoquery.gun00 && myvehicletoquery.gun00.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  2:[^7", myvehicletoquery.gunner2.netname,"^x0C0]^7     "));
				}
				
				if(myvehicletoquery.gun3 && myvehicletoquery.gun3.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  3:[^7", myvehicletoquery.gunner3.netname,"^x0C0]^7     \n"));
				} else if(myvehicletoquery.gun3 && myvehicletoquery.gun000.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  3:[^7", myvehicletoquery.gunner3.netname,"^x0C0]^7     \n"));
				}
				
				if(myvehicletoquery.gun4 && myvehicletoquery.gun4.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  4:[^7", myvehicletoquery.gunner4.netname,"^x0C0]^7     "));
				}
				if(myvehicletoquery.gun5 && myvehicletoquery.gun5.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  5:[^7", myvehicletoquery.gunner5.netname,"^x0C0]^7     \n"));
				}
				
				if(myvehicletoquery.gun6 && myvehicletoquery.gun6.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  6:[^7", myvehicletoquery.gunner6.netname,"^x0C0]^7     "));
				}
				if(myvehicletoquery.gun7 && myvehicletoquery.gun7.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  7:[^7", myvehicletoquery.gunner7.netname,"^x0C0]^7     \n"));
				}
				
				if(myvehicletoquery.gun8 && myvehicletoquery.gun8.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  8:[^7", myvehicletoquery.gunner8.netname,"^x0C0]^7     "));
				}
				if(myvehicletoquery.gun9 && myvehicletoquery.gun9.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat  9:[^7", myvehicletoquery.gunner9.netname,"^x0C0]^7     \n"));
				}
				
				if(myvehicletoquery.gun10 && myvehicletoquery.gun10.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat 10:[^7", myvehicletoquery.gunner10.netname,"^x0C0]^7     "));
				}
				if(myvehicletoquery.gun11 && myvehicletoquery.gun11.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat 11:[^7", myvehicletoquery.gunner11.netname,"^x0C0]^7     \n"));
				}
				
				if(myvehicletoquery.gun12 && myvehicletoquery.gun12.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat 12:[^7", myvehicletoquery.gunner12.netname,"^x0C0]^7     "));
				}
				if(myvehicletoquery.gun13 && myvehicletoquery.gun13.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat 13:[^7", myvehicletoquery.gunner13.netname,"^x0C0]^7     \n"));
				}
				
				if(myvehicletoquery.gun14 && myvehicletoquery.gun14.vehicle_flags == VHF_PLAYERSLOT) {
					sprint(player, strcat("^x0C0Seat 14:[^7", myvehicletoquery.gunner14.netname,"^x0C0]^7     "));
				}
				//if(myvehicletoquery.gun15 && myvehicletoquery.gun15.vehicle_flags == VHF_PLAYERSLOT) {
				//	sprint(player, strcat("^x0C0Seat 15:[^7", myvehicletoquery.gunner15.netname,"^x0C0]^7     \n"));
				//}
				
				//if(myvehicletoquery.gun16 && myvehicletoquery.gun16.vehicle_flags == VHF_PLAYERSLOT) {
				//	sprint(player, strcat("^x0C0Seat 16:[^7", myvehicletoquery.gunner16.netname,"^x0C0]^7     "));
				//}
				//if(myvehicletoquery.gun17 && myvehicletoquery.gun17.vehicle_flags == VHF_PLAYERSLOT) {
				//	sprint(player, strcat("^x0C0Seat 17:[^7", myvehicletoquery.gunner17.netname,"^x0C0]^7     \n"));
				//}
				
				
				//if(myvehicletoquery.gun18 && myvehicletoquery.gun18.vehicle_flags == VHF_PLAYERSLOT) {
				//	sprint(player, strcat("^x0C0Seat 18:[^7", myvehicletoquery.gunner18.netname,"^x0C0]^7     "));
				//}
				//if(myvehicletoquery.gun19 && myvehicletoquery.gun19.vehicle_flags == VHF_PLAYERSLOT) {
				//	sprint(player, strcat("^x0C0Seat 19:[^7", myvehicletoquery.gunner19.netname,"^x0C0]^7     \n"));
				//}
				
				
				//if(myvehicletoquery.gun20 && myvehicletoquery.gun20.vehicle_flags == VHF_PLAYERSLOT) {
				//	sprint(player, strcat("^x0C0Seat 20:[^7", myvehicletoquery.gunner20.netname,"^x0C0]^7     "));
				//}
				//if(myvehicletoquery.gun21 && myvehicletoquery.gun21.vehicle_flags == VHF_PLAYERSLOT) {
				//	sprint(player, strcat("^x0C0Seat 21:[^7", myvehicletoquery.gunner21.netname,"^x0C0]^7     \n"));
				//}
				sprint(player, "\n");
}

float allow_cmdsearchinfront_readscrollondth(entity dthent) {
	if (dthent.readscrollondth_onsearch >= 1) {
		//Do nothing
	} else if (dthent.readscrollondth_onsearch > random()) {
		//Do nothing
	} else {
		return FALSE;
	}
	
	
	if (dthent.readscrollondth_onsearch_amnt == -2) {
		return FALSE;
	} 
	
	
	if (dthent.readscrollondth_onsearch_amnt == -1) {
		//Do nothing, infinite.
	} else if (dthent.readscrollondth_onsearch_amnt >= 1) {
		dthent.readscrollondth_onsearch_amnt = dthent.readscrollondth_onsearch_amnt - 1;
	} else {
		//if 0 set to -2
		dthent.readscrollondth_onsearch_amnt = -2;
	}
	
	return TRUE;
}

float allow_cmdputinfront_readscrollondth(entity dthent) {
	if (dthent.readscrollondth_onput >= 1) {
		//Do nothing
	} else if (dthent.readscrollondth_onput > random()) {
		//Do nothing
	} else {
		return FALSE;
	}
	
	
	if (dthent.readscrollondth_onput_amnt == -2) {
		return FALSE;
	}
	
	
	if (dthent.readscrollondth_onput_amnt == -1) {
		//Do nothing, infinite.
	} else if (dthent.readscrollondth_onput_amnt >= 1) {
		dthent.readscrollondth_onput_amnt = dthent.readscrollondth_onput_amnt - 1;
	} else {
		//if 0 set to -2
		dthent.readscrollondth_onput_amnt = -2;
	}
	
	return TRUE;
}

float allow_cmdtakeinfront_readscrollondth(entity dthent) {
	if (dthent.readscrollondth_ontake >= 1) {
		//Do nothing
	} else if (dthent.readscrollondth_ontake > random()) {
		//Do nothing
	} else {
		return FALSE;
	}
	
	
	if (dthent.readscrollondth_ontake_amnt == -2) {
		return FALSE;
	}
	
	
	if (dthent.readscrollondth_ontake_amnt == -1) {
		//Do nothing, infinite.
	} else if (dthent.readscrollondth_ontake_amnt >= 1) {
		dthent.readscrollondth_ontake_amnt = dthent.readscrollondth_ontake_amnt - 1;
	} else {
		//if 0 set to -2
		dthent.readscrollondth_ontake_amnt = -2;
	}
	
	return TRUE;
}

////Traps

float allow_cmdsearchinfront_trapondth(entity dthent) {
	if (dthent.trapondth_onsearch >= 1) {
		//Do nothing
	} else if (dthent.trapondth_onsearch > random()) {
		//Do nothing
	} else {
		return FALSE;
	}
	
	
	if (dthent.trapondth_onsearch_amnt == -2) {
		return FALSE;
	} 
	
	
	if (dthent.trapondth_onlyonce) {
		if (dthent.trapondth_onlyonce_cnt >= dthent.trapondth_onlyonce) {
			return FALSE;
		}
	}
	
	
	if (dthent.trapondth_onsearch_amnt == -1) {
		//Do nothing, infinite.
	} else if (dthent.trapondth_onsearch_amnt >= 1) {
		dthent.trapondth_onsearch_amnt = dthent.trapondth_onsearch_amnt - 1;
	} else {
		//if 0 set to -2
		dthent.trapondth_onsearch_amnt = -2;
	}
	
	dthent.trapondth_onlyonce_cnt++;
	
	return TRUE;
}

float allow_cmdputinfront_trapondth(entity dthent) {
	if (dthent.trapondth_onput >= 1) {
		//Do nothing
	} else if (dthent.trapondth_onput > random()) {
		//Do nothing
	} else {
		return FALSE;
	}
	
	
	if (dthent.trapondth_onput_amnt == -2) {
		return FALSE;
	}
	
	
	if (dthent.trapondth_onlyonce) {
		if (dthent.trapondth_onlyonce_cnt >= dthent.trapondth_onlyonce) {
			return FALSE;
		}
	}
	
	
	if (dthent.trapondth_onput_amnt == -1) {
		//Do nothing, infinite.
	} else if (dthent.trapondth_onput_amnt >= 1) {
		dthent.trapondth_onput_amnt = dthent.trapondth_onput_amnt - 1;
	} else {
		//if 0 set to -2
		dthent.trapondth_onput_amnt = -2;
	}
	
	dthent.trapondth_onlyonce_cnt++;
	
	return TRUE;
}

float allow_cmdtakeinfront_trapondth(entity dthent) {
	if (dthent.trapondth_ontake >= 1) {
		//Do nothing
	} else if (dthent.trapondth_ontake > random()) {
		//Do nothing
	} else {
		return FALSE;
	}
	
	
	if (dthent.trapondth_ontake_amnt == -2) {
		return FALSE;
	}
	
	if (dthent.trapondth_onlyonce) {
		if (dthent.trapondth_onlyonce_cnt >= dthent.trapondth_onlyonce) {
			return FALSE;
		}
	}
	
	if (dthent.trapondth_ontake_amnt == -1) {
		//Do nothing, infinite.
	} else if (dthent.trapondth_ontake_amnt >= 1) {
		dthent.trapondth_ontake_amnt = dthent.trapondth_ontake_amnt - 1;
	} else {
		//if 0 set to -2
		dthent.trapondth_ontake_amnt = -2;
	}
	
	dthent.trapondth_onlyonce_cnt++;
	
	return TRUE;
}




float allow_trapondth(entity dthent) {
	if (dthent.trapondth >= 1) {
		//Do nothing
	} else if (dthent.trapondth > random()) {
		//Do nothing
	} else {
		return FALSE;
	}
	
	if (dthent.trapondth_notdth) {
		return FALSE;
	}
	
	return TRUE;
}



void trapspring_xyzz_think()
{	
	//print("fire\n");
	self.think = func_null;
	self.nextthink = 0;
	self.use();
	remove(self);
}

void trapspring_xyzz_setup()
{
	//dir(ection)styles set by self.ammount3 here
	//0 default
	//1 none straight
	//2 all straight
	//3 any dir
	//4 up
	local float mydistance;
	local vector myorgnadd = '0 0 0';
	local float myoriginaddz = 0;
	local float mynoreversea = 0;
	local float myuseviewofs = 0;
	
	local float myresetsolid;
	local float myoldsolid;
	
	switch(self.cnt)
	{	
		default:
			mydistance = 4096;
			break;
		case 0:
			//Crossbow
			mydistance = 1024;
			myoriginaddz = 64;
			if (!self.ammount3 || self.ammount3 == 1) {
				myuseviewofs = 1;
			}
			break;
		case 1:
			//Firebolt
			mydistance = 256;
			break;
		case 3:
			//Electro2
			mydistance = 384;
			break;
		case 6:
		case 16:
			//Nade
			mydistance = 128;
			break;
		case 7:
			//Explosive
			mydistance = 96;
			break;
		case 20:
		case 21:
		case 22:
			//fire, ice, poison jets
			mydistance = 2048;
			if (self.ammount3 == 2) {
				mynoreversea = 2;
			} else if (self.ammount3) {
				mynoreversea = 1;
			} else {
				mynoreversea = 2;
			}
			break;
		
	}
	
	self.think = trapspring_xyzz_think;
	self.nextthink = time;
	self.angles = '0 0 0';
	self.angles_y = bound(-180, ((random()*360)-180) ,180);
	
	if (self.ammount3 == 2) {
		mynoreversea = 2;
	} else if (self.ammount3 == 3) {
		self.angles_x = bound(-180, ((random()*360)-180) ,180);
	} else if (self.ammount3 == 4) {
		self.angles_y = 0;
	}
	
	makevectors(self.angles);

	
	
	myresetsolid = 0;
	
	if (self.subordinate10 && self.subordinate10 != world) {
		myoldsolid = self.subordinate10.solid;
		self.subordinate10.solid = SOLID_NOT;
		myresetsolid = 1;
	}
	
	if (self.ammount3 == 4) {
		myorgnadd = (self.origin + v_up * mydistance);
	} else {
		if (myoriginaddz) {
			myorgnadd_z += myoriginaddz;
			myorgnadd = (self.origin + v_forward * mydistance) + myorgnadd;
		} else {
			myorgnadd = (self.origin + v_forward * mydistance);
		}
	}
	
	if (myresetsolid) {
		self.subordinate10.solid = myoldsolid;
	}
	
	traceline(self.origin, myorgnadd, MOVE_WORLDONLY, self);
	self.origin = trace_endpos;
	spawnfunc_misc_fire_crossbowbolt();
		if(self.enemy)
		{
			vector a;
			if (myuseviewofs) {
				a = vectoangles((self.enemy.origin+self.enemy.view_ofs) - self.origin);
			} else {
				a = vectoangles(self.enemy.origin - self.origin);
			}
			
			if (mynoreversea == 2) {
				a_x = 0; //straight
			} else if (!mynoreversea) {
				a_x = -a_x; //"normal" for crossbow etc
			}
			
			if(a != self.mangle)
			{
				self.mangle = a;
			}
		}
		
		self.angles = self.mangle;
	//print (etos(self.enemy), "myenemy\n");
}

void trapspring_xyzz_spawn(float mytrap, float mystyle, entity myfriend, vector myorigin, entity myenemy, float mydelay)
{
	entity trapent;
	trapent = spawn();
	trapent.origin = myorigin;
	trapent.cnt = mytrap;
	trapent.enemy = myenemy;
	trapent.subordinate10 = myfriend;
	trapent.think = trapspring_xyzz_setup;
	trapent.nextthink = time + mydelay;
	trapent.ammount3 = mystyle;
}

void trapspring_xyzz(float mytrap, float mystyle, float myamnt, entity myfriend, vector myorigin, entity myenemy, float mydelay)
{
	if (myamnt > 1) {
		local float mycount;
		mycount = 0;
		while (myamnt > mycount) {
			trapspring_xyzz_spawn(mytrap, mystyle, myfriend, myorigin, myenemy, mydelay);
			mycount ++;
		}
	} else {
		trapspring_xyzz_spawn(mytrap, mystyle, myfriend, myorigin, myenemy, mydelay);
	}
}

void CmdSearchInFront (entity player) {
	makevectors(player.v_angle);
	traceline(player.origin, player.origin + player.view_ofs + v_forward * 128, MOVE_NORMAL, player);
	//local float effectnum;
	//effectnum = particleeffectnum("fireball");
	//trailparticles(player, effectnum, player.origin, trace_endpos);
	//print(etos(trace_ent), "ETOS\n");
	if(trace_ent != world)
	{
	  if(trace_ent.iscontainer)
	  {
	  	if (allow_cmdsearchinfront_readscrollondth(trace_ent)) {
			monster_readscrollondth(trace_ent, 0.01+frametime, '0 0 32', 0, -90);
		}
		
		if (allow_cmdsearchinfront_trapondth(trace_ent)) {
			trapspring_xyzz(trace_ent.trapondth_trap, trace_ent.trapondth_dirstyle, trace_ent.trapondth_amnt, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
		}
		
		//Test
		//trapspring_xyzz(0, 4, 0, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
		//trapspring_xyzz(0, 0, 3, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
		//trapspring_xyzz(20, 0, 0, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
		//trapspring_xyzz(18, 0, 0, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
		//trapspring_xyzz(0, 3, 100, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
		//trapspring_xyzz(20, 3, 10, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
		//trapspring_xyzz(17, 3, 10, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);	
		
		sprint(player, strcat("Inventory Of: ", trace_ent.netname,"^7\n"));
		CmdPrintInventoryOfTo(trace_ent, player, 0, rtstrng); //Note, since doconcat option is 0, we won't use the return string
		if (trace_ent.iscontainer_storage) {
			local float tally;
			tally = ContainerTallyStorage(trace_ent);
			sprint(player, strcat("The Storage Use of: ", trace_ent.netname,"^7\n"));
			sprint(player, strcat("Currently Is: ^x555", ftos(tally),"^7 of ^x555",
			 ftos(trace_ent.iscontainer_storage),"^7\n"));
		} else {
			sprint(player, strcat("The Storage Capacity of: ", trace_ent.netname,"^7 is Limitless\n"));
		}
	  }
	  else if(trace_ent.prisonerlevel >= 3 || trace_ent.handcuffed)
	  {
	  	sprint(player, strcat("Inventory Of: ", trace_ent.netname,"^7\n"));
		CmdPrintInventoryOfTo(trace_ent, player, 0, rtstrng); //Note, since doconcat option is 0, we won't use the return string
		if (trace_ent.handcuffed) {
			sprint(player, strcat("The Prisoner: ", trace_ent.netname,"^7 is Handcuffed\n"));
		} else {
			sprint(player, strcat("The Prisoner: ", trace_ent.netname,"^7 is Chained\n"));
		}
	  }
	}
}

entity CmdPutInFront (entity player) {
	makevectors(player.v_angle);
	traceline(player.origin, player.origin + v_forward * 128, MOVE_NORMAL, player);
	//effectnum = particleeffectnum("fireball");
	//trailparticles(player, effectnum, player.origin, trace_endpos);
	if(trace_ent != world)
	if(trace_ent.iscontainer || trace_ent.prisonerlevel >= 3)
	{
		if (trace_ent.iscontainer_storage) {
			if (allow_cmdputinfront_readscrollondth(trace_ent)) {
				monster_readscrollondth(trace_ent, 0.01+frametime, '0 0 32', 0, -90);
			}
		
			if (allow_cmdputinfront_trapondth(trace_ent)) {
				trapspring_xyzz(trace_ent.trapondth_trap, trace_ent.trapondth_dirstyle, trace_ent.trapondth_amnt, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
			}
			
			if (ContainerTallyStorage(trace_ent) >= trace_ent.iscontainer_storage)
			{
				if ((clienttype(player) == CLIENTTYPE_REAL)) {
					if (trace_ent.prisonerlevel >= 3)
						sprint(player, "The prisoner can hold no more items on his person\n");
					else
						sprint(player, "The container is at capacity\n");
				}
				return world;
			} else {
				return trace_ent;
			}
		} else {
			return trace_ent;
		}
	}
	return world;
}

entity CmdTakeInFront (entity player) {
	makevectors(player.v_angle);
	traceline(player.origin, player.origin + v_forward * 128, MOVE_NORMAL, player);
	//effectnum = particleeffectnum("fireball");
	//trailparticles(player, effectnum, player.origin, trace_endpos);
	if(trace_ent != world)
	if(trace_ent.iscontainer || trace_ent.prisonerlevel >= 3)
	{
		if (player.iscontainer_storage) {
			if (allow_cmdtakeinfront_readscrollondth(trace_ent)) {
				monster_readscrollondth(trace_ent, 0.01+frametime, '0 0 32', 0, -90);
			}
			
		
			if (allow_cmdtakeinfront_trapondth(trace_ent)) {
				trapspring_xyzz(trace_ent.trapondth_trap, trace_ent.trapondth_dirstyle, trace_ent.trapondth_amnt, trace_ent, trace_ent.origin+'0 0 64', player, 0.1);
			}
			
			if (ContainerTallyStorage(player) >= player.iscontainer_storage)
			{
				if ((clienttype(player) == CLIENTTYPE_REAL)) {
					sprint(player, "You cannot carry any more items\n");
				}
				return world;
			} else {
				return trace_ent;
			}
		} else {
			return trace_ent;
		}
	}
	return world;
}

//Friends can open your doors and won't be attacked by your turrets and monsters
//Tolerated just won't get attacked.
//(non team games only teammates as friends (who your turrets etc won't attack anyway)
//, unless g_allow_friends is set to higher number (2 or 3)
//(3 is for doors too in team games)
//Yes, in another language we would use arrays
//In quakeC arrays don't offically exist as part of the language
//They are a hack
//They are very slow on some engines (DP) and we are told not to use them.
//So here's a hand coded "array"
//Yes, could have done cleaver things with .entity declarations too
//Wanted to keep it simple though

//Works with below command
void cmdremoveFriendmovetoEx(entity caster, entity exfriend) {
			local float eflistisfull;
			eflistisfull = 0;
			//Yes, I know, world points to ent0, but do I trust QC, rather be safe than sorry
			if(caster.exfriend0 && caster.exfriend0 != world
			&& caster.exfriend1 && caster.exfriend1 != world
			&& caster.exfriend2 && caster.exfriend2 != world
			&& caster.exfriend3 && caster.exfriend3 != world
			&& caster.exfriend4 && caster.exfriend4 != world
			&& caster.exfriend5 && caster.exfriend5 != world
			&& caster.exfriend6 && caster.exfriend6 != world
			&& caster.exfriend7 && caster.exfriend7 != world
			&& caster.exfriend8 && caster.exfriend8 != world
			&& caster.exfriend9 && caster.exfriend9 != world)
			{
				eflistisfull = 1; //We'll allow taking over dormant ones then	
			}

			if (!caster.exfriend0 || caster.exfriend0 == world
			|| (eflistisfull && caster.exfriend0.exfriendent == world)) {
				
				caster.exfriend0 = exfriend;
				caster.exfriend0.exfriendent = exfriend.friendent; //Since it gets overwritten
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot1\n");
				}
			} else if (!caster.exfriend1 || caster.exfriend1 == world
			|| (eflistisfull && caster.exfriend1.exfriendent == world)) {
				
				caster.exfriend1 = exfriend;
				caster.exfriend1.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot2\n");
				}
			} else if (!caster.exfriend2 || caster.exfriend2 == world
			|| (eflistisfull && caster.exfriend2.exfriendent == world)) {
				
				caster.exfriend2 = exfriend;
				caster.exfriend2.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot3\n");
				}
			} else if (!caster.exfriend3 || caster.exfriend3 == world
			|| (eflistisfull && caster.exfriend3.exfriendent == world)) {
				
				caster.exfriend3 = exfriend;
				caster.exfriend3.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot4\n");
				}
			} else if (!caster.exfriend4 || caster.exfriend4 == world
			|| (eflistisfull && caster.exfriend4.exfriendent == world)) {
				
				caster.exfriend4 = exfriend;
				caster.exfriend4.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot5\n");
				}
			} else if (!caster.exfriend5 || caster.exfriend5 == world
			|| (eflistisfull && caster.exfriend5.exfriendent == world)) {
				
				caster.exfriend5 = exfriend;
				caster.exfriend5.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot6\n");
				}
			} else if (!caster.exfriend6 || caster.exfriend6 == world
			|| (eflistisfull && caster.exfriend6.exfriendent == world)) {
				
				caster.exfriend6 = exfriend;
				caster.exfriend6.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot7\n");
				}
			} else if (!caster.exfriend7 || caster.exfriend7 == world
			|| (eflistisfull && caster.exfriend7.exfriendent == world)) {
				
				caster.exfriend7 = exfriend;
				caster.exfriend7.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot8\n");
				}
			} else if (!caster.exfriend8 || caster.exfriend8 == world
			|| (eflistisfull && caster.exfriend8.exfriendent == world)) {
				
				caster.exfriend8 = exfriend;
				caster.exfriend8.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot9\n");
				}
			} else if (!caster.exfriend9 || caster.exfriend9 == world
			|| (eflistisfull && caster.exfriend9.exfriendent == world)) {
				
				caster.exfriend9 = exfriend;
				caster.exfriend9.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot10\n");
				}
			} else {
				local entity rmfrnd;
				local float dormfrnd;
				dormfrnd = 0;
				if (caster.exfriend0 && caster.exfriend0 != world) {
					rmfrnd = caster.exfriend0;
					dormfrnd = 1;
				}
				caster.exfriend0 = exfriend;
				caster.exfriend0.exfriendent = exfriend.friendent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "No more exfriend slots, Removed exfriend to exfriend slot1\n");
				}
				if (dormfrnd) {
					rmfrnd.exfriendent = world;
					remove(rmfrnd);
				}
			}
}
//For tolerated:
void cmdremoveToleratedmovetoEx(entity caster, entity exfriend) {
			local float eflistisfull;
			eflistisfull = 0;
			//Yes, I know, world points to ent0, but do I trust QC, rather be safe than sorry
			if(caster.exfriend0 && caster.exfriend0 != world
			&& caster.exfriend1 && caster.exfriend1 != world
			&& caster.exfriend2 && caster.exfriend2 != world
			&& caster.exfriend3 && caster.exfriend3 != world
			&& caster.exfriend4 && caster.exfriend4 != world
			&& caster.exfriend5 && caster.exfriend5 != world
			&& caster.exfriend6 && caster.exfriend6 != world
			&& caster.exfriend7 && caster.exfriend7 != world
			&& caster.exfriend8 && caster.exfriend8 != world
			&& caster.exfriend9 && caster.exfriend9 != world)
			{
				eflistisfull = 1; //We'll allow taking over dormant ones then	
			}

			if (!caster.exfriend0 || caster.exfriend0 == world
			|| (eflistisfull && caster.exfriend0.exfriendent == world)) {
				
				caster.exfriend0 = exfriend;
				caster.exfriend0.exfriendent = exfriend.toleratedent; //Since it gets overwritten
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot1\n");
				}
			} else if (!caster.exfriend1 || caster.exfriend1 == world
			|| (eflistisfull && caster.exfriend1.exfriendent == world)) {
				
				caster.exfriend1 = exfriend;
				caster.exfriend1.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot2\n");
				}
			} else if (!caster.exfriend2 || caster.exfriend2 == world
			|| (eflistisfull && caster.exfriend2.exfriendent == world)) {
				
				caster.exfriend2 = exfriend;
				caster.exfriend2.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot3\n");
				}
			} else if (!caster.exfriend3 || caster.exfriend3 == world
			|| (eflistisfull && caster.exfriend3.exfriendent == world)) {
				
				caster.exfriend3 = exfriend;
				caster.exfriend3.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot4\n");
				}
			} else if (!caster.exfriend4 || caster.exfriend4 == world
			|| (eflistisfull && caster.exfriend4.exfriendent == world)) {
				
				caster.exfriend4 = exfriend;
				caster.exfriend4.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot5\n");
				}
			} else if (!caster.exfriend5 || caster.exfriend5 == world
			|| (eflistisfull && caster.exfriend5.exfriendent == world)) {
				
				caster.exfriend5 = exfriend;
				caster.exfriend5.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot6\n");
				}
			} else if (!caster.exfriend6 || caster.exfriend6 == world
			|| (eflistisfull && caster.exfriend6.exfriendent == world)) {
				
				caster.exfriend6 = exfriend;
				caster.exfriend6.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot7\n");
				}
			} else if (!caster.exfriend7 || caster.exfriend7 == world
			|| (eflistisfull && caster.exfriend7.exfriendent == world)) {
				
				caster.exfriend7 = exfriend;
				caster.exfriend7.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot8\n");
				}
			} else if (!caster.exfriend8 || caster.exfriend8 == world
			|| (eflistisfull && caster.exfriend8.exfriendent == world)) {
				
				caster.exfriend8 = exfriend;
				caster.exfriend8.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot9\n");
				}
			} else if (!caster.exfriend9 || caster.exfriend9 == world
			|| (eflistisfull && caster.exfriend9.exfriendent == world)) {
				
				caster.exfriend9 = exfriend;
				caster.exfriend9.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exfriend to exfriend slot10\n");
				}
			} else {
				local entity rmfrnd;
				local float dormfrnd;
				dormfrnd = 0;
				if (caster.exfriend0 && caster.exfriend0 != world) {
					rmfrnd = caster.exfriend0;
					dormfrnd = 1;
				}
				caster.exfriend0 = exfriend;
				caster.exfriend0.exfriendent = exfriend.toleratedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "No more exfriend slots, Removed exfriend to exfriend slot1\n");
				}
				if (dormfrnd) {
					rmfrnd.exfriendent = world;
					remove(rmfrnd);
				}
			}
}
			
		

void Cmd_removeFriend(entity caster, float myentry) {
	if not (autocvar_g_allow_friends) {
		return;
	}

	//remove and set one to world.
	//Could do something cleaver with .entity sort of things
	//Don't want to risk it, going to keep it simple
	local entity rmfrnd;
	if (myentry == 1) {
		if (caster.friend0 && caster.friend0 != world) {
			if (caster.friend0.friendent && caster.friend0.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  1:[^7", caster.friend0.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  1:[^7", caster.friend0.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			//print(etos(caster.friend0.friendent),"fndns\n");
			
			rmfrnd = caster.friend0; //Point rmfriend at
			cmdremoveFriendmovetoEx(caster, rmfrnd); //move rmfrnd to exfriend list
			
			//print(etos(caster.exfriend0.friendent),"exfndns\n");
			
			caster.friend0.classname = "";
			caster.friend0.friendent = world;
			caster.friend0 = world; //Point friend0 at.
			
			//print(etos(caster.exfriend0.exfriendent),"ex32fndns\n");
			
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 2) {
		if (caster.friend1 && caster.friend1 != world) {
			if (caster.friend1.friendent && caster.friend1.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  2:[^7", caster.friend1.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  2:[^7", caster.friend1.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.friend1;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend1.classname = "";
			caster.friend1.friendent = world;
			caster.friend1 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 3) {
		if (caster.friend2 && caster.friend2 != world) {
			if (caster.friend2.friendent && caster.friend2.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  3:[^7", caster.friend2.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  3:[^7", caster.friend2.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.friend2;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend2.classname = "";
			caster.friend2.friendent = world;
			caster.friend2 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 4) {
		if (caster.friend3 && caster.friend3 != world) {
			if (caster.friend3.friendent && caster.friend3.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  4:[^7", caster.friend3.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  4:[^7", caster.friend3.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.friend3;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend3.classname = "";
			caster.friend3.friendent = world;
			caster.friend3 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 5) {
		if (caster.friend4 && caster.friend4 != world) {
			if (caster.friend4.friendent && caster.friend4.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  5:[^7", caster.friend4.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  5:[^7", caster.friend4.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.friend4;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend4.classname = "";
			caster.friend4.friendent = world;
			caster.friend4 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 6) {
		if (caster.friend5 && caster.friend5 != world) {
			if (caster.friend5.friendent && caster.friend5.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  6:[^7", caster.friend5.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  6:[^7", caster.friend5.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.friend5;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend5.classname = "";
			caster.friend5.friendent = world;
			caster.friend5 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 7) {
		if (caster.friend6 && caster.friend6 != world) {
			if (caster.friend6.friendent && caster.friend6.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  7:[^7", caster.friend6.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  7:[^7", caster.friend6.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.friend6;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend6.classname = "";
			caster.friend6.friendent = world;
			caster.friend6 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 8) {
		if (caster.friend7 && caster.friend7 != world) {
			if (caster.friend7.friendent && caster.friend7.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  8:[^7", caster.friend7.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  8:[^7", caster.friend7.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.friend7;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend7.classname = "";
			caster.friend7.friendent = world;
			caster.friend7 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 9) {
		if (caster.friend8 && caster.friend8 != world) {
			if (caster.friend8.friendent && caster.friend8.friendent != world) {
				sprint(caster, strcat("^xFC0Friend  9:[^7", caster.friend8.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend  9:[^7", caster.friend8.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
		
			rmfrnd = caster.friend8;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend8.classname = "";
			caster.friend8.friendent = world;
			caster.friend8 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 10) {
		if (caster.friend9 && caster.friend9 != world) {
			if (caster.friend9.friendent && caster.friend9.friendent != world) {
				sprint(caster, strcat("^xFC0Friend 10:[^7", caster.friend9.friendent.netname,"^xFC0]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Friend 10:[^7", caster.friend9.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}

			rmfrnd = caster.friend9;
			cmdremoveFriendmovetoEx(caster, rmfrnd);
			caster.friend9.classname = "";
			caster.friend9.friendent = world;
			caster.friend9 = world;
			caster.hasfriends = caster.hasfriends - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	}
}

void Cmd_listFriends(entity caster) {
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	if (caster.friend0 && caster.friend0 != world) {
		if (caster.friend0.friendent && caster.friend0.friendent != world) {
			if (caster.friend0.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  1^x90F:[^7", caster.friend0.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  1:[^7", caster.friend0.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  1:[^7", caster.friend0.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  1:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend1 && caster.friend1 != world) {
		if (caster.friend1.friendent && caster.friend1.friendent != world) {
			if (caster.friend1.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  2^x90F:[^7", caster.friend1.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  2:[^7", caster.friend1.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  2:[^7", caster.friend1.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  2:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend2 && caster.friend2 != world) {
		if (caster.friend2.friendent && caster.friend2.friendent != world) {
			if (caster.friend2.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  3^x90F:[^7", caster.friend2.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  3:[^7", caster.friend2.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  3:[^7", caster.friend2.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  3:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend3 && caster.friend3 != world) {
		if (caster.friend3.friendent && caster.friend3.friendent != world) {
			if (caster.friend3.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  4^x90F:[^7", caster.friend3.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  4:[^7", caster.friend3.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  4:[^7", caster.friend3.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  4:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend4 && caster.friend4 != world) {
		if (caster.friend4.friendent && caster.friend4.friendent != world) {
			if (caster.friend4.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  5^x90F:[^7", caster.friend4.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  5:[^7", caster.friend4.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  5:[^7", caster.friend4.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  5:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend5 && caster.friend5 != world) {
		if (caster.friend5.friendent && caster.friend5.friendent != world) {
			if (caster.friend5.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  6^x90F:[^7", caster.friend5.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  6:[^7", caster.friend5.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  6:[^7", caster.friend5.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  6:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend6 && caster.friend6 != world) {
		if (caster.friend6.friendent && caster.friend6.friendent != world) {
			if (caster.friend6.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  7^x90F:[^7", caster.friend6.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  7:[^7", caster.friend6.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  7:[^7", caster.friend6.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  7:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend7 && caster.friend7 != world) {
		if (caster.friend7.friendent && caster.friend7.friendent != world) {
			if (caster.friend7.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  8^x90F:[^7", caster.friend7.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  8:[^7", caster.friend7.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  8:[^7", caster.friend7.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  8:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend8 && caster.friend8 != world) {
		if (caster.friend8.friendent && caster.friend8.friendent != world) {
			if (caster.friend8.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend  9^x90F:[^7", caster.friend8.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend  9:[^7", caster.friend8.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend  9:[^7", caster.friend8.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend  9:[","                    ","^x222]^7\n"));
	}
	
	if (caster.friend9 && caster.friend9 != world) {
		if (caster.friend9.friendent && caster.friend9.friendent != world) {
			if (caster.friend9.friendent == caster) {
				//It is yourself
				sprint(caster, strcat("^x0FFFriend 10^x90F:[^7", caster.friend9.friendent.netname,"^x90F]^7     \n"));
			} else {
				sprint(caster, strcat("^xFC0Friend 10:[^7", caster.friend9.friendent.netname,"^xFC0]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Friend 10:[^7", caster.friend9.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Friend 10:[","                    ","^x222]^7\n"));
	}
	
	//print friends list
}

void Cmd_removeTolerated(entity caster, float myentry) {
	if not (autocvar_g_allow_friends) {
		return;
	}

	//remove and set one to world.
	//Could do something cleaver with .entity sort of things
	//Don't want to risk it, going to keep it simple
	local entity rmfrnd;
	if (myentry == 1) {
		if (caster.tolerated0 && caster.tolerated0 != world) {
			if (caster.tolerated0.toleratedent && caster.tolerated0.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  1:[^7", caster.tolerated0.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  1:[^7", caster.tolerated0.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			//print(etos(caster.tolerated0.toleratedent),"fndns\n");
			
			rmfrnd = caster.tolerated0; //Point rmtolerated at
			cmdremoveToleratedmovetoEx(caster, rmfrnd); //move rmfrnd to extolerated list
			
			//print(etos(caster.extolerated0.toleratedent),"exfndns\n");
			
			caster.tolerated0.classname = "";
			caster.tolerated0.toleratedent = world;
			caster.tolerated0 = world; //Point tolerated0 at.
			
			//print(etos(caster.extolerated0.extoleratedent),"ex32fndns\n");
			
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 2) {
		if (caster.tolerated1 && caster.tolerated1 != world) {
			if (caster.tolerated1.toleratedent && caster.tolerated1.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  2:[^7", caster.tolerated1.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  2:[^7", caster.tolerated1.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.tolerated1;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated1.classname = "";
			caster.tolerated1.toleratedent = world;
			caster.tolerated1 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 3) {
		if (caster.tolerated2 && caster.tolerated2 != world) {
			if (caster.tolerated2.toleratedent && caster.tolerated2.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  3:[^7", caster.tolerated2.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  3:[^7", caster.tolerated2.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.tolerated2;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated2.classname = "";
			caster.tolerated2.toleratedent = world;
			caster.tolerated2 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 4) {
		if (caster.tolerated3 && caster.tolerated3 != world) {
			if (caster.tolerated3.toleratedent && caster.tolerated3.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  4:[^7", caster.tolerated3.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  4:[^7", caster.tolerated3.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.tolerated3;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated3.classname = "";
			caster.tolerated3.toleratedent = world;
			caster.tolerated3 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 5) {
		if (caster.tolerated4 && caster.tolerated4 != world) {
			if (caster.tolerated4.toleratedent && caster.tolerated4.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  5:[^7", caster.tolerated4.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  5:[^7", caster.tolerated4.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.tolerated4;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated4.classname = "";
			caster.tolerated4.toleratedent = world;
			caster.tolerated4 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 6) {
		if (caster.tolerated5 && caster.tolerated5 != world) {
			if (caster.tolerated5.toleratedent && caster.tolerated5.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  6:[^7", caster.tolerated5.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  6:[^7", caster.tolerated5.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.tolerated5;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated5.classname = "";
			caster.tolerated5.toleratedent = world;
			caster.tolerated5 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 7) {
		if (caster.tolerated6 && caster.tolerated6 != world) {
			if (caster.tolerated6.toleratedent && caster.tolerated6.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  7:[^7", caster.tolerated6.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  7:[^7", caster.tolerated6.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.tolerated6;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated6.classname = "";
			caster.tolerated6.toleratedent = world;
			caster.tolerated6 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 8) {
		if (caster.tolerated7 && caster.tolerated7 != world) {
			if (caster.tolerated7.toleratedent && caster.tolerated7.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  8:[^7", caster.tolerated7.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  8:[^7", caster.tolerated7.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.tolerated7;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated7.classname = "";
			caster.tolerated7.toleratedent = world;
			caster.tolerated7 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 9) {
		if (caster.tolerated8 && caster.tolerated8 != world) {
			if (caster.tolerated8.toleratedent && caster.tolerated8.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated  9:[^7", caster.tolerated8.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated  9:[^7", caster.tolerated8.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
		
			rmfrnd = caster.tolerated8;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated8.classname = "";
			caster.tolerated8.toleratedent = world;
			caster.tolerated8 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	} else if (myentry == 10) {
		if (caster.tolerated9 && caster.tolerated9 != world) {
			if (caster.tolerated9.toleratedent && caster.tolerated9.toleratedent != world) {
				sprint(caster, strcat("^xDDDTolerated 10:[^7", caster.tolerated9.toleratedent.netname,"^xDDD]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Tolerated 10:[^7", caster.tolerated9.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}

			rmfrnd = caster.tolerated9;
			cmdremoveToleratedmovetoEx(caster, rmfrnd);
			caster.tolerated9.classname = "";
			caster.tolerated9.toleratedent = world;
			caster.tolerated9 = world;
			caster.hastolerateds = caster.hastolerateds - 1;
			rmfrnd.classname = "exfrndentry"; 
		}
	}
}

void Cmd_listTolerateds(entity caster) {
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	if (caster.tolerated0 && caster.tolerated0 != world) {
		if (caster.tolerated0.toleratedent && caster.tolerated0.toleratedent != world) {
			if (caster.tolerated0.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  1^x95F:[^7", caster.tolerated0.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  1:[^7", caster.tolerated0.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  1:[^7", caster.tolerated0.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  1:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated1 && caster.tolerated1 != world) {
		if (caster.tolerated1.toleratedent && caster.tolerated1.toleratedent != world) {
			if (caster.tolerated1.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  2^x95F:[^7", caster.tolerated1.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  2:[^7", caster.tolerated1.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  2:[^7", caster.tolerated1.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  2:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated2 && caster.tolerated2 != world) {
		if (caster.tolerated2.toleratedent && caster.tolerated2.toleratedent != world) {
			if (caster.tolerated2.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  3^x95F:[^7", caster.tolerated2.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  3:[^7", caster.tolerated2.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  3:[^7", caster.tolerated2.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  3:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated3 && caster.tolerated3 != world) {
		if (caster.tolerated3.toleratedent && caster.tolerated3.toleratedent != world) {
			if (caster.tolerated3.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  4^x95F:[^7", caster.tolerated3.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  4:[^7", caster.tolerated3.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  4:[^7", caster.tolerated3.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  4:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated4 && caster.tolerated4 != world) {
		if (caster.tolerated4.toleratedent && caster.tolerated4.toleratedent != world) {
			if (caster.tolerated4.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  5^x95F:[^7", caster.tolerated4.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  5:[^7", caster.tolerated4.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  5:[^7", caster.tolerated4.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  5:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated5 && caster.tolerated5 != world) {
		if (caster.tolerated5.toleratedent && caster.tolerated5.toleratedent != world) {
			if (caster.tolerated5.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  6^x95F:[^7", caster.tolerated5.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  6:[^7", caster.tolerated5.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  6:[^7", caster.tolerated5.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  6:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated6 && caster.tolerated6 != world) {
		if (caster.tolerated6.toleratedent && caster.tolerated6.toleratedent != world) {
			if (caster.tolerated6.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  7^x95F:[^7", caster.tolerated6.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  7:[^7", caster.tolerated6.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  7:[^7", caster.tolerated6.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  7:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated7 && caster.tolerated7 != world) {
		if (caster.tolerated7.toleratedent && caster.tolerated7.toleratedent != world) {
			if (caster.tolerated7.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  8^x95F:[^7", caster.tolerated7.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  8:[^7", caster.tolerated7.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  8:[^7", caster.tolerated7.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  8:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated8 && caster.tolerated8 != world) {
		if (caster.tolerated8.toleratedent && caster.tolerated8.toleratedent != world) {
			if (caster.tolerated8.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated  9^x95F:[^7", caster.tolerated8.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated  9:[^7", caster.tolerated8.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated  9:[^7", caster.tolerated8.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated  9:[","                    ","^x222]^7\n"));
	}
	
	if (caster.tolerated9 && caster.tolerated9 != world) {
		if (caster.tolerated9.toleratedent && caster.tolerated9.toleratedent != world) {
			if (caster.tolerated9.toleratedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xAFFTolerated 10^x95F:[^7", caster.tolerated9.toleratedent.netname,"^x95F]^7     \n"));
			} else {
				sprint(caster, strcat("^xDDDTolerated 10:[^7", caster.tolerated9.toleratedent.netname,"^xDDD]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Tolerated 10:[^7", caster.tolerated9.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Tolerated 10:[","                    ","^x222]^7\n"));
	}
	
	//print tolerateds list
}


void Cmd_listExFriends(entity caster) {
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	if (caster.exfriend0 && caster.exfriend0 != world) {
		if (caster.exfriend0.exfriendent && caster.exfriend0.exfriendent != world) {
			if (caster.exfriend0.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  1^xF09:[^7", caster.exfriend0.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  1:[^7", caster.exfriend0.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  1:[^7", caster.exfriend0.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  1:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend1 && caster.exfriend1 != world) {
		if (caster.exfriend1.exfriendent && caster.exfriend1.exfriendent != world) {
			if (caster.exfriend1.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  2^xF09:[^7", caster.exfriend1.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  2:[^7", caster.exfriend1.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  2:[^7", caster.exfriend1.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  2:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend2 && caster.exfriend2 != world) {
		if (caster.exfriend2.exfriendent && caster.exfriend2.exfriendent != world) {
			if (caster.exfriend2.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  3^xF09:[^7", caster.exfriend2.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  3:[^7", caster.exfriend2.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  3:[^7", caster.exfriend2.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  3:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend3 && caster.exfriend3 != world) {
		if (caster.exfriend3.exfriendent && caster.exfriend3.exfriendent != world) {
			if (caster.exfriend3.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  4^xF09:[^7", caster.exfriend3.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  4:[^7", caster.exfriend3.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  4:[^7", caster.exfriend3.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  4:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend4 && caster.exfriend4 != world) {
		if (caster.exfriend4.exfriendent && caster.exfriend4.exfriendent != world) {
			if (caster.exfriend4.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  5^xF09:[^7", caster.exfriend4.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  5:[^7", caster.exfriend4.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  5:[^7", caster.exfriend4.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  5:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend5 && caster.exfriend5 != world) {
		if (caster.exfriend5.exfriendent && caster.exfriend5.exfriendent != world) {
			if (caster.exfriend5.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  6^xF09:[^7", caster.exfriend5.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  6:[^7", caster.exfriend5.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  6:[^7", caster.exfriend5.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  6:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend6 && caster.exfriend6 != world) {
		if (caster.exfriend6.exfriendent && caster.exfriend6.exfriendent != world) {
			if (caster.exfriend6.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  7^xF09:[^7", caster.exfriend6.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  7:[^7", caster.exfriend6.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  7:[^7", caster.exfriend6.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  7:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend7 && caster.exfriend7 != world) {
		if (caster.exfriend7.exfriendent && caster.exfriend7.exfriendent != world) {
			if (caster.exfriend7.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  8^xF09:[^7", caster.exfriend7.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  8:[^7", caster.exfriend7.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  8:[^7", caster.exfriend7.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  8:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend8 && caster.exfriend8 != world) {
		if (caster.exfriend8.exfriendent && caster.exfriend8.exfriendent != world) {
			if (caster.exfriend8.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend  9^xF09:[^7", caster.exfriend8.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend  9:[^7", caster.exfriend8.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend  9:[^7", caster.exfriend8.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend  9:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exfriend9 && caster.exfriend9 != world) {
		if (caster.exfriend9.exfriendent && caster.exfriend9.exfriendent != world) {
			if (caster.exfriend9.exfriendent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExFriend 10^xF09:[^7", caster.exfriend9.exfriendent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExFriend 10:[^7", caster.exfriend9.exfriendent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExFriend 10:[^7", caster.exfriend9.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExFriend 10:[","                    ","^x310]^7\n"));
	}
	
	//print exfriends list
}

void Cmd_addFriend(entity caster, float readdexfriend)
{
	local entity mynewfriend;
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	//If we got a number (non 0) we try to restore an exfriend (a removed friend)
	if (readdexfriend) {
		if (caster.friend0 && caster.friend0 != world
			&& caster.friend1 && caster.friend1 != world
			&& caster.friend2 && caster.friend2 != world
			&& caster.friend3 && caster.friend3 != world
			&& caster.friend4 && caster.friend4 != world
			&& caster.friend5 && caster.friend5 != world
			&& caster.friend6 && caster.friend6 != world
			&& caster.friend7 && caster.friend7 != world
			&& caster.friend8 && caster.friend8 != world
			&& caster.friend9 && caster.friend9 != world)
		{
			if ((clienttype(caster) == CLIENTTYPE_REAL)) {
				sprint(caster, "No free slots to move exfriend back to\n");
			}
			return;
		} else if (readdexfriend == 1) {
			//print(etos(caster.exfriend0),"xfriend\n");
			//print(etos(caster.exfriend0.exfriendent),"xfriend\n");
			if (caster.exfriend0 && caster.exfriend0 != world
			&& caster.exfriend0.exfriendent && caster.exfriend0.exfriendent != world) {
				
				if((caster.exfriend0.exfriendent != world)
				&& (caster.exfriend0.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend0.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend0.exfriendent;
				caster.exfriend0.exfriendent = world;
				caster.exfriend0 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 2) {
			if (caster.exfriend1 && caster.exfriend1 != world
			&& caster.exfriend1.exfriendent && caster.exfriend1.exfriendent != world) {
				
				if((caster.exfriend1.exfriendent != world)
				&& (caster.exfriend1.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend1.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend1.exfriendent;
				caster.exfriend1.exfriendent = world;
				caster.exfriend1 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 3) {
			if (caster.exfriend2 && caster.exfriend2 != world
			&& caster.exfriend2.exfriendent && caster.exfriend2.exfriendent != world) {
				
				if((caster.exfriend2.exfriendent != world)
				&& (caster.exfriend2.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend2.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend2.exfriendent;
				caster.exfriend2.exfriendent = world;
				caster.exfriend2 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 4) {
			if (caster.exfriend3 && caster.exfriend3 != world
			&& caster.exfriend3.exfriendent && caster.exfriend3.exfriendent != world) {
				
				if((caster.exfriend3.exfriendent != world)
				&& (caster.exfriend3.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend3.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend3.exfriendent;
				caster.exfriend3.exfriendent = world;
				caster.exfriend3 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 5) {
			if (caster.exfriend4 && caster.exfriend4 != world
			&& caster.exfriend4.exfriendent && caster.exfriend4.exfriendent != world) {
				
				if((caster.exfriend4.exfriendent != world)
				&& (caster.exfriend4.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend4.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend4.exfriendent;
				caster.exfriend4.exfriendent = world;
				caster.exfriend4 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 6) {
			if (caster.exfriend5 && caster.exfriend5 != world
			&& caster.exfriend5.exfriendent && caster.exfriend5.exfriendent != world) {
				
				if((caster.exfriend5.exfriendent != world)
				&& (caster.exfriend5.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend5.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend5.exfriendent;
				caster.exfriend5.exfriendent = world;
				caster.exfriend5 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 7) {
			if (caster.exfriend6 && caster.exfriend6 != world
			&& caster.exfriend6.exfriendent && caster.exfriend6.exfriendent != world) {
				
				if((caster.exfriend6.exfriendent != world)
				&& (caster.exfriend6.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend6.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend6.exfriendent;
				caster.exfriend6.exfriendent = world;
				caster.exfriend6 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 8) {
			if (caster.exfriend7 && caster.exfriend7 != world
			&& caster.exfriend7.exfriendent && caster.exfriend7.exfriendent != world) {
				
				if((caster.exfriend7.exfriendent != world)
				&& (caster.exfriend7.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend7.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend7.exfriendent;
				caster.exfriend7.exfriendent = world;
				caster.exfriend7 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 9) {
			if (caster.exfriend8 && caster.exfriend8 != world
			&& caster.exfriend8.exfriendent && caster.exfriend8.exfriendent != world) {
				
				if((caster.exfriend8.exfriendent != world)
				&& (caster.exfriend8.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend8.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend8.exfriendent;
				caster.exfriend8.exfriendent = world;
				caster.exfriend8 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 10) {
			if (caster.exfriend9 && caster.exfriend9 != world
			&& caster.exfriend9.exfriendent && caster.exfriend9.exfriendent != world) {
				
				if((caster.exfriend9.exfriendent != world)
				&& (caster.exfriend9.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend9.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewfriend = caster.exfriend9.exfriendent;
				caster.exfriend9.exfriendent = world;
				caster.exfriend9 = world;
			} else {
				return;
			}
		} else {
			return;
		}
	//Otherwise we trace forward and try to add a friend
	} else {
		local entity myent;
		myent = spawn();
		myent.origin = caster.origin;
		makevectors(caster.v_angle);
		//traceline(caster.origin, caster.origin + v_forward * 128, MOVE_NORMAL, caster);
		WarpZone_traceline_antilag(myent, myent.origin, myent.origin + v_forward * 128, FALSE, myent, ANTILAG_LATENCY(myent));
		//So you can add yourself if you find a self connected warpzone
		mynewfriend = trace_ent;
		remove(myent);
	}
	
	if(mynewfriend != world)
	if(mynewfriend.flags & FL_CLIENT)
	if(mynewfriend.classname == "player")
	//Check if alive, non spec, etc
	{
		if (teamplay) {
			if (autocvar_g_allow_friends < 2) {
				//print("Teamplay\n");
				if not(caster.team == mynewfriend.team) {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "Cannot add enemy team member as friend\n");
					}
					return;
				}
			}
		}
		
		if not(readdexfriend) {
			//Only do this for new, face to face, friend adds
			//not refriending exfriends
			if not(mynewfriend.deadflag == DEAD_NO) 
			{
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Cannot add those who are dead as friends\n");
				}
				return;
			}
			
			if not(mynewfriend.health > 0) {
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Cannot add those who are as friends\n");
				}
				return;
			}
		}
	
		if not (isFriendOf(caster, mynewfriend, 1)) {
			local entity newfriend;
			//Find a free slot and put in
			if (!caster.friend0 || caster.friend0 == world) {
				newfriend = spawn();
				caster.friend0 = newfriend;
				setFriend(mynewfriend, caster.friend0);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 1\n");
				}
			} else if (!caster.friend1 || caster.friend1 == world) {
				newfriend = spawn();
				caster.friend1 = newfriend;
				setFriend(mynewfriend, caster.friend1);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 2\n");
				}
			} else if (!caster.friend2 || caster.friend2 == world) {
				newfriend = spawn();
				caster.friend2 = newfriend;
				setFriend(mynewfriend, caster.friend2);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 3\n");
				}
			} else if (!caster.friend3 || caster.friend3 == world) {
				newfriend = spawn();
				caster.friend3 = newfriend;
				setFriend(mynewfriend, caster.friend3);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 4\n");
				}
			} else if (!caster.friend4 || caster.friend4 == world) {
				newfriend = spawn();
				caster.friend4 = newfriend;
				setFriend(mynewfriend, caster.friend4);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 5\n");
				}
			} else if (!caster.friend5 || caster.friend5 == world) {
				newfriend = spawn();
				caster.friend5 = newfriend;
				setFriend(mynewfriend, caster.friend5);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 6\n");
				}
			} else if (!caster.friend6 || caster.friend6 == world) {
				newfriend = spawn();
				caster.friend6 = newfriend;
				setFriend(mynewfriend, caster.friend6);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 7\n");
				}
			} else if (!caster.friend7 || caster.friend7 == world) {
				newfriend = spawn();
				caster.friend7 = newfriend;
				setFriend(mynewfriend, caster.friend7);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 8\n");
				}
			} else if (!caster.friend8 || caster.friend8 == world) {
				newfriend = spawn();
				caster.friend8 = newfriend;
				setFriend(mynewfriend, caster.friend8);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 9\n");
				}
			} else if (!caster.friend9 || caster.friend9 == world) {
				newfriend = spawn();
				caster.friend9 = newfriend;
				setFriend(mynewfriend, caster.friend9);
				caster.hasfriends = caster.hasfriends + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added friend to slot 10\n");
				}
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "No free slots for new friend\n");
				}
			}
		}
	}
}


void Cmd_addTolerated(entity caster, float readdexfriend)
{
	local entity mynewtolerated;
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	//If we got a number (non 0) we try to restore an exfriend (a removed tolerated)
	if (readdexfriend) {
		if (caster.tolerated0 && caster.tolerated0 != world
			&& caster.tolerated1 && caster.tolerated1 != world
			&& caster.tolerated2 && caster.tolerated2 != world
			&& caster.tolerated3 && caster.tolerated3 != world
			&& caster.tolerated4 && caster.tolerated4 != world
			&& caster.tolerated5 && caster.tolerated5 != world
			&& caster.tolerated6 && caster.tolerated6 != world
			&& caster.tolerated7 && caster.tolerated7 != world
			&& caster.tolerated8 && caster.tolerated8 != world
			&& caster.tolerated9 && caster.tolerated9 != world)
		{
			if ((clienttype(caster) == CLIENTTYPE_REAL)) {
				sprint(caster, "No free slots to move exfriend back to\n");
			}
			return;
		} else if (readdexfriend == 1) {
			//print(etos(caster.exfriend0),"xtolerated\n");
			//print(etos(caster.exfriend0.exfriendent),"xtolerated\n");
			if (caster.exfriend0 && caster.exfriend0 != world
			&& caster.exfriend0.exfriendent && caster.exfriend0.exfriendent != world) {
				
				if((caster.exfriend0.exfriendent != world)
				&& (caster.exfriend0.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend0.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend0.exfriendent;
				caster.exfriend0.exfriendent = world;
				caster.exfriend0 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 2) {
			if (caster.exfriend1 && caster.exfriend1 != world
			&& caster.exfriend1.exfriendent && caster.exfriend1.exfriendent != world) {
				
				if((caster.exfriend1.exfriendent != world)
				&& (caster.exfriend1.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend1.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend1.exfriendent;
				caster.exfriend1.exfriendent = world;
				caster.exfriend1 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 3) {
			if (caster.exfriend2 && caster.exfriend2 != world
			&& caster.exfriend2.exfriendent && caster.exfriend2.exfriendent != world) {
				
				if((caster.exfriend2.exfriendent != world)
				&& (caster.exfriend2.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend2.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend2.exfriendent;
				caster.exfriend2.exfriendent = world;
				caster.exfriend2 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 4) {
			if (caster.exfriend3 && caster.exfriend3 != world
			&& caster.exfriend3.exfriendent && caster.exfriend3.exfriendent != world) {
				
				if((caster.exfriend3.exfriendent != world)
				&& (caster.exfriend3.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend3.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend3.exfriendent;
				caster.exfriend3.exfriendent = world;
				caster.exfriend3 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 5) {
			if (caster.exfriend4 && caster.exfriend4 != world
			&& caster.exfriend4.exfriendent && caster.exfriend4.exfriendent != world) {
				
				if((caster.exfriend4.exfriendent != world)
				&& (caster.exfriend4.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend4.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend4.exfriendent;
				caster.exfriend4.exfriendent = world;
				caster.exfriend4 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 6) {
			if (caster.exfriend5 && caster.exfriend5 != world
			&& caster.exfriend5.exfriendent && caster.exfriend5.exfriendent != world) {
				
				if((caster.exfriend5.exfriendent != world)
				&& (caster.exfriend5.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend5.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend5.exfriendent;
				caster.exfriend5.exfriendent = world;
				caster.exfriend5 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 7) {
			if (caster.exfriend6 && caster.exfriend6 != world
			&& caster.exfriend6.exfriendent && caster.exfriend6.exfriendent != world) {
				
				if((caster.exfriend6.exfriendent != world)
				&& (caster.exfriend6.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend6.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend6.exfriendent;
				caster.exfriend6.exfriendent = world;
				caster.exfriend6 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 8) {
			if (caster.exfriend7 && caster.exfriend7 != world
			&& caster.exfriend7.exfriendent && caster.exfriend7.exfriendent != world) {
				
				if((caster.exfriend7.exfriendent != world)
				&& (caster.exfriend7.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend7.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend7.exfriendent;
				caster.exfriend7.exfriendent = world;
				caster.exfriend7 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 9) {
			if (caster.exfriend8 && caster.exfriend8 != world
			&& caster.exfriend8.exfriendent && caster.exfriend8.exfriendent != world) {
				
				if((caster.exfriend8.exfriendent != world)
				&& (caster.exfriend8.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend8.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend8.exfriendent;
				caster.exfriend8.exfriendent = world;
				caster.exfriend8 = world;
			} else {
				return;
			}
		} else if (readdexfriend == 10) {
			if (caster.exfriend9 && caster.exfriend9 != world
			&& caster.exfriend9.exfriendent && caster.exfriend9.exfriendent != world) {
				
				if((caster.exfriend9.exfriendent != world)
				&& (caster.exfriend9.exfriendent.flags & FL_CLIENT)
				&& (caster.exfriend9.exfriendent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exfriend spectating or not available\n");
					}
					return;
				}
				
				mynewtolerated = caster.exfriend9.exfriendent;
				caster.exfriend9.exfriendent = world;
				caster.exfriend9 = world;
			} else {
				return;
			}
		} else {
			return;
		}
	//Otherwise we trace forward and try to add a tolerated
	} else {
		local entity myent;
		myent = spawn();
		myent.origin = caster.origin;
		makevectors(caster.v_angle);
		//traceline(caster.origin, caster.origin + v_forward * 128, MOVE_NORMAL, caster);
		WarpZone_traceline_antilag(myent, myent.origin, myent.origin + v_forward * 128, FALSE, myent, ANTILAG_LATENCY(myent));
		//So you can add yourself if you find a self connected warpzone
		mynewtolerated = trace_ent;
		remove(myent);
	}
	
	if(mynewtolerated != world)
	if(mynewtolerated.flags & FL_CLIENT)
	if(mynewtolerated.classname == "player")
	//Check if alive, non spec, etc
	{
		if (teamplay) {
			if (autocvar_g_allow_friends < 2) {
				//print("Teamplay\n");
				if not(caster.team == mynewtolerated.team) {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "Cannot add enemy team member as tolerated\n");
					}
					return;
				}
			}
		}
		
		if not(readdexfriend) {
			//Only do this for new, face to face, tolerated adds
			//not retolerateding exfriends
			if not(mynewtolerated.deadflag == DEAD_NO) 
			{
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Cannot add those who are dead as tolerateds\n");
				}
				return;
			}
			
			if not(mynewtolerated.health > 0) {
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Cannot add those who are as tolerateds\n");
				}
				return;
			}
		}
	
		if not (quickIsToleratedOf(caster, mynewtolerated)) {
			local entity newtolerated;
			//Find a free slot and put in
			if (!caster.tolerated0 || caster.tolerated0 == world) {
				newtolerated = spawn();
				caster.tolerated0 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated0);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 1\n");
				}
			} else if (!caster.tolerated1 || caster.tolerated1 == world) {
				newtolerated = spawn();
				caster.tolerated1 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated1);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 2\n");
				}
			} else if (!caster.tolerated2 || caster.tolerated2 == world) {
				newtolerated = spawn();
				caster.tolerated2 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated2);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 3\n");
				}
			} else if (!caster.tolerated3 || caster.tolerated3 == world) {
				newtolerated = spawn();
				caster.tolerated3 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated3);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 4\n");
				}
			} else if (!caster.tolerated4 || caster.tolerated4 == world) {
				newtolerated = spawn();
				caster.tolerated4 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated4);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 5\n");
				}
			} else if (!caster.tolerated5 || caster.tolerated5 == world) {
				newtolerated = spawn();
				caster.tolerated5 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated5);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 6\n");
				}
			} else if (!caster.tolerated6 || caster.tolerated6 == world) {
				newtolerated = spawn();
				caster.tolerated6 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated6);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 7\n");
				}
			} else if (!caster.tolerated7 || caster.tolerated7 == world) {
				newtolerated = spawn();
				caster.tolerated7 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated7);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 8\n");
				}
			} else if (!caster.tolerated8 || caster.tolerated8 == world) {
				newtolerated = spawn();
				caster.tolerated8 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated8);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 9\n");
				}
			} else if (!caster.tolerated9 || caster.tolerated9 == world) {
				newtolerated = spawn();
				caster.tolerated9 = newtolerated;
				setTolerated(mynewtolerated, caster.tolerated9);
				caster.hastolerateds = caster.hastolerateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added tolerated to slot 10\n");
				}
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "No free slots for new tolerated\n");
				}
			}
		}
	}
}


//Stuff for the hated
void cmdremoveHatedmovetoEx(entity caster, entity exhated) {
			local float eflistisfull;
			eflistisfull = 0;
			//Yes, I know, world points to ent0, but do I trust QC, rather be safe than sorry
			if(caster.exhated0 && caster.exhated0 != world
			&& caster.exhated1 && caster.exhated1 != world
			&& caster.exhated2 && caster.exhated2 != world
			&& caster.exhated3 && caster.exhated3 != world
			&& caster.exhated4 && caster.exhated4 != world
			&& caster.exhated5 && caster.exhated5 != world
			&& caster.exhated6 && caster.exhated6 != world
			&& caster.exhated7 && caster.exhated7 != world
			&& caster.exhated8 && caster.exhated8 != world
			&& caster.exhated9 && caster.exhated9 != world)
			{
				eflistisfull = 1; //We'll allow taking over dormant ones then	
			}

			if (!caster.exhated0 || caster.exhated0 == world
			|| (eflistisfull && caster.exhated0.exhatedent == world)) {
				
				caster.exhated0 = exhated;
				caster.exhated0.exhatedent = exhated.hatedent; //Since it gets overwritten
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot1\n");
				}
			} else if (!caster.exhated1 || caster.exhated1 == world
			|| (eflistisfull && caster.exhated1.exhatedent == world)) {
				
				caster.exhated1 = exhated;
				caster.exhated1.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot2\n");
				}
			} else if (!caster.exhated2 || caster.exhated2 == world
			|| (eflistisfull && caster.exhated2.exhatedent == world)) {
				
				caster.exhated2 = exhated;
				caster.exhated2.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot3\n");
				}
			} else if (!caster.exhated3 || caster.exhated3 == world
			|| (eflistisfull && caster.exhated3.exhatedent == world)) {
				
				caster.exhated3 = exhated;
				caster.exhated3.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot4\n");
				}
			} else if (!caster.exhated4 || caster.exhated4 == world
			|| (eflistisfull && caster.exhated4.exhatedent == world)) {
				
				caster.exhated4 = exhated;
				caster.exhated4.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot5\n");
				}
			} else if (!caster.exhated5 || caster.exhated5 == world
			|| (eflistisfull && caster.exhated5.exhatedent == world)) {
				
				caster.exhated5 = exhated;
				caster.exhated5.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot6\n");
				}
			} else if (!caster.exhated6 || caster.exhated6 == world
			|| (eflistisfull && caster.exhated6.exhatedent == world)) {
				
				caster.exhated6 = exhated;
				caster.exhated6.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot7\n");
				}
			} else if (!caster.exhated7 || caster.exhated7 == world
			|| (eflistisfull && caster.exhated7.exhatedent == world)) {
				
				caster.exhated7 = exhated;
				caster.exhated7.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot8\n");
				}
			} else if (!caster.exhated8 || caster.exhated8 == world
			|| (eflistisfull && caster.exhated8.exhatedent == world)) {
				
				caster.exhated8 = exhated;
				caster.exhated8.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot9\n");
				}
			} else if (!caster.exhated9 || caster.exhated9 == world
			|| (eflistisfull && caster.exhated9.exhatedent == world)) {
				
				caster.exhated9 = exhated;
				caster.exhated9.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Removed exhated to exhated slot10\n");
				}
			} else {
				local entity rmfrnd;
				local float dormfrnd;
				dormfrnd = 0;
				if (caster.exhated0 && caster.exhated0 != world) {
					rmfrnd = caster.exhated0;
					dormfrnd = 1;
				}
				caster.exhated0 = exhated;
				caster.exhated0.exhatedent = exhated.hatedent;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "No more exhated slots, Removed exhated to exhated slot1\n");
				}
				if (dormfrnd) {
					rmfrnd.exhatedent = world;
					remove(rmfrnd);
				}
			}
}

void Cmd_removeHated(entity caster, float myentry) {
	if not (autocvar_g_allow_friends) {
		return;
	}

	//remove and set one to world.
	//Could do something cleaver with .entity sort of things
	//Don't want to risk it, going to keep it simple
	local entity rmfrnd;
	if (myentry == 1) {
		if (caster.hated0 && caster.hated0 != world) {
			if (caster.hated0.hatedent && caster.hated0.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  1:[^7", caster.hated0.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  1:[^7", caster.hated0.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			//print(etos(caster.hated0.hatedent),"fndns\n");
			
			rmfrnd = caster.hated0; //Point rmhated at
			cmdremoveHatedmovetoEx(caster, rmfrnd); //move rmfrnd to exhated list
			
			//print(etos(caster.exhated0.hatedent),"exfndns\n");
			
			caster.hated0.classname = "";
			caster.hated0.hatedent = world;
			caster.hated0 = world; //Point hated0 at.
			
			//print(etos(caster.exhated0.exhatedent),"ex32fndns\n");
			
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 2) {
		if (caster.hated1 && caster.hated1 != world) {
			if (caster.hated1.hatedent && caster.hated1.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  2:[^7", caster.hated1.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  2:[^7", caster.hated1.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.hated1;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated1.classname = "";
			caster.hated1.hatedent = world;
			caster.hated1 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 3) {
		if (caster.hated2 && caster.hated2 != world) {
			if (caster.hated2.hatedent && caster.hated2.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  3:[^7", caster.hated2.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  3:[^7", caster.hated2.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.hated2;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated2.classname = "";
			caster.hated2.hatedent = world;
			caster.hated2 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 4) {
		if (caster.hated3 && caster.hated3 != world) {
			if (caster.hated3.hatedent && caster.hated3.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  4:[^7", caster.hated3.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  4:[^7", caster.hated3.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.hated3;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated3.classname = "";
			caster.hated3.hatedent = world;
			caster.hated3 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 5) {
		if (caster.hated4 && caster.hated4 != world) {
			if (caster.hated4.hatedent && caster.hated4.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  5:[^7", caster.hated4.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  5:[^7", caster.hated4.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.hated4;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated4.classname = "";
			caster.hated4.hatedent = world;
			caster.hated4 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 6) {
		if (caster.hated5 && caster.hated5 != world) {
			if (caster.hated5.hatedent && caster.hated5.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  6:[^7", caster.hated5.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  6:[^7", caster.hated5.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.hated5;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated5.classname = "";
			caster.hated5.hatedent = world;
			caster.hated5 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 7) {
		if (caster.hated6 && caster.hated6 != world) {
			if (caster.hated6.hatedent && caster.hated6.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  7:[^7", caster.hated6.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  7:[^7", caster.hated6.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.hated6;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated6.classname = "";
			caster.hated6.hatedent = world;
			caster.hated6 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 8) {
		if (caster.hated7 && caster.hated7 != world) {
			if (caster.hated7.hatedent && caster.hated7.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  8:[^7", caster.hated7.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  8:[^7", caster.hated7.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
			
			rmfrnd = caster.hated7;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated7.classname = "";
			caster.hated7.hatedent = world;
			caster.hated7 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 9) {
		if (caster.hated8 && caster.hated8 != world) {
			if (caster.hated8.hatedent && caster.hated8.hatedent != world) {
				sprint(caster, strcat("^xF00Hated  9:[^7", caster.hated8.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated  9:[^7", caster.hated8.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}
		
			rmfrnd = caster.hated8;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated8.classname = "";
			caster.hated8.hatedent = world;
			caster.hated8 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	} else if (myentry == 10) {
		if (caster.hated9 && caster.hated9 != world) {
			if (caster.hated9.hatedent && caster.hated9.hatedent != world) {
				sprint(caster, strcat("^xF00Hated 10:[^7", caster.hated9.hatedent.netname,"^xF00]^7 ^xF00Removed^7\n"));
			} else {
				sprint(caster, strcat("^x555Hated 10:[^7", caster.hated9.svdstring0,"^x555]^7 ^xF00Removed^7\n"));
			}

			rmfrnd = caster.hated9;
			cmdremoveHatedmovetoEx(caster, rmfrnd);
			caster.hated9.classname = "";
			caster.hated9.hatedent = world;
			caster.hated9 = world;
			caster.hashateds = caster.hashateds - 1;
			rmfrnd.classname = "exhtedentry"; 
		}
	}
}

void Cmd_listHateds(entity caster) {
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	if (caster.hated0 && caster.hated0 != world) {
		if (caster.hated0.hatedent && caster.hated0.hatedent != world) {
			if (caster.hated0.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  1^xF09:[^7", caster.hated0.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  1:[^7", caster.hated0.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  1:[^7", caster.hated0.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  1:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated1 && caster.hated1 != world) {
		if (caster.hated1.hatedent && caster.hated1.hatedent != world) {
			if (caster.hated1.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  2^xF09:[^7", caster.hated1.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  2:[^7", caster.hated1.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  2:[^7", caster.hated1.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  2:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated2 && caster.hated2 != world) {
		if (caster.hated2.hatedent && caster.hated2.hatedent != world) {
			if (caster.hated2.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  3^xF09:[^7", caster.hated2.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  3:[^7", caster.hated2.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  3:[^7", caster.hated2.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  3:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated3 && caster.hated3 != world) {
		if (caster.hated3.hatedent && caster.hated3.hatedent != world) {
			if (caster.hated3.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  4^xF09:[^7", caster.hated3.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  4:[^7", caster.hated3.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  4:[^7", caster.hated3.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  4:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated4 && caster.hated4 != world) {
		if (caster.hated4.hatedent && caster.hated4.hatedent != world) {
			if (caster.hated4.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  5^xF09:[^7", caster.hated4.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  5:[^7", caster.hated4.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  5:[^7", caster.hated4.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  5:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated5 && caster.hated5 != world) {
		if (caster.hated5.hatedent && caster.hated5.hatedent != world) {
			if (caster.hated5.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  6^xF09:[^7", caster.hated5.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  6:[^7", caster.hated5.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  6:[^7", caster.hated5.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  6:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated6 && caster.hated6 != world) {
		if (caster.hated6.hatedent && caster.hated6.hatedent != world) {
			if (caster.hated6.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  7^xF09:[^7", caster.hated6.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  7:[^7", caster.hated6.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  7:[^7", caster.hated6.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  7:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated7 && caster.hated7 != world) {
		if (caster.hated7.hatedent && caster.hated7.hatedent != world) {
			if (caster.hated7.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  8^xF09:[^7", caster.hated7.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  8:[^7", caster.hated7.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  8:[^7", caster.hated7.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  8:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated8 && caster.hated8 != world) {
		if (caster.hated8.hatedent && caster.hated8.hatedent != world) {
			if (caster.hated8.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated  9^xF09:[^7", caster.hated8.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated  9:[^7", caster.hated8.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated  9:[^7", caster.hated8.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated  9:[","                    ","^x222]^7\n"));
	}
	
	if (caster.hated9 && caster.hated9 != world) {
		if (caster.hated9.hatedent && caster.hated9.hatedent != world) {
			if (caster.hated9.hatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF0DHated 10^xF09:[^7", caster.hated9.hatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF00Hated 10:[^7", caster.hated9.hatedent.netname,"^xF00]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x555Hated 10:[^7", caster.hated9.svdstring0,"^x555]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x222Hated 10:[","                    ","^x222]^7\n"));
	}
	
	//print hateds list
}

void Cmd_listExHateds(entity caster) {
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	if (caster.exhated0 && caster.exhated0 != world) {
		if (caster.exhated0.exhatedent && caster.exhated0.exhatedent != world) {
			if (caster.exhated0.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  1^xF09:[^7", caster.exhated0.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  1:[^7", caster.exhated0.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  1:[^7", caster.exhated0.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  1:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated1 && caster.exhated1 != world) {
		if (caster.exhated1.exhatedent && caster.exhated1.exhatedent != world) {
			if (caster.exhated1.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  2^xF09:[^7", caster.exhated1.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  2:[^7", caster.exhated1.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  2:[^7", caster.exhated1.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  2:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated2 && caster.exhated2 != world) {
		if (caster.exhated2.exhatedent && caster.exhated2.exhatedent != world) {
			if (caster.exhated2.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  3^xF09:[^7", caster.exhated2.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  3:[^7", caster.exhated2.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  3:[^7", caster.exhated2.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  3:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated3 && caster.exhated3 != world) {
		if (caster.exhated3.exhatedent && caster.exhated3.exhatedent != world) {
			if (caster.exhated3.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  4^xF09:[^7", caster.exhated3.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  4:[^7", caster.exhated3.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  4:[^7", caster.exhated3.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  4:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated4 && caster.exhated4 != world) {
		if (caster.exhated4.exhatedent && caster.exhated4.exhatedent != world) {
			if (caster.exhated4.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  5^xF09:[^7", caster.exhated4.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  5:[^7", caster.exhated4.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  5:[^7", caster.exhated4.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  5:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated5 && caster.exhated5 != world) {
		if (caster.exhated5.exhatedent && caster.exhated5.exhatedent != world) {
			if (caster.exhated5.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  6^xF09:[^7", caster.exhated5.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  6:[^7", caster.exhated5.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  6:[^7", caster.exhated5.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  6:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated6 && caster.exhated6 != world) {
		if (caster.exhated6.exhatedent && caster.exhated6.exhatedent != world) {
			if (caster.exhated6.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  7^xF09:[^7", caster.exhated6.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  7:[^7", caster.exhated6.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  7:[^7", caster.exhated6.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  7:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated7 && caster.exhated7 != world) {
		if (caster.exhated7.exhatedent && caster.exhated7.exhatedent != world) {
			if (caster.exhated7.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  8^xF09:[^7", caster.exhated7.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  8:[^7", caster.exhated7.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  8:[^7", caster.exhated7.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  8:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated8 && caster.exhated8 != world) {
		if (caster.exhated8.exhatedent && caster.exhated8.exhatedent != world) {
			if (caster.exhated8.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated  9^xF09:[^7", caster.exhated8.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated  9:[^7", caster.exhated8.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated  9:[^7", caster.exhated8.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated  9:[","                    ","^x310]^7\n"));
	}
	
	if (caster.exhated9 && caster.exhated9 != world) {
		if (caster.exhated9.exhatedent && caster.exhated9.exhatedent != world) {
			if (caster.exhated9.exhatedent == caster) {
				//It is yourself
				sprint(caster, strcat("^xF2AExHated 10^xF09:[^7", caster.exhated9.exhatedent.netname,"^xF09]^7     \n"));
			} else {
				sprint(caster, strcat("^xF11ExHated 10:[^7", caster.exhated9.exhatedent.netname,"^xF11]^7     \n"));
			}
		} else {
		//Print the saved value
		sprint(caster, strcat("^x511ExHated 10:[^7", caster.exhated9.svdstring0,"^x511]^7     \n"));
		}
	} else {
		//Empty
		sprint(caster, strcat("^x310ExHated 10:[","                    ","^x310]^7\n"));
	}
	
	//print exhateds list
}

void Cmd_addHated(entity caster, float readdexhated)
{
	local entity mynewhated;
	if not (autocvar_g_allow_friends) {
		return;
	}
	
	//If we got a number (non 0) we try to restore an exhated (a removed hated)
	if (readdexhated) {
		if (caster.hated0 && caster.hated0 != world
			&& caster.hated1 && caster.hated1 != world
			&& caster.hated2 && caster.hated2 != world
			&& caster.hated3 && caster.hated3 != world
			&& caster.hated4 && caster.hated4 != world
			&& caster.hated5 && caster.hated5 != world
			&& caster.hated6 && caster.hated6 != world
			&& caster.hated7 && caster.hated7 != world
			&& caster.hated8 && caster.hated8 != world
			&& caster.hated9 && caster.hated9 != world)
		{
			if ((clienttype(caster) == CLIENTTYPE_REAL)) {
				sprint(caster, "No free slots to move exhated back to\n");
			}
			return;
		} else if (readdexhated == 1) {
			//print(etos(caster.exhated0),"xhated\n");
			//print(etos(caster.exhated0.exhatedent),"xhated\n");
			if (caster.exhated0 && caster.exhated0 != world
			&& caster.exhated0.exhatedent && caster.exhated0.exhatedent != world) {
				
				if((caster.exhated0.exhatedent != world)
				&& (caster.exhated0.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated0.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated0.exhatedent;
				caster.exhated0.exhatedent = world;
				caster.exhated0 = world;
			} else {
				return;
			}
		} else if (readdexhated == 2) {
			if (caster.exhated1 && caster.exhated1 != world
			&& caster.exhated1.exhatedent && caster.exhated1.exhatedent != world) {
				
				if((caster.exhated1.exhatedent != world)
				&& (caster.exhated1.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated1.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated1.exhatedent;
				caster.exhated1.exhatedent = world;
				caster.exhated1 = world;
			} else {
				return;
			}
		} else if (readdexhated == 3) {
			if (caster.exhated2 && caster.exhated2 != world
			&& caster.exhated2.exhatedent && caster.exhated2.exhatedent != world) {
				
				if((caster.exhated2.exhatedent != world)
				&& (caster.exhated2.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated2.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated2.exhatedent;
				caster.exhated2.exhatedent = world;
				caster.exhated2 = world;
			} else {
				return;
			}
		} else if (readdexhated == 4) {
			if (caster.exhated3 && caster.exhated3 != world
			&& caster.exhated3.exhatedent && caster.exhated3.exhatedent != world) {
				
				if((caster.exhated3.exhatedent != world)
				&& (caster.exhated3.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated3.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated3.exhatedent;
				caster.exhated3.exhatedent = world;
				caster.exhated3 = world;
			} else {
				return;
			}
		} else if (readdexhated == 5) {
			if (caster.exhated4 && caster.exhated4 != world
			&& caster.exhated4.exhatedent && caster.exhated4.exhatedent != world) {
				
				if((caster.exhated4.exhatedent != world)
				&& (caster.exhated4.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated4.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated4.exhatedent;
				caster.exhated4.exhatedent = world;
				caster.exhated4 = world;
			} else {
				return;
			}
		} else if (readdexhated == 6) {
			if (caster.exhated5 && caster.exhated5 != world
			&& caster.exhated5.exhatedent && caster.exhated5.exhatedent != world) {
				
				if((caster.exhated5.exhatedent != world)
				&& (caster.exhated5.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated5.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated5.exhatedent;
				caster.exhated5.exhatedent = world;
				caster.exhated5 = world;
			} else {
				return;
			}
		} else if (readdexhated == 7) {
			if (caster.exhated6 && caster.exhated6 != world
			&& caster.exhated6.exhatedent && caster.exhated6.exhatedent != world) {
				
				if((caster.exhated6.exhatedent != world)
				&& (caster.exhated6.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated6.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated6.exhatedent;
				caster.exhated6.exhatedent = world;
				caster.exhated6 = world;
			} else {
				return;
			}
		} else if (readdexhated == 8) {
			if (caster.exhated7 && caster.exhated7 != world
			&& caster.exhated7.exhatedent && caster.exhated7.exhatedent != world) {
				
				if((caster.exhated7.exhatedent != world)
				&& (caster.exhated7.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated7.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated7.exhatedent;
				caster.exhated7.exhatedent = world;
				caster.exhated7 = world;
			} else {
				return;
			}
		} else if (readdexhated == 9) {
			if (caster.exhated8 && caster.exhated8 != world
			&& caster.exhated8.exhatedent && caster.exhated8.exhatedent != world) {
				
				if((caster.exhated8.exhatedent != world)
				&& (caster.exhated8.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated8.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated8.exhatedent;
				caster.exhated8.exhatedent = world;
				caster.exhated8 = world;
			} else {
				return;
			}
		} else if (readdexhated == 10) {
			if (caster.exhated9 && caster.exhated9 != world
			&& caster.exhated9.exhatedent && caster.exhated9.exhatedent != world) {
				
				if((caster.exhated9.exhatedent != world)
				&& (caster.exhated9.exhatedent.flags & FL_CLIENT)
				&& (caster.exhated9.exhatedent.classname == "player"))
				{
					//Continue
				} else {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "exhated spectating or not available\n");
					}
					return;
				}
				
				mynewhated = caster.exhated9.exhatedent;
				caster.exhated9.exhatedent = world;
				caster.exhated9 = world;
			} else {
				return;
			}
		} else {
			return;
		}
	//Otherwise we trace forward and try to add a hated
	//For hated we can trace far, don't need to be close
	} else {
		local entity myent;
		myent = spawn();
		myent.origin = caster.origin;
		makevectors(caster.v_angle);
		//traceline(caster.origin, caster.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, caster);
		WarpZone_traceline_antilag(myent, myent.origin, myent.origin + v_forward * MAX_SHOT_DISTANCE, FALSE, myent, ANTILAG_LATENCY(myent));
		//So you can add yourself if you find a self connected warpzone
		mynewhated = trace_ent;
			if(trace_ent.vehicle_flags & VHF_ISVEHICLE)
			{
				if(trace_ent.owner && trace_ent.owner != world) 
    				{
					//print("Hate vehic owner\n");
					mynewhated = trace_ent.owner;
				}
			}
		remove(myent);
	}
	
	if(mynewhated != world)
	if(mynewhated.flags & FL_CLIENT)
	if(mynewhated.classname == "player")
	//Check if alive, non spec, etc
	{
		if (teamplay) {
			if (autocvar_g_allow_friends < 2) {
				//print("Teamplay\n");
				if not(caster.team == mynewhated.team) {
					if ((clienttype(caster) == CLIENTTYPE_REAL)) {
						sprint(caster, "Cannot add enemy team member as hated\n");
					}
					return;
				}
			}
		}
		
		if not(readdexhated) {
			//Only do this for new, face to face, hated adds
			//not rehateding exhateds
			if not(mynewhated.deadflag == DEAD_NO) 
			{
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Cannot add those who are dead as hateds\n");
				}
				return;
			}
			
			if not(mynewhated.health > 0) {
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Cannot add those who are as hateds\n");
				}
				return;
			}
		}
	
		if not (quickIsHatedOf(caster, mynewhated)) {
			local entity newhated;
			//Find a free slot and put in
			if (!caster.hated0 || caster.hated0 == world) {
				newhated = spawn();
				caster.hated0 = newhated;
				setHated(mynewhated, caster.hated0);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 1\n");
				}
			} else if (!caster.hated1 || caster.hated1 == world) {
				newhated = spawn();
				caster.hated1 = newhated;
				setHated(mynewhated, caster.hated1);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 2\n");
				}
			} else if (!caster.hated2 || caster.hated2 == world) {
				newhated = spawn();
				caster.hated2 = newhated;
				setHated(mynewhated, caster.hated2);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 3\n");
				}
			} else if (!caster.hated3 || caster.hated3 == world) {
				newhated = spawn();
				caster.hated3 = newhated;
				setHated(mynewhated, caster.hated3);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 4\n");
				}
			} else if (!caster.hated4 || caster.hated4 == world) {
				newhated = spawn();
				caster.hated4 = newhated;
				setHated(mynewhated, caster.hated4);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 5\n");
				}
			} else if (!caster.hated5 || caster.hated5 == world) {
				newhated = spawn();
				caster.hated5 = newhated;
				setHated(mynewhated, caster.hated5);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 6\n");
				}
			} else if (!caster.hated6 || caster.hated6 == world) {
				newhated = spawn();
				caster.hated6 = newhated;
				setHated(mynewhated, caster.hated6);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 7\n");
				}
			} else if (!caster.hated7 || caster.hated7 == world) {
				newhated = spawn();
				caster.hated7 = newhated;
				setHated(mynewhated, caster.hated7);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 8\n");
				}
			} else if (!caster.hated8 || caster.hated8 == world) {
				newhated = spawn();
				caster.hated8 = newhated;
				setHated(mynewhated, caster.hated8);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 9\n");
				}
			} else if (!caster.hated9 || caster.hated9 == world) {
				newhated = spawn();
				caster.hated9 = newhated;
				setHated(mynewhated, caster.hated9);
				caster.hashateds = caster.hashateds + 1;
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "Added hated to slot 10\n");
				}
			} else {
				if ((clienttype(caster) == CLIENTTYPE_REAL)) {
					sprint(caster, "No free slots for new hated\n");
				}
			}
		}
	}
}
//End hated



#define POTION_SIZE_LARGE 3
#define POTION_SIZE_MEDIUM 2
#define POTION_SIZE_SMALL 1
#define POTION_SIZE_ANY 0

#define WASTE_TYPE_FAECES 100
#define FOOD_TYPE_TURKEYLEG 57
#define FOOD_TYPE_TOMATO 56
#define FOOD_TYPE_ONION 55
#define FOOD_TYPE_GRAPES 54
#define FOOD_TYPE_GARLIC 53
#define FOOD_TYPE_CHEEZE 52
#define FOOD_TYPE_BREAD 51
#define FOOD_TYPE_BELLPEPPER 50
#define POTION_TYPE_WATER 7
#define POTION_TYPE_ALE 6
#define POTION_TYPE_MERLOT 5
#define POTION_TYPE_VODKA 4
#define POTION_TYPE_HEALTH 3
#define POTION_TYPE_MANA 2
#define POTION_TYPE_REJUV 1

void DrinkPotionHealMangHobb(entity player, float timemulti)
{
	if (player.tempmanhoblocked) {
		player.tempmanhobheal_nexttime = time + (player.tempmanhoblocked*(0.1*timemulti));
	}
	player.tempmanhoblocked = 0;
	if (player.tempmvmntimprdlocked) {
		player.tempmvmntimprdheal_nexttime = time + (player.tempmvmntimprdlocked*(0.1*timemulti));
	}
	player.tempmvmntimprdlocked = 0;
}

void DrinkPotion(entity player, float potion, float mysize)
{
	local float isfood;
	local float addmana;
	local float addhealth;
	local float addalcohol;
	local float addwater;
	local float addfiller;
	local float addkilocalories;
	local float fullaltaddhealth;
	local float fullaltaddmana;
	local string mymessage;
	//float g_pickup_healthlarge;
	//float g_pickup_healthmedium;
	//float g_pickup_healthsmall;
	//g_pickup_healthlarge = cvar("g_pickup_healthlarge");
	//g_pickup_healthmedium = cvar("g_pickup_healthmedium");
	//g_pickup_healthsmall = cvar("g_pickup_healthsmall");
	isfood = 0;
	addmana = 0;
	addhealth = 0;
	addalcohol = 0;
	addwater = 0;
	addfiller = 0;
	addkilocalories = 0;
	if (potion == POTION_TYPE_HEALTH)
	{
		if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_health_large)
		{
			addhealth = g_pickup_healthlarge + (g_pickup_healthlarge * 0.33 * random());
			
			if (autocvar_sv_gameplayfix_potion_large_restorefull) {
				fullaltaddhealth = autocvar_g_balance_health_rotstable - player.health;
				if (player.health_stable_reduce > 0) {
					fullaltaddhealth = fullaltaddhealth - player.health_stable_reduce;
				}
			
				if (fullaltaddhealth > addhealth) {
					//print("Doing fullaltaddhealth to restore full health\n");
					addhealth = fullaltaddhealth;
				}
			}
			
			player.inv_potion_health_large = player.inv_potion_health_large - 1;
			mymessage = "large potion of health";
			if (autocvar_sv_gameplayfix_potion_always_healmanghobb || random() < 0.5) {
				DrinkPotionHealMangHobb(player, 0.75);
			}
		}
		else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_health_medium)
		{ 
			addhealth = g_pickup_healthmedium + (g_pickup_healthmedium * 0.33 * random());
			player.inv_potion_health_medium = player.inv_potion_health_medium - 1;
			mymessage = "potion of health";
			if (autocvar_sv_gameplayfix_potion_always_healmanghobb || random() < 0.25) {
				DrinkPotionHealMangHobb(player, 1.5);
			}
		}
		else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_health_small)
		{
			addhealth = g_pickup_healthsmall + (g_pickup_healthsmall * 0.33 * random());
			player.inv_potion_health_small = player.inv_potion_health_small - 1;
			mymessage = "small potion of health";
			if (autocvar_sv_gameplayfix_potion_always_healmanghobb || random() < 0.125) {
				DrinkPotionHealMangHobb(player, 2);
			}
		}
	}
	else if (potion == POTION_TYPE_MANA)
	{
		if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_mana_large)
		{
			addmana = g_pickup_healthlarge + (g_pickup_healthlarge * 0.33 * random());
			
			if (autocvar_sv_gameplayfix_potion_large_restorefull) {
				fullaltaddmana = autocvar_g_balance_mana_rotstable - player.mana;
				if (player.mana_stable_reduce > 0) {
					fullaltaddmana = fullaltaddmana - player.mana_stable_reduce;
				}
			
				if (fullaltaddmana > addmana) {
					//print("Doing fullaltaddmana to restore full mana\n");
					addmana = fullaltaddmana;
				}
			}
			
			player.inv_potion_mana_large = player.inv_potion_mana_large - 1;
			mymessage = "large potion of mana";
		}
		else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_mana_medium)
		{ 
			addmana = g_pickup_healthmedium + (g_pickup_healthmedium * 0.33 * random());
			player.inv_potion_mana_medium = player.inv_potion_mana_medium - 1;
			mymessage = "potion of mana";
		}
		else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_mana_small)
		{
			addmana = g_pickup_healthsmall + (g_pickup_healthsmall * 0.33 * random());
			player.inv_potion_mana_small = player.inv_potion_mana_small - 1;
			mymessage = "small potion of mana";
		}
	}
	else if (potion == POTION_TYPE_REJUV)
	{
		if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_rejuv_large)
		{
			addhealth = g_pickup_healthlarge + (g_pickup_healthlarge * 0.33 * random());
			addmana = g_pickup_healthlarge + (g_pickup_healthlarge * 0.33 * random());
			
			if (autocvar_sv_gameplayfix_potion_large_restorefull) {
				fullaltaddhealth = autocvar_g_balance_health_rotstable - player.health;
				if (player.health_stable_reduce > 0) {
					fullaltaddhealth = fullaltaddhealth - player.health_stable_reduce;
				}
			
				if (fullaltaddhealth > addhealth) {
					//print("Doing fullaltaddhealth to restore full health - rejuv\n");
					addhealth = fullaltaddhealth;
				}
			
			
				fullaltaddmana = autocvar_g_balance_mana_rotstable - player.mana;
				if (player.mana_stable_reduce > 0) {
					fullaltaddmana = fullaltaddmana - player.mana_stable_reduce;
				}
			
				if (fullaltaddmana > addmana) {
					//print("Doing fullaltaddmana to restore full mana - rejuv\n");
					addmana = fullaltaddmana;
				}
			}
			
			player.inv_potion_rejuv_large = player.inv_potion_rejuv_large - 1;
			mymessage = "large potion of rejuvenation";
		}
		else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_rejuv_medium)
		{
			addhealth = g_pickup_healthmedium + (g_pickup_healthmedium * 0.33 * random());
			addmana = g_pickup_healthmedium + (g_pickup_healthmedium * 0.33 * random());
			player.inv_potion_rejuv_medium = player.inv_potion_rejuv_medium - 1;
			mymessage = "potion of rejuvenation";
		}
		else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_rejuv_small)
		{
			addhealth = g_pickup_healthsmall + (g_pickup_healthsmall * 0.33 * random());
			addmana = g_pickup_healthsmall + (g_pickup_healthsmall * 0.33 * random());
			player.inv_potion_rejuv_small = player.inv_potion_rejuv_small - 1;
			mymessage = "small potion of rejuvenation";
		}
	}
	else if (potion == POTION_TYPE_VODKA)
	{
		if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_vodka_large)
		{
			addalcohol = 13;
			addwater = 15.6;
			player.inv_potion_vodka_large = player.inv_potion_vodka_large - 1;
			player.smell_alcohol = player.smell_alcohol + 0.1;
			mymessage = "large potion of vodka";
		}
		else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_vodka_medium)
		{
			addalcohol = 5;
			addwater = 6;
			player.inv_potion_vodka_medium = player.inv_potion_vodka_medium - 1;
			player.smell_alcohol = player.smell_alcohol + 0.05;
			mymessage = "potion of vodka";
		}
		else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_vodka_small)
		{
			addalcohol = 1; //~Double shot of vodka maybe
			addwater = 1.2;
			player.inv_potion_vodka_small = player.inv_potion_vodka_small - 1;
			player.smell_alcohol = player.smell_alcohol + 0.025;
			mymessage = "small potion of vodka";
		}
	}
	else if (potion == POTION_TYPE_MERLOT)
	{
		if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_merlot_large)
		{
			addalcohol = 3.9;
			addwater = 24.7;
			player.inv_potion_merlot_large = player.inv_potion_merlot_large - 1;
			player.smell_alcohol = player.smell_alcohol + 0.025;
			mymessage = "large potion of merlot";
		}
		else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_merlot_medium)
		{
			addalcohol = 1.5;
			addwater = 9.5;
			player.inv_potion_merlot_medium = player.inv_potion_merlot_medium - 1;
			player.smell_alcohol = player.smell_alcohol + 0.0125;
			mymessage = "potion of merlot";
		}
		else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_merlot_small)
		{
			addalcohol = 0.3; //~Double shot of merlot maybe
			addwater = 1.9;
			player.inv_potion_merlot_small = player.inv_potion_merlot_small - 1;
			player.smell_alcohol = player.smell_alcohol + 0.00625;
			mymessage = "small potion of merlot";
		}
	}
	else if (potion == POTION_TYPE_ALE)
	{
		if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_ale_large)
		{
			addalcohol = 1.95;
			addwater = 26.65;
			player.inv_potion_ale_large = player.inv_potion_ale_large - 1;
			player.smell_alcohol = player.smell_alcohol + 0.017;
			mymessage = "large potion of ale";
		}
		else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_ale_medium)
		{
			addalcohol = 0.75;
			addwater = 10.25;
			player.inv_potion_ale_medium = player.inv_potion_ale_medium - 1;
			player.smell_alcohol = player.smell_alcohol + 0.005;
			mymessage = "potion of ale";
		}
		else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_ale_small)
		{
			addalcohol = 0.15; //~Double shot of ale maybe
			addwater = 2.05;
			player.inv_potion_ale_small = player.inv_potion_ale_small - 1;
			player.smell_alcohol = player.smell_alcohol + 0.002;
			mymessage = "small potion of ale";
		}
	} 
	else if (potion == POTION_TYPE_WATER)
	{
		if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_water_large)
		{
			addwater = 28.6;
			player.inv_potion_water_large = player.inv_potion_water_large - 1;
			mymessage = "large potion of water";
		}
		else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_water_medium)
		{
			addwater = 11;
			player.inv_potion_water_medium = player.inv_potion_water_medium - 1;
			mymessage = "potion of water";
		}
		else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
		&& player.inv_potion_water_small)
		{
			addwater = 2.2;
			player.inv_potion_water_small = player.inv_potion_water_small - 1;
			mymessage = "small potion of water";
		}
	}
	else if (potion == FOOD_TYPE_BELLPEPPER)
	{
		if (player.inv_food_bellpepper)
		{
			addwater = 1.2;
			addfiller = 4;
			addkilocalories = 30;
			player.inv_food_bellpepper = player.inv_food_bellpepper - 1;
			mymessage = "bellpepper";
			isfood = 1;
		}
	}
	else if (potion == FOOD_TYPE_BREAD)
	{
		if (player.inv_food_bread)
		{
			addwater = 0.01;
			addfiller = 12;
			addkilocalories = 940;
			player.inv_food_bread = player.inv_food_bread - 1;
			mymessage = "loaf of bread";
			isfood = 1;
		}
	}
	else if (potion == FOOD_TYPE_CHEEZE)
	{
		if (player.inv_food_cheeze)
		{
			addwater = 0.03;
			addfiller = 17;
			addkilocalories = 2000;
			player.inv_food_cheeze = player.inv_food_cheeze - 1;
			player.smell_cheeze = player.smell_cheeze + 0.15;
			mymessage = "wedge of cheeze";
			isfood = 1;
		}
	}
	else if (potion == FOOD_TYPE_GARLIC)
	{
		if (player.inv_food_garlic)
		{
			addwater = 0.003;
			addfiller = 3;
			addkilocalories = 10;
			player.inv_food_garlic = player.inv_food_garlic - 1;
			player.smell_garlic = player.smell_garlic + 0.1;
			mymessage = "nut of garlic";
			isfood = 1;
		}
	}
	else if (potion == FOOD_TYPE_GRAPES)
	{
		if (player.inv_food_grapes)
		{
			addwater = 0.2;
			addfiller = 8;
			addkilocalories = 120;
			player.inv_food_grapes = player.inv_food_grapes - 1;
			mymessage = "number of grapes";
			isfood = 1;
		}
	}
	else if (potion == FOOD_TYPE_ONION)
	{
		if (player.inv_food_onion)
		{
			addwater = 0.001;
			addfiller = 2;
			addkilocalories = 44;
			player.inv_food_onion = player.inv_food_onion - 1;
			mymessage = "onion";
			isfood = 1;
		}
	}
	else if (potion == FOOD_TYPE_TOMATO)
	{
		if (player.inv_food_tomato)
		{
			addwater = 1.4;
			addfiller = 4;
			addkilocalories = 22;
			player.inv_food_tomato = player.inv_food_tomato - 1;
			mymessage = "tomato";
			isfood = 1;
		}
	}
	else if (potion == FOOD_TYPE_TURKEYLEG)
	{
		if (player.inv_food_turkeyleg)
		{
			addwater = 0.001;
			addfiller = 16;
			addkilocalories = 1136;
			player.inv_food_turkeyleg = player.inv_food_turkeyleg - 1;
			mymessage = "leg of turkey";
			isfood = 1;
		}
	}
	else if (potion == WASTE_TYPE_FAECES)
	{
		if (autocvar_sv_risque >= 0.5)
		{
			if ((mysize == POTION_SIZE_LARGE || mysize == POTION_SIZE_ANY)
			&& player.inv_faeces_large)
			{
				addwater = 1.0;
				addfiller = 24;
				player.inv_faeces_large = player.inv_faeces_large - 1;
				player.smell_faeces = player.smell_faeces + 0.35;
				mymessage = "large piece of faeces";
				isfood = 1;
			}
			else if ((mysize == POTION_SIZE_MEDIUM || mysize == POTION_SIZE_ANY)
			&& player.inv_faeces_medium)
			{
				addwater = 0.5;
				addfiller = 12;
				player.inv_faeces_medium = player.inv_faeces_medium - 1;
				player.smell_faeces = player.smell_faeces + 0.25;
				mymessage = "piece of faeces";
				isfood = 1;
			}
			else if ((mysize == POTION_SIZE_SMALL || mysize == POTION_SIZE_ANY)
			&& player.inv_faeces_small)
			{
				addwater = 0.25;
				addfiller = 6;
				player.inv_faeces_small = player.inv_faeces_small - 1;
				player.smell_faeces = player.smell_faeces + 0.15;
				mymessage = "small piece of faeces";
				isfood = 1;
			}
		}
	}
	
	if(addmana) 
	{
		local float mymanalimit;
		mymanalimit = autocvar_g_balance_mana_limit;
		
		if (self.darkritual_mana_max) {
			if (self.darkritual_mana_max > autocvar_g_balance_mana_limit) {
				if (autocvar_sv_gameplayfix_darkritual_nomanastableadd) {
					//do nothing
				} else {
					mymanalimit = player.darkritual_mana_max;
				}
			}
		}
		
		player.mana = bound(player.mana, player.mana + addmana, mymanalimit);
		player.pauserotmana_finished = max(player.pauserotmana_finished, time + autocvar_g_balance_pause_mana_rot);
	}
	
	if(addhealth)
	{
		player.health = bound(player.health, player.health + addhealth, autocvar_g_balance_health_limit);
		player.pauserothealth_finished = max(player.pauserothealth_finished, time + autocvar_g_balance_pause_health_rot);
	}
	
	if(addalcohol)
	{
		player.con_alcohol = player.con_alcohol + addalcohol;
	}
	
	if(addwater)
	{
		player.con_water = player.con_water + addwater;
	}
	
	if(addfiller)
	{
		player.con_filler = player.con_filler + addfiller;
	}
	
	if(addkilocalories)
	{
		player.con_kilocalories = player.con_kilocalories + addkilocalories;
	}
	
	if(addmana || addhealth || addalcohol || addwater || addkilocalories || addfiller) 
	{
		//A sound
		if (isfood) mymessage = strcat("You ate a ", mymessage);
		else mymessage = strcat("You drank a ", mymessage);
		
		sprint(player, mymessage,"\n");
		spamsound (player, CH_SHOTS, "relics/relic_effect.wav", VOL_BASE * 0.75, ATTN_NORM);
	}
	
	if not(isfood) {
		player.nextdrink = time + 1;
	}
}

void DrinkFromSurroundings(entity player)
{
	if (player.watertype == CONTENT_WATER) {
		player.nextdrink = time + 0.8;
		player.con_water = player.con_water + 5;
		if(time > player.nextmsgspam) {
	  		sprint(player, "You drank some water from your surroundings\n");
	 		player.nextmsgspam = time + 0.1; //No spam.
		}
	} else if (player.watertype == CONTENT_SLIME) {
		player.nextdrink = time + 1.2;
		Damage (player, world, world, autocvar_g_balance_contents_playerdamage_slime * autocvar_g_balance_contents_damagerate * 8, DEATH_SLIME, player.origin, '0 0 0');
		if(time > player.nextmsgspam) {
			sprint(player, "You drank some slime from your surroundings\n");
			player.nextmsgspam = time + 0.1; //No spam.
		}
	} else if (player.watertype == CONTENT_LAVA) {
		player.nextdrink = time + 1.4;
		Damage (player, world, world, autocvar_g_balance_contents_playerdamage_lava * autocvar_g_balance_contents_damagerate * 8, DEATH_LAVA, player.origin, '0 0 0');
		if(time > player.nextmsgspam) {
			sprint(player, "You drank some lava from your surroundings\n");
			player.nextmsgspam = time + 0.1; //No spam.
		}
	}
}

void DrinkPotionByName(entity player, string potion, string mysize)
{
	float numpotion;
	float nummysize;
	
	if (potion == "health" || potion == "heal" || potion == "life")
		numpotion = POTION_TYPE_HEALTH;
	else if (potion == "mana" || potion == "magic" || potion == "mage")
		numpotion = POTION_TYPE_MANA;
	else if (potion == "rejuv" || potion == "rejuvenation" || potion == "rejuvination")
		numpotion = POTION_TYPE_REJUV;
	else if (potion == "vodka")
		numpotion = POTION_TYPE_VODKA;
	else if (potion == "merlot")
		numpotion = POTION_TYPE_MERLOT;
	else if (potion == "ale")
		numpotion = POTION_TYPE_ALE;
	else if (potion == "water")
		numpotion = POTION_TYPE_WATER;
	else if (potion == "bellpepper")
		numpotion = FOOD_TYPE_BELLPEPPER;
	else if (potion == "bread")
		numpotion = FOOD_TYPE_BREAD;
	else if (potion == "cheeze")
		numpotion = FOOD_TYPE_CHEEZE;
	else if (potion == "garlic")
		numpotion = FOOD_TYPE_GARLIC;
	else if (potion == "grapes")
		numpotion = FOOD_TYPE_GRAPES;
	else if (potion == "onion")
		numpotion = FOOD_TYPE_ONION;
	else if (potion == "tomato")
		numpotion = FOOD_TYPE_TOMATO;
	else if (potion == "turkeyleg")
		numpotion = FOOD_TYPE_TURKEYLEG;
	else if (potion == "faeces" || potion == "feaces" || potion == "feces" || potion == "poop" || potion == "shit")
		numpotion = WASTE_TYPE_FAECES;
	else 
		return;
		
	if (mysize == "large" || mysize == "full" || mysize == "big")
		nummysize = POTION_SIZE_LARGE;
	else if (mysize == "medium" || mysize == "moderate" || mysize == "half")
		nummysize = POTION_SIZE_MEDIUM;
	else if (mysize == "small" || mysize == "little" || mysize == "tiny")
		nummysize = POTION_SIZE_SMALL;
	else
		nummysize = POTION_SIZE_ANY;
		
	DrinkPotion(player, numpotion, nummysize);
}

.string cmdcurrentspell;
.float numcurrentspell;

//Increase this each time you add a new spell so that the selection cycling will work (Z and X buttons by default keybindings)
#define REQUESTSPELLBYNAMESPELLS 57
string RequestSpellName(entity player, float num, float requirecastingresources)
{
	if (num < 1) return("D");
	else if(num == 1) { if( ((player.spell_acervilux > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_acervilux) return("acervilux"); else return("N"); } 
	else if(num == 2) { if( ((player.spell_agency > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_agency) return("agency"); else return("N"); } 
	else if(num == 3) { if( ((player.spell_aquacaelestis > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_aquacaelestis) return("aquacaelestis"); else return("N"); } 
	else if(num == 4) { if( ((player.spell_balllightining > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_balllightining) return("balllightining"); else return("N"); } 
	else if(num == 5) { if( ((player.spell_cancellation > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_cancellation) return("cancellation"); else return("N"); } 
	else if(num == 6) { if( ((player.spell_castfromlife > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_castfromlife) return("castfromlife"); else return("N"); } 
	else if(num == 7) { if( ((player.spell_chainlightining > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_chainlightining) return("chainlightining"); else return("N"); } 
	else if(num == 8) { if( ((player.spell_chargedbolt > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_chargedbolt) return("chargedbolt"); else return("N"); } 
	else if(num == 9) { if( ((player.spell_clairvoyance > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_clairvoyance) return("clairvoyance"); else return("N"); }
	else if(num == 10) { if( ((player.spell_confer > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_confer) return("confer"); else return("N"); } 
	else if(num == 11) { if( ((player.spell_corvuspenna > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_corvuspenna) return("corvuspenna"); else return("N"); } 
	else if(num == 12) { if( ((player.spell_darkritual > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_darkritual) return("darkritual"); else return("N"); }
	else if(num == 13) { if( ((player.spell_death > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_death) return("death"); else return("N"); } 
	else if(num == 14) { if( ((player.spell_drainlife > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_drainlife) return("drainlife"); else return("N"); } 
	else if(num == 15) { if( ((player.spell_iceball > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_iceball) return("iceball"); else return("N"); } 
	else if(num == 16) { if( ((player.spell_icestar > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_icestar) return("icestar"); else return("N"); } 
	else if(num == 17) { if( ((player.spell_inferno > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_inferno) return("inferno"); else return("N"); } 
	else if(num == 18) { if( ((player.spell_explosion > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_explosion) return("explosion"); else return("N"); }
	else if(num == 19) { if( ((player.spell_extinguish > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_extinguish) return("extinguish"); else return("N"); }
	else if(num == 20) { if( ((player.spell_firebolt > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_firebolt) return("firebolt"); else return("N"); }
	else if(num == 21) { if( ((player.spell_fireball > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_fireball) return("fireball"); else return("N"); }
	else if(num == 22) { if( ((player.spell_firebeam > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_firebeam) return("firebeam"); else return("N"); }
	else if(num == 23) { if( ((player.spell_firewall > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_firewall) return("firewall"); else return("N"); }
	else if(num == 24) { if( ((player.spell_firecentury > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_firecentury) return("firecentury"); else return("N"); }
	else if(num == 25) { if( ((player.spell_flameburst > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_flameburst) return("flameburst"); else return("N"); }
	else if(num == 26) { if( ((player.spell_frostbeam > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_frostbeam) return("frostbeam"); else return("N"); }
	else if(num == 27) { if( ((player.spell_grace > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_grace) return("grace"); else return("N"); }
	else if(num == 28) { if( ((player.spell_heal > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_heal) return("heal"); else return("N"); }
	else if(num == 29) { if( ((player.spell_holybolt > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_holybolt) return("holybolt"); else return("N"); }
	else if(num == 30) { if( ((player.spell_holylight > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_holylight) return("holylight"); else return("N"); }
	else if(num == 31) { if( ((player.spell_holyword > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_holyword) return("holyword"); else return("N"); }
	else if(num == 32) { if( ((player.spell_lightining > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_lightining) return("lightining"); else return("N"); } 
	else if(num == 33) { if( ((player.spell_lightiningburst > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_lightiningburst) return("lightiningburst"); else return("N"); } 
	else if(num == 34) { if( ((player.spell_lightiningstrike > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_lightiningstrike) return("lightiningstrike"); else return("N"); } 
	else if(num == 35) { if( ((player.spell_lightiningwall > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_lightiningwall) return("lightiningwall"); else return("N"); }
	else if(num == 36) { if( ((player.spell_magmasphere > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_magmasphere) return("magmasphere"); else return("N"); }
	else if(num == 37) { if( ((player.spell_manashield > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_manashield) return("manashield"); else return("N"); }
	else if(num == 38) { if( ((player.spell_magicbullets > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_magicbullets) return("magicbullets"); else return("N"); }
	else if(num == 39) { if( ((player.spell_magicmissile > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_magicmissile) return("magicmissile"); else return("N"); }
	else if(num == 40) { if( ((player.spell_meteor > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_meteor) return("meteor"); else return("N"); }
	else if(num == 41) { if( ((player.spell_meteorshower > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_meteorshower) return("meteorshower"); else return("N"); }
	else if(num == 42) { if( ((player.spell_mimic > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_mimic) return("mimic"); else return("N"); }	
	else if(num == 43) { if( ((player.spell_monstertomonolith > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_monstertomonolith) return("monstertomonolith"); else return("N"); }
	else if(num == 44) { if( ((player.spell_monstertomouse > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_monstertomouse) return("monstertomouse"); else return("N"); }
	else if(num == 45) { if( ((player.spell_nivosus > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_nivosus) return("nivosus"); else return("N"); }	
	else if(num == 46) { if( ((player.spell_paralyse > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_paralyse) return("paralyse"); else return("N"); } 
	else if(num == 47) { if( ((player.spell_phantasmalbarrier > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_phantasmalbarrier) return("phantasmalbarrier"); else return("N"); } 
	else if(num == 48) { if( ((player.spell_plumosus > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_plumosus) return("plumosus"); else return("N"); } 
	else if(num == 49) { if( ((player.spell_raiseundead > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_raiseundead) return("raiseundead"); else return("N"); } 
	else if(num == 50) { if( ((player.spell_repair > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_repair) return("repair"); else return("N"); }
	else if(num == 51) { if( ((player.spell_ringoffire > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_ringoffire) return("ringoffire"); else return("N"); } 
	else if(num == 52) { if( ((player.spell_rosa > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_rosa) return("rosa"); else return("N"); } 
	else if(num == 53) { if( ((player.spell_scepterofflame > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_scepterofflame) return("scepterofflame"); else return("N"); }
	else if(num == 54) { if( ((player.spell_stonecurse > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_stonecurse) return("stonecurse"); else return("N"); }
	else if(num == 55) { if( ((player.spell_stonerain > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_stonerain) return("stonerain"); else return("N"); }
	else if(num == 56) { if( ((player.spell_timesink > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_timesink) return("timesink"); else return("N"); }
	else if(num == 57) { if( ((player.spell_vampyricconduit > 0) && (!requirecastingresources || (player.hascastfromlife || player.mana > 0)) ) || player.inv_scroll_vampyricconduit) return("vampyricconduit"); else return("N"); }
	else { return("U"); }
}

void CmdIterSpellForward(entity player)
{
	float i, bn, fb;
	string answer;
		
	bn = player.numcurrentspell;
	i = player.numcurrentspell + 1;
	fb = 0;
	
	while (i != bn) //We will iter till we get the next spell, or 
	{
		fb = fb + 1;
		answer = RequestSpellName(player, i, 1);
		player.numcurrentspell = i;
		
		if (fb >= 1000) {
			print("WARNING: Escaped from loop infinite CmdIterSpellForward -- Likely duplicate number in RequestSpellName\n");
			i = bn;	//escape
		}
		else if (answer == "U")
		{
			i = 0;
		}
		else if (answer == "D")
		{
			i = i + 1;
		}
		else if (answer == "N")
		{
			i = i + 1; //Not allowed
		}
		else
		{
			i = bn;	//Some other answer, or full circle, escape
		}
	}
	
	player.cmdcurrentspell = answer;
	
	//print(player.cmdcurrentspell," spell\n");	
}

void CmdIterSpellBack(entity player)
{
	float i, bn, fb;
	string answer;
		
	bn = player.numcurrentspell;
	i = player.numcurrentspell - 1;
	
	fb = 0;
	
	while (i != bn) //We will iter till we get the next spell, or 
	{
		fb = fb + 1;
		
		answer = RequestSpellName(player, i, 1);
		player.numcurrentspell = i;
				
		if (fb >= 1000) {
			print("WaRnInG: Escaped from loop infinite CmdIterSpellBack\n");
			i = bn;	//escape
		}
		else if (answer == "U")
		{
			i = i - 1;
		}
		else if (answer == "D")
		{
			i = REQUESTSPELLBYNAMESPELLS + 1;
		}
		else if (answer == "N")
		{
			i = i - 1; //Not allowed
		}
		else
		{
			i = bn;	//Some other answer, or full circle, escape
		}
	}
	
	player.cmdcurrentspell = answer;
	
	//print(player.cmdcurrentspell," spell\n");	
}

float CmdLockZ2Building(entity e, float srchrad)
{
	entity f;
		f = findradius(e.origin, srchrad);
  		while(f)
  		{
			if (f.classname == "building")
			{
			  if (f != e) {
			  	e.multitool_lockzsetting = f.origin_z;
				return TRUE;
			  }
			}
    			f = f.chain;
  		}
		return FALSE;	
}

float CmdFloorRotLock2Floor(entity e, float srchrad)
{
	entity f;
		f = findradius(e.origin, srchrad);
  		while(f)
  		{
			if (f.classname == "building")
			{
			  print (ftos(f.count), "fcount\n");
			  if (multitool_countisfloor(f.count))
			  {
			     if (f != e) {
			  	e.multitool_floorlockrotsetting = (f.angles_y + 90);
				//90 Degrees will be subtracted when built, so we add it to here
				//since we are trying to copy an allready built floor
				return TRUE;
			     }
			  }
			}
    			f = f.chain;
  		}
		return FALSE;	
}

void CmdBuryAllInRadius(entity e, float srchrad)
{
	local float textdone;
	textdone = 0;
	entity f;
		f = findradius(e.origin, srchrad);
  		while(f)
  		{
			if (f.canbeburied == 1)
			{
			  if (!textdone)
			  if ((clienttype(e) == CLIENTTYPE_REAL)) {
			  	if (f.classname == "mine") {
					setsize (f, '0 0 0', '0 0 0');
			  		sprint(e, "You bury the mine\n");
				} else {
					sprint(e, "You bury it\n");
				}
				textdone = 1; //So we don't spam
			  }
			  
			  f.alpha = 0.001;
			  setmodel(f, "");
			  f.canbeburied = 2; //Buried
			}
    			f = f.chain;
  		}
}


/////////////////////////////////////////////////////////////////
//This is for changing seats in a vehicle, if the seat is empty
//CmdVehiclesChangeSeat(self, mythenumber);
float CmdVehiclesChangeSeat(entity player, float desiredseat)
{
	entity previousself;
	entity previousother;
	entity myvehicle;
	entity placeholderent;
	if (player.vehicle_playerisgunner)
	if (player.vehicle_playergunnervehicle)
	{
		//print(etos(player.vehicle_playergunnervehicle), player.vehicle_playergunnervehicle.netname, "_seatToseat GunnerVehic\n");
		//print(etos(player.vehicle), player.vehicle_playergunnervehicle.netname, "_seatToseat Vehic\n");

		previousself = self;
		previousother = other;
		placeholderent = spawn();
		placeholderent.vehicle_playergunnervehicle = player.vehicle_playergunnervehicle;
		placeholderent.vehicle_changeseat = player.vehicle_changeseat;
		
		self = player;
		vehicles_exit(VHEF_RELESE);
		
		self = placeholderent.vehicle_playergunnervehicle;
		other = player;
		if not(placeholderent.vehicle_changeseat(desiredseat)) {
			placeholderent.vehicle_changeseat(0);
		}
	
		other = previousother;
		self = previousself;
		remove(placeholderent);
		return TRUE;
	}
	return FALSE;
}

//Anticipate ....//

void vehiclepilotplaceholder_think(void) {
	local float mytestpointcontents;
	local vector myvecview;
	vector oldselfcursortracestart;
	entity oldselfplaceholder;
	
	oldselfplaceholder = self;
	oldselfcursortracestart = self.cursor_trace_start;
	

	
	//print(vtos(self.view_ofs),"view_ofs\n");
	
	if(self.vehicle_viewport) {
		//print(etos(self.vehicle_viewport),"vviewport\n");
	
		myvecview = gettaginfo(self.vehicle_viewport, gettagindex(self.vehicle_viewport, ""));
		
		//print(vtos(myvecview),"viewport origin\n");
		self.cursor_trace_start = myvecview;
		//print(vtos(self.origin),"self origin\n\n\n");
	}
	
	//print(ftos(self.movetype),"spMT... ", ftos(self.amnt),"svMT... ",ftos(self.vehicle.movetype),"vMT\n");
	
	
	mytestpointcontents = pointcontents(self.origin);
	if (mytestpointcontents == CONTENT_WATER
	|| mytestpointcontents == CONTENT_SLIME
	|| mytestpointcontents == CONTENT_LAVA) {
		self.waterlevel = WATERLEVEL_SUBMERGED;
	} else {
		self.waterlevel = WATERLEVEL_NONE;
	}
	
	//print(vtos(self.origin), "_APilot origin\n");
	
	////self.angles = self.amntvec;
	self.v_angle = self.ammountvec;
	self.movement = self.ammount2vec;
	
	self.BUTTON_USE = self.prephysplug_button_use;
	self.BUTTON_HOOK = self.prephysplug_button_hook;
 	self.BUTTON_JUMP = self.prephysplug_button_jump;
 	self.BUTTON_CROUCH = self.prephysplug_button_crouch;
	
	//print(vtos(self.movement), "_Cray Movement\n");
	//print(vtos(self.v_angle), "_Cray V angle\n");
	//print(vtos(self.angles), "_Cray angles\n");
	
	
	
		if(self.PlayerPhysplug) {
        		if(self.PlayerPhysplug()) {
				//print("Did Phys\n");
			}
		}
		
	self = oldselfplaceholder; //Just in case;	
	
	
	self.think = vehiclepilotplaceholder_think;
	self.nextthink = time;

	self.cursor_trace_start = oldselfcursortracestart;
}


//Begin Mind Destroyer//

//This is for changing seat if you are a pilot of the vehic...

float CmdVehiclesChangeSeatAsPilot(entity player, float desiredseat)
{
	entity previousself;
	entity previousother;
	entity myvehicle;
	entity placeholderent;
	entity vehiclepilotplaceholder;
	//if (player.vehicle_playerisgunner)
	//if (player.vehicle_playergunnervehicle)
	if (player.vehicle)
	if (player.vehicle.owner == player)
	if (autocvar_g_vehicle_allowpilotchangeseat)
	if (player.vehicle.vehicle_pilotchangeseat)
	{
		////print(etos(player.vehicle_playergunnervehicle), player.vehicle_playergunnervehicle.netname, "_Pilot GunnerVehic\n");
		//print(etos(player.vehicle), player.vehicle.netname, "_Pilot Vehic\n");

		////player.vehicle_changeseat	= tankiv_gunner_enter;
		player.vehicle_changeseat = player.vehicle.vehicle_pilotchangeseat;
		
		myvehicle = player.vehicle;
		previousself = self;
		previousother = other;
		placeholderent = spawn();
		//placeholderent.vehicle_playergunnervehicle = player.vehicle_playergunnervehicle;
		placeholderent.vehicle_playergunnervehicle = myvehicle;
		placeholderent.vehicle_changeseat = player.vehicle_changeseat;
		
		vehiclepilotplaceholder = spawn();
		vehiclepilotplaceholder.isvehiclepilotplaceholder = 1;

		if (player.PlayerPhysplug) {
			vehiclepilotplaceholder.PlayerPhysplug = player.PlayerPhysplug;
		}
		
		
		vehiclepilotplaceholder.vehicle = player.vehicle;
		vehiclepilotplaceholder.vehicle_viewport = player.vehicle.vehicle_viewport;
		vehiclepilotplaceholder.origin = player.origin;
		vehiclepilotplaceholder.solid = SOLID_NOT;
		
		//////vehiclepilotplaceholder.amntvec = 
		////vehiclepilotplaceholder.angles = player.angles;
		
		vehiclepilotplaceholder.ammountvec = vehiclepilotplaceholder.v_angle = player.prephysplug_v_angle;
		vehiclepilotplaceholder.team = player.team;
		vehiclepilotplaceholder.colormap = player.colormap;
		vehiclepilotplaceholder.velocity = player.velocity;
		vehiclepilotplaceholder.avelocity = player.avelocity;
		vehiclepilotplaceholder.speed = player.speed;
		vehiclepilotplaceholder.ammount2vec = vehiclepilotplaceholder.movement = player.prephysplug_movement;
		vehiclepilotplaceholder.movetype = player.movetype;
		
		//////Investigating
		////vehiclepilotplaceholder.amnt = player.vehicle.movetype;
		////////
		
		vehiclepilotplaceholder.prephysplug_button_use = self.prephysplug_button_use;
 		vehiclepilotplaceholder.prephysplug_button_hook = self.prephysplug_button_hook;
 		vehiclepilotplaceholder.prephysplug_button_jump = self.prephysplug_button_jump;
 		vehiclepilotplaceholder.prephysplug_button_crouch = self.prephysplug_button_crouch;
		
		vehiclepilotplaceholder.vehicle_health = self.vehicle_health;
		
		vehiclepilotplaceholder.view_ofs = player.view_ofs;
		vehiclepilotplaceholder.vehicle_alternateaircontrols = player.vehicle_alternateaircontrols;
		setsize(vehiclepilotplaceholder, player.mins, player.maxs);
		setorigin(vehiclepilotplaceholder, vehiclepilotplaceholder.origin);
		
		local float myvehicprevmovetype;
		local vector myvehicprevvelocity;
		local float myvehicprevspeed;
		local vector myvehicprevavelocity;
		local vector myvehicprevmovement;
		local float myvehicprevcolormap;
		local float myvehicprevteam;
		local void() myvehicprevtouch;
		
		local void() myvehicprevthink; //
		local float myvehicprevframe; //
		local float myvehicprevnextthink; //
		
		local float myvehicprevsolid;
		local vector myvehicprevangles;
		
		myvehicprevmovetype = player.vehicle.movetype;
		myvehicprevvelocity = player.vehicle.velocity;
		myvehicprevspeed = player.vehicle.speed;
		myvehicprevavelocity = player.vehicle.avelocity;
		myvehicprevmovement = player.vehicle.movement;
		myvehicprevcolormap = player.vehicle.colormap;
		myvehicprevteam = player.vehicle.team;
		myvehicprevtouch = player.vehicle.touch;
		
		myvehicprevthink = player.vehicle.think; //
		myvehicprevframe = player.vehicle.frame; //
		myvehicprevnextthink = player.vehicle.nextthink; //
		
		myvehicprevsolid = player.vehicle.solid;
		myvehicprevangles = player.vehicle.angles;
		
		self = player;
		vehicles_exit(VHEF_RELESE);
		
		vehiclepilotplaceholder.think = vehiclepilotplaceholder_think;
		vehiclepilotplaceholder.nextthink = time;
		
		vehiclepilotplaceholder.vehicle.owner = vehiclepilotplaceholder;

		vehiclepilotplaceholder.vehicle.movetype = myvehicprevmovetype;
		vehiclepilotplaceholder.vehicle.velocity = myvehicprevvelocity;
		vehiclepilotplaceholder.vehicle.avelocity = myvehicprevavelocity;
		vehiclepilotplaceholder.vehicle.speed = myvehicprevspeed;
		vehiclepilotplaceholder.vehicle.movement = myvehicprevmovement;
		vehiclepilotplaceholder.vehicle.colormap = myvehicprevcolormap;
		vehiclepilotplaceholder.vehicle.team = myvehicprevteam;
		vehiclepilotplaceholder.vehicle.touch = myvehicprevtouch;
		
		
		vehiclepilotplaceholder.vehicle.think = myvehicprevthink; //
		vehiclepilotplaceholder.vehicle.frame = myvehicprevframe; //
		vehiclepilotplaceholder.vehicle.nextthink = myvehicprevnextthink; //
		
		vehiclepilotplaceholder.vehicle.solid = myvehicprevsolid; 
		
		vehiclepilotplaceholder.vehicle.angles = myvehicprevangles; 
		
		myvehicle.owner = vehiclepilotplaceholder;
		myvehicle.vehicle_pilotplaceholder = vehiclepilotplaceholder;
		
		
		self = placeholderent.vehicle_playergunnervehicle;
		other = player;
		if not(placeholderent.vehicle_changeseat(desiredseat)) {
			placeholderent.vehicle_changeseat(0);
		}
	
		other = previousother;
		self = previousself;
		remove(placeholderent);
		return TRUE;
	}
	return FALSE;
}

float CmdVehiclesChangeSeatToPilot(entity player)
{
	local entity myvpplhldr;
	entity previousself;
	entity previousother;
	entity placeholderent;
	if (player.vehicle_playerisgunner)
	if (player.vehicle_playergunnervehicle)
	if (autocvar_g_vehicle_allowpilotchangeseat)
	if (player.vehicle_playergunnervehicle.owner.isvehiclepilotplaceholder)
	if (!(player.vehicle_playergunnervehicle.phase > time))
	{	
		//print(etos(player.vehicle_playergunnervehicle.owner), " ", player.vehicle_playergunnervehicle.owner.netname, "_gunnerToPilot OwnerGunnerVehic\n");
		//print(etos(player.vehicle_playergunnervehicle.vehicle), " ", player.vehicle_playergunnervehicle.vehicle.netname, "_gunnerToPilot VehicleGunnerVehic\n");
		
		//print(etos(player.vehicle_playergunnervehicle), " ", player.vehicle_playergunnervehicle.netname, "_gunnerToPilot GunnerVehic\n");
		//print(etos(player.vehicle), " ", player.vehicle_playergunnervehicle.netname, "_gunnerToPilot Vehic\n");

		previousself = self;
		previousother = other;
		
		//
		//
		//
		//
		//
		
		myvpplhldr = player.vehicle_playergunnervehicle.owner;
		player.vehicle_playergunnervehicle.owner = world;
		if (myvpplhldr != world) {
			if (player.vehicle_playergunnervehicle.vehicle_pilotplaceholder != world) {
				//print("Placehold remove\n");
				player.vehicle_playergunnervehicle.vehicle_pilotplaceholder = world;
			}
			
			remove(myvpplhldr);
		}		
		
		placeholderent = spawn();
		placeholderent.vehicle_playergunnervehicle = player.vehicle_playergunnervehicle;
		
		//
		self = player;
		vehicles_exit(VHEF_RELESE);
		self = previousself;
		//
		
		self = placeholderent.vehicle_playergunnervehicle;
				//Note, self.phase must be greater than time here
				//
				//otherwise if you go Pilot->Seat->Pilot quickly (1-0-1)
				//you get returned() at  
				//if(self.phase > time) return();
				//in void vehicles_enter()
				//
				//Thus above 
				//if (!(player.vehicle_playergunnervehicle.phase > time))
		other = player;
		
		//player.vehicle = player.vehicle_playergunnervehicle;
		player.vehicle_playerisgunner = 0;
		player.vehicle_playergunnervehicle  = world;
		player.vehicle_changeseat	= func_null;
		
		//print(etos(player.vehicle), " ", player.vehicle.netname, " PVEHIC 1\n");
		
		vehicles_enter();
		
		//print(etos(player.vehicle), " ", player.vehicle.netname, " PVEHIC 2\n");
		
		other = previousother;
		self = previousself;
		remove(placeholderent);
		return TRUE;
	}	
	return FALSE;
}
//End Mind Destroyer//

//////////////////////////////////////////////////////////////////////////
//Stuff having to do with locking/unlocking doors on buildable buildings
void doorTeamLock (entity lockme, entity player, float dolock)
{
	if (lockme.teamlock != dolock) {
		lockme.teamlock = dolock;
		if (dolock >= 2) {
			spamsound (lockme, CH_SHOTS, "misc/menu2.wav", VOL_BASE * 1, ATTN_NORM);
		} else {
			spamsound (lockme, CH_SHOTS, "misc/increasevalue.wav", VOL_BASE * 1, ATTN_NORM);
		}
	} else {
		if ((clienttype(player) == CLIENTTYPE_REAL)) {
			sprint(player, "Door is allready (team) locked\n");
		}
	}
}

void doorTeamUnLock (entity lockme, entity player)
{
	if (lockme.teamlock) {
		lockme.teamlock = 0;
		spamsound (lockme, CH_SHOTS, "misc/decreasevalue.wav", VOL_BASE * 0.6, ATTN_NORM);
	} else {
		if ((clienttype(player) == CLIENTTYPE_REAL)) {
			sprint(player, "Door is allready (team) unlocked\n");
		}
	}
}

void doorTeamLockSet (entity player, float dolock) {
	makevectors(player.v_angle);
	traceline(player.origin, player.origin + v_forward * 128, MOVE_NORMAL, player);
	//effectnum = particleeffectnum("fireball");
	//trailparticles(player, effectnum, player.origin, trace_endpos);
	if(trace_ent != world)
	if(trace_ent.teamlockallow)
	if (trace_ent.teamlockent && trace_ent.teamlockent != world)
	{
		if (dolock == 0.5) {
			//Here we will increase lock level if asked.
			if (trace_ent.teamlock == 1) {
				dolock = 2;
			} else {
				dolock = 1;
			}
		}
		
		if (teamplay) {
			if (trace_ent.teamlockent.team == player.team) {
				if (dolock) doorTeamLock(trace_ent, player, dolock);
				else doorTeamUnLock(trace_ent, player);
			}
		} else {
			if (trace_ent.teamlockent.realowner == player) {
				if (dolock) doorTeamLock(trace_ent, player, dolock);
				else doorTeamUnLock(trace_ent, player);
			}
		}
	}
}

void GoAnd_DoNothingAtAll()
{
	//For when you need to force a switch to an anim and must provide a subroutine
}


void SetCustomWeaponSkin(entity player, float mythenumber)
{
	if (mythenumber == -1) mythenumber = 99; //We want the default 0 skin, 
	
					if (player.weapon == WEP_KNIFE)
						player.knife_customskin = mythenumber;
					else if (player.weapon == WEP_FAMAS)
						player.famas_customskin = mythenumber;
					else if (player.weapon == WEP_STYERAUG)
						player.styeraug_customskin = mythenumber;
					else if (player.weapon == WEP_LEWISMG)
						player.lewismg_customskin = mythenumber;
					else if (player.weapon == WEP_LIGHTAUTO)
						player.lightauto_customskin = mythenumber;
					else if (player.weapon == WEP_PDW)
						player.pdw_customskin = mythenumber;
					else if (player.weapon == WEP_M82RIFLE)
						player.m82rifle_customskin = mythenumber;
					else if (player.weapon == WEP_STREETSWEEPER)
						player.streetsweeper_customskin = mythenumber;
					else if (player.weapon == WEP_LARGEPISTOL)
						player.largepistol_customskin = mythenumber;
					else if (player.weapon == WEP_BIGPISTOL)
						player.bigpistol_customskin = mythenumber;
					else if (player.weapon == WEP_AK47)
						player.ak47_customskin = mythenumber;
					else if (player.weapon == WEP_TT33PISTOL)
						player.tt33pistol_customskin = mythenumber;
					else if (player.weapon == WEP_ELECTRO)
						player.electro_customskin = mythenumber;
					else if (player.weapon == WEP_CRYLINK)
						player.crylink_customskin = mythenumber;
					else if (player.weapon == WEP_TARGETPISTOL)
						player.targetpistol_customskin = mythenumber;
					else if (player.weapon == WEP_P90)
						player.p90_customskin = mythenumber;
}

void DragBox_Think();
float drag_lastcnt;
//float mt_marble_precache;
float CheatCommand(float argc)
{
	BEGIN_CHEAT_FUNCTION();
	string cmd;
	cmd = argv(0);
	switch(cmd)
	{
		entity e;
		float effectnum, f;
		vector start, end;
		entity oldself;

		case "pointparticles":
			IS_CHEAT(0, argc, 0);
			if(argc == 5)
			{
				// arguments:
				//   effectname
				//   origin (0..1, on crosshair line)
				//   velocity
				//   howmany
				effectnum = particleeffectnum(argv(1));
				f = stof(argv(2));
				crosshair_trace(self);
				start = (1-f) * self.origin + f * trace_endpos;
				end = stov(argv(3));
				f = stof(argv(4));
				pointparticles(effectnum, start, end, f);
				DID_CHEAT();
				break;
			}
			sprint(self, "Usage: sv_cheats 1; restart; cmd pointparticles effectname position(0..1) velocityvector multiplier\n");
			break;
		case "trailparticles":
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				// arguments:
				//   effectname
				effectnum = particleeffectnum(argv(1));
				W_SetupShot(self, FALSE, FALSE, "", CH_WEAPON_A, 0);
				traceline(w_shotorg, w_shotorg + w_shotdir * MAX_SHOT_DISTANCE, MOVE_NORMAL, self);
				trailparticles(self, effectnum, w_shotorg, trace_endpos);
				DID_CHEAT();
				break;
			}
			sprint(self, "Usage: sv_cheats 1; restart; cmd trailparticles effectname\n");
			break;
		case "peaceful":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health >= 1)
			{
				if(self.peaceful)
				{
					if ((self.peacefulselectweapon)
					&& (client_hasweapon(self, self.peacefulselectweapon, TRUE, TRUE)))
					{
						W_SwitchWeapon_Force(self, self.peacefulselectweapon);
					} else {
						W_SwitchWeapon_Force(self, w_getbestweapon(self));
					}
					self.peaceful = 0;
				}
				else
				{	
					self.peacefulselectweapon = self.selectweapon;
					W_SwitchWeapon_Force(self, 0);
					self.peaceful = 1;
				}
				break;
			}
			sprint(self, "Usage: cmd iterspell forward|back\n");
			break;
		case "iterspell":
			NOT_CHEAT();
			if(argc == 2)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				if(argv(1) == "forward")
				{
					CmdIterSpellForward(self);
				}
				else if(argv(1) == "back")
				{
					CmdIterSpellBack(self);
				}
				
				if(self.cmdcurrentspell != "U")
				if(self.cmdcurrentspell != "D")
				if(self.cmdcurrentspell != "N")
					sprint(self, "Selected Spell: ",self.cmdcurrentspell,"\n");
					
				break;
			}
			sprint(self, "Usage: cmd iterspell forward|back\n");
			break;
		case "cast":
			NOT_CHEAT();
			if(argc == 2)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				if(argv(1) == "currentspell")
				{
					self.nextspell = CastSpellByName(0, self, self.cmdcurrentspell);
					if (self.rtnvl2 == 0) //Woubld be set to 1 if we had the spell.
					{
						//Lets see if we have the scroll instead.
						ReadSpellByName(self, 0, self.cmdcurrentspell);
					}
				}
				else
				{
					self.nextspell = CastSpellByNameCaseInsensitive(0, self, argv(1));
				}
				break;
			}
			sprint(self, "Usage: cmd cast spellname\n");
			break;
		case "drink":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(time > self.nextdrink)
			//if(self.nextspell < time)
			{
				if(argc >= 2) {
				  if(argv(1) == "potion" || argv(1) == "food" || argv(1) == "comestible") {
					if(argv(3))
					{
						DrinkPotionByName(self, argv(2), argv(3));
					}
					else
					{
						DrinkPotionByName(self, argv(2), "any");
					}
				  } else if((argv(1) == "$*") && (self.waterlevel >= WATERLEVEL_WETFEET)) {
				  	//It is "$*" because if we just do the drink alias with out any
					//arguments it will send "$*", So we take this as drink from surroundings
				  	DrinkFromSurroundings(self);	
				  } else {
					if(argv(2))
					{
						DrinkPotionByName(self, argv(1), argv(2));
					}
					else
					{
						DrinkPotionByName(self, argv(1), "any");
					}
				  }
				} else if (self.waterlevel >= WATERLEVEL_WETFEET) {
					//Here if we entered the command "cmd drink" without any arguments we try from surroundings
					DrinkFromSurroundings(self);
				}
				break;
			}
			sprint(self, "Usage: cmd drink potion health|mana|rejuv large|medium|small|any\n");
			break;
		case "read":
			NOT_CHEAT();
			if(argc == 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				if (argv(1) == "book")
					ReadSpellByNameCaseInsensitive(self, 1, argv(2));
				else if (argv(1) == "scroll")
					ReadSpellByNameCaseInsensitive(self, 0, argv(2));
				break;
			}
			sprint(self, "Usage: cmd read book|scroll spellname\n");
			break;
		case "shootfromside":
			NOT_CHEAT();
			//if(argc == 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(g_allow_shootfromside)
			//if(self.nextspell < time)
			{
				if (self.shootfromside == 1)
					self.shootfromside = 0;
				else 
					self.shootfromside = 1;
				break;
			}
			sprint(self, "Usage: cmd shootfromside\n");
			break;
		case "customweaponskin":
			NOT_CHEAT();
			if(argc == 2)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(autocvar_g_allowcustomweaponskins >= 3)
			//if(self.nextspell < time)
			{
				float mythenumber;
				mythenumber = stof(argv(1));
				mythenumber = floor(mythenumber);
				if (mythenumber >= 0 || mythenumber == -1)
				if (mythenumber <= 20) {
					SetCustomWeaponSkin(self, mythenumber);
				}
				break;
			}
			sprint(self, "Usage: cmd customweaponskin number\n");
			break;
		case "put":
		case "take":
		case "drop":
			NOT_CHEAT();
			local float isput;
			local entity putent;
			local entity dropent;
			
			//Not going to trust QuakeC with anything but the most basic switch fallthrough
			if (cmd == "put") {
				isput = 1;
				putent = CmdPutInFront(self);
				dropent = self;
			} else if (cmd == "take") {
				isput = 1;
				putent = self;
				dropent = CmdTakeInFront(self);
			} else {
				//Drop
				isput = 0;
				putent = world;
				dropent = self;
			}
			
			if(argc >= 2)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if (!isput || (isput && putent && putent != world && dropent && dropent != world))
			//if(self.nextspell < time)
			{
			   if(argc >= 3) {
			   	//Normal, proper syntax
				if (argv(1) == "book")
					MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
				else if (argv(1) == "scroll")
					MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
				else if (argv(1) == "misc")
					MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
				//else if (argv(1) == "weapon" && (dropent.weapon != WEP_MORGENSTERN)) //Trying to drop any weapon while holding the 48th weapon while compiled under fteqcc, oh no that could cause loads of trouble, see cl_weapons.qc for details
				else if (argv(1) == "weapon") //we use gmqcc, for gamecode now. Tried to stick with fteqcc, but past 48 weapons there were too many bugs.
					MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
				else if (argv(1) == "ammo" || argv(1) == "resource")
					MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
				else if (argv(1) == "potion" && argc == 4)	
					MagicInventoryDropByName(dropent,	argv(1), argv(2), argv(3), 1, isput, putent);
				else if (argv(1) == "food" && argc >= 4)	
					MagicInventoryDropByName(dropent,	argv(1), argv(2), argv(3), 1, isput, putent);
				else if (argv(1) == "food" && argc >= 3)	
					MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
				else if (argv(1) == "comestible" && argc >= 4)	
					MagicInventoryDropByName(dropent,	argv(1), argv(2), argv(3), 1, isput, putent);
				else if (argv(1) == "comestible" && argc >= 3)	
					MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
				else if ((argv(1) == "coin" || argv(1) == "coins" || argv(1) == "bar" || argv(1) == "bars") && argc >= 3) {
					if (argc >= 4) {
						float mythenumber;
						
						if (argv(3) == "few" || argv(3) == "afew") {
							mythenumber = 3;
						} else if (argv(3) == "dozen" || argv(3) == "adozen") {
							mythenumber = 12;
						} else if (argv(3) == "halfdozen" || argv(3) == "ahalfdozen") {
							mythenumber = 6;
						} else {
							mythenumber = stof(argv(3));
							mythenumber = floor(mythenumber);
						}
						
						if (mythenumber > 0) {
							MagicInventoryDropByName(dropent,	argv(1), argv(2), "", mythenumber, isput, putent);
						}
					} else {
						if (argv(1) == "coins" || argv(1) == "bars") {
							//Drop 2 for plural
							MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 2, isput, putent);
						} else {
							MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
						}
					}
				} else if ((argv(1) == "gem" || argv(1) == "gems") && argc >= 3) {
					if (argc >= 4) {
						float mythenumber;
						
						if (argv(3) == "few" || argv(3) == "afew") {
							mythenumber = 3;
						} else if (argv(3) == "dozen" || argv(3) == "adozen") {
							mythenumber = 12;
						} else if (argv(3) == "halfdozen" || argv(3) == "ahalfdozen") {
							mythenumber = 6;
						} else {
							mythenumber = stof(argv(3));
							mythenumber = floor(mythenumber);
						}
						
						if (mythenumber > 0) {
							MagicInventoryDropByName(dropent,	argv(1), argv(2), "", mythenumber, isput, putent);
						}
					} else {
						if (argv(1) == "gems") {
							//Drop 2 for plural
							MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 2, isput, putent);
						} else {
							MagicInventoryDropByName(dropent,	argv(1), argv(2), "", 1, isput, putent);
						}
					}
				}
			   } else if(argc >= 2) {
			   	//"Improper syntax", but we got you
			   	if (argv(1) == "$*" || argv(1) == "book"
				|| argv(1) == "scroll" || argv(1) == "weapon"
				|| argv(1) == "ammo" || argv(1) == "resource"
				|| argv(1) == "potion" || argv(1) == "food"
				|| argv(1) == "coin" || argv(1) == "coins"
				|| argv(1) == "comestible")
					sprint(dropent, "Usage:cmd drop ammo ammotype\nUsage: cmd drop book|scroll spellname\nUsage:cmd drop bar tin|iron|bronze|copper|silver|gold|platinum [number]\nUsage:cmd drop bar fauxtin|fauxiron|fauxbronze|fauxcopper|fauxsilver|fauxgold|fauxplatinum [number]\nUsage:cmd drop potion health|mana|rejuv small|medium|large\nUsage:cmd drop coin tin|iron|bronze|copper|silver|gold|platinum|jade|amberium|fauxtin|fauxiron|fauxbronze|fauxcopper|fauxsilver|fauxgold|fauxplatinum|fauxjade|fauxamberium [number]\nUsage:cmd drop gem diamond|jacinth|ruby|pearl|blackpearl|peridot|emerald|topaz|sapphire|chalcedony|agate|onyx|mithril|amethyst|chrysoberyl|aquamarine|quartz|tourmaline|redglass|greenglass|blueglass|yellowglass|whiteglass [number]\nUsage:cmd drop gem cutglassdiamond|cutglassjacinth|cutglassruby|cutglasspearl|cutglassblackpearl|cutglassperidot|cutglassemerald|cutglasstopaz|cutglasssapphire|cutglasschalcedony|cutglassagate|cutglassonyx|cutglassmithril|cutglassamethyst|cutglasschrysoberyl|cutglassaquamarine|cutglassquartz|cutglasstourmaline [number]\nUsage:cmd drop weapon weaponname\n");
			   	else if (argv(1) == "nails")
					MagicInventoryDropByName(dropent,	"ammo", "nails", "", 1, isput, putent);
				else if (argv(1) == "rockets")
					MagicInventoryDropByName(dropent,	"ammo", "rockets", "", 1, isput, putent);
				else if (argv(1) == "cells")
					MagicInventoryDropByName(dropent,	"ammo", "cells", "", 1, isput, putent);
				else if (argv(1) == "shells")
					MagicInventoryDropByName(dropent,	"ammo", "shells", "", 1, isput, putent);
				else {
					MagicInventoryDropByName(dropent,	"weapon", argv(1), "", 1, isput, putent);
				}
			   }
			   break;
			}
			sprint(self, "Usage:cmd drop ammo ammotype\nUsage: cmd drop book|scroll spellname\nUsage:cmd drop potion health|mana|rejuv small|medium|large\nUsage:cmd drop bar tin|iron|bronze|copper|silver|gold|platinum [number]\nUsage:cmd drop bar fauxtin|fauxiron|fauxbronze|fauxcopper|fauxsilver|fauxgold|fauxplatinum [number]\nUsage:cmd drop coin tin|iron|bronze|copper|silver|gold|platinum|jade|amberium|fauxtin|fauxiron|fauxbronze|fauxcopper|fauxsilver|fauxgold|fauxplatinum|fauxjade|fauxamberium [number]\nUsage:cmd drop gem diamond|jacinth|ruby|pearl|blackpearl|peridot|emerald|topaz|sapphire|chalcedony|agate|onyx|mithril|amethyst|chrysoberyl|aquamarine|quartz|tourmaline|redglass|greenglass|blueglass|yellowglass|whiteglass [number]\nUsage:cmd drop gem cutglassdiamond|cutglassjacinth|cutglassruby|cutglasspearl|cutglassblackpearl|cutglassperidot|cutglassemerald|cutglasstopaz|cutglasssapphire|cutglasschalcedony|cutglassagate|cutglassonyx|cutglassmithril|cutglassamethyst|cutglasschrysoberyl|cutglassaquamarine|cutglassquartz|cutglasstourmaline [number]\nUsage:cmd drop weapon weaponname\n");
			break;
		case "defecate":
			NOT_CHEAT();
			//if(argc >= 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				DefecateIfAble(self);	
				break;
			}
			sprint(self, "Usage:cmd defecate\n");
			break;
		case "whipitout":
			NOT_CHEAT();
			//if(argc >= 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				WhipItOutIfAble(self);	
				break;
			}
			sprint(self, "Usage:cmd whipitout\n");
			break;
		case "pullitout":
			NOT_CHEAT();
			//if(argc >= 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.prisonerlevel != 1)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				PullItOutIfAble(self);	
				break;
			}
			sprint(self, "Usage:cmd pullitout\nNote: Only works on chained prisoner\n");
			break;
		case "cutitoff":
			NOT_CHEAT();
			if(argc >= 2)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.prisonerlevel != 1)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(weapon_prepareattack_check(0, 1))
			//if(self.nextspell < time)
			{
				if (argv(1) == "eunich") {
					CutItOffIfAble(self, 1);
				} else if (argv(1) == "castrate") {
					CutItOffIfAble(self, 2);
				} else if (argv(1) == "dock") {
					CutItOffIfAble(self, 3);
				}
				break;
			}
			sprint(self, "Usage: cmd cutitoff eunich|castrate|dock\nNote: Only works on chained prisoner\n");
			break;
		case "blind":
			NOT_CHEAT();
			//if(argc >= 1)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.prisonerlevel != 1)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(weapon_prepareattack_check(0, 1))
			//if(self.nextspell < time)
			{
				BlindThemIfAble(self); //Self is the inflictor, trace_ent will be the person afflicted, if any
				break;
			}
			sprint(self, "Usage: cmd blind\nNote: Only works on chained prisoner\n");
			break;
		case "mangle":
			NOT_CHEAT();
			//if(argc >= 1)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.prisonerlevel != 1)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(weapon_prepareattack_check(0, 1))
			//if(self.nextspell < time)
			{
				if (argv(1) == "l" || argv(1) == "left" || argv(1) == "lefthand") {
					MangleThemIfAble(self, 1); //Self is the inflictor, trace_ent will be the person afflicted, if any
				} else if (argv(1) == "r" || argv(1) == "right" || argv(1) == "righthand") {
					MangleThemIfAble(self, 2); //Self is the inflictor, trace_ent will be the person afflicted, if any
				} else {
					MangleThemIfAble(self, 0); //Self is the inflictor, trace_ent will be the person afflicted, if any
				}
				break;
			}
			sprint(self, "Usage: cmd mangle\nNote: Only works on chained prisoner\n");
			break;
		case "hobble":
			NOT_CHEAT();
			//if(argc >= 1)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.prisonerlevel != 1)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(weapon_prepareattack_check(0, 1))
			//if(self.nextspell < time)
			{
				if (argv(1) == "l" || argv(1) == "left" || argv(1) == "leftfoot") {
					HobbleThemIfAble(self, 1); //Self is the inflictor, trace_ent will be the person afflicted, if any
				} else if (argv(1) == "r" || argv(1) == "right" || argv(1) == "rightfoot") {
					HobbleThemIfAble(self, 2); //Self is the inflictor, trace_ent will be the person afflicted, if any
				} else {
					HobbleThemIfAble(self, 0); //Self is the inflictor, trace_ent will be the person afflicted, if any
				}
				break;
			}
			sprint(self, "Usage: cmd mangle\nNote: Only works on chained prisoner\n");
			break;
		case "erectit":
			NOT_CHEAT();
			//if(argc >= 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				ErectItToggle(self);	
				break;
			}
			sprint(self, "Usage:cmd erectit\n");
			break;
		case "altaim":
			NOT_CHEAT();
			//if(argc >= 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(autocvar_g_shootfromfixedorigin_alt_allow)
			//if(self.nextspell < time)
			{
				if (self.shootfromaltaim) {
					self.shootfromaltaim = 0;
				} else {
					self.shootfromaltaim = 1;
				}
				
				//Cycle so view changes
				if not(self.peaceful) {
					self.shootfromaltaim_update = 1;
					// attempt forcing playback of the anim by switching to another anim (that we never play) here...
					weapon_thinkf(WFRAME_FIRE1, 0, GoAnd_DoNothingAtAll);
				}	
				break;
			}
			sprint(self, "Usage:cmd altaim\n");
			break;
		case "altaircontrols":
			NOT_CHEAT();
			//if(argc >= 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(autocvar_g_vehicles_alternateaircontrols_allow)
			//if(self.nextspell < time)
			{
				if (self.vehicle_alternateaircontrols) {
					self.vehicle_alternateaircontrols = 0;
					sprint(self, sprintf("Vehicle Controls:^xFFF Airplane now controlled by^x5F5 mouse^7 and ^xF55keyboard^7\n"));

				} else {
					self.vehicle_alternateaircontrols = 1;
					sprint(self, sprintf("Vehicle Controls:^x555 Airplane now controlled by ^xF55keyboard^x555 only^7\n"));
				}	
				break;
			}
			sprint(self, "Usage:cmd altaircontrols\n");
			break;
		case "search":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				CmdSearchInFront(self);
				break;
			}
			sprint(self, "Usage: cmd search (near a chest or container)\n");
			break;
		case "preferencesspawn":
			NOT_CHEAT();
			if(autocvar_g_allow_spawnprefs)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.spawnpreferences == 2) {
					self.spawnpreferences = -1;
					sprint(self, sprintf("SpawnPreferences:^xF00 Map Only (Normal Spawns)^7\n"));
				} else if (self.spawnpreferences == -1) {
					self.spawnpreferences = 0;
					sprint(self, sprintf("SpawnPreferences:^x999 Normal (Normal Spawns, My Buildings, Friends Buildings, No Hated)^7\n"));
				} else if(self.spawnpreferences == 4) {
					self.spawnpreferences = 2;
					sprint(self, sprintf("SpawnPreferences:^x0F0 Any (Including Hated)^7\n"));
				} else if(self.spawnpreferences == 1) {
					if (autocvar_g_allow_friends) {
						self.spawnpreferences = 3;
						sprint(self, sprintf("SpawnPreferences:^x0FA Friends Buildings and My Buildings^7\n"));
					} else {
						//Skip to
						self.spawnpreferences = 2;
						sprint(self, sprintf("SpawnPreferences:^x0F0 Any (Including Hated)^7\n"));
					}
				} else if(self.spawnpreferences == 3) {
					if (autocvar_g_allow_friends) {
						self.spawnpreferences = 4;
						sprint(self, sprintf("SpawnPreferences:^x09F Friends Buildings Only^7\n"));
					} else {
						//Skip to
						self.spawnpreferences = 2;
						sprint(self, sprintf("SpawnPreferences:^x0F0 Any (Including Hated)^7\n"));
					}
				} else {
					self.spawnpreferences = 1;
					sprint(self, sprintf("SpawnPreferences:^xFF0 My Buildings Only^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd spawnpreferences\n");
			break;
		case "preferencesspawnany":
			NOT_CHEAT();
			if(autocvar_g_allow_spawnprefs)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.spawnpreferences == 2) {
					self.spawnpreferences = 0;
					sprint(self, sprintf("SpawnPreferences:^x999 Normal (Normal Spawns, My Buildings, No Hated)^7\n"));
				} else {
					self.spawnpreferences = 2;
					sprint(self, sprintf("SpawnPreferences:^x0F0 Any (Including Hated)^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd spawnpreferencesany\n");
			break;
		case "preferencesspawnmine":
			NOT_CHEAT();
			if(autocvar_g_allow_spawnprefs)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.spawnpreferences == 1) {
					self.spawnpreferences = 0;
					sprint(self, sprintf("SpawnPreferences:^x999 Normal (Normal Spawns, My Buildings, No Hated)^7\n"));
				} else {
					self.spawnpreferences = 1;
					sprint(self, sprintf("SpawnPreferences:^xFF0 My Buildings Only^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd spawnpreferencesmine\n");
			break;
		case "preferencesspawnfriends":
			NOT_CHEAT();
			if(autocvar_g_allow_spawnprefs)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.spawnpreferences == 3) {
					self.spawnpreferences = 0;
					sprint(self, sprintf("SpawnPreferences:^x999 Normal (Normal Spawns, My Buildings, No Hated)^7\n"));
				} else {
					self.spawnpreferences = 3;
					sprint(self, sprintf("SpawnPreferences:^x0FA Friends Buildings and My Buildings^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd spawnpreferencesmine\n");
			break;
		case "preferencesspawnfriendsonly":
			NOT_CHEAT();
			if(autocvar_g_allow_spawnprefs)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.spawnpreferences == 4) {
					self.spawnpreferences = 0;
					sprint(self, sprintf("SpawnPreferences:^x999 Normal (Normal Spawns, My Buildings, No Hated)^7\n"));
				} else {
					self.spawnpreferences = 4;
					sprint(self, sprintf("SpawnPreferences:^x09F Friends Buildings Only^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd spawnpreferencesmine\n");
			break;
		case "preferencesspawnnone":
			NOT_CHEAT();
			if(autocvar_g_allow_spawnprefs)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				
				self.spawnpreferences = 0;
				sprint(self, sprintf("SpawnPreferences:^x999 Normal (Normal Spawns, My Buildings, Friends Buildings, No Hated)^7\n"));
				break;
			}
			sprint(self, "Usage: cmd spawnpreferencesnone\n");
			break;
		case "preferencesspawnmap":
			NOT_CHEAT();
			if(autocvar_g_allow_spawnprefs)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.spawnpreferences == -1) {
					self.spawnpreferences = 0;
					sprint(self, sprintf("SpawnPreferences:^x999 Normal (Normal Spawns, My Buildings, No Hated)^7\n"));
				} else {
					self.spawnpreferences = -1;
					sprint(self, sprintf("SpawnPreferences:^xF00 Map Only (Normal Spawns)^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd spawnpreferencesmine\n");
			break;
		case "tolerateloveallabsolutely":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.tolerateall == 3) {
					self.tolerateall = 0;
					sprint(self, sprintf("TolerateAll:^x999 Disabled^7\n"));
				} else {
					self.tolerateall = 3;
					sprint(self, sprintf("TolerateAll:^xF4D LoveAllUnlockEverything^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd tolerateall\n");
			break;
		case "tolerateloveall":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.tolerateall == 2) {
					self.tolerateall = 0;
					sprint(self, sprintf("TolerateAll:^x999 Disabled^7\n"));
				} else {
					self.tolerateall = 2;
					sprint(self, sprintf("TolerateAll:^x0F0 LoveAll^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd tolerateall\n");
			break;
		case "toleratealldisable":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				self.tolerateall = 0;
				sprint(self, sprintf("TolerateAll:^x999 Disabled^7\n"));
				break;
			}
			sprint(self, "Usage: cmd tolerateall\n");
			break;
		case "tolerateall":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.tolerateall == 1) {
					self.tolerateall = 0;
					sprint(self, sprintf("TolerateAll:^x999 Disabled^7\n"));
				} else {
					self.tolerateall = 1;
					sprint(self, sprintf("TolerateAll:^x4F4 Enabled^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd tolerateall\n");
			break;
		case "toleratenone":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.tolerateall != -1) {
					self.tolerateall = -1;
					sprint(self, sprintf("TolerateAll:^x444 None^7\n"));
				} else {
					self.tolerateall = 0;
					sprint(self, sprintf("TolerateAll:^x999 Disabled^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd toleratenone\n");
			break;
		case "tolerateabsolutelynone":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(self.tolerateall != -2) {
					self.tolerateall = -2;
					sprint(self, sprintf("TolerateAll:^xF44 HateAll^7\n"));
				} else {
					self.tolerateall = 0;
					sprint(self, sprintf("TolerateAll:^x999 Disabled^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd toleratenone\n");
			break;
		case "addfriend":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_addFriend(self, 0);
				break;
			}
			sprint(self, "Usage: cmd addfriend (near player)\n");
			break;
		case "addtolerated":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_addTolerated(self, 0);
				break;
			}
			sprint(self, "Usage: cmd addfriend (near player)\n");
			break;
		case "addhated":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_addHated(self, 0);
				break;
			}
			sprint(self, "Usage: cmd addfriend (near player)\n");
			break;
		case "restorefriend":
			NOT_CHEAT();
			if(argc >= 2)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(argc >= 2 && (argv(1) != "$*")) {
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								Cmd_addFriend(self, mythenumber);
							} else {
								sprint(self, "exfriend number be positive whole number\n");
							}
						} else {
							sprint(self, "Select desired exfriend number to restore[1,2,3...10]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd restorefriend [1,2,3,...10]\n");
					}
				} else {
					sprint(self, "Usage: cmd restorefriend [1,2,3,...10]\n");
				}
				break;
			}
			sprint(self, "Usage: cmd restorefriend [1,2,3,...10]\n");
			break;
		case "restoretolerated":
			NOT_CHEAT();
			if(argc >= 2)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(argc >= 2 && (argv(1) != "$*")) {
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								Cmd_addTolerated(self, mythenumber);
							} else {
								sprint(self, "exfriend number be positive whole number\n");
							}
						} else {
							sprint(self, "Select desired exfriend number to restore[1,2,3...10]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd restoretolerated [1,2,3,...10]\n");
					}
				} else {
					sprint(self, "Usage: cmd restoretolerated [1,2,3,...10]\n");
				}
				break;
			}
			sprint(self, "Usage: cmd restorefriend [1,2,3,...10]\n");
			break;
		case "restorehated":
			NOT_CHEAT();
			if(argc >= 2)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(argc >= 2 && (argv(1) != "$*")) {
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								Cmd_addHated(self, mythenumber);
							} else {
								sprint(self, "exhated number be positive whole number\n");
							}
						} else {
							sprint(self, "Select desired exhated number to restore[1,2,3...10]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd restorehated [1,2,3,...10]\n");
					}
				} else {
					sprint(self, "Usage: cmd restorehated [1,2,3,...10]\n");
				}
				break;
			}
			sprint(self, "Usage: cmd restorehated [1,2,3,...10]\n");
			break;
		case "listall":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_listHateds(self);
				Cmd_listExHateds(self);
				Cmd_listExFriends(self);
				Cmd_listTolerateds(self);
				Cmd_listFriends(self);
				if(self.tolerateall == -2) {
					sprint(self, sprintf("TolerateAll:^xF44 HateAll^7\n"));
				} else if(self.tolerateall == -1) {
					sprint(self, sprintf("TolerateAll:^x444 None^7\n"));
				} else if (self.tolerateall == 0) {
					sprint(self, sprintf("TolerateAll:^x999 Disabled^7\n"));
				} else if (self.tolerateall == 1) {
					sprint(self, sprintf("TolerateAll:^x4F4 Enabled^7\n"));
				} else if (self.tolerateall == 2) {
					sprint(self, sprintf("TolerateAll:^x0F0 LoveAll^7\n"));
				} else if (self.tolerateall == 3) {
					sprint(self, sprintf("TolerateAll:^xF4D LoveAllUnlockEverything^7\n"));
				} else {
					//Error
					sprint(self, sprintf("TolerateAll: Unknown\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd listfriend\n");
			break;
		case "listfriend":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_listFriends(self);
				break;
			}
			sprint(self, "Usage: cmd listfriend\n");
			break;
		case "listtolerated":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_listTolerateds(self);
				break;
			}
			sprint(self, "Usage: cmd listtolerated\n");
			break;
		case "listexfriend":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_listExFriends(self);
				break;
			}
			sprint(self, "Usage: cmd listfriend\n");
			break;
		case "listhated":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_listHateds(self);
				break;
			}
			sprint(self, "Usage: cmd listhated\n");
			break;
		case "listexhated":
			NOT_CHEAT();
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				Cmd_listExHateds(self);
				break;
			}
			sprint(self, "Usage: cmd listexhated\n");
			break;
		case "removefriend":
			NOT_CHEAT();
			if(argc >= 2)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(argc >= 2 && (argv(1) != "$*")) {
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								Cmd_removeFriend(self, mythenumber);
							} else {
								sprint(self, "friend number be positive whole number\n");
							}
						} else {
							sprint(self, "Select desired friend number to remove[1,2,3...10]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd removefriend [1,2,3,...10]\n");
					}
				} else {
					sprint(self, "Usage: cmd removefriend [1,2,3,...10]\n");
				}
				break;
			}
			sprint(self, "Usage: cmd removefriend [1,2,3,...10]\n");
			break;
		case "removetolerated":
			NOT_CHEAT();
			if(argc >= 2)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(argc >= 2 && (argv(1) != "$*")) {
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								Cmd_removeTolerated(self, mythenumber);
							} else {
								sprint(self, "tolerated number be positive whole number\n");
							}
						} else {
							sprint(self, "Select desired tolerated number to remove[1,2,3...10]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd removetolerated [1,2,3,...10]\n");
					}
				} else {
					sprint(self, "Usage: cmd removetolerated [1,2,3,...10]\n");
				}
				break;
			}
			sprint(self, "Usage: cmd removetolerated [1,2,3,...10]\n");
			break;
		case "removehated":
			NOT_CHEAT();
			if(argc >= 2)
			if(autocvar_g_allow_friends)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				if(argc >= 2 && (argv(1) != "$*")) {
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								Cmd_removeHated(self, mythenumber);
							} else {
								sprint(self, "hated number be positive whole number\n");
							}
						} else {
							sprint(self, "Select desired hated number to remove[1,2,3...10]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd removehated [1,2,3,...10]\n");
					}
				} else {
					sprint(self, "Usage: cmd removehated [1,2,3,...10]\n");
				}
				break;
			}
			sprint(self, "Usage: cmd removehated [1,2,3,...10]\n");
			break;
		case "marshal":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{
				local float mymarshaledtroops;
				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.2;
				
				mymarshaledtroops = 0;
				
				mymarshaledtroops = marshalmonsters(self, self.origin, 128);
				if(mymarshaledtroops) {
					if ((clienttype(self) == CLIENTTYPE_REAL)) {
						sprint(self, strcat("You marshaled ",ftos(mymarshaledtroops)," troops\n"));
					}
				}
				break;
			}
			sprint(self, "Usage: cmd marshal\n");
			break;
		case "marshalarea":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{
				local float mymarshaledtroops;
				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.2;
				
				mymarshaledtroops = 0;
				
				mymarshaledtroops = marshalmonsters(self, self.origin, 1024);
				if(mymarshaledtroops) {
					if ((clienttype(self) == CLIENTTYPE_REAL)) {
						sprint(self, strcat("You marshaled ",ftos(mymarshaledtroops)," troops\n"));
					}
				}
				
				break;
			}
			sprint(self, "Usage: cmd marshalarea\n");
			break;
		case "marshalfield":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{
				local float mymarshaledtroops;
				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.2;
				
				mymarshaledtroops = 0;
				
				mymarshaledtroops = marshalmonsters(self, self.origin, 4096);
				if(mymarshaledtroops) {
					if ((clienttype(self) == CLIENTTYPE_REAL)) {
						sprint(self, strcat("You marshaled ",ftos(mymarshaledtroops)," troops\n"));
					}
				}
				
				break;
			}
			sprint(self, "Usage: cmd marshalfield\n");
			break;
		case "marshaldefend":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.2;
				
				if(self.marshalattack) {
					self.marshalattack = 0;
					if ((clienttype(self) == CLIENTTYPE_REAL)) {
						sprint(self, "You call your troops to your defense\n");
					}
				}
				
				break;
			}
			sprint(self, "Usage: cmd marshaldefend\n");
			break;
		case "marshalattack":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.2;
				
				local entity mytrcr;
				mytrcr = spawn();
				mytrcr.origin = self.origin;
				mytrcr.origin = mytrcr.origin + self.view_ofs;
				mytrcr.v_angle = self.v_angle;
				
				makevectors(mytrcr.v_angle);
				traceline(mytrcr.origin, mytrcr.origin + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, mytrcr);
				
				remove (mytrcr);
				
				if (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY)
				{
					//print ("Hit Sky, staying\n");
					//Do nothing
				} else if (vlen(self.origin - trace_endpos) > 128) {
					self.marshalattack = 1;
					self.marshalattack_spot = trace_endpos;
					if ((clienttype(self) == CLIENTTYPE_REAL)) {
						sprint(self, "You order your troops to attack\n");
					}
				}
				
				break;
			}
			sprint(self, "Usage: cmd marshalattack\n");
			break;
		case "marshalreattack":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.2;
				
				if(!self.marshalattack) {
					if (self.marshalattack_spot_x != 0
					|| self.marshalattack_spot_y != 0
					|| self.marshalattack_spot_z != 0)
					{
					//Don't really want to do any implicit conversion the the vector, so checking this way
						self.marshalattack = 1;
						if ((clienttype(self) == CLIENTTYPE_REAL)) {
							sprint(self, "You order your troops to renew the previous attack\n");
						}
					}
				}
				
				break;
			}
			sprint(self, "Usage: cmd marshalreattack\n");
			break;
		case "unmarshal":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{
				local float myunmarshaledtroops;
				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 1;
				
				myunmarshaledtroops = 0;
				
				myunmarshaledtroops = unmarshalmonsters(self);
				if(myunmarshaledtroops) {
					if ((clienttype(self) == CLIENTTYPE_REAL)) {
						sprint(self, strcat("You released ",ftos(myunmarshaledtroops)," troops\n"));
					}
				}
				
				break;
			}
			sprint(self, "Usage: cmd unmarshal\n");
			break;
		case "marshallist":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{
				local float myunmarshaledtroops;
				
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.5;
				
				myunmarshaledtroops = 0;
				
				if ((clienttype(self) == CLIENTTYPE_REAL)) {
					myunmarshaledtroops = printmarshalmonsters(self);
					if(myunmarshaledtroops) {
							sprint(self, strcat("You have ",ftos(myunmarshaledtroops)," troops under your command:\n"));
					}
				}

				
				break;
			}
			sprint(self, "Usage: cmd marshallist\n");
			break;
		case "marshalformation":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.125;
				if(self.marshalformation == 3) {
					self.marshalformation = 0;
					sprint(self, sprintf("Formation:^xF44 Distant^7\n"));
				} else if(self.marshalformation == 2) {
					self.marshalformation = 3;
					sprint(self, sprintf("Formation:^x4F4 Close^7\n"));
				} else if(self.marshalformation == 1) {
					self.marshalformation = 2;
					sprint(self, sprintf("Formation:^xFF4 Median^7\n"));
				} else {
					self.marshalformation = 1;
					sprint(self, sprintf("Formation:^xFA0 Far^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd marshalformation\n");
			break;
		case "marshaldedication":
			NOT_CHEAT();
			if(autocvar_g_allow_marshal)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.nextcmdaction < time)
			{
				self.nextspell = time + 0.1;
				self.nextcmdaction = time + 0.125;
				if(self.marshaldedication == 0) {
					self.marshaldedication = 0.5;
					sprint(self, sprintf("Dedication:^xFF4 Median^7\n"));
				} else if(self.marshaldedication == 0.5) {
					self.marshaldedication = 1;
					sprint(self, sprintf("Dedication:^xF00 Absolute^7\n"));
				} else {
					self.marshaldedication = 0;
					sprint(self, sprintf("Dedication:^xAFA Casual^7\n"));
				}
				break;
			}
			sprint(self, "Usage: cmd marshaldedication\n");
			break;
		case "changeseat":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			if(self.vehicle)
			{
				self.nextspell = time + 0.1;
				//print(etos(self.vehicle.vehicle),"vehicle.vehicle\n");
				//print(etos(self.vehicle),"vehicle\n");
				//print(etos(self.vehicle.owner),"vehicle owner\n");
				//print(etos(self.vehicle.owner.owner),"vehicle owner owner\n");
			  if(argc >= 2 && (argv(1) != "$*")) {
				if (self.vehicle.owner.owner) {
					//print(etos(self.vehicle.owner), "vehicle, In gun\n");
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								if not(CmdVehiclesChangeSeat(self, mythenumber)) {
									sprint(self, "Attempt to change to desired seat failed.\n");	
								}
							} else {
								sprint(self, "seatnumber must be positive whole number\n");
							}
						} else if (mythenumber == 0 && autocvar_g_vehicle_allowpilotchangeseat) {
							if not(CmdVehiclesChangeSeatToPilot(self)) {
								sprint(self, "Attempt to change to pilot seat failed.\n");	
							}
						} else {
							sprint(self, "Select desired seat in vehicle [1,2,3...?]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd changeseat [seatnumber] (when gunner or passenger in a vehicle)\n");
					}
				} else if (autocvar_g_vehicle_allowpilotchangeseat) {
					//print("In drivers seat\n");
					
					if (argv(1)) {
						float mythenumber;
						mythenumber = stof(argv(1));
						if (mythenumber) {
							mythenumber = floor(mythenumber);
							if (mythenumber >= 1) {
								if not(CmdVehiclesChangeSeatAsPilot(self, mythenumber)) {
									sprint(self, "Attempt to change to desired seat failed.\n");	
								}
							} else {
								sprint(self, "seatnumber must be positive whole number\n");
							}
						} else {
							sprint(self, "Select desired seat in vehicle [1,2,3...?]\n");
						}
					} else {
						//Can't be 0
						sprint(self, "Usage: cmd changeseat [seatnumber] (when gunner or passenger in a vehicle)\n");
					}
					
				} else {
					//print("In drivers seat\n");
					sprint(self, "Must be gunner or passenger to change seats\n");
	
				}
			 } else {
			 	//Print info.
				entity myvehicletoquery;
				if (self.vehicle.owner.owner) {
					myvehicletoquery = self.vehicle.owner;
				} else {
					myvehicletoquery = self.vehicle;
				}
				CmdPrintChangeSeatQuery(self, myvehicletoquery);
			 }
			 break;
			}
			sprint(self, "Usage: cmd changeseat [seatnumber] (when gunner or passenger in a vehicle)\n");
			break;
		case "lock":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				doorTeamLockSet(self, 0.5);
				break;
			}
			sprint(self, "Usage: cmd lock (near a buildable's door)\n");
			break;
		case "softlock":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				doorTeamLockSet(self, 1);
				break;
			}
			sprint(self, "Usage: cmd softlock (near a buildable's door)\n");
			break;
		case "hardlock":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				doorTeamLockSet(self, 2);
				break;
			}
			sprint(self, "Usage: cmd hardlock (near a buildable's door)\n");
			break;
		case "unlock":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				self.nextspell = time + 0.1;
				doorTeamLockSet(self, 0);
				break;
			}
			sprint(self, "Usage: cmd unlock (near a buildable's door)\n");
			break;
		case "bury":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.prisonerlevel != 3)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(self.nextspell < time)
			{
				CmdBuryAllInRadius(self, 64);
				break;
			}
			sprint(self, "Usage: cmd unlock (near a buildable's door)\n");
			break;
		case "grenadeselect":
			NOT_CHEAT();
			if (g_nades)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			if(time > self.nextnadeselecttime)
			{
				//.float grenades; //How many grenades does player have.
				//.float flashbangs; //How many flashbang grenades does player have.
				//.float nadeselected; //Which nade type selected to throw.
				
				//print(ftos(self.grenades), "grenades\n");
				//print(ftos(self.flashbangs), "flashbangs\n");
				//print(ftos(self.smokenades), "smokenades\n");
				//print(ftos(self.atmines), "ATmines\n");
				
				self.nadeselected = self.nadeselected + 1;
				if (self.nadeselected > 5) self.nadeselected = 0;
				
				local float lpcounter;
				lpcounter = 0;
				//Run twice to try to find nade we might have.
				while (lpcounter < 2) {
					if (self.nadeselected == 0 && self.grenades < 1) {
						self.nadeselected = self.nadeselected + 1;
					}
				
					if (self.nadeselected == 1 && self.flashbangs < 1) {
						self.nadeselected = self.nadeselected + 1;
					}
				
					if (self.nadeselected == 2 && self.smokenades < 1) {
						self.nadeselected = self.nadeselected + 1;
					}
				
					if (self.nadeselected == 3 && self.landmines < 1) {
						self.nadeselected = self.nadeselected + 1;
					}
					
					if (self.nadeselected == 4 && self.atmines < 1) {
						self.nadeselected = self.nadeselected + 1;
					}
					
					if (self.nadeselected == 5 && self.fragnades < 1) {
						self.nadeselected = 0;
					}
					lpcounter = lpcounter + 1;
				}
				
				if (self.nadeselected > 5) self.nadeselected = 0; //Just incase
				
				if (self.nadeselected == 0) {
					if(time > self.nextnadeselecttime) {
					  sprint(self, sprintf("GrenadeSelected:^x4F4 [grenades]^7\n"));
					  self.nextnadeselecttime = time + 0.1; //No spam.
					}
				} else if (self.nadeselected == 5) {
					if(time > self.nextnadeselecttime) {
					  sprint(self, sprintf("GrenadeSelected:^x2A2 [fragnades]^7\n"));
					  self.nextnadeselecttime = time + 0.1; //No spam.
					}
				} else if (self.nadeselected == 4) {
					if(time > self.nextnadeselecttime) {
					  sprint(self, sprintf("GrenadeSelected:^xF90 [AT mines]^7\n"));
					  self.nextnadeselecttime = time + 0.1; //No spam.
					}
				} else if (self.nadeselected == 3) {
					if(time > self.nextnadeselecttime) {
					  sprint(self, sprintf("GrenadeSelected:^xF20 [landmines]^7\n"));
					  self.nextnadeselecttime = time + 0.1; //No spam.
					}
				} else if (self.nadeselected == 2) {
					if(time > self.nextnadeselecttime) {
					  sprint(self, sprintf("GrenadeSelected:^x444 [smokenades]^7\n"));
					  self.nextnadeselecttime = time + 0.1; //No spam.
					}
				} else if (self.nadeselected == 1) {
					if(time > self.nextnadeselecttime) {
					  sprint(self, sprintf("GrenadeSelected:^xF4F [flashbangs]^7\n"));
					  self.nextnadeselecttime = time + 0.1; //No spam.
					}
				} else {
					if(time > self.nextnadeselecttime) {
					  sprint(self, sprintf("GrenadeSelected:^xFFF [unknown]^7\n"));
					  self.nextnadeselecttime = time + 0.1; //No spam.
					}
				}
				break;
			}
			sprint(self, "Usage:cmd grenadeselect\n");
			break;	
		case "multitool":
			NOT_CHEAT();
			if(argc >= 2)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				if (argv(1) == "blocktype") {
				  if (!autocvar_g_balance_multitool_blocktypedisabled) {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_blocktype == 1) {
							self.multitool_blocktype = 0;
							sprint(self, "MultiTool/UtiliTool Blocktype for building is now: WORLDONLY (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_blocktype = 1;
							sprint(self, "MultiTool/UtiliTool Blocktype for building is now: ANY\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				  }
				} else if (argv(1) == "placetype") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_placetype == 1) {
							self.multitool_placetype = 0;
							sprint(self, "MultiTool/UtiliTool Placetype for building is now: Down (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_placetype = 1;
							sprint(self, "MultiTool/UtiliTool Placetype for building is now: Forward+Down\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "doorcenter") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_doorcenter == 1) {
							self.multitool_doorcenter = 0;
						} else {
							self.multitool_doorcenter = 1;
						}
						
						if (self.multitool_doorcenter == autocvar_g_balance_multitool_doorcenterdefaultdisabled)
						{
							sprint(self, "MultiTool/UtiliTool will center doors if able\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							sprint(self, "MultiTool/UtiliTool will NOT center doors\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "furndrop") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_furndrop == 1) {
							self.multitool_furndrop = 0;
						} else {
							self.multitool_furndrop = 1;
						}
						
						if (self.multitool_furndrop == autocvar_g_balance_multitool_furndropdefaultdisabled)
						{
							sprint(self, "MultiTool/UtiliTool will drop furniture to floor\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							sprint(self, "MultiTool/UtiliTool will NOT drop furniture to floor\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "noturretsintowers") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_noturretsintowers == 1) {
							self.multitool_noturretsintowers = 0;
						} else {
							self.multitool_noturretsintowers = 1;
						}
						
						if (self.multitool_noturretsintowers)
						{
							sprint(self, "MultiTool built turret towers will OMIT autoturrets\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							sprint(self, "MultiTool built turret towers will ALLOW autoturrets\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "wallsnap") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_wallsnap == 1) {
							self.multitool_wallsnap = 0;
							sprint(self, "MultiTool/UtiliTool Wallsnap is now: 1.0X (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_wallsnap = 1;
							sprint(self, "MultiTool/UtiliTool Wallsnap is now: 0.5X\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "buildingsnap") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_buildingsnap == 1) {
							self.multitool_buildingsnap = 0;
							sprint(self, "MultiTool/UtiliTool Buildingsnap is now: Disabled (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_buildingsnap = 1;
							sprint(self, "MultiTool/UtiliTool Buildingsnap is now: Enabled (x64 snap)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "wallshift") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_wallshift == 1) {
							self.multitool_wallshift = 0;
							sprint(self, "MultiTool/UtiliTool Wallshift is now: 0.0X (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_wallshift = 1;
							sprint(self, "MultiTool/UtiliTool Wallshift is now: 0.5X\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "vaultwings") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_vaultwings == 1) {
							self.multitool_vaultwings = 0;
							sprint(self, "MultiTool/UtiliTool Vaultwings are now disabled (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_vaultwings = 1;
							sprint(self, "MultiTool/UtiliTool Vaultwings are now enabled and will touch adjoining castle walls\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "lockz") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_lockz == 1) {
							self.multitool_lockz = 0;
							sprint(self, "MultiTool/UtiliTool LockZ is now disabled (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_lockz = 1;
							sprint(self, "MultiTool/UtiliTool LockZ is now enabled, set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "frlock") {
					//Floor Rotation Lock
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_floorlockrot == 1) {
							self.multitool_floorlockrot = 0;
							sprint(self, "MultiTool/UtiliTool Floor Rotate Lock is now disabled (Default)\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_floorlockrot = 1;
							sprint(self, "MultiTool/UtiliTool Floor Rotate Lock is now enabled, set to: ",ftos(self.multitool_floorlockrotsetting)," angle_y\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "lockz2me") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						//print(ftos(self.origin_z), " Origin Z\n");
						//print(ftos(self.mins_z), " Mins Z\n");
						self.multitool_lockzsetting = self.origin_z + self.mins_z;
						if (self.multitool_lockz == 1) {
							sprint(self, "MultiTool/UtiliTool LockZ setting set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_lockz = 1;
							sprint(self, "MultiTool/UtiliTool LockZ is now enabled, set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "frlock2me") {
					//Floor Rotation Lock 2 Me
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						//print(ftos(self.origin_z), " Origin Z\n");
						//print(ftos(self.mins_z), " Mins Z\n");
						self.multitool_floorlockrotsetting = self.angles_y;
						if (self.multitool_floorlockrot == 1) {
							sprint(self, "MultiTool/UtiliTool Floor Rotate Lock setting set to: ",ftos(self.multitool_floorlockrotsetting)," angle_y\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_floorlockrot = 1;
							sprint(self, "MultiTool/UtiliTool Floor Rotate Lock is now enabled, set to: ",ftos(self.multitool_floorlockrotsetting)," angle_y\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "lockz2building") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (CmdLockZ2Building(self, 32)) {	
							if (self.multitool_lockz == 1) {
								sprint(self, "MultiTool/UtiliTool LockZ setting set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
							} else {
								self.multitool_lockz = 1;
								sprint(self, "MultiTool/UtiliTool LockZ is now enabled, set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
							}
						} else {
							sprint(self, "Could not find nearby building\n");
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "frlock2floor") {
					//Floor Rotation Lock 2 Floor
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (CmdFloorRotLock2Floor(self, 32)) {	
							if (self.multitool_floorlockrot == 1) {
								sprint(self, "MultiTool/UtiliTool Floor Rotation Lock setting set to: ",ftos(self.multitool_floorlockrotsetting)," angle_y\n");
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
							} else {
								self.multitool_floorlockrot = 1;
								sprint(self, "MultiTool/UtiliTool Floor Rotation Lock is now enabled, set to: ",ftos(self.multitool_floorlockrotsetting)," angle_y\n");
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
							}
						} else {
							sprint(self, "Could not find nearby floor\n");
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "lockzprev") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_lockzbefore) {
							self.multitool_lockzsetting = self.multitool_lockzbeforesetting;
							self.multitool_lockzbefore = 0;							
							sprint(self, "MultiTool/UtiliTool LockZ setting reset to: ",ftos(self.multitool_lockzsetting)," qunits\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							sprint(self, "PreviousLockZ has not been set. It is set when using the lockzplus64, lockzminus64, and setlockzmanually commands\n");
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "setlockzmanually") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							float mythenumber;
							mythenumber = stof(argv(2));
							if (mythenumber) {
								if not(self.multitool_lockzbefore) {
									self.multitool_lockzbeforesetting = self.multitool_lockzsetting;
									self.multitool_lockzbefore = 1;
									sprint(self, "PreviousLockZ set to: ",ftos(self.multitool_lockzbeforesetting)," qunits\n");
								}
								self.multitool_lockzsetting = mythenumber;
								sprint(self, "MultiTool/UtiliTool LockZ setting set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
							}
						} else {
							sprint(self, "Must set to some number\n");
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "lockzplus64") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							float mythenumber;
							mythenumber = stof(argv(2));
							if (mythenumber) {
								if not(self.multitool_lockzbefore) {
									self.multitool_lockzbeforesetting = self.multitool_lockzsetting;
									self.multitool_lockzbefore = 1;
									sprint(self, "PreviousLockZ set to: ",ftos(self.multitool_lockzbeforesetting)," qunits\n");
								}
								self.multitool_lockzsetting = self.multitool_lockzsetting + (64 * mythenumber);
								sprint(self, "MultiTool/UtiliTool LockZ setting set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
							} else {
								sprint(self, "You can set a number to multiply 64 (ex: 1, 2, 3 etc)\n");
							}
						} else {
							if not(self.multitool_lockzbefore) {
								self.multitool_lockzbeforesetting = self.multitool_lockzsetting;
								self.multitool_lockzbefore = 1;
								sprint(self, "PreviousLockZ set to: ",ftos(self.multitool_lockzbeforesetting)," qunits\n");
							}
							self.multitool_lockzsetting = self.multitool_lockzsetting + 64;
							sprint(self, "MultiTool/UtiliTool LockZ setting set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "lockzminus64") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							float mythenumber;
							mythenumber = stof(argv(2));
							if (mythenumber) {
								if not(self.multitool_lockzbefore) {
									self.multitool_lockzbeforesetting = self.multitool_lockzsetting;
									self.multitool_lockzbefore = 1;
									sprint(self, "PreviousLockZ set to: ",ftos(self.multitool_lockzbeforesetting)," qunits\n");
								}
								self.multitool_lockzsetting = self.multitool_lockzsetting - (64 * mythenumber);
								sprint(self, "MultiTool/UtiliTool LockZ setting set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
							} else {
								sprint(self, "You can set a number to multiply 64 (ex: 1, 2, 3 etc)\n");
							}
						} else {
							if not(self.multitool_lockzbefore) {
								self.multitool_lockzbeforesetting = self.multitool_lockzsetting;
								self.multitool_lockzbefore = 1;
								sprint(self, "PreviousLockZ set to: ",ftos(self.multitool_lockzbeforesetting)," qunits\n");
							}
							self.multitool_lockzsetting = self.multitool_lockzsetting - 64;
							sprint(self, "MultiTool/UtiliTool LockZ setting set to: ",ftos(self.multitool_lockzsetting)," qunits\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "select" || argv(1) == "selectteam") {
					//Adding "selectteam" here as it is a tab completion and a common error
					//Thus less annoyance to the user as he doesn't have to delete the team part
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							if (self.weaponname == "multitool") {
								local float pmtsetting;
								pmtsetting = self.multitool_setting;
								if (argv(2) == "block" || argv(2) == "blocks") {
									if (argv(3)) {
										if (argv(3) == "marble" || argv(3) == "marblewhite") {
											self.multitool_setting = MTB64_MARBLEWHITE;
											multitool_setting_print(self, 1, pmtsetting);	
										} else if (argv(3) == "sandstone") {
											self.multitool_setting = MTB64_SANDSTONE;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "graystone") {
											self.multitool_setting = MTB64_GRAYSTONE;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "polish") {
											self.multitool_setting = MTB64_POLISH;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "hedge") {
											self.multitool_setting = MTB64_HEDGE;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "castle") {
											self.multitool_setting = MTB64_CASTLE;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "curtain") {
											self.multitool_setting = MTB64_CURTAIN;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "wood1" || argv(3) == "log" || argv(3) == "logs") {
											self.multitool_setting = MTB64_WOOD1;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "wood2" || argv(3) == "wood") {
											self.multitool_setting = MTB64_WOOD2;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "corrugated" || argv(3) == "corrugatedroof" || argv(3) == "metal" || argv(3) == "metalroof") {
											self.multitool_setting = MTB64_SHINGLES;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "filled" || argv(3) == "pesant" || argv(3) == "cottage") {
											self.multitool_setting = MTB64_FILLED;
											multitool_setting_print(self, 1, pmtsetting);	
										} else if (argv(3) == "shingles") {
											self.multitool_setting = MTB64_SHINGLES2;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "stake" || argv(3) == "stakes" || argv(3) == "spike" || argv(3) == "spikes") {
											self.multitool_setting = MTB64_STAKES_WOOD1;
											multitool_setting_print(self, 1, pmtsetting);
										} else if ((argv(3) == "barbed" || argv(3) == "wire" || argv(3) == "barbedwire") && (!autocvar_g_balance_multitool_ancientonly))  {
											self.multitool_setting = MTB64_BWIRE;
											multitool_setting_print(self, 1, pmtsetting);	
										} else if (argv(3) == "window" || argv(3) == "windows" || argv(3) == "bars") {
											self.multitool_setting = MTB64_WINDOW_WOODBAR;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "door" || argv(3) == "doors") {
											self.multitool_setting = MTB64_DOOR_R_WOOD;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "furniture" || argv(3) == "furn" || argv(3) == "chair") {
											self.multitool_setting = MTB64_FURN_CHAIR_WOOD;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "bed") {
											self.multitool_setting = MTB64_FURN_BED_WOOD;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "table") {
											self.multitool_setting = MTB64_FURN_TABLE_WOOD;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "ironmaiden") {
											self.multitool_setting = MTB64_FURN_IRONMAIDEN;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "spikedrack") {
											self.multitool_setting = MTB64_FURN_SPIKEDRACK;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "impalementpole") {
											self.multitool_setting = MTB64_FURN_IMPALEMENTPOLE;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "ironbrazier") {
											self.multitool_setting = MTB64_FURN_IRONBRAZIER;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "gibbet") {
											self.multitool_setting = MTB64_FURN_GIBBET;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "platform" || argv(3) == "rise" || argv(3) == "raise") {
											self.multitool_setting = MTB64_PLATFORMWOOD_24;
											multitool_setting_print(self, 1, pmtsetting);
										} else if ((autocvar_g_balance_multitool_claimstones)
											&& (argv(3) == "claim" || argv(3) == "claimstone")) {
											self.multitool_setting = MTB64_CLAIMSTONE;
											multitool_setting_print(self, 1, pmtsetting);	
										} else {
											sprint(self, "Multi-tool Possible Selections: filled corrugated shingles curtain castle polish hedge graystone sandstone marble wood1 wood2 stakes window door\n");
										}
									} else {
										self.multitool_setting = MTB64FIRST;
										multitool_setting_print(self, 1, pmtsetting);
									}
								} else if (argv(2) == "door" || argv(2) == "doors") {
									//Common "incorrect" request, doors are under blocks but ...
									self.multitool_setting = MTB64_DOOR_R_WOOD;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "furniture" || argv(2) == "furn") {
									//Common "incorrect" request, furniture is under blocks but ...
									self.multitool_setting = MTB64_FURN_CHAIR_WOOD;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "ironmaiden" || argv(2) == "torture" || argv(2) == "torment" || argv(2) == "dungeon" || argv(2) == "duengon") {
									//Common "incorrect" request, furniture is under blocks but ...
									self.multitool_setting = MTB64_FURN_IRONMAIDEN;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "spikedrack") {
									//Common "incorrect" request, furniture is under blocks but ...
									self.multitool_setting = MTB64_FURN_SPIKEDRACK;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "impalementpole" || argv(2) == "impalement" || argv(2) == "impale") {
									//Common "incorrect" request, furniture is under blocks but ...
									self.multitool_setting = MTB64_FURN_IMPALEMENTPOLE;
									multitool_setting_print(self, 1, pmtsetting);								
								} else if (argv(2) == "ironbrazier" || argv(2) == "firepot" || argv(2) == "brazier" || argv(2) == "flame") {
									//Common "incorrect" request, furniture is under blocks but ...
									self.multitool_setting = MTB64_FURN_IRONBRAZIER;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "gibbet" || argv(2) == "ironcage" || argv(2) == "hangingcage" || argv(2) == "hanginginchains") {
									//Common "incorrect" request, furniture is under blocks but ...
									self.multitool_setting = MTB64_FURN_GIBBET;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "garrison" || argv(2) == "base") {
									//Common "incorrect" request,  ...
									self.multitool_setting = 4;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "castle" || argv(2) == "smallcastle") {
									//Common "incorrect" request, ...
									self.multitool_setting = 7;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "stronghold") {
									//Common "incorrect" request, ...
									self.multitool_setting = 5;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "keep") {
									//Common "incorrect" request, ...
									self.multitool_setting = 5;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "crusaderstronghold" || argv(2) == "crusadercastle"
									|| argv(2) == "crusader" || argv(2) == "crusade"
									 || argv(2) == "crusaderhold"
									 || argv(2) == "crusaderkeep") {
									//Common "incorrect" request, but ...
									self.multitool_setting = 27;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "jail" || argv(2) == "smalljail") {
									//Common "incorrect" request, ...
									self.multitool_setting = 23;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "gaol" || argv(2) == "prison") {
									//Common "incorrect" request, but ...
									self.multitool_setting = 22;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "house") {
									//Common "incorrect" request, ...
									self.multitool_setting = 20;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "barracks" || argv(2) == "barrack") {
									//Common "incorrect" request, ...
									self.multitool_setting = 13;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "arsenal" || argv(2) == "arsnel") {
									//Common "incorrect" request, ...
									self.multitool_setting = 12;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "tower" || argv(2) == "snipertower"
									|| argv(2) == "sniper" || argv(2) == "snipe") {
									//Common "incorrect" request, ...
									self.multitool_setting = -1;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "belltower" || argv(2) == "churchtower"
									|| argv(2) == "perch") {
									//Common "incorrect" request, ...
									self.multitool_setting = -5;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "church") {
									//Common "incorrect" request, ...
									self.multitool_setting = 14;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "japanesehouse"|| argv(2) == "nipponhouse") {
									//Common "incorrect" request, ...
									self.multitool_setting = -2;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "shrine") {
									//Common "incorrect" request, ...
									self.multitool_setting = -3;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "dojo") {
									//Common "incorrect" request, ...
									self.multitool_setting = -4;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "hangar" || argv(2) == "plane"
									|| argv(2) == "aeroplane" || argv(2) == "airplane"
									|| argv(2) == "biplane"
									|| argv(2) == "triplane"
									|| argv(2) == "sopwith"
									|| argv(2) == "fokker"
									|| argv(2) == "eindecker"
									|| argv(2) == "farman") {
									//Common "incorrect" request, ...
									self.multitool_setting = 15;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "tankhangar" || argv(2) == "tank") {
									//Common "incorrect" request, ...
									self.multitool_setting = 16;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "wall" || argv(2) == "walls") {
									if (argv(3)) {
										if (argv(3) == "hedge") {
											self.multitool_setting = 520;
											multitool_setting_print(self, 1, pmtsetting);	
										} else if (argv(3) == "brick") {
											self.multitool_setting = 530;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "palisade") {
											self.multitool_setting = 540;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "roman") {
											self.multitool_setting = 544;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "berm") {
											self.multitool_setting = 550;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "curtain") {
											self.multitool_setting = 560;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "castle") {
											self.multitool_setting = 570;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "polish") {
											self.multitool_setting = 580;
											multitool_setting_print(self, 1, pmtsetting);
										} else {
											sprint(self, "Multi-tool Possible Selections: hedge brick palisade roman berm curtain castle polish\n");
										}
									} else {
										self.multitool_setting = 520;
										multitool_setting_print(self, 1, pmtsetting);
									}
								} else if (argv(2) == "foundation" || argv(2) == "foundations") {
									self.multitool_setting = 630;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "bridge" || argv(2) == "bridges") {
									self.multitool_setting = 650;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "building" || argv(2) == "buildings") {
									self.multitool_setting = 1;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "floor" || argv(2) == "floors") {
									if (argv(3)) {
										if (argv(3) == "marble") {
											self.multitool_setting = -715; //Middle of Marbles
											multitool_setting_print(self, 1, pmtsetting);	
										} else if (argv(3) == "romanmarble" || argv(3) == "roman") {
											self.multitool_setting = -762; //Last of the red/white
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "granite") {
											self.multitool_setting = -674; //Middle of Granites
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "stone") {
											self.multitool_setting = -620;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "tile" || argv(3) == "tiles") {
											self.multitool_setting = -643; //Middle of tiles
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "stake" || argv(3) == "stakes") {
											self.multitool_setting = -609;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "spike" || argv(3) == "spikes") {
											self.multitool_setting = -610;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "spike" || argv(3) == "trap") {
											self.multitool_setting = -618;
											multitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "wood") {
											self.multitool_setting = -604; //Middle of wood floors
											multitool_setting_print(self, 1, pmtsetting);
										} else {
											sprint(self, "Multi-tool Possible Selections: wood stakes spikes trap tile stone granite marble romanmarble\n");
										}
									} else {
										self.multitool_setting = -603; //Middle of wood floors
										multitool_setting_print(self, 1, pmtsetting);
									}
								} else if (argv(2) == "forge" || argv(2) == "blacksmith" ) {
									self.multitool_setting = 24;
									multitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "belltower" || argv(2) == "btower" ) {
									self.multitool_setting = -5;
									multitool_setting_print(self, 1, pmtsetting);	
								} else if (argv(2) == "gun" || argv(2) == "ballista" || argv(2) == "mountedgun" || argv(2) == "pointdefense") {
									self.multitool_setting = 110;
									multitool_setting_print(self, 1, pmtsetting);
								} else if ((argv(2) == "barbed" || argv(2) == "wire" || argv(2) == "barbedwire") && (!autocvar_g_balance_multitool_ancientonly))  {
									self.multitool_setting = MTB64_BWIRE;
									multitool_setting_print(self, 1, pmtsetting);
								} else if ((autocvar_g_balance_multitool_claimstones)
									&& (argv(2) == "claim" || argv(2) == "claimstone")) {
									self.multitool_setting = MTB64_CLAIMSTONE;
									multitool_setting_print(self, 1, pmtsetting);	
								} else if (argv(2) == "none" || argv(2) == "nothing") {
									self.multitool_setting = 0;
									multitool_setting_print(self, 1, pmtsetting);
								} else {
									sprint(self, "Multi-tool Possible Selections: block wall foundation bridge building floor none\n");
								}  
							} else if (self.weaponname == "multitool2") {
								local float pmtsetting;
								pmtsetting = self.multitool_setting;
								if (argv(2) == "wall" || argv(2) == "walls") {
									self.multitool_setting = 1530;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "fence" || argv(2) == "fences") {
									self.multitool_setting = 1520;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "block" || argv(2) == "blocks") {
									if (argv(3)) {
										if (argv(3) == "concrete" || argv(3) == "cement") {
											self.multitool_setting = MTB64U_CONCRETE;
											utilitool_setting_print(self, 1, pmtsetting);	
										} else if (argv(3) == "metal" || argv(3) == "truss" || argv(3) == "metaltruss") {
											self.multitool_setting = MTB64U_METAL;
											utilitool_setting_print(self, 1, pmtsetting);	
										} else if (argv(3) == "concrete2" || argv(3) == "cement2" || argv(3) == "reenforcedconcrete") {
											self.multitool_setting = MTB64U_RCONCRETE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "window" || argv(3) == "windows") {
											self.multitool_setting = MTB64U_WINDOW_FUTURE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "xbeam" || argv(3) == "beam") {
											self.multitool_setting = MTB64U_XBEAM_UP;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "floor" || argv(3) == "floortruss") {
											self.multitool_setting = MTB64U_FLOOR_MTRUSS;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "platform" || argv(3) == "rise" || argv(3) == "raise") {
											self.multitool_setting = MTB64U_PLATFORM_24;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "barbed" || argv(3) == "wire" || argv(3) == "barbedwire") {
											self.multitool_setting = MTB64U_BWIRE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "door" || argv(3) == "doors") {
											self.multitool_setting = MTB64U_DOOR_R_PLAIN;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "archive" || argv(3) == "archivebox") {
											self.multitool_setting = MTB64U_ARCHIVEBOX;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "drum" || argv(3) == "metaldrum") {
											self.multitool_setting = MTB64U_INACT_OIL;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "gasoline" || argv(3) == "gas") {
											self.multitool_setting = MTB64U_ACT_OIL;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "explosive" || argv(3) == "explosives" || argv(3) == "demolition"  || argv(3) == "charge") {
											self.multitool_setting = MTB64U_ACT_EXPL;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "furniture" || argv(3) == "furn" || argv(3) == "chair") {
											self.multitool_setting = MTB64U_FURN_CHAIR;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "desk" || argv(3) == "table") {
											self.multitool_setting = MTB64U_FURN_DESK;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "schoolchair") {
											self.multitool_setting = MTB64U_FURN_SCHINTGRDESK;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "schooldesk") {
											self.multitool_setting = MTB64U_FURN_SCHDESKCHAIR;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "crate") {
											self.multitool_setting = MTB64U_FURN_CRATE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "server" || argv(3) == "computer") {
											self.multitool_setting = MTB64U_FURN_SERVER;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "toilet") {
											self.multitool_setting = MTB64U_FURN_TOILET2;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "stove") {
											self.multitool_setting = MTB64U_FURN_STOVE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "bed") {
											self.multitool_setting = MTB64U_FURN_BED;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "fridge" || argv(3) == "refrigerator") {
											self.multitool_setting = MTB64U_FURN_FRIDGE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinet") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINET1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcorner" || argv(3) == "cabinetcorner1" || argv(3) == "cornercabinet" || argv(3) == "cornercabinet1") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNER1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcaddycorner" || argv(3) == "cabinetcorner2" || argv(3) == "cornercabinet2" || argv(3) == "caddycornercabinet" || argv(3) == "caddycorner") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNER2;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinettop") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETTOP1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcornertop" || argv(3) == "cabinetcornertop1" || argv(3) == "cornertopcabinet" || argv(3) == "cornertopcabinet1") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNERTOP1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcaddycornertop" || argv(3) == "cabinetcornertop2" || argv(3) == "cornertopcabinet2" || argv(3) == "caddycornertopcabinet" || argv(3) == "caddycornertop") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNERTOP2;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if ((autocvar_g_balance_multitool_claimstones)
											&& (argv(3) == "claim" || argv(3) == "claimstone")) {
											self.multitool_setting = MTB64U_CLAIMSTONE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else {
											sprint(self, "Utili-tool Possible Selections: concrete concrete2 metal window xbeam floor barbed door metaldrum gasoline explosive\n");
										}
									} else {
										self.multitool_setting = MTB64UFIRST;
										utilitool_setting_print(self, 1, pmtsetting);
									}
								} else if (argv(2) == "door" || argv(2) == "doors") {
									//Common "incorrect" request, doors are under blocks but ...
									self.multitool_setting = MTB64U_DOOR_R_PLAIN;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "furniture" || argv(2) == "furn") {
									//Common "incorrect" request, furniture is under blocks but ...
									if (argv(3)) {
										if (argv(3) == "chair") {
											self.multitool_setting = MTB64U_FURN_CHAIR;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "desk" || argv(3) == "table") {
											self.multitool_setting = MTB64U_FURN_DESK;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "crate") {
											self.multitool_setting = MTB64U_FURN_CRATE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "server" || argv(3) == "computer") {
											self.multitool_setting = MTB64U_FURN_SERVER;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "toilet") {
											self.multitool_setting = MTB64U_FURN_TOILET2;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "stove") {
											self.multitool_setting = MTB64U_FURN_STOVE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "bed") {
											self.multitool_setting = MTB64U_FURN_BED;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "fridge" || argv(3) == "refrigerator") {
											self.multitool_setting = MTB64U_FURN_FRIDGE;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "lamp" || argv(3) == "light" || argv(3) == "streetlamp" || argv(3) == "streetlight") {
											self.multitool_setting = MTB64U_FURN_LAMP_STREET;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinet") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINET1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcorner" || argv(3) == "cabinetcorner1" || argv(3) == "cornercabinet" || argv(3) == "cornercabinet1") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNER1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcaddycorner" || argv(3) == "cabinetcorner2" || argv(3) == "cornercabinet2" || argv(3) == "caddycornercabinet" || argv(3) == "caddycorner") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNER2;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinettop") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETTOP1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcornertop" || argv(3) == "cabinetcornertop1" || argv(3) == "cornertopcabinet" || argv(3) == "cornertopcabinet1") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNERTOP1;
											utilitool_setting_print(self, 1, pmtsetting);
										} else if (argv(3) == "cabinetcaddycornertop" || argv(3) == "cabinetcornertop2" || argv(3) == "cornertopcabinet2" || argv(3) == "caddycornertopcabinet" || argv(3) == "caddycornertop") {
											self.multitool_setting = MTB64U_FURN_BSCKCABINETCORNERTOP2;
											utilitool_setting_print(self, 1, pmtsetting);
										} else {
											self.multitool_setting = MTB64U_FURN_CHAIR;
											utilitool_setting_print(self, 1, pmtsetting);
										}
									} else {
									self.multitool_setting = MTB64U_FURN_CHAIR;
									utilitool_setting_print(self, 1, pmtsetting);
									}
								} else if (argv(2) == "obstruction" || argv(2) == "obstructions" || argv(2) == "obs") {
									self.multitool_setting = 1550;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "turret" || argv(2) == "turrets") {
									self.multitool_setting = 1120;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "pointdefense" || argv(2) == "gun" || argv(2) == "mountedgun") {
									self.multitool_setting = 1110;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "foundation" || argv(2) == "foundations") {
									self.multitool_setting = 1630;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "bridge" || argv(2) == "bridges") {
									self.multitool_setting = 1650;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "vault" || argv(2) == "vaults") {
									self.multitool_setting = 1680;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "building" || argv(2) == "buildings" || argv(2) == "base" || argv(2) == "commandpost" || argv(2) == "command") {
									self.multitool_setting = 1001;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "glassbase") {
									self.multitool_setting = 1004;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "solar" || argv(2) == "solarpanel" || argv(2) == "energy" || argv(2) == "power" || argv(2) == "powerplant") {
									self.multitool_setting = 1510;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "apartment" || argv(2) == "apartments" || argv(2) == "apart" || argv(2) == "flats") {
									self.multitool_setting = 1012;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "shelter" || argv(2) == "house" || argv(2) == "hut" || argv(2) == "home") {
									self.multitool_setting = 1003;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "ammo" || argv(2) == "ammodepot" || argv(2) == "depot") {
									self.multitool_setting = 1009;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "storage" || argv(2) == "pile" || argv(2) == "stockpile") {
									self.multitool_setting = 1008;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "oil" || argv(2) == "oilpump" || argv(2) == "pump") {
									self.multitool_setting = 1015;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "tank" || argv(2) == "tankpad" || argv(2) == "tanks") {
									self.multitool_setting = 1007;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "truck" || argv(2) == "apcpad" || argv(2) == "apc") {
									self.multitool_setting = 1027;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "suit" || argv(2) == "suitpad" || argv(2) == "max" || argv(2) == "combatsuit" || argv(2) == "combatsuitpad") {
									self.multitool_setting = 1035;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "bulldozer") {
									self.multitool_setting = 1029;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "battery") {
									self.multitool_setting = 1030;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "distrib" || argv(2) == "oilcontrol" || argv(2) == "oildistrib") {
									self.multitool_setting = 1033;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "smalloiltank" || argv(2) == "smalloil" || argv(2) == "oilsmall") {
									self.multitool_setting = 1032;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "oiltank") {
									self.multitool_setting = 1010;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "energytank") {
									self.multitool_setting = 1011;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "furnace") {
									self.multitool_setting = 1021;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "factory") {
									self.multitool_setting = 1019;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "chem" || argv(2) == "chemical") {
									self.multitool_setting = 1017;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "sentry" || argv(2) == "sentrytower") {
									self.multitool_setting = 1020;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "fire" || argv(2) == "firesupression" || argv(2) == "firestation" || argv(2) == "heli") {
									self.multitool_setting = 1023;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "forge" || argv(2) == "hammerforge") {
									self.multitool_setting = 1036;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "observation" || argv(2) == "observationtower") {
									self.multitool_setting = 1037;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "greenhouse" || argv(2) == "farm" || argv(2) == "green" || argv(2) == "food") {
									self.multitool_setting = 1501;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "recruitment" || argv(2) == "solider" || argv(2) == "soliders" || argv(2) == "recruitmentpost") {
									self.multitool_setting = 1502;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "shield" || argv(2) == "shieldgen" || argv(2) == "orb") {
									self.multitool_setting = 1002;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "shield2" || argv(2) == "shieldgen2" || argv(2) == "canopyshield" || argv(2) == "canopy") {
									self.multitool_setting = 1031;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "milhangar" || argv(2) == "plane" || argv(2) == "air" || argv(2) == "airport" || argv(2) == "hangar") {
									self.multitool_setting = 1005;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "security" || argv(2) == "securitybuilding" || argv(2) == "jail" || argv(2) == "prison") {
									self.multitool_setting = 1006;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "mannable" || argv(2) == "aa" || argv(2) == "aaa") {
									self.multitool_setting = 1123; //middle of it
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "toweraa" || argv(2) == "toweraaa" || argv(2) == "antiair" || argv(2) == "twraa") {
									self.multitool_setting = 1131;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "turret" || argv(2) == "auto" || argv(2) == "flac") {
									self.multitool_setting = 1013;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "mlrs") {
									self.multitool_setting = 1014;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "shlac" || argv(2) == "autoshlac" || argv(2) == "laser") {
									self.multitool_setting = 1038;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "light" || argv(2) == "lamp" || argv(2) == "streetlight" || argv(2) == "streetlamp") {
									self.multitool_setting = MTB64U_FURN_LAMP_STREET;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if ((autocvar_g_balance_multitool_claimstones)
									&& (argv(2) == "claim" || argv(2) == "claimstone")) {
									self.multitool_setting = MTB64U_CLAIMSTONE;
									utilitool_setting_print(self, 1, pmtsetting);
								} else if (argv(2) == "none" || argv(2) == "nothing") {
									self.multitool_setting = 0;
									utilitool_setting_print(self, 1, pmtsetting);
								} else {
									sprint(self, "Utili-tool Possible Selections: block fence wall foundation bridge turret building obstruction none\n");
								}  
							} else {
								//Future interests
							}
						} else {
							if (self.weaponname == "multitool") {
								sprint(self, "Must set selection\nMulti-tool Possible Selections: block wall foundation bridge building floor none\n");
							} else if (self.weaponname == "multitool2") {
								sprint(self, "Must set selection\nUtili-tool Possible Selections: block fence wall foundation bridge turret building obstruction none\n");
							} 
						}
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "flipblock") {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (self.multitool_flipblock) {
							self.multitool_flipblock = 0;
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						} else {
							self.multitool_flipblock = 1;
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
						sprint(self, "Rotate Block X set to ", ftos(self.multitool_flipblock * 180),"\n");
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "marbleblockcolor" || argv(1) == "marblecolor" || argv(1) == "marbleblockcolour" || argv(1) == "marblecolour"
				||
				((argv(1) == "color" || argv(1) == "color") &&
				((self.multitool_setting >= MTB64_MARBLEWHITE && self.multitool_setting <= MTB64_MARBLEWHITELAST)
				|| self.multitool_setting == MTB64_FURN_GREEKPILLARM
				|| self.multitool_setting == MTB64_FURN_ROMANCOLUMNM)
				)
				) {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							//Causes others not to beable to join server. Now does JIT precache only of used models in multitool_spawnturret()
							//if (mt_marble_precache != 1) {
							//	multitool_precache_extra();
							//	mt_marble_precache = 1;
							//	print("precached extra (causes problems when at map start, too many)\n");
							//}
							if (argv(2) == "0" || argv(2) == "white" || argv(2) == "White") {
								self.multitool_marblecolor = 0;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to White (Default)\n");
							
							} else if (argv(2) == "1" || argv(2) == "nero" || argv(2) == "Nero" || argv(2) == "black" || argv(2) == "Black") {
								self.multitool_marblecolor = 1;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Nero\n");
							
							} else if (argv(2) == "2" || argv(2) == "green" || argv(2) == "Green" ) {
								self.multitool_marblecolor = 2;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Green\n");
							} else if (argv(2) == "3" || argv(2) == "red" || argv(2) == "Red" ) {
								self.multitool_marblecolor = 3;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Red\n");
							} else if (argv(2) == "4" || argv(2) == "veinytan" || argv(2) == "VeinyTan" ) {
								self.multitool_marblecolor = 4;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to VeinyTan\n");
							} else if (argv(2) == "5" || argv(2) == "cyan" || argv(2) == "Cyan" ) {
								self.multitool_marblecolor = 5;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Cyan\n");
							} else if (argv(2) == "6" || argv(2) == "gray" || argv(2) == "Gray" || argv(2) == "grey" || argv(2) == "Grey" ) {
								self.multitool_marblecolor = 6;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Gray\n");
							} else if (argv(2) == "7" || argv(2) == "brown" || argv(2) == "brown") {
								self.multitool_marblecolor = 7;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Brown\n");
							} else if (argv(2) == "8" || argv(2) == "lightblue" || argv(2) == "lightblue") {
								self.multitool_marblecolor = 8;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to LightBlue\n");
							} else if (argv(2) == "9" || argv(2) == "jade" || argv(2) == "jade") {
								self.multitool_marblecolor = 9;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Jade\n");
							} else if (argv(2) == "10" || argv(2) == "olive" || argv(2) == "Olive") {
								self.multitool_marblecolor = 10;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Olive\n");
							} else if (argv(2) == "11" || argv(2) == "yellow" || argv(2) == "Yellow") {
								self.multitool_marblecolor = 11;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Yellow\n");
							} else if (argv(2) == "12" || argv(2) == "pink" || argv(2) == "Pink") {
								self.multitool_marblecolor = 12;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Pink\n");
							} else if (argv(2) == "13" || argv(2) == "softwhite" || argv(2) == "SoftWhite" || argv(2) == "white2") {
								self.multitool_marblecolor = 13;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to SoftWhite\n");
							} else if (argv(2) == "14" || argv(2) == "softgray" || argv(2) == "SoftGray" || argv(2) == "gray2") {
								self.multitool_marblecolor = 14;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to SoftGray\n");
							} else if (argv(2) == "15" || argv(2) == "onyxgreen" || argv(2) == "OnyxGreen" || argv(2) == "ygreen") {
								self.multitool_marblecolor = 15;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to OnyxGreen\n");
							} else if (argv(2) == "16" || argv(2) == "cream" || argv(2) == "Cream") {
								self.multitool_marblecolor = 16;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Cream\n");
							} else if (argv(2) == "17" || argv(2) == "lightpink" || argv(2) == "LightPink") {
								self.multitool_marblecolor = 17;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to LightPink\n");
							} else if (argv(2) == "18" || argv(2) == "tan" || argv(2) == "Tan") {
								self.multitool_marblecolor = 18;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Tan\n");
							} else if (argv(2) == "19" || argv(2) == "pacifictan" || argv(2) == "PacificTan") {
								self.multitool_marblecolor = 19;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to PacificTan\n");
							} else if (argv(2) == "20" || argv(2) == "peach" || argv(2) == "Peach") {
								self.multitool_marblecolor = 20;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to Peach\n");
							} else if (argv(2) == "21" || argv(2) == "mystic" || argv(2) == "Mystic" || argv(2) == "mysticgray" || argv(2) == "MysticGray") {
								self.multitool_marblecolor = 21;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to MysticGray\n");
							} else if (argv(2) == "22" || argv(2) == "wood" || argv(2) == "Wood" || argv(2) == "petrifiedwood" || argv(2) == "PetrifiedWood") {
								self.multitool_marblecolor = 22;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Marble Block Color set to PetrifiedWood\n");
							
							} else {
								sprint(self, "Marble Color Selection Choices:\n^xFFF 0 white,^x000 1 nero,^x0D0 2 green,^xD00 3 red,^xFCC 4 veinytan,\n^x0DD 5 cyan,^x999 6 gray,^x550 7 brown,^xAAF 8 lightblue,\n^x0F5 9 jade,^x6F5 10 olive,^xFF0 11 yellow,^xFCC 12 pink,\n^xFFF 13 softwhite,^xAAA 14 softgray,^xAF0 15 onyxgreen,^xFDD 16 cream,\n^xFED 17 lightpink,^xA86 18 tan,^xA85 19 pacifictan,^xA75 20 peach,\n^xAA9 21 mysticgray,^xCC4 22 petrifiedwood^7\n");
							}
						} else {
								sprint(self, "Marble Color Selection Choices:\n^xFFF 0 white,^x000 1 nero,^x0D0 2 green,^xD00 3 red,^xFCC 4 veinytan,\n^x0DD 5 cyan,^x999 6 gray,^x550 7 brown,^xAAF 8 lightblue,\n^x0F5 9 jade,^x6F5 10 olive,^xFF0 11 yellow,^xFCC 12 pink,\n^xFFF 13 softwhite,^xAAA 14 softgray,^xAF0 15 onyxgreen,^xFDD 16 cream,\n^xFED 17 lightpink,^xA86 18 tan,^xA85 19 pacifictan,^xA75 20 peach,\n^xAA9 21 mysticgray,^xCC4 22 petrifiedwood^7\n");
						}
						
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "castleblockcolor" || argv(1) == "castlecolor" || argv(1) == "castleblockcolour" || argv(1) == "castlecolour" 
				||
				((argv(1) == "color" || argv(1) == "color") &&
				((self.multitool_setting == MTB64_CASTLESQUARE)
				|| (self.multitool_setting >= 570 && self.multitool_setting <= 579)
				|| (multitool_isbuildingcurtainstone(self.multitool_setting))
				|| (multitool_isbuildingcastlestoneextra(self.multitool_setting))
				|| (self.multitool_setting == 6) || (self.multitool_setting == 8)
				|| (self.multitool_setting == 7) || (self.multitool_setting == 10)
				|| (self.multitool_setting == 27)
				|| (self.multitool_setting >= 660 && self.multitool_setting <= 669)
				|| (self.multitool_setting >= 10700 && self.multitool_setting <= 10799) 
				|| (self.multitool_setting >= MTB64_CASTLE && self.multitool_setting <= MTB64_CASTLELAST)))
				) {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (autocvar_g_suggested_multitool_castlecolor_force) {
							sprint(self, "Castle Color Selection Is Disabled\n");
						} else if (argv(2)) {
							//Note: We precache these just in time,
							//precaching all at once will cause new clients not to beable to join
							//do to a string overflow when they are told of all the things they need to precache
							if (argv(2) == "0" || argv(2) == "dark" || argv(2) == "Dark") {
								self.multitool_castlecolor = 0;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to Dark (Default)\n");
							
							} else if (argv(2) == "1" || argv(2) == "tan" || argv(2) == "Tan") {
								self.multitool_castlecolor = 1;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to Tan\n");
							
							} else if (argv(2) == "2" || argv(2) == "white" || argv(2) == "White") {
								self.multitool_castlecolor = 2;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to White\n");
								
							} else if (argv(2) == "3" || argv(2) == "green" || argv(2) == "Green") {
								self.multitool_castlecolor = 3;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to Green\n");
							
							} else if (argv(2) == "4" || argv(2) == "brown" || argv(2) == "Brown") {
								self.multitool_castlecolor = 4;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to Brown\n");
							
							} else if (argv(2) == "5" || argv(2) == "lighttan" || argv(2) == "LightTan") {
								self.multitool_castlecolor = 5;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to LightTan\n");
								
							} else if (argv(2) == "6" || argv(2) == "black" || argv(2) == "Black") {
								self.multitool_castlecolor = 6;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to Black\n");
								
							} else if (argv(2) == "7" || argv(2) == "mauve" || argv(2) == "Mauve") {
								self.multitool_castlecolor = 7;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to Mauve\n");
							
							} else if (argv(2) == "8" || argv(2) == "pink" || argv(2) == "Pink") {
								self.multitool_castlecolor = 8;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Castle Block Color set to Pink\n");
								
							} else {
								sprint(self, "Castle Color Selection Choices:\n^x444 0 dark,^xA86 1 tan,^xFFF 2 white,^x4D4 3 green,^x550 4 brown,^xDCA 5 lighttan,^x000 6 black,^x424 7 mauve,^xFAA 8 pink,^7\n");
							}
						} else {
								sprint(self, "Castle Color Selection Choices:\n^x444 0 dark,^xA86 1 tan,^xFFF 2 white,^x4D4 3 green,^x550 4 brown,^xDCA 5 lighttan,^x000 6 black,^x424 7 mauve,^xFAA 8 pink,^7\n");
						}
						
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "sandstoneblockcolor" || argv(1) == "sandstonecolor" || argv(1) == "sandstoneblockcolour" || argv(1) == "sandstonecolour"
				||
				((argv(1) == "color" || argv(1) == "color") &&
				(self.multitool_setting >= MTB64_SANDSTONE && self.multitool_setting <= MTB64_SANDSTONELAST))
				) {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							//Note: We precache these just in time,
							//precaching all at once will cause new clients not to beable to join
							//do to a string overflow when they are told of all the things they need to precache
							if (argv(2) == "0" || argv(2) == "lighttan" || argv(2) == "LightTan") {
								self.multitool_sstonecolor = 0;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "SandStone Block Color set to LightTan (Default)\n");
							
							} else if (argv(2) == "1" || argv(2) == "tan" || argv(2) == "Tan") {
								self.multitool_sstonecolor = 1;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "SandStone Block Color set to Tan\n");
							
							} else if (argv(2) == "2" || argv(2) == "gray" || argv(2) == "gray") {
								self.multitool_sstonecolor = 2;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "SandStone Block Color set to Gray\n");
								
							} else if (argv(2) == "3" || argv(2) == "yellow" || argv(2) == "Yellow") {
								self.multitool_sstonecolor = 3;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "SandStone Block Color set to Yellow\n");
							
							} else if (argv(2) == "4" || argv(2) == "black" || argv(2) == "black") {
								self.multitool_sstonecolor = 4;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "SandStone Block Color set to Black\n");
							
							} else if (argv(2) == "5" || argv(2) == "blue" || argv(2) == "Blue" || argv(2) == "bluestone" || argv(2) == "Bluestone") {
								self.multitool_sstonecolor = 5;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "SandStone Block Color set to BlueStone\n");
							} else {
								sprint(self, "SandStone Color Selection Choices:\n^xDCA 0 lighttan,^xA86 1 tan,^x999 2 gray,^xAA0 3 yellow,^x111 4 black,^x00A 5 bluestone,^7\n");
							}
						} else {
								sprint(self, "SandStone Color Selection Choices:\n^xDCA 0 lighttan,^xA86 1 tan,^x999 2 gray,^xAA0 3 yellow,^x111 4 black,^x00A 5 bluestone,^7\n");
						}
						
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "woodblockcolor" || argv(1) == "woodcolor" || argv(1) == "woodblockcolour" || argv(1) == "woodcolour" 
				||
				((argv(1) == "color" || argv(1) == "color") &&
				((self.multitool_setting >= MTB64_WOOD1 && self.multitool_setting <= MTB64_WOOD1LAST)
				|| (self.multitool_setting == MTB64U_FURN_OMLCHAIR
					|| self.multitool_setting == MTB64U_FURN_MLHSKCHAIR
					|| self.multitool_setting == MTB64U_FURN_TRIBECACHAIR
					|| self.multitool_setting == MTB64U_FURN_BARCELONACHAIR
					|| self.multitool_setting == MTB64U_FURN_MGSTDESK
					|| self.multitool_setting == MTB64U_FURN_MGSTDESKFLAT
					|| self.multitool_setting == MTB64U_FURN_MGSTDESKFULLCORNER)))
				) {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							if (argv(2) == "1" || argv(2) == "orange" || argv(2) == "Orange") {
								self.multitool_woodcolor = 1;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Orange\n");
							
							} else if (argv(2) == "2" || argv(2) == "cyan" || argv(2) == "Cyan") {
								self.multitool_woodcolor = 2;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Cyan\n");
							
							} else if (argv(2) == "3" || argv(2) == "green" || argv(2) == "Green") {
								self.multitool_woodcolor = 3;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Green\n");
								
							} else if (argv(2) == "4" || argv(2) == "red" || argv(2) == "Red") {
								self.multitool_woodcolor = 4;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Red\n");
								
							} else if (argv(2) == "5" || argv(2) == "blue" || argv(2) == "Blue") {
								self.multitool_woodcolor = 5;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Blue\n");
							
							} else if (argv(2) == "6" || argv(2) == "lightblue" || argv(2) == "Lightblue" || argv(2) == "LightBlue") {
								self.multitool_woodcolor = 6;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to LightBlue\n");
							
							} else if (argv(2) == "7" || argv(2) == "yellow" || argv(2) == "Yellow") {
								self.multitool_woodcolor = 7;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Yellow\n");
							
							} else if (argv(2) == "8" || argv(2) == "purple" || argv(2) == "Purple") {
								self.multitool_woodcolor = 8;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Purple\n");
							
							} else if (argv(2) == "9" || argv(2) == "magenta" || argv(2) == "Magenta") {
								self.multitool_woodcolor = 9;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Magenta\n");
							
							} else if (argv(2) == "10" || argv(2) == "rose" || argv(2) == "Rose") {
								self.multitool_woodcolor = 10;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Rose\n");
							
							} else if (argv(2) == "11" || argv(2) == "blue2" || argv(2) == "Blue2") {
								self.multitool_woodcolor = 11;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Blue2\n");
								
							} else if (argv(2) == "12" || argv(2) == "yellow2" || argv(2) == "Yellow2") {
								self.multitool_woodcolor = 12;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Yellow2\n");
								
							} else if (argv(2) == "13" || argv(2) == "blue3" || argv(2) == "Blue3") {
								self.multitool_woodcolor = 13;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Blue3\n");
							
							} else if (argv(2) == "14" || argv(2) == "orange2" || argv(2) == "Orange2") {
								self.multitool_woodcolor = 14;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Orange2\n");
							
							} else if (argv(2) == "15" || argv(2) == "cycle" || argv(2) == "Cycle" || argv(2) == "CYCLE") {
								self.multitool_woodcolor = 15;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to CYCLE\n");
								
							} else if (argv(2) == "16" || argv(2) == "white" || argv(2) == "White") {
								self.multitool_woodcolor = 16;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to White\n");
								
							} else if (argv(2) == "17" || argv(2) == "cycle2" || argv(2) == "Cycle2") {
								self.multitool_woodcolor = 17;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Cycle2\n");
							
							} else if (argv(2) == "-10" || argv(2) == "player" || argv(2) == "team" || argv(2) == "Player" || argv(2) == "Team" || argv(2) == "PLAYERCOLOR" || argv(2) == "TEAMCOLOR" || argv(2) == "playercolor" || argv(2) == "teamcolor" || argv(2) == "Playercolor" || argv(2) == "Teamcolor" || argv(2) == "PlayerColor" || argv(2) == "TeamColor") {
								self.multitool_woodcolor = -10;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to PLAYERCOLOR/TEAMCOLOR\n");
							} else if (argv(2) == "0" || argv(2) == "none" || argv(2) == "nothing" ) {
								self.multitool_woodcolor = 0;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Wood Block Color set to Nothing (Default)\n");
							} else {
								if ((self.weaponname == "multitool2") && 
								(self.multitool_setting == MTB64U_FURN_BSCKCABINET1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOP1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPDEEP1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPDEEPSHORT1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPSHORT1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPSHORTSHELVES1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINET2
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINET3
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINET4
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNER1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNER2
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOP1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOP2
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOPDEEP1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOPDEEP2
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETBAR1
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETBARENDR
								|| self.multitool_setting == MTB64U_FURN_BSCKCABINETBARENDL))
								{
									sprint(self, "Wood Color Selection Choices (for Basic Cabinets):\n^xFFF  0 Light^7\n^x222  1 Dark Metal with ^x440C^x404O^x044L^x400O^x004R^7\n^x555  2 Corrugated Metal and Wood^7\n^x777  3 Rustic Wood^7\n^x900  4 Retro Red^7\n^x0A7  5 Retro ^xAA0C^xA0AO^x0AAL^xA00O^x00AR^7\n^xFFF  6 White Plus ^xAA0C^xA0AO^x0AAL^xA00O^x00AR^7\n^x852  7 Wood and White^7\n^xA70  8 Butcher Block Top^7\n");
								} else if ((self.weaponname == "multitool2") && 
								(self.multitool_setting == MTB64U_FURN_OMLCHAIR
									|| self.multitool_setting == MTB64U_FURN_MLHSKCHAIR
									|| self.multitool_setting == MTB64U_FURN_TRIBECACHAIR
									|| self.multitool_setting == MTB64U_FURN_BARCELONACHAIR))
								{
									sprint(self, "Wood Color Selection Choices (for Modern Leather Chair):\n^xFFF  0 White Leather^7\n^x531  1 Brown Leather^7\n^x000  2 Black Leather^7\n^xFFC  3 Creme Leather^7\n^x900  4 Red Leather^7\n^x009  5 Blue Leather\n^x777  6 Grey Leather\n");
								} else if ((self.weaponname == "multitool2") && 
								(self.multitool_setting == MTB64U_FURN_DESK
									|| self.multitool_setting == MTB64U_FURN_MGSTDESK
									|| self.multitool_setting == MTB64U_FURN_MGSTDESKFULLCORNER))
								{
									sprint(self, "Wood Color Selection Choices (for Modern Metal and Glass Desk):\n^xAAA  0 Grey^7\n^xFFF  1 White\n^x222  2 Black^7\n^x531  3 Derelict^7\n");
								
								} else {
									sprint(self, "Wood Color Selection Choices:\n^x930 1 orange,^x095 2 cyan,^x090 3 green,^x900 4 red,^x069 5 blue,\n^x099 6 lightblue,^x590 7 yellow,^x509 8 purple,^x909 9 magenta,^x905 10 rose,\n^x009 11 blue2 ,^x990 12 yellow2,^x039 13 blue3,^x960 14 orange2,^x444 15 ^x440c^x404y^x044c^x400l^x004e,\n^xFFF 16 white,^x111 17 cycle2,^7 -10 playercolor, 0 none\n");
								}
							}
						} else if (self.multitool_woodcolor == -10) {
							self.multitool_woodcolor = 0;
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
							sprint(self, "Wood Block Color set to Nothing (Default)\n");
						} else {
							self.multitool_woodcolor = -10;
							sprint(self, "Wood Block Color set to PLAYERCOLOR/TEAMCOLOR\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
						
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "flamecolor" || argv(1) == "flamecolour" || argv(1) == "flamecolor" || argv(1) == "flamecolour"
				|| 
				((argv(1) == "color" || argv(1) == "color") &&
				(self.multitool_setting == MTB64_FURN_IRONBRAZIER
				))
				) {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							if (argv(2) == "1" || argv(2) == "orange" || argv(2) == "Orange") {
								self.multitool_flamecolor = 1;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Orange\n");
							
							} else if (argv(2) == "2" || argv(2) == "cyan" || argv(2) == "Cyan") {
								self.multitool_flamecolor = 2;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Cyan\n");
							
							} else if (argv(2) == "3" || argv(2) == "green" || argv(2) == "Green") {
								self.multitool_flamecolor = 3;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Green\n");
								
							} else if (argv(2) == "4" || argv(2) == "red" || argv(2) == "Red") {
								self.multitool_flamecolor = 4;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Red\n");
								
							} else if (argv(2) == "5" || argv(2) == "blue" || argv(2) == "Blue") {
								self.multitool_flamecolor = 5;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Blue\n");
							
							} else if (argv(2) == "6" || argv(2) == "lightblue" || argv(2) == "Lightblue" || argv(2) == "LightBlue") {
								self.multitool_flamecolor = 6;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to LightBlue\n");
							
							} else if (argv(2) == "7" || argv(2) == "yellow" || argv(2) == "Yellow") {
								self.multitool_flamecolor = 7;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Yellow\n");
							
							} else if (argv(2) == "8" || argv(2) == "purple" || argv(2) == "Purple") {
								self.multitool_flamecolor = 8;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Purple\n");
							
							} else if (argv(2) == "9" || argv(2) == "magenta" || argv(2) == "Magenta") {
								self.multitool_flamecolor = 9;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Magenta\n");
							
							} else if (argv(2) == "10" || argv(2) == "rose" || argv(2) == "Rose") {
								self.multitool_flamecolor = 10;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Rose\n");
							
							} else if (argv(2) == "11" || argv(2) == "blue2" || argv(2) == "Blue2") {
								self.multitool_flamecolor = 11;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Blue2\n");
								
							} else if (argv(2) == "12" || argv(2) == "yellow2" || argv(2) == "Yellow2") {
								self.multitool_flamecolor = 12;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Yellow2\n");
								
							} else if (argv(2) == "13" || argv(2) == "blue3" || argv(2) == "Blue3") {
								self.multitool_flamecolor = 13;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Blue3\n");
							
							} else if (argv(2) == "14" || argv(2) == "orange2" || argv(2) == "Orange2") {
								self.multitool_flamecolor = 14;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Orange2\n");
							
							} else if (argv(2) == "15" || argv(2) == "cycle" || argv(2) == "Cycle" || argv(2) == "CYCLE") {
								self.multitool_flamecolor = 15;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to CYCLE\n");
								
							} else if (argv(2) == "16" || argv(2) == "white" || argv(2) == "White") {
								self.multitool_flamecolor = 16;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to White\n");
								
							} else if (argv(2) == "17" || argv(2) == "cycle2" || argv(2) == "Cycle2") {
								self.multitool_flamecolor = 17;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Cycle2\n");
							
							} else if (argv(2) == "-10" || argv(2) == "player" || argv(2) == "team" || argv(2) == "Player" || argv(2) == "Team" || argv(2) == "PLAYERCOLOR" || argv(2) == "TEAMCOLOR" || argv(2) == "playercolor" || argv(2) == "teamcolor" || argv(2) == "Playercolor" || argv(2) == "Teamcolor" || argv(2) == "PlayerColor" || argv(2) == "TeamColor") {
								self.multitool_flamecolor = -10;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to PLAYERCOLOR/TEAMCOLOR\n");
							} else if (argv(2) == "0" || argv(2) == "none" || argv(2) == "nothing" ) {
								self.multitool_flamecolor = 0;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Flame Color set to Nothing (Default)\n");
							} else {
								sprint(self, "Roof Color Selection Choices:\n^x930 1 orange,^x095 2 cyan,^x090 3 green,^x900 4 red,^x069 5 blue,\n^x099 6 lightblue,^x590 7 yellow,^x509 8 purple,^x909 9 magenta,^x905 10 rose,\n^x009 11 blue2 ,^x990 12 yellow2,^x039 13 blue3,^x960 14 orange2,^x444 15 ^x440c^x404y^x044c^x400l^x004e,\n^xFFF 16 white,^x111 17 cycle2,^7 -10 playercolor, 0 none\n");
							}
						} else if (self.multitool_flamecolor == -10) {
							self.multitool_flamecolor = 0;
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
							sprint(self, "Flame Color set to Nothing (Default)\n");
						} else {
							self.multitool_flamecolor = -10;
							sprint(self, "Flame Color set to PLAYERCOLOR/TEAMCOLOR\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
						
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}
				} else if (argv(1) == "roofblockcolor" || argv(1) == "roofblockcolour" || argv(1) == "roofcolor" || argv(1) == "roofcolour"
				|| 
				((argv(1) == "color" || argv(1) == "color") &&
				((self.multitool_setting >= MTB64_SHINGLES && self.multitool_setting <= MTB64_SHINGLESLAST)
				|| (self.multitool_setting >= MTB64_SHINGLES2 && self.multitool_setting <= MTB64_SHINGLES2LAST)
				|| self.multitool_setting == MTB64_FURN_CHAIR_FANCY1 || self.multitool_setting == MTB64_FURN_CHAIR_FANCY2
				|| self.multitool_setting == MTB64_FURN_CHAIR_FANCY3
				|| self.multitool_setting == MTB64_FURN_CHAISELOUNGE
				|| self.multitool_setting == MTB64U_FURN_STOVE2 || self.multitool_setting == MTB64U_FURN_FRIDGE3
				|| self.multitool_setting == MTB64U_FURN_SOFA_FOAM || self.multitool_setting == MTB64U_FURN_BED_FOAM
				|| self.multitool_setting == MTB64U_FURN_SOFA_TARTAN
				|| self.multitool_setting == MTB64U_FURN_SOFA_POOFY
				|| self.multitool_setting == MTB64U_FURN_SOFA_NORM
				|| self.multitool_setting == MTB64U_FURN_SCHAIR
				|| self.multitool_setting == MTB64U_FURN_CSTOOL
				|| self.multitool_setting == MTB64U_FURN_OMLCHAIR2
				|| self.multitool_setting == MTB64U_FURN_RETROCHAIR
				|| self.multitool_setting == MTB64U_FURN_PLSCHAIR
				|| self.multitool_setting == MTB64U_FURN_SCHINTGRDESK
				|| self.multitool_setting == MTB64U_FURN_SCHDESKCHAIR
				|| self.multitool_setting == MTB64U_FURN_RETROTABLE
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINET1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOP1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPDEEP1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPDEEPSHORT1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPSHORT1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETTOPSHORTSHELVES1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINET2
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINET3
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINET4
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNER1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNER2
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOP1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOP2
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOPDEEP1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETCORNERTOPDEEP2
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETBAR1
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETBARENDR
				|| self.multitool_setting == MTB64U_FURN_BSCKCABINETBARENDL
				))
				) {
					if (self.weaponname == "multitool"
					|| self.weaponname == "multitool2")
					{
						if (argv(2)) {
							if (argv(2) == "1" || argv(2) == "orange" || argv(2) == "Orange") {
								self.multitool_roofcolor = 1;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Orange\n");
							
							} else if (argv(2) == "2" || argv(2) == "cyan" || argv(2) == "Cyan") {
								self.multitool_roofcolor = 2;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Cyan\n");
							
							} else if (argv(2) == "3" || argv(2) == "green" || argv(2) == "Green") {
								self.multitool_roofcolor = 3;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Green\n");
								
							} else if (argv(2) == "4" || argv(2) == "red" || argv(2) == "Red") {
								self.multitool_roofcolor = 4;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Red\n");
								
							} else if (argv(2) == "5" || argv(2) == "blue" || argv(2) == "Blue") {
								self.multitool_roofcolor = 5;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Blue\n");
							
							} else if (argv(2) == "6" || argv(2) == "lightblue" || argv(2) == "Lightblue" || argv(2) == "LightBlue") {
								self.multitool_roofcolor = 6;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to LightBlue\n");
							
							} else if (argv(2) == "7" || argv(2) == "yellow" || argv(2) == "Yellow") {
								self.multitool_roofcolor = 7;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Yellow\n");
							
							} else if (argv(2) == "8" || argv(2) == "purple" || argv(2) == "Purple") {
								self.multitool_roofcolor = 8;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Purple\n");
							
							} else if (argv(2) == "9" || argv(2) == "magenta" || argv(2) == "Magenta") {
								self.multitool_roofcolor = 9;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Magenta\n");
							
							} else if (argv(2) == "10" || argv(2) == "rose" || argv(2) == "Rose") {
								self.multitool_roofcolor = 10;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Rose\n");
							
							} else if (argv(2) == "11" || argv(2) == "blue2" || argv(2) == "Blue2") {
								self.multitool_roofcolor = 11;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Blue2\n");
								
							} else if (argv(2) == "12" || argv(2) == "yellow2" || argv(2) == "Yellow2") {
								self.multitool_roofcolor = 12;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Yellow2\n");
								
							} else if (argv(2) == "13" || argv(2) == "blue3" || argv(2) == "Blue3") {
								self.multitool_roofcolor = 13;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Blue3\n");
							
							} else if (argv(2) == "14" || argv(2) == "orange2" || argv(2) == "Orange2") {
								self.multitool_roofcolor = 14;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Orange2\n");
							
							} else if (argv(2) == "15" || argv(2) == "cycle" || argv(2) == "Cycle" || argv(2) == "CYCLE") {
								self.multitool_roofcolor = 15;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to CYCLE\n");
								
							} else if (argv(2) == "16" || argv(2) == "white" || argv(2) == "White") {
								self.multitool_roofcolor = 16;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to White\n");
								
							} else if (argv(2) == "17" || argv(2) == "cycle2" || argv(2) == "Cycle2") {
								self.multitool_roofcolor = 17;
								spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Cycle2\n");
							
							} else if (argv(2) == "-10" || argv(2) == "player" || argv(2) == "team" || argv(2) == "Player" || argv(2) == "Team" || argv(2) == "PLAYERCOLOR" || argv(2) == "TEAMCOLOR" || argv(2) == "playercolor" || argv(2) == "teamcolor" || argv(2) == "Playercolor" || argv(2) == "Teamcolor" || argv(2) == "PlayerColor" || argv(2) == "TeamColor") {
								self.multitool_roofcolor = -10;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to PLAYERCOLOR/TEAMCOLOR\n");
							} else if (argv(2) == "0" || argv(2) == "none" || argv(2) == "nothing" ) {
								self.multitool_roofcolor = 0;
								spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
								sprint(self, "Roof Block Color set to Nothing (Default)\n");
							} else {
								sprint(self, "Roof Color Selection Choices:\n^x930 1 orange,^x095 2 cyan,^x090 3 green,^x900 4 red,^x069 5 blue,\n^x099 6 lightblue,^x590 7 yellow,^x509 8 purple,^x909 9 magenta,^x905 10 rose,\n^x009 11 blue2 ,^x990 12 yellow2,^x039 13 blue3,^x960 14 orange2,^x444 15 ^x440c^x404y^x044c^x400l^x004e,\n^xFFF 16 white,^x111 17 cycle2,^7 -10 playercolor, 0 none\n");
							}
						} else if (self.multitool_roofcolor == -10) {
							self.multitool_roofcolor = 0;
							spamsound (self, CH_SHOTS, "object/impact_metal_2.ogg", VOL_BASE * 0.50, ATTN_NORM);
							sprint(self, "Roof Block Color set to Nothing (Default)\n");
						} else {
							self.multitool_roofcolor = -10;
							sprint(self, "Roof Block Color set to PLAYERCOLOR/TEAMCOLOR\n");
							spamsound (self, CH_SHOTS, "object/impact_metal_1.ogg", VOL_BASE * 0.50, ATTN_NORM);
						}
						
					} else {
						sprint(self, "You need the multitool or utilitool equipped to change its settings\n");
					}	
				} else {
					sprint(self, "Usage:cmd multitool blocktype\nUsage:cmd multitool placetype\nUsage:cmd multitool buildingsnap\nUsage:cmd multitool wallsnap\nUsage:cmd multitool wallshift\nUsage:cmd multitool vaultwings\nUsage:cmd multitool lockz\nUsage:cmd multitool lockz2me\nUsage:cmd multitool lockz2building\nUsage:cmd multitool lockzplus64 [optional multiplier]\nUsage:cmd multitool lockzminus64 [optional multiplier]\nUsage:cmd multitool setlockzmanually [number]\nUsage:cmd multitool lockzprev\nUsage:cmd multitool flipblock\nUsage:cmd multitool select [block|wall|foundation|bridge|turret|building|floor|obstruction|none]\nUsage:cmd multitool select block [filled|corrugated|shingles|curtain|castle|polish|hedge|graystone|sandstone|marble|wood1|wood2]\nUsage:cmd multitool select wall [hedge|brick|palisade|roman|berm|curtain|castle|polish]\nUsage:cmd multitool select floor [wood|tile|stone|granite|marble|romanmarble]\nUsage:cmd multitool roofblockcolor [color or 0 to 17]\nUsage:cmd multitool castleblockcolor [color or 0 to 7]\nUsage:cmd multitool sandstoneblockcolor [color or 0 to 5]\nUsage:cmd multitool marbleblockcolor [color or 0 to 22]\nUsage:cmd multitool woodblockcolor [color or 0 to 17]\nUsage:cmd multitool frlock\nUsage:cmd multitool frlock2me\nUsage:cmd multitool frlock2floor\nUsage:cmd multitool doorcenter\nUsage:cmd multitool furndrop\nUsage:cmd multitool noturretsintowers\n");
				}
				break;
			}
			sprint(self, "Usage:cmd multitool blocktype\nUsage:cmd multitool placetype\nUsage:cmd multitool buildingsnap\nUsage:cmd multitool wallsnap\nUsage:cmd multitool wallshift\nUsage:cmd multitool vaultwings\nUsage:cmd multitool lockz\nUsage:cmd multitool lockz2me\nUsage:cmd multitool lockz2building\nUsage:cmd multitool lockzplus64 [optional multiplier]\nUsage:cmd multitool lockzminus64 [optional multiplier]\nUsage:cmd multitool setlockzmanually [number]\nUsage:cmd multitool lockzprev\nUsage:cmd multitool flipblock\nUsage:cmd multitool select [block|wall|foundation|bridge|turret|building|floor|obstruction|none]\nUsage:cmd multitool select block [filled|corrugated|shingles|curtain|castle|polish|hedge|graystone|sandstone|marble|wood1|wood2]\nUsage:cmd multitool select wall [hedge|brick|palisade|roman|berm|curtain|castle|polish]\nUsage:cmd multitool select floor [wood|tile|stone|granite|marble|romanmarble]\nUsage:cmd multitool roofblockcolor [color or 0 to 17]\nUsage:cmd multitool castleblockcolor [color or 0 to 7]\nUsage:cmd multitool sandstoneblockcolor [color or 0 to 5]\nUsage:cmd multitool marbleblockcolor [color or 0 to 22]\nUsage:cmd multitool woodblockcolor [color or 0 to 17]\nUsage:cmd multitool frlock\nUsage:cmd multitool frlock2me\nUsage:cmd multitool frlock2floor\nUsage:cmd multitool doorcenter\nUsage:cmd multitool furndrop\nUsage:cmd multitool noturretsintowers\n");
			break;
		case "putitback":
			NOT_CHEAT();
			//if(argc >= 3)
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			//if(self.nextspell < time)
			{
				PutItBackIfAble(self);	
				break;
			}
			sprint(self, "Usage:cmd putitback\n");
			break;
		case "inventory":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			{
				//
				//Note: since the doconcat option is 0
				//we are not going to be using the "return string"
				//self.rtstrng, thus we do not bother to 'clear' it here
				//Option 0 means print to console, 1 builds a string and
				//concatenates it to the specified (ex: self.rtstrng )
				//
				CmdPrintInventory(self, 0, rtstrng);
				break;
			}
			sprint(self, "Usage: cmd inventory\n");
			break;
		case "spellstats":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			{
				CmdPrintSpellStats(self);
				break;
			}
			sprint(self, "Usage: cmd spellstats\n");
			break;
		case "worldinventory":
			NOT_CHEAT();
			if(!self.frozen)
			if(!self.freezetag_frozen)
			if(!self.stoned)
			if(self.deadflag == DEAD_NO)
			if(self.health > 0)
			{
				CmdPrintWorldInventory(self);
				break;
			}
			sprint(self, "Usage: cmd worldinventory\n");
			break;
		case "mageify":
			//Make me a MAGE!
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				f = stof(argv(1));
				self.spell_agency = f;
				self.spell_death = f;
				self.spell_drainlife = f;
				self.spell_cancellation = f;
				self.spell_castfromlife = f;
				self.spell_confer = f;
				self.spell_iceball = f;
				self.spell_aquacaelestis = f;
				self.spell_nivosus = f;
				self.spell_rosa = f;
				self.spell_corvuspenna = f;
				self.spell_plumosus = f;
				self.spell_icestar = f;
                                self.spell_firebolt = f;
                                self.spell_fireball = f;
                                self.spell_magmasphere = f;
                                self.spell_firebeam = f;
                                self.spell_inferno = f;
				self.spell_firewall = f;
				self.spell_lightiningwall = f;
				self.spell_scepterofflame = f;
				self.spell_explosion = f;
				self.spell_phantasmalbarrier = f;
				self.spell_raiseundead = f;
				self.spell_flameburst = f;
				self.spell_firecentury = f;
                                self.spell_frostbeam = f;
				self.spell_grace = f;
				self.spell_holybolt = f;
				self.spell_holylight = f;
				self.spell_acervilux = f;
				self.spell_heal = f;
				self.spell_repair = f;
				self.spell_holyword = f;
				self.spell_extinguish = f;
				self.spell_darkritual = f;
                                self.spell_lightining = f;
				self.spell_balllightining = f;
				self.spell_chargedbolt = f;
				self.spell_lightiningburst = f;
                                self.spell_chainlightining = f;
				self.spell_lightiningstrike = f;
				self.spell_manashield = f;
				self.spell_clairvoyance = f;
				self.spell_magicbullets = f;
                                self.spell_magicmissile = f;
				self.spell_monstertomonolith = f;
				self.spell_monstertomouse = f;
				self.spell_meteor = f;
				self.spell_meteorshower = f;
				self.spell_mimic = f;
                                self.spell_paralyse = f;
				self.spell_ringoffire = f;
                                self.spell_stonecurse = f;
				self.spell_stonerain = f;
				self.spell_timesink = f;
				self.spell_vampyricconduit = f;
				precache_sound ("ardentryst/flame_whoosh.ogg"); //For Inferno
				precache_sound ("weather/thunder_crack.wav"); //For holybolt
				precache_sound ("onslaught/shockwave.ogg"); //For holybolt
				precache_sound ("weapons/fireball_fire2.wav");
				precache_sound ("weapons/fireball_fire.wav");
				precache_sound ("misc/ignition_firewall.ogg");
				precache_sound ("resource/impact/slingimpstone_21.ogg"); //For StoneRain
				precache_sound ("resource/impact/slingimpstone_22.ogg");
				precache_sound ("resource/impact/slingimpstone_23.ogg");
				precache_sound ("resource/impact/slingimpstone_24.ogg");
				precache_sound ("resource/impact/slingimpstone_25.ogg");
				precache_sound ("resource/impact/slingimpstone_26.ogg");
				precache_sound ("relics/relic_effect.wav"); //ManaShield
				precache_sound ("ardentryst/Obelisk.ogg");
				precache_sound ("ardentryst/Maea.ogg");
				precache_sound ("porto/expire.ogg"); //Cancellation
				precache_model ("models/sphere/sphere.md3");
				precache_model ("models/misc/cylinderexpfire.iqm");
				precache_model ("models/circles/magiccircle.iqm");
				precache_model ("models/feathers/feathersmall.iqm");
				DID_CHEAT();	
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd mageify (spell level)\n");
			break;
		case "knowify":
			//Make me KNOW!
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				f = stof(argv(1));
				self.knowledge_carpentry = f;
				self.knowledge_mortise = f;
				self.knowledge_stonemasonry = f;
				self.knowledge_ironworking = f;
				self.knowledge_arch = f;
				self.knowledge_welding = f;
				self.knowledge_concrete = f;
				
				DID_CHEAT();	
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd knowify (knowledge level)\n");
			break;
		case "knowifybasic":
			//Make me KNOW, but not too much!
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				f = stof(argv(1));
				self.knowledge_carpentry = f; //Know
				self.knowledge_mortise = 0;
				self.knowledge_stonemasonry = 0;
				self.knowledge_ironworking = 0;
				self.knowledge_arch = 0;
				self.knowledge_welding = 0;
				self.knowledge_concrete = f; //Know
				
				DID_CHEAT();	
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd knowify (knowledge level)\n");
			break;
		case "knowifymed":
			//Make me KNOW, but not too much, but not too little!
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				f = stof(argv(1));
				self.knowledge_carpentry = f; //Know
				self.knowledge_mortise = 0;
				self.knowledge_stonemasonry = f; //Know
				self.knowledge_ironworking = 0;
				self.knowledge_arch = 0;
				self.knowledge_welding = f; //Know
				self.knowledge_concrete = f; //Know
				
				DID_CHEAT();	
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd knowifymed (knowledge level)\n");
			break;
		case "make":
			IS_CHEAT(0, argc, 0);
			if(argc == 3)
			{
				// arguments:
				//   modelname mode
				f = stof(argv(2));
				W_SetupShot(self, FALSE, FALSE, "", CH_WEAPON_A, 0);
				traceline(w_shotorg, w_shotorg + w_shotdir * 2048, MOVE_NORMAL, self);
				if((trace_dphitq3surfaceflags & Q3SURFACEFLAG_NOIMPACT) || trace_fraction == 1)
				{
					sprint(self, "cannot make stuff there (bad surface)\n");
				}
				else
				{
					e = spawn();
					e.model = strzone(argv(1));
					e.mdl = "rocket_explode";
					e.health = 1000;
					setorigin(e, trace_endpos);
					e.effects = EF_NOMODELFLAGS;
					if(f == 1)
					{
						e.angles = fixedvectoangles2(trace_plane_normal, v_forward);
						e.angles = AnglesTransform_ApplyToAngles(e.angles, '-90 0 0'); // so unrotated models work
					}
					oldself = self;
					self = e;
					spawnfunc_func_breakable();
					self = oldself;
					// now, is it valid?
					if(f == 0)
					{
						tracebox(e.origin, e.mins, e.maxs, e.origin, MOVE_NORMAL, e);
						if(trace_startsolid)
						{
							remove(e);
							sprint(self, "cannot make stuff there (no space)\n");
						}
						else
							DID_CHEAT();
					}
					else
						DID_CHEAT();
				}
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd make models/... 0/1/2\n");
			break;
		case "makewall":
			IS_CHEAT(0, argc, 0);
			if(argc == 3)
			{
				// arguments:
				//   modelname mode
				f = stof(argv(2));
				W_SetupShot(self, FALSE, FALSE, "", CH_WEAPON_A, 0);
				traceline(w_shotorg, w_shotorg + w_shotdir * 2048, MOVE_NORMAL, self);
				if((trace_dphitq3surfaceflags & Q3SURFACEFLAG_NOIMPACT) || trace_fraction == 1)
				{
					sprint(self, "cannot make stuff there (bad surface)\n");
				}
				else
				{
					e = spawn();
					e.model = strzone(argv(1));
					//e.mdl = "rocket_explode";
					//e.health = 1000;
					setorigin(e, trace_endpos);
					e.effects = EF_NOMODELFLAGS;
					if(f == 1)
					{
						e.angles = fixedvectoangles2(trace_plane_normal, v_forward);
						e.angles = AnglesTransform_ApplyToAngles(e.angles, '-90 0 0'); // so unrotated models work
					}
					oldself = self;
					self = e;
					
					//gamemodel doesn't work for this, just clientmodel
                                        spawnfunc_misc_clientmodel();
                                        self.solid = SOLID_BSP;
                                        self.movetype = MOVETYPE_PUSH;

					self = oldself;
					// now, is it valid?
					if(f == 0)
					{
						tracebox(e.origin, e.mins, e.maxs, e.origin, MOVE_NORMAL, e);
						if(trace_startsolid)
						{
							remove(e);
							sprint(self, "cannot make stuff there (no space)\n");
						}
						else
							DID_CHEAT();
					}
					else
						DID_CHEAT();
				}
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd makewall models/... 0/1/2\n");
			break;
		case "trspawn":
			IS_CHEAT(0, argc, 0);
			if(argc == 3)
			{
				// arguments:
				//   modelname mode
				f = stof(argv(2));
				W_SetupShot(self, FALSE, FALSE, "", CH_WEAPON_A, 0);
				traceline(w_shotorg, w_shotorg + w_shotdir * 2048, MOVE_NORMAL, self);
				if((trace_dphitq3surfaceflags & Q3SURFACEFLAG_NOIMPACT) || trace_fraction == 1)
				{
					sprint(self, "cannot make stuff there (bad surface)\n");
				}
				else
				{
					e = spawn();
					
					setorigin(e, trace_endpos);
					//e.effects = EF_NOMODELFLAGS;
					if(f == 1)
					{
						e.angles = fixedvectoangles2(trace_plane_normal, v_forward);
						e.angles = AnglesTransform_ApplyToAngles(e.angles, '-90 0 0'); // so unrotated models work
					}
					oldself = self;
					self = e;
						f = stof(argv(1));
						if(f == 0) {
							spawnfunc_turret_machinegun();
						} else if(f == 1) {
							spawnfunc_turret_mlrs();
						} else if(f == 2) {
							spawnfunc_turret_flac();
						} else if(f == 3) {
							spawnfunc_turret_tesla();	
						} else if(f == 4) {
							spawnfunc_turret_phaser();
						} else if(f == 5) {
							spawnfunc_turret_hellion();
						} else if(f == 6) {
							spawnfunc_turret_hk();
						} else if(f == 7) {
							spawnfunc_turret_plasma();
						} else if(f == 6) {
							spawnfunc_turret_plasma_dual();
						} else if(f == 9) {
							spawnfunc_turret_fusionreactor();
						} else if(f == 10) {
							spawnfunc_turret_autoshlac();
						} else if(f == 11) {
							spawnfunc_turret_ewheel();
						} else {
							spawnfunc_turret_walker();
						}
						
					self = oldself;
					// now, is it valid?
					f = stof(argv(2));
					if(f == 0)
					{
						tracebox(e.origin, e.mins, e.maxs, e.origin, MOVE_NORMAL, e);
						if(trace_startsolid)
						{
							remove(e);
							sprint(self, "cannot make stuff there (no space)\n");
						}
						else
							DID_CHEAT();
					}
					else
						DID_CHEAT();
				}
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd trspawn 0/1/2/.../11 0/1/2\nTurret numbers: 0 machinegun, 1 mlrs, 2 flac, 3 tesla, 4 phaser, 5 hellion, 6 hk, 7 plasma, 8 plasma_dual, 9 fusionreactor, 10 autoshlac, 11 ewheel, 12 walker\n");
			break;
		case "vhspawn":
			IS_CHEAT(0, argc, 0);
			if(argc >= 3)
			{
				// arguments:
				//   modelname mode
				f = stof(argv(2));
				W_SetupShot(self, FALSE, FALSE, "", CH_WEAPON_A, 0);
				traceline(w_shotorg, w_shotorg + w_shotdir * 2048, MOVE_NORMAL, self);
				if((trace_dphitq3surfaceflags & Q3SURFACEFLAG_NOIMPACT) || trace_fraction == 1)
				{
					sprint(self, "cannot make stuff there (bad surface)\n");
				}
				else
				{
					e = spawn();
					
					setorigin(e, trace_endpos);

					if(f == 1)
					{
						e.angles = fixedvectoangles2(trace_plane_normal, v_forward);
						e.angles = AnglesTransform_ApplyToAngles(e.angles, '-90 0 0'); // so unrotated models work
					}
					
					//Colormap = 1024 + pants + shirt * 16
					float g;
					f = stof(argv(4));
					g = stof(argv(5));
					if (f > 0) {
						if (g > 0) {
							e.colormap = (1024 + f + g * 16);
						} else {
							e.colormap = (1024 + f * 16);
						}
					}
					
					f = stof(argv(3));
					if (f > 0) {
						e.spawnflags = f; 
					}
					
					oldself = self;
					self = e;
						f = stof(argv(1));
						if(f == 0) {
							spawnfunc_vehicle_spiderbot();
						} else if(f == 1) {
							spawnfunc_vehicle_racer();
						} else if(f == 2) {
							spawnfunc_vehicle_raptor();
						} else if(f == 3) {
							spawnfunc_vehicle_bumblebee();	
						} else if(f == 4) {
							spawnfunc_vehicle_sportster();
						} else if(f == 5) {
							spawnfunc_vehicle_cruizer();
						} else if(f == 6) {
							spawnfunc_vehicle_challenger();
						} else if(f == 7) {
							spawnfunc_vehicle_cruizerlimo();
						} else if(f == 8) {
							spawnfunc_vehicle_sedan();
						} else if(f == 9) {
							spawnfunc_vehicle_yugo();	
						} else if(f == 10) {
							spawnfunc_vehicle_pickuptruck();
						} else if(f == 11) {
							spawnfunc_vehicle_smalltruck();	
						} else if(f == 12) {
							spawnfunc_vehicle_speedcar();
						} else if(f == 13) {
							spawnfunc_vehicle_fastcar();
						} else if(f == 14) {
							spawnfunc_vehicle_sparrow();
						} else if(f == 15) {
							spawnfunc_vehicle_r22heli();
						} else if(f == 16) {
							spawnfunc_vehicle_blackhawk();
						} else if(f == 17) {
							spawnfunc_vehicle_farman();
						} else if(f == 18) {
							spawnfunc_vehicle_nieuport();
						} else if(f == 19) {	
							spawnfunc_vehicle_sopwith();
						} else if(f == 20) {	
							spawnfunc_vehicle_fokker();
						} else if(f == 21) {	
							spawnfunc_vehicle_aerocommander();
						} else if(f == 22) {
							spawnfunc_vehicle_tankll24();
						} else if(f == 23) {	
							spawnfunc_vehicle_tankll37();
						} else if(f == 24) {	
							spawnfunc_vehicle_tankll40();
						} else if(f == 25) {	
							spawnfunc_vehicle_tankll48();
						//26 spot for tankt27
						} else if(f == 27) {	
							spawnfunc_vehicle_mechmax();
						} else if(f == 28) {	
							spawnfunc_vehicle_tankiv();
						} else if(f == 29) {	
							spawnfunc_vehicle_turretll20();
						} else if(f == 30) {	
							spawnfunc_vehicle_lightapc();
						} else if(f == 31) {	
							spawnfunc_vehicle_bulldozer();
						} else if(f == 32) {	
							spawnfunc_vehicle_tanka7v();
						} else if(f == 33) {	
							spawnfunc_vehicle_eindecker();
						} else if(f == 34) {	
							spawnfunc_vehicle_shundi();
						} else if(f == 35) {	
							spawnfunc_vehicle_shenzong();
						} else if(f == 36) {	
							spawnfunc_vehicle_submersible();
						} else if(f == 37) {	
							spawnfunc_vehicle_speedboat();
						} else if(f == 38) {
							spawnfunc_vehicle_h125heli();
						} else {
							spawnfunc_vehicle_tankt27();
						}
						
					self = oldself;
					// now, is it valid?
					f = stof(argv(2));
					if(f == 0)
					{
						tracebox(e.origin, e.mins, e.maxs, e.origin, MOVE_NORMAL, e);
						if(trace_startsolid)
						{
							remove(e);
							sprint(self, "cannot make stuff there (no space)\n");
						}
						else
							DID_CHEAT();
					}
					else
						DID_CHEAT();
				}
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd vhspawn 0/1/2/.../15(VEHICLE) 0/1/2(DIRECTION) (SPAWNFLAGS) (SHIRTCOLOR) (PANTSCOLOR)\nVehicle numbers: 0 Spiderbot, 1 Racer, 2 Raptor, 3 Bumblebee, 4 Car-Sportster, 5 Car-Cruizer, 6 Car-Challenger, 7 Car-Limo, 8 Car-Sedan, 9 Car-Yugo, 10 Car-PickupTruck, 11 Car-SmallTruck, 12 Car-Speedcar, 13 Car-Fastcar, 14 Helicopter-Sparrow, 15 Helicopter-R22, 16 Helicopter-Blackhawk, 17 Biplane-FarmanIV, 18 Biplane-Nieuport, 19 Triplane-Sopwith, 20 Triplane-FokkerDR1, 21 Monoplane-AeroCommander, 22 Tank-LL24, 23 Tank-LL37, 24 Tank-LL40, 25 Tank-LL48, 26 Tank-T27, 27 MechMAX, 28 Tank-IV, 29 Turret-LL20, 30 LightAPC, 31 Bulldozer, 32 TankA7V, 33 Monoplane-Eindecker, 34 Spacecraft-Shundi, 35 Spacecraft-Shenzong, 36-Watercraft-Submersible, 37-Watercraft-SpeedBoat, 38 Helicopter-H125\n");
			break;
		case "mgspawn":
			IS_CHEAT(0, argc, 0);
			if(argc >= 3)
			{
				// arguments:
				//   modelname mode
				W_SetupShot(self, FALSE, FALSE, "", CH_WEAPON_A, 0);
				traceline(w_shotorg, w_shotorg + w_shotdir * 2048, MOVE_NORMAL, self);
				if((trace_dphitq3surfaceflags & Q3SURFACEFLAG_NOIMPACT) || trace_fraction == 1)
				{
					sprint(self, "cannot make stuff there (bad surface)\n");
				}
				else
				{
					e = spawn();
					
					setorigin(e, trace_endpos);
					
					if(argc > 3)
					{
						f = stof(argv(4));
						e.vehicle_shieldtype = f;
					}
					
					f = stof(argv(3));
					if(f == 1) {
						e.spawnflags = 16;
					} else if(f == 2) {
						e.spawnflags = 32;
					} 
					
					f = stof(argv(2));
					if(f == 1)
					{
						e.angles = fixedvectoangles2(trace_plane_normal, v_forward);
						e.angles = AnglesTransform_ApplyToAngles(e.angles, '-90 0 0'); // so unrotated models work
					}
					oldself = self;
					self = e;
						f = stof(argv(1));
						if(f == 0) {
							spawnfunc_mountedgun_maxim();
						} else if(f == 1) {
							spawnfunc_mountedgun_lewis();
						} else if(f == 2) {
							spawnfunc_mountedgun_browning50();
						} else if(f == 3) {
							spawnfunc_mountedgun_m134();
						} else if(f == 4) {
							spawnfunc_mountedgun_spadu();
						} else if(f == 5) {
							spawnfunc_mountedgun_rpk();
						} else if(f == 6) {
							spawnfunc_mountedgun_gau19();
						} else if(f == 7) {
							spawnfunc_mountedgun_grail();
						} else if(f == 8) {
							spawnfunc_mountedgun_shlac();
						} else if(f == 9) {
							spawnfunc_mountedgun_bpcannon();
						} else if(f == 10) {
							spawnfunc_mountedgun_autonex();
						} else if(f == 11) {
							spawnfunc_mountedgun_t17mm();
						} else if(f == 12) {
							spawnfunc_mountedgun_scorpion();
						} else if(f == 13) {
							spawnfunc_mountedgun_charbelcher();
						} else if(f == 14) {
							spawnfunc_mountedgun_batteringram();
						} else if(f == 15) {
							spawnfunc_mountedgun_siegemortar();
						} else if(f == 16) {
							spawnfunc_mountedgun_hotchkissm1914();
						} else if(f == 17) {
							spawnfunc_mountedgun_lasercannon_red();
						} else if(f == 18) {
							spawnfunc_mountedgun_lasercannon_red_pulsed();
						} else if(f == 19) {
							spawnfunc_mountedgun_lasercannon_green();
						} else if(f == 20) {
							spawnfunc_mountedgun_lasercannon_green_pulsed();
						} else if(f == 21) {
							spawnfunc_mountedgun_lasercannon_cyan();
						} else if(f == 22) {
							spawnfunc_mountedgun_lasercannon_cyan_pulsed();
						} else if(f == 23) {
							spawnfunc_mountedgun_lasercannon_magenta();
						} else if(f == 24) {
							spawnfunc_mountedgun_lasercannon_magenta_pulsed();
						} else if(f == 25) {
							spawnfunc_mountedgun_gatling1877();
						} else if(f == 26) {
							spawnfunc_mountedgun_rpd();
						} else if(f == 27) {
							spawnfunc_mountedgun_m249para();
						} else if(f == 28) {
							spawnfunc_mountedgun_pkm();
						} else {
							spawnfunc_mountedgun_deluge();
						}
						
					self = oldself;
					// now, is it valid?
					f = stof(argv(2));
					if(f == 0)
					{
						tracebox(e.origin, e.mins, e.maxs, e.origin, MOVE_NORMAL, e);
						if(trace_startsolid)
						{
							remove(e);
							sprint(self, "cannot make stuff there (no space)\n");
						}
						else
							DID_CHEAT();
					}
					else
						DID_CHEAT();
				}
			}
			else
				sprint(self, "Usage: sv_cheats 1; restart; cmd mgspawn 0/1/../9(GUN) 0/1/2(DIRECTION) 0/1/2(MOUNT) 0/1/../6(SHIELDTYPE)\nVehicle numbers: 0 Maxim gun, 1 Lewis gun, 2 Browning .50, 3 M134, 4 Spadu, 5 RPK, 6 GAU19, 7 GRail, 8 SHLAC, 9 BPCannon, 10 AutoNex, 11 T17mm, 12 Scorpion, 13 Charbelcher, 14 BatteringRam, 15 SiegeMortar, 16 HotchkissM1914, 17 LaserCannonRED, 18 LaserCannonRED_Pulsed, 19 LaserCannonGREEN, 20 LaserCannonGREEN_Pulsed, 21 LaserCannonCYAN, 22 LaserCannonCYAN_Pulsed, 23 LaserCannonMAGENTA, 24 LaserCannonMAGENTA_Pulsed, 25 Gatling1877, 26 RPD, 27 M249-Para, 28 PKM, ELSE Deluge\nMount numbers: 0 Tripod, 1 Circular, 2 Point\n");
			break;
		case "penalty":
			IS_CHEAT(0, argc, 0);
			if(argc == 3)
			{
				race_ImposePenaltyTime(self, stof(argv(1)), argv(2));
				DID_CHEAT();
				break;
			}
			sprint(self, "Usage: sv_cheats 1; restart; cmd penalty 5.0 AHAHAHAHAHAHAH))\n");
			break;
		case "dragbox_spawn":
			IS_CHEAT(0, argc, 0);
			e = spawn();
			e.classname = "dragbox_box";
			e.think = DragBox_Think;
			e.nextthink = time;
			e.solid = -1; // black
			setmodel(e, "null"); // network it
			if(argc == 4)
				e.cnt = stof(argv(1));
			else
				e.cnt = max(0, drag_lastcnt);

			e.aiment = spawn();
			e.aiment.classname = "dragbox_corner_1";
			e.aiment.owner = e;
			setmodel(e.aiment, "models/marker.md3");
			e.aiment.skin = 0;
			setsize(e.aiment, '0 0 0', '0 0 0');
			if(argc == 4)
				setorigin(e.aiment, stov(argv(2)));
			else
			{
				crosshair_trace(self);
				setorigin(e.aiment, trace_endpos);
			}

			e.enemy = spawn();
			e.enemy.classname = "dragbox_corner_2";
			e.enemy.owner = e;
			setmodel(e.enemy, "models/marker.md3");
			e.enemy.skin = 1;
			setsize(e.enemy, '0 0 0', '0 0 0');
			end = normalize(self.origin + self.view_ofs - e.aiment.origin);
			end_x = (end_x > 0) * 2 - 1;
			end_y = (end_y > 0) * 2 - 1;
			end_z = (end_z > 0) * 2 - 1;
			if(argc == 4)
				setorigin(e.enemy, stov(argv(3)));
			else
				setorigin(e.enemy, e.aiment.origin + 32 * end);

			e.killindicator = spawn();
			e.killindicator.classname = "drag_digit";
			e.killindicator.owner = e;
			setattachment(e.killindicator, e, "");
			setorigin(e.killindicator, '0 0 -8');
			e.killindicator.killindicator = spawn();
			e.killindicator.killindicator.classname = "drag_digit";
			e.killindicator.killindicator.owner = e;
			setattachment(e.killindicator.killindicator, e, "");
			setorigin(e.killindicator.killindicator, '0 0 8');
			DID_CHEAT();
			break;
		case "dragpoint_spawn":
			IS_CHEAT(0, argc, 0);
			e = spawn();
			e.classname = "dragpoint";
			e.think = DragBox_Think;
			e.nextthink = time;
			e.solid = 0; // nothing special
			setmodel(e, "models/marker.md3");
			setsize(e, PL_MIN, PL_MAX);
			e.skin = 2;
			if(argc == 3)
				e.cnt = stof(argv(1));
			else
				e.cnt = drag_lastcnt;
			if(argc == 3)
				setorigin(e, stov(argv(2)));
			else
			{
				crosshair_trace(self);
				setorigin(e, trace_endpos + normalize(self.origin + self.view_ofs - trace_endpos));
				move_out_of_solid(e);
			}

			e.killindicator = spawn();
			e.killindicator.classname = "drag_digit";
			e.killindicator.owner = e;
			setattachment(e.killindicator, e, "");
			setorigin(e.killindicator, '0 0 40');
			e.killindicator.killindicator = spawn();
			e.killindicator.killindicator.classname = "drag_digit";
			e.killindicator.killindicator.owner = e;
			setattachment(e.killindicator.killindicator, e, "");
			setorigin(e.killindicator.killindicator, '0 0 56');
			DID_CHEAT();
			break;
		case "drag_remove":
			IS_CHEAT(0, argc, 0);
			RandomSelection_Init();
			crosshair_trace(self);
			for(e = world; (e = find(e, classname, "dragbox_box")); )
				RandomSelection_Add(e, 0, string_null, 1, 1 / vlen(e.origin + (e.mins + e.maxs) * 0.5 - trace_endpos));
			for(e = world; (e = find(e, classname, "dragpoint")); )
				RandomSelection_Add(e, 0, string_null, 1, 1 / vlen(e.origin + (e.mins + e.maxs) * 0.5 - trace_endpos));
			if(RandomSelection_chosen_ent)
			{
				remove(RandomSelection_chosen_ent.killindicator.killindicator);
				remove(RandomSelection_chosen_ent.killindicator);
				if(RandomSelection_chosen_ent.aiment)
					remove(RandomSelection_chosen_ent.aiment);
				if(RandomSelection_chosen_ent.enemy)
					remove(RandomSelection_chosen_ent.enemy);
				remove(RandomSelection_chosen_ent);
			}
			DID_CHEAT();
			break;
		case "drag_setcnt":
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				RandomSelection_Init();
				crosshair_trace(self);
				for(e = world; (e = find(e, classname, "dragbox_box")); )
					RandomSelection_Add(e, 0, string_null, 1, 1 / vlen(e.origin + (e.mins + e.maxs) * 0.5 - trace_endpos));
				for(e = world; (e = find(e, classname, "dragpoint")); )
					RandomSelection_Add(e, 0, string_null, 1, 1 / vlen(e.origin + (e.mins + e.maxs) * 0.5 - trace_endpos));
				if(RandomSelection_chosen_ent)
				{
					if(substring(argv(1), 0, 1) == "*")
						RandomSelection_chosen_ent.cnt = drag_lastcnt = RandomSelection_chosen_ent.cnt + stof(substring(argv(1), 1, -1));
					else
						RandomSelection_chosen_ent.cnt = drag_lastcnt = stof(argv(1));
				}
				DID_CHEAT();
				break;
			}
			sprint(self, "Usage: sv_cheats 1; restart; cmd dragbox_setcnt cnt\n");
			break;
		case "drag_save":
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				f = fopen(argv(1), FILE_WRITE);
				fputs(f, "cmd drag_clear\n");
				for(e = world; (e = find(e, classname, "dragbox_box")); )
				{
					fputs(f, strcat("cmd dragbox_spawn ", ftos(e.cnt), " \"", vtos(e.aiment.origin), "\" \"", vtos(e.enemy.origin), "\"\n"));
				}
				for(e = world; (e = find(e, classname, "dragpoint")); )
				{
					fputs(f, strcat("cmd dragpoint_spawn ", ftos(e.cnt), " \"", vtos(e.origin), "\"\n"));
				}
				fclose(f);
				DID_CHEAT();
				break;
			}
			sprint(self, "Usage: sv_cheats 1; restart; cmd dragbox_save filename\n");
			break;
		case "drag_saveraceent":
			IS_CHEAT(0, argc, 0);
			if(argc == 2)
			{
				f = fopen(argv(1), FILE_WRITE);
				for(e = world; (e = find(e, classname, "dragbox_box")); )
				{
					fputs(f, "{\n");
					fputs(f, "\"classname\" \"trigger_race_checkpoint\"\n");
					fputs(f, strcat("\"origin\" \"", ftos(e.absmin_x), " ", ftos(e.absmin_y), " ", ftos(e.absmin_z), "\"\n"));
					fputs(f, strcat("\"maxs\" \"", ftos(e.absmax_x - e.absmin_x), " ", ftos(e.absmax_y - e.absmin_y), " ", ftos(e.absmax_z - e.absmin_z), "\"\n"));
					fputs(f, strcat("\"cnt\" \"", ftos(e.cnt), "\"\n"));
					fputs(f, strcat("\"targetname\" \"checkpoint", ftos(e.cnt), "\"\n"));
					fputs(f, "}\n");
				}
				for(e = world; (e = find(e, classname, "dragpoint")); )
				{
					start = '0 0 0';
					effectnum = 0;
					for(oldself = world; (oldself = find(oldself, classname, "dragbox_box")); )
					{
						if(e.cnt <= 0 && oldself.cnt == 0 || e.cnt == oldself.cnt)
						{
							start = start + oldself.origin;
							++effectnum;
						}
					}
					start *= 1 / effectnum;
					fputs(f, "{\n");
					fputs(f, "\"classname\" \"info_player_race\"\n");
					fputs(f, strcat("\"angle\" \"", ftos(vectoyaw(start - e.origin)), "\"\n"));
					fputs(f, strcat("\"origin\" \"", ftos(e.origin_x), " ", ftos(e.origin_y), " ", ftos(e.origin_z), "\"\n"));
					if(e.cnt == -2)
					{
						fputs(f, "\"target\" \"checkpoint0\"\n");
						fputs(f, "\"race_place\" \"0\"\n");
					}
					else if(e.cnt == -1)
					{
						fputs(f, "\"target\" \"checkpoint0\"\n");
						fputs(f, "\"race_place\" \"-1\"\n");
					}
					else
					{
						fputs(f, strcat("\"target\" \"checkpoint", ftos(e.cnt), "\"\n"));
						if(e.cnt == 0)
						{
							// these need race_place
							// counting...
							effectnum = 1;
							for(oldself = world; (oldself = find(oldself, classname, "dragpoint")); )
							if(oldself.cnt == 0)
							{
								if(vlen(oldself.origin - start) < vlen(e.origin - start))
									++effectnum;
								else if(vlen(oldself.origin - start) == vlen(e.origin - start) && num_for_edict(oldself) < num_for_edict(e))
									++effectnum;
							}
							fputs(f, strcat("\"race_place\" \"", ftos(effectnum), "\"\n"));
						}
					}
					fputs(f, "}\n");
				}
				fclose(f);
				DID_CHEAT();
				break;
			}
			sprint(self, "Usage: sv_cheats 1; restart; cmd dragbox_save filename\n");
			break;
		case "drag_clear":
			IS_CHEAT(0, argc, 0);
			for(e = world; (e = find(e, classname, "dragbox_box")); )
				remove(e);
			for(e = world; (e = find(e, classname, "dragbox_corner_1")); )
				remove(e);
			for(e = world; (e = find(e, classname, "dragbox_corner_2")); )
				remove(e);
			for(e = world; (e = find(e, classname, "dragpoint")); )
				remove(e);
			for(e = world; (e = find(e, classname, "drag_digit")); )
				remove(e);
			DID_CHEAT();
			break;
		case "prisonerlevel0":
			IS_CHEAT(0, argc, 0);
			//For testing code related to prisoner level
			if(self.prisonerlevel > 0)
			{
				sprint(self, "prisoner level 0\n");
				self.prisonerlevel = 0;
				DID_CHEAT();
			}
			else
				sprint(self, "prisoner level was allready nothing\n");
			break;
		case "prisonerlevel1":
			IS_CHEAT(0, argc, 0);
			//For testing code related to prisoner level
			if(self.prisonerlevel != 1)
			{
				sprint(self, "prisoner level 1\n");
				self.prisonerlevel = 1;
				DID_CHEAT();
			}
			else
				sprint(self, "prisoner level was allready 1\n");
			break;
		case "prisonerlevel2":
			IS_CHEAT(0, argc, 0);
			//For testing code related to prisoner level
			if(self.prisonerlevel != 1)
			{
				sprint(self, "prisoner level 2 (jailed)\n");
				self.prisonerlevel = 2;
				DID_CHEAT();
			}
			else
				sprint(self, "prisoner level was allready 2 (jailed)\n");
			break;
		case "prisonerlevel3":
			IS_CHEAT(0, argc, 0);
			//For testing code related to prisoner level
			if(self.prisonerlevel != 3)
			{
				sprint(self, "prisoner level 3 (chained)\n");
				self.prisonerlevel = 3;
				DID_CHEAT();
			}
			else
				sprint(self, "prisoner level was allready 3 (chained)\n");
			break;
		case "mangleselfl":
			IS_CHEAT(0, argc, 0);
			//For testing code related to mangle
			if(!self.permmangled_l)
			{
				sprint(self, "permmangled_l\n");
				self.permmangled_l = 1;
				DID_CHEAT();
			}
			else
				sprint(self, "was allready permmangled_l\n");
			break;
		case "mangleselfr":
			IS_CHEAT(0, argc, 0);
			//For testing code related to mangle
			if(!self.permmangled_r)
			{
				sprint(self, "permmangled_r\n");
				self.permmangled_r = 1;
				DID_CHEAT();
			}
			else
				sprint(self, "was allready permmangled_r\n");
			break;
		case "hobbleselfl":
			IS_CHEAT(0, argc, 0);
			//For testing code related to hobble
			if(!self.permhobbled_l)
			{
				sprint(self, "permhobbled_l\n");
				self.permhobbled_l = 1;
				DID_CHEAT();
			}
			else
				sprint(self, "was allready permhobbled_l\n");
			break;
		case "hobbleselfr":
			IS_CHEAT(0, argc, 0);
			//For testing code related to hobble
			if(!self.permhobbled_r)
			{
				sprint(self, "permhobbled_r\n");
				self.permhobbled_r = 1;
				DID_CHEAT();
			}
			else
				sprint(self, "was allready permhobbled_r\n");
			break;
		case "unhobbleself":
			IS_CHEAT(0, argc, 0);
			//For testing code related to hobble
			if(self.permhobbled_l || self.permhobbled_r)
			{
				sprint(self, "un permhobbled\n");
				self.permhobbled_l = 0;
				self.permhobbled_r = 0;
				DID_CHEAT();
			}
			else
				sprint(self, "was allready not hobbled\n");
			break;
		case "unmangleself":
			IS_CHEAT(0, argc, 0);
			//For testing code related to mangle
			if(self.permmangled_l || self.permmangled_r)
			{
				sprint(self, "un permmangled\n");
				self.permmangled_l = 0;
				self.permmangled_r = 0;
				DID_CHEAT();
			}
			else
				sprint(self, "was allready not mangled\n");
			break;
		case "god":
			IS_CHEAT(0, argc, 0);
			BITXOR_ASSIGN(self.flags, FL_GODMODE);
			if(self.flags & FL_GODMODE)
			{
				sprint(self, "godmode ON\n");
				DID_CHEAT();
			}
			else
				sprint(self, "godmode OFF\n");
			break;
		case "notarget":
			IS_CHEAT(0, argc, 0);
			BITXOR_ASSIGN(self.flags, FL_NOTARGET);
			if(self.flags & FL_NOTARGET)
			{
				sprint(self, "notarget ON\n");
				DID_CHEAT();
			}
			else
				sprint(self, "notarget OFF\n");
			break;
		case "noclip":
			IS_CHEAT(0, argc, 0);
			if(self.movetype != MOVETYPE_NOCLIP)
			{
				self.movetype = MOVETYPE_NOCLIP;
				sprint(self, "noclip ON\n");
				DID_CHEAT();
			}
			else
			{
				self.movetype = MOVETYPE_WALK;
				sprint(self, "noclip OFF\n");
			}
			break;
		case "fly":
			IS_CHEAT(0, argc, 0);
			if(self.movetype != MOVETYPE_FLY)
			{
				self.movetype = MOVETYPE_FLY;
				sprint(self, "flymode ON\n");
				DID_CHEAT();
			}
			else
			{
				self.movetype = MOVETYPE_WALK;
				sprint(self, "flymode OFF\n");
			}
			break;
		case "give":
			IS_CHEAT(0, argc, 0);
			if(GiveItems(self, 1, argc))
				DID_CHEAT();
			break;
		case "usetarget":
			IS_CHEAT(0, argc, 0);
			e = self;
			self = spawn();
			self.target = argv(1);
			activator = e;
			SUB_UseTargets();
			remove(self);
			self = e;
			DID_CHEAT();
			break;
		case "killtarget":
			IS_CHEAT(0, argc, 0);
			e = self;
			self = spawn();
			self.killtarget = argv(1);
			activator = e;
			SUB_UseTargets();
			remove(self);
			self = e;
			DID_CHEAT();
			break;
		case "teleporttotarget":
			IS_CHEAT(0, argc, 0);
			e = self;
			self = spawn();
			setorigin(self, self.origin);
			self.classname = "cheattriggerteleport";
			self.target = argv(1);
			teleport_findtarget();
			if(!wasfreed(self))
			{
				Simple_TeleportPlayer(self, e);
				remove(self);
				self = e;
				DID_CHEAT();
			}
			else
				self = e;
			break;
	}

	END_CHEAT_FUNCTION();
}

float Drag(entity e, float grab, float ischeat);
void Drag_Begin(entity dragger, entity draggee, vector touchpoint);
void Drag_Finish(entity dragger);
float Drag_IsDraggable(entity draggee);
float Drag_MayChangeAngles(entity draggee);
void Drag_MoveForward(entity dragger);
void Drag_SetSpeed(entity dragger, float s);
void Drag_MoveBackward(entity dragger);
void Drag_Update(entity dragger);
float Drag_CanDrag(entity dragger);
float Drag_IsDragging(entity dragger);
void Drag_MoveDrag(entity from, entity to);
.entity dragentity;

float CheatFrame()
{
	BEGIN_CHEAT_FUNCTION();

	// Dragging can be used as either a cheat, or a function for some objects. If sv_cheats is active,
	// the cheat dragging is used (unlimited pickup range and any entity can be carried). If sv_cheats
	// is disabled, normal dragging is used (limited pickup range and only dragable objects can be carried),
	// grabbing itself no longer being accounted as cheating.

	switch(0)
	{
		default:
			if(self.maycheat || (gamestart_sv_cheats && autocvar_sv_cheats))
			{
				// use cheat dragging if cheats are enabled
				crosshair_trace_plusvisibletriggers(self);
				Drag(trace_ent, TRUE, TRUE);
			}
			else
			{
				// drag is TRUE if the object can be picked up. While an object is being carried, the Drag() function
				// must execute for it either way, otherwise it would cause bugs if it went out of the player's trace.
				// This also makes sure that an object can only pe picked up if in range, but does not get dropped if
				// it goes out of range while slinging it around.

				float drag;
				crosshair_trace_plusvisibletriggers(self);
				drag = FALSE;
				if(vlen(self.origin - trace_ent.origin) <= autocvar_g_grab_range)
				{
					switch(trace_ent.grab)
					{
						case 0: // can't grab
							break;
						case 1: // owner can grab
							if(trace_ent.owner == self || trace_ent.realowner == self)
								drag = TRUE;
							break;
						case 2: // owner and team mates can grab
							if(!IsDifferentTeam(trace_ent.owner, self) || !IsDifferentTeam(trace_ent.realowner, self) || trace_ent.team == self.team)
								drag = TRUE;
							break;
						case 3: // anyone can grab
							drag = TRUE;
							break;
						default:
							break;
					}
				}
				Drag(trace_ent, drag, FALSE); // execute dragging
			}
			break;
	}

	END_CHEAT_FUNCTION();
}


float DragTestFurnInSolid(entity e) {
	local float previoussolid;
	previoussolid = e.solid;
	e.solid = SOLID_NOT; //So we don't detect ourselves
	
	if (e.multitool_dragable
	&& (pointcontents (e.origin) == CONTENT_SOLID))
	{
		e.solid = previoussolid;
		return TRUE;
	} else {
		e.solid = previoussolid;
		return FALSE;
	}
}

// ENTITY DRAGGING

float Drag(entity e, float pick, float ischeat)
{
	BEGIN_CHEAT_FUNCTION();

	// returns TRUE when an entity has been picked up
	// If pick is TRUE, the object can also be picked up if it's not being held already
	// If pick is FALSE, only keep dragging the object if it's already being held

	switch(0)
	{
		default:
			if(Drag_IsDragging(self))
			{
				if(self.BUTTON_DRAG)
				{
					if(self.impulse == 10 || self.impulse == 15 || self.impulse == 18)
					{
						Drag_MoveForward(self);
						self.impulse = 0;
					}
					else if(self.impulse == 12 || self.impulse == 16 || self.impulse == 19)
					{
						Drag_MoveBackward(self);
						self.impulse = 0;
					}
					else if(self.impulse >= 1 && self.impulse <= 9)
					{
						Drag_SetSpeed(self, self.impulse - 1);
					}
					else if(self.impulse == 14)
					{
						Drag_SetSpeed(self, 9);
					}

					if(frametime)
						Drag_Update(self);
				}
				else
				{
					Drag_Finish(self);
				}
			}
			else
			{
				if(Drag_CanDrag(self))
					if(self.BUTTON_DRAG && pick)
					{
						if(e)
							if(Drag_IsDraggable(e))
							{
								local float dragtestfurn;
								dragtestfurn = 0;
								dragtestfurn = DragTestFurnInSolid(e);
								
								if (dragtestfurn && (self.weapon != WEP_CROWBAR) && (self.weapon != WEP_IRONCROW))
								{
									//We don't try to grab furniture stuck in a solid, don't want it falling through the map
									if ((clienttype(self) == CLIENTTYPE_REAL))
									{
										if (self.multitool_annoymsgtime1 < time)
										{
											sprint(self, "the object is stuck in a solid, you fail to free it\n");
											self.multitool_annoymsgtime1 = time + 5;
										}
									}
								}
								else
								{
									if(dragtestfurn) {
										if ((clienttype(self) == CLIENTTYPE_REAL))
										{
											if (self.multitool_annoymsgtime1 < time)
											{
												sprint(self, "the object is stuck in a solid, but you have a crowbar\n");
												self.multitool_annoymsgtime1 = time + 5;
											}
										}	
									}
								
									if(ischeat)
										IS_CHEAT(0, 0, CHRAME_DRAG);
									if(e.draggedby)
										Drag_Finish(e.draggedby);
									if(e.tag_entity)
										detach_sameorigin(e);
									Drag_Begin(self, e, trace_endpos);
									if(ischeat)
										DID_CHEAT();
									return TRUE;
								}
							}
					}
			}
			break;
	}
	return FALSE;
}

// on dragger:
.float draggravity;
.float dragspeed; // speed of mouse wheel action
.float dragdistance; // distance of dragentity's draglocalvector from view_ofs
.vector draglocalvector; // local attachment vector of the dragentity
.float draglocalangle;
// on draggee:
.entity draggedby;
.float dragmovetype;
void DropDrageeHardToFloor (entity draggee) {
	local entity myoldself;
	myoldself = self;
	self = draggee;
	traceline(self.origin + '0 0 1', self.origin + '0 0 -10000', MOVE_NORMAL, self);
	setorigin(self, trace_endpos);
	self = myoldself;
	//print("Dropped to floor\n");
}

void DropDrageeToFloor (entity draggee) {
	local entity myoldself;
	myoldself = self;
	self = draggee;
	//Tried it with gravity, didn't work correctly, need to be drastic to keep it from being a trampoline
	traceline(self.origin + '0 0 1', self.origin + '0 0 -64', MOVE_NORMAL, self);
	setorigin(self, trace_endpos);
	self = myoldself;
}

void Drag_Begin(entity dragger, entity draggee, vector touchpoint)
{
	float tagscale;

	draggee.dragmovetype = draggee.movetype;
	draggee.draggravity = draggee.gravity;
	draggee.movetype = MOVETYPE_WALK;
	draggee.gravity = 0.00001;
	draggee.flags &~= FL_ONGROUND;
	draggee.draggedby = dragger;

	dragger.dragentity = draggee;

	dragger.dragdistance = vlen(touchpoint - dragger.origin - dragger.view_ofs);
	dragger.draglocalangle = draggee.angles_y - dragger.v_angle_y;
	touchpoint = touchpoint - gettaginfo(draggee, 0);
	tagscale = pow(vlen(v_forward), -2);
	dragger.draglocalvector_x = touchpoint * v_forward * tagscale;
	dragger.draglocalvector_y = touchpoint * v_right * tagscale;
	dragger.draglocalvector_z = touchpoint * v_up * tagscale;

	dragger.dragspeed = 64;
}

void Drag_Finish(entity dragger)
{
	entity draggee;
	draggee = dragger.dragentity;
	if(dragger)
		dragger.dragentity = world;
	draggee.draggedby = world;
	draggee.movetype = draggee.dragmovetype;
	draggee.gravity = draggee.draggravity;

	switch(draggee.movetype)
	{
		case MOVETYPE_TOSS:
		case MOVETYPE_WALK:
		case MOVETYPE_STEP:
		case MOVETYPE_FLYMISSILE:
		case MOVETYPE_BOUNCE:
		case MOVETYPE_BOUNCEMISSILE:
		case MOVETYPE_PHYSICS:
			break;
		default:
			draggee.velocity = '0 0 0';
			break;
	}
	
	//if (draggee.multitool_dragable) {
	//	//So you can't launch yourself off the dragged item (hope)
	//	DropDrageeHardToFloor(draggee);
	//}

	if((draggee.flags & FL_ITEM) && (vlen(draggee.velocity) < 32))
	{
		draggee.velocity = '0 0 0';
		draggee.flags |= FL_ONGROUND; // floating items are FUN
	}
}

float Drag_IsDraggable(entity draggee)
{
	// TODO add more checks for bad stuff here
	if(draggee == world)
		return FALSE;
	if(draggee.classname == "func_bobbing")
		return FALSE;
	if(draggee.classname == "door") // FIXME find out why these must be excluded, or work around the problem (trying to drag these causes like 4 fps)
		return FALSE;
	if(draggee.classname == "plat")
		return FALSE;
	if(draggee.classname == "func_button")
		return FALSE;
//	if(draggee.model == "")
//		return FALSE;
	if(draggee.classname == "spectator")
		return FALSE;
	if(draggee.classname == "observer")
		return FALSE;
	if(draggee.classname == "exteriorweaponentity")
		return FALSE;
	if(draggee.classname == "weaponentity")
		return FALSE;

	return TRUE;
}

float Drag_MayChangeAngles(entity draggee)
{
	// TODO add more checks for bad stuff here
	if(substring(draggee.model, 0, 1) == "*")
		return FALSE;
	return TRUE;
}

void Drag_MoveForward(entity dragger)
{
	dragger.dragdistance += dragger.dragspeed;
}

void Drag_SetSpeed(entity dragger, float s)
{
	dragger.dragspeed = pow(2, s);
}

void Drag_MoveBackward(entity dragger)
{
	dragger.dragdistance = max(0, dragger.dragdistance - dragger.dragspeed);
}

void Drag_Update(entity dragger)
{
	vector curorigin, neworigin, goodvelocity;
	float f;
	entity draggee;

	draggee = dragger.dragentity;
	draggee.flags &~= FL_ONGROUND;

	curorigin = gettaginfo(draggee, 0);
	curorigin = curorigin + v_forward * dragger.draglocalvector_x + v_right * dragger.draglocalvector_y + v_up * dragger.draglocalvector_z;
	makevectors(dragger.v_angle);
	neworigin = dragger.origin + dragger.view_ofs + v_forward * dragger.dragdistance;
	goodvelocity = (neworigin - curorigin) * (1 / frametime);

	while(draggee.angles_y - dragger.v_angle_y - dragger.draglocalangle > 180)
		dragger.draglocalangle += 360;
	while(draggee.angles_y - dragger.v_angle_y - dragger.draglocalangle <= -180)
		dragger.draglocalangle -= 360;

	f = min(frametime * 10, 1);
	draggee.velocity = draggee.velocity * (1 - f) + goodvelocity * f;

	if(Drag_MayChangeAngles(draggee))
		draggee.angles_y = draggee.angles_y * (1 - f) + (dragger.v_angle_y + dragger.draglocalangle) * f;

	draggee.ltime = max(servertime + serverframetime, draggee.ltime); // fixes func_train breakage

	//te_lightning1(dragger, dragger.origin + dragger.view_ofs, curorigin);
	
	if (draggee.multitool_dragable) {
		//So you can't magic carpet ride to the sky
		if ((dragger.weapon == WEP_CROWBAR) || (dragger.weapon == WEP_IRONCROW)) {
			if not (DragTestFurnInSolid(draggee)) {
				DropDrageeToFloor(draggee);
			}
		} else {
			DropDrageeToFloor(draggee);
		}
	}
}

float Drag_CanDrag(entity dragger)
{
	return (dragger.deadflag == DEAD_NO) || (dragger.classname == "player");
}

float Drag_IsDragging(entity dragger)
{
	if(!dragger.dragentity)
		return FALSE;
	if(wasfreed(dragger.dragentity) || dragger.dragentity.draggedby != dragger)
	{
		dragger.dragentity = world;
		return FALSE;
	}
	if(!Drag_CanDrag(dragger) || !Drag_IsDraggable(dragger.dragentity))
	{
		Drag_Finish(dragger);
		return FALSE;
	}
	if (dragger.dragentity.multitool_dragable) {
		if (vlen(dragger.origin - dragger.dragentity.origin) > 256) {
			//print("bail\n");
			Drag_Finish(dragger);
			return FALSE;
		} else if (DragTestFurnInSolid(dragger.dragentity) && (dragger.weapon != WEP_CROWBAR) && (dragger.weapon != WEP_IRONCROW)) {
			if ((clienttype(dragger) == CLIENTTYPE_REAL)) {
				if (dragger.multitool_annoymsgtime1 < time) {
					sprint(dragger, "furniture is stuck in a solid, you fail to free it\n");
					dragger.multitool_annoymsgtime1 = time + 5;
				}
			}
			Drag_Finish(dragger);
			return FALSE;	
		}
	}
	return TRUE;
}

void Drag_MoveDrag(entity from, entity to)
{
	if(from.draggedby)
	{
		to.draggedby = from.draggedby;
		to.draggedby.dragentity = to;
		from.draggedby = world;
	}
}

void DragBox_Think()
{
	if(self.aiment && self.enemy)
	{
		self.origin_x = (self.aiment.origin_x + self.enemy.origin_x) * 0.5;
		self.origin_y = (self.aiment.origin_y + self.enemy.origin_y) * 0.5;
		self.origin_z = (self.aiment.origin_z + self.enemy.origin_z) * 0.5;
		self.maxs_x = fabs(self.aiment.origin_x - self.enemy.origin_x) * 0.5;
		self.maxs_y = fabs(self.aiment.origin_y - self.enemy.origin_y) * 0.5;
		self.maxs_z = fabs(self.aiment.origin_z - self.enemy.origin_z) * 0.5;
		self.mins = -1 * self.maxs;
		setorigin(self, self.origin); setsize(self, self.mins, self.maxs); // link edict
	}

	if(self.cnt == -1) // actually race_place -1
	{
		// show "10 10" for qualifying spawns
		setmodel(self.killindicator, "models/sprites/10.spr32");
		setmodel(self.killindicator.killindicator, "models/sprites/10.spr32");
	}
	else if(self.cnt == -2) // actually race_place 0
	{
		// show "10 0" for loser spawns
		setmodel(self.killindicator, "models/sprites/10.spr32");
		setmodel(self.killindicator.killindicator, "models/sprites/0.spr32");
	}
	else
	{
		setmodel(self.killindicator, strcat("models/sprites/", ftos(mod(self.cnt, 10)), ".spr32"));
		setmodel(self.killindicator.killindicator, strcat("models/sprites/", ftos(floor(self.cnt / 10)), ".spr32"));
	}

	self.nextthink = time;
}

#endif
